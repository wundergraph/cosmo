syntax = "proto3";

package wg.cosmo.node.v1;

import "wg/cosmo/common/common.proto";

message Subgraph {
  string id = 1;
  string name = 2;
  string routing_url = 3;
}

message FeatureFlagRouterExecutionConfigs {
  map<string, FeatureFlagRouterExecutionConfig> config_by_feature_flag_name = 1;
}

message FeatureFlagRouterExecutionConfig {
  EngineConfiguration engine_config = 1;
  string version = 2;
  repeated Subgraph subgraphs = 3;
}

message RouterConfig {
  EngineConfiguration engine_config = 1;
  string version = 2;
  repeated Subgraph subgraphs = 3;
  // The map of feature flag router execution configs requires a wrapper to be non-breaking
  optional FeatureFlagRouterExecutionConfigs feature_flag_configs = 4;
  string compatibility_version = 5;
}

message Response {
  wg.cosmo.common.EnumStatusCode code = 1;
  // details is an optional field which can be used to provide more details about the error.
  optional string details = 2;
}

message ResponseStatus {
  int32 code = 1;
  string message = 2;
}

message RegistrationInfo {
  AccountLimits account_limits = 1;
  string graph_public_key = 2;
}

message AccountLimits {
  // The maximum sampling rate for traces. Must be between 0 and 1.
  // 0 means no traces will be sampled and 1 means all traces will be sampled.
  float trace_sampling_rate = 1;
}

message SelfRegisterRequest {

}

message SelfRegisterResponse {
  Response response = 1;
  optional RegistrationInfo registrationInfo = 2;
}

service NodeService {
  rpc SelfRegister(SelfRegisterRequest) returns (SelfRegisterResponse) {}
}

message EngineConfiguration {
  int64 defaultFlushInterval = 1;
  repeated DataSourceConfiguration datasource_configurations = 2;
  repeated FieldConfiguration field_configurations = 3;
  string graphqlSchema = 4;
  repeated TypeConfiguration type_configurations = 5;
  map<string, string> string_storage = 6;
  optional string graphql_client_schema = 7;
}

message DataSourceConfiguration {
  DataSourceKind kind = 1;
  repeated TypeField root_nodes = 2;
  repeated TypeField child_nodes = 3;
  bool override_field_path_from_alias = 4;
  DataSourceCustom_GraphQL custom_graphql = 5;
  DataSourceCustom_Static custom_static = 6;
  repeated DirectiveConfiguration directives = 7;
  int64 request_timeout_seconds = 8;
  string id = 9;
  repeated RequiredField keys = 10;
  repeated RequiredField provides = 11;
  repeated RequiredField requires = 12;
  DataSourceCustomEvents custom_events = 13;
  repeated EntityInterfaceConfiguration entity_interfaces = 14;
  repeated EntityInterfaceConfiguration interface_objects = 15;
}

message ArgumentConfiguration {
  string name = 1;
  ArgumentSource source_type = 2;
}

message Scopes {
  repeated string required_and_scopes = 1;
}

message AuthorizationConfiguration {
  bool requires_authentication = 1;
  repeated Scopes required_or_scopes = 2;
  repeated Scopes required_or_scopes_by_or = 3;
}

message FieldConfiguration {
  string type_name = 1;
  string field_name = 2;
  repeated ArgumentConfiguration arguments_configuration = 3;
  AuthorizationConfiguration authorization_configuration = 4;
  optional SubscriptionFilterCondition subscription_filter_condition = 5;
}

enum ArgumentRenderConfiguration {
  RENDER_ARGUMENT_DEFAULT = 0;
  RENDER_ARGUMENT_AS_GRAPHQL_VALUE = 1;
  RENDER_ARGUMENT_AS_ARRAY_CSV = 2;
}

enum ArgumentSource {
  OBJECT_FIELD = 0;
  FIELD_ARGUMENT = 1;
}

message TypeConfiguration {
  string type_name = 1;
  string rename_to = 2;
}

enum DataSourceKind {
  STATIC = 0;
  GRAPHQL = 1;
  PUBSUB = 2;
}

message TypeField {
  string type_name = 1;
  repeated string field_names = 2;
  repeated string external_field_names = 3;
}

message FieldCoordinates {
  string field_name = 1;
  string type_name = 2;
}

message FieldSetCondition {
  repeated FieldCoordinates field_coordinates_path = 1;
  repeated string field_path = 2;
}

message RequiredField {
  string type_name = 1;
  string field_name = 2;
  string selection_set = 3;
  bool disable_entity_resolver = 4;
  repeated FieldSetCondition conditions = 5;
}

message EntityInterfaceConfiguration {
  string interface_type_name = 1;
  repeated string concrete_type_names = 2;
}

message FetchConfiguration {
  // You should either configure url OR a combination of baseURL and path
  // If url resolves to a non empty string, it takes precedence over baseURL and path
  // If url resolves to an empty string, the url will be configured as "{{baseURL}}{{path}}"
  ConfigurationVariable url = 1;
  HTTPMethod method = 2;
  map<string, HTTPHeader> header = 3;
  ConfigurationVariable body = 4;
  repeated URLQueryConfiguration query = 5;
  // urlEncodeBody defines whether the body should be URL encoded or not
  // by default, the body will be JSON encoded
  // setting urlEncodeBody to true will render the body empty,
  // the Header Content-Type will be set to application/x-www-form-urlencoded,
  // and the body will be URL encoded and set as the URL Query String
  bool url_encode_body = 7;
  MTLSConfiguration mtls = 8;
  ConfigurationVariable base_url = 9;
  ConfigurationVariable path = 10;
  optional ConfigurationVariable http_proxy_url = 11;
}

message StatusCodeTypeMapping {
  int64 status_code = 1;
  string type_name = 2;
  bool inject_status_code_into_body = 3;
}

message DataSourceCustom_GraphQL {
  FetchConfiguration fetch = 1;
  GraphQLSubscriptionConfiguration subscription = 2;
  GraphQLFederationConfiguration federation = 3;
  InternedString upstream_schema = 4;
  repeated SingleTypeField custom_scalar_type_fields = 6;
  GRPCConfiguration grpc = 7;
}

message GRPCConfiguration {
  GRPCMapping mapping = 1;
  string proto_schema = 2;
  PluginConfiguration plugin = 3;
}

message PluginConfiguration {
  // Plugin name
  string name = 1;
  // Plugin version
  string version = 2;
}

message SSLConfiguration {
  // Whether SSL is enabled
  bool enabled = 1;
}

message GRPCMapping {
  // Version of the mapping format
  int32 version = 1;
  // The main gRPC service name
  string service = 2;
  // Mappings for GraphQL operations to gRPC RPCs
  repeated OperationMapping operation_mappings = 3;
  // Mappings for GraphQL entities to gRPC service methods
  repeated EntityMapping entity_mappings = 4;
  // Mappings for GraphQL type fields to gRPC message fields
  repeated TypeFieldMapping type_field_mappings = 5;
  // Mappings for GraphQL enum values to gRPC enum values
  repeated EnumMapping enum_mappings = 6;
}

// Defines the type of GraphQL operation
enum OperationType {
  OPERATION_TYPE_UNSPECIFIED = 0;
  // Query operation
  OPERATION_TYPE_QUERY = 1;
  // Mutation operation
  OPERATION_TYPE_MUTATION = 2;
  // Subscription operation
  OPERATION_TYPE_SUBSCRIPTION = 3;
}

// Defines mapping between a GraphQL operation and a gRPC method
message OperationMapping {
  // GraphQL operation type: Query, Mutation, or Subscription
  OperationType type = 1;
  // Original GraphQL field name
  string original = 2;
  // Mapped gRPC method name
  string mapped = 3;
  // gRPC request message type name
  string request = 4;
  // gRPC response message type name
  string response = 5;
}

// Defines mapping for entity resolution
message EntityMapping {
  // GraphQL type name
  string type_name = 1;
  // Kind of entity mapping: "entity", "requires", or "with_arguments"
  string kind = 2;
  // Key field that uniquely identifies the entity
  string key = 3;
  // gRPC method name for entity resolution
  string rpc = 4;
  // gRPC request message type name
  string request = 5;
  // gRPC response message type name
  string response = 6;
}

// Defines mapping between GraphQL type fields and gRPC message fields
message TypeFieldMapping {
  // GraphQL type name
  string type = 1;
  // Mappings for each field in the type
  repeated FieldMapping field_mappings = 2;
}

// Defines mapping for a single field
message FieldMapping {
  // Original GraphQL field name
  string original = 1;
  // Mapped gRPC field name
  string mapped = 2;
  // Mappings for field arguments
  repeated ArgumentMapping argument_mappings = 3;
}

// Defines mapping for a field argument
message ArgumentMapping {
  // Original GraphQL argument name
  string original = 1;
  // Mapped gRPC field name
  string mapped = 2;
}

message EnumMapping {
  string type = 1;
  repeated EnumValueMapping values = 2;
}

message EnumValueMapping {
  string original = 1;
  string mapped = 2;
}

enum EventType {
  PUBLISH = 0;
  REQUEST = 1;
  SUBSCRIBE = 2;
}

message NatsStreamConfiguration {
  string consumer_name = 1;
  string stream_name = 2;
  int32 consumer_inactive_threshold = 3;
}

message NatsEventConfiguration {
  EngineEventConfiguration engine_event_configuration = 1;
  repeated string subjects = 2;
  NatsStreamConfiguration stream_configuration = 3;
}

message KafkaEventConfiguration {
  EngineEventConfiguration engine_event_configuration = 1;
  repeated string topics = 2;
}

message EngineEventConfiguration {
  string provider_id = 1;
  EventType type = 2;
  string type_name = 3;
  string field_name = 4;
}

message DataSourceCustomEvents {
  repeated NatsEventConfiguration nats = 1;
  repeated KafkaEventConfiguration kafka = 2;
}

message DataSourceCustom_Static {
  ConfigurationVariable data = 1;
}

message ConfigurationVariable {
  ConfigurationVariableKind kind = 1;
  string static_variable_content = 2;
  string environment_variable_name = 3;
  string environment_variable_default_value = 4;
  string placeholder_variable_name = 5;
};

enum ConfigurationVariableKind {
  STATIC_CONFIGURATION_VARIABLE = 0;
  ENV_CONFIGURATION_VARIABLE = 1;
  PLACEHOLDER_CONFIGURATION_VARIABLE = 2;
}

message DirectiveConfiguration {
  string directive_name = 1;
  string rename_to = 2;
}

message URLQueryConfiguration {
  string name = 1;
  string value = 2;
}

message HTTPHeader {
  repeated ConfigurationVariable values = 1;
}

enum HTTPMethod {
  GET = 0;
  POST = 1;
  PUT = 2;
  DELETE = 3;
  OPTIONS = 4;
}

message MTLSConfiguration {
  ConfigurationVariable key = 1;
  ConfigurationVariable cert = 2;
  bool insecureSkipVerify = 3;
}

message GraphQLSubscriptionConfiguration {
  bool enabled = 1;
  ConfigurationVariable url = 2;
  /* @deprecated - Kept for backwards compatibility when decoding. Use protocol instead. */
  optional bool useSSE = 3;
  optional wg.cosmo.common.GraphQLSubscriptionProtocol protocol = 4;
  optional wg.cosmo.common.GraphQLWebsocketSubprotocol websocketSubprotocol = 5;
}

message GraphQLFederationConfiguration {
  bool enabled = 1;
  string serviceSdl = 2;
}

message InternedString {
  // key to index into EngineConfiguration.stringStorage
  string key = 1;
}

message SingleTypeField {
  string type_name = 1;
  string field_name = 2;
}

message SubscriptionFieldCondition {
  repeated string field_path = 1;
  string json = 2;
}

message SubscriptionFilterCondition {
  repeated SubscriptionFilterCondition and = 1;
  optional SubscriptionFieldCondition in = 2;
  optional SubscriptionFilterCondition not = 3;
  repeated SubscriptionFilterCondition or = 4;
}

message CacheWarmerOperations {
  repeated Operation operations = 1;
}

message Operation {
  OperationRequest request = 1;
  ClientInfo client = 2;
}

message OperationRequest {
  string operation_name = 1;
  string query = 2;
  Extension extensions = 3;
}

message Extension {
  PersistedQuery persisted_query = 1;
}

message PersistedQuery {
  string sha256_hash = 1;
  int32 version = 2;
}

message ClientInfo {
  string name = 1;
  string version = 2;
}