package subgraph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/wundergraph/cosmo/demo/employees/subgraph/generated"
	"github.com/wundergraph/cosmo/demo/employees/subgraph/model"
)

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id int) (*model.Employee, error) {
	switch id {
	case 1, 2, 3, 4, 5:
		return employees[id-1], nil
	case 7, 8, 9, 10, 11, 12, 13:
		return employees[id-2], nil
	default:
		return nil, nil
	}
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*model.Employee, error) {
	return employees, nil
}

// TeamMates is the resolver for the team_mates field.
func (r *queryResolver) TeamMates(ctx context.Context, team model.Department) ([]*model.Employee, error) {
	switch team {
	case model.DepartmentOperations:
		return []*model.Employee{employees[3], employees[9]}, nil
	case model.DepartmentMarketing:
		return []*model.Employee{employees[0], employees[2], employees[3]}, nil
	default:
		return []*model.Employee{
			employees[0], employees[1], employees[4],
			employees[5], employees[6], employees[7],
			employees[8], employees[10], employees[11],
		}, nil
	}
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
