type Query {
  "Returns the value of the received HTTP header."
  headerValue(name: String!): String!
  "Returns the value of the given key in the WS initial payload."
  initPayloadValue(key: String!): String!
  initialPayload: Map
  "Returns response after the given delay"
  delay(response: String!, ms: Int!): String!
}

scalar Map

type TimestampedString {
  "The value of the string."
  value: String!
  "The timestamp when the response was generated."
  unixTime: Int!
  "Sequence number"
  seq: Int!
  "Total number of responses to be sent"
  total: Int!
  initialPayload: Map
}

type Subscription {
  "Returns a stream with the value of the received HTTP header."
  headerValue(name: String!, repeat: Int): TimestampedString!
  "Returns a stream with the value of value of the given key in the WS initial payload."
  initPayloadValue(key: String!, repeat: Int): TimestampedString!
  "Returns a stream with the value of the WS initial payload."
  initialPayload(repeat: Int): Map
  returnsError: String
}

type Employee @key(fields: "id") {
  id: Int!
  fieldThrowsError: String
}