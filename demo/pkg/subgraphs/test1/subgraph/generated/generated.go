// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/wundergraph/cosmo/demo/pkg/subgraphs/test1/subgraph/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Entity() EntityResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ABigObject struct {
		AFieldOnABigObject func(childComplexity int) int
		BFieldOnABigObject func(childComplexity int) int
		CFieldOnABigObject func(childComplexity int) int
		DFieldOnABigObject func(childComplexity int) int
		EFieldOnABigObject func(childComplexity int) int
		FFieldOnABigObject func(childComplexity int) int
		GFieldOnABigObject func(childComplexity int) int
		HFieldOnABigObject func(childComplexity int) int
		IFieldOnABigObject func(childComplexity int) int
		JFieldOnABigObject func(childComplexity int) int
		KFieldOnABigObject func(childComplexity int) int
		LFieldOnABigObject func(childComplexity int) int
		MFieldOnABigObject func(childComplexity int) int
		NFieldOnABigObject func(childComplexity int) int
		OFieldOnABigObject func(childComplexity int) int
		PFieldOnABigObject func(childComplexity int) int
		QFieldOnABigObject func(childComplexity int) int
		RFieldOnABigObject func(childComplexity int) int
		SFieldOnABigObject func(childComplexity int) int
		TFieldOnABigObject func(childComplexity int) int
		UFieldOnABigObject func(childComplexity int) int
		VFieldOnABigObject func(childComplexity int) int
		WFieldOnABigObject func(childComplexity int) int
		XFieldOnABigObject func(childComplexity int) int
		YFieldOnABigObject func(childComplexity int) int
		ZFieldOnABigObject func(childComplexity int) int
	}

	BBigObject struct {
		AFieldOnBBigObject func(childComplexity int) int
		BFieldOnBBigObject func(childComplexity int) int
		CFieldOnBBigObject func(childComplexity int) int
		DFieldOnBBigObject func(childComplexity int) int
		EFieldOnBBigObject func(childComplexity int) int
		FFieldOnBBigObject func(childComplexity int) int
		GFieldOnBBigObject func(childComplexity int) int
		HFieldOnBBigObject func(childComplexity int) int
		IFieldOnBBigObject func(childComplexity int) int
		JFieldOnBBigObject func(childComplexity int) int
		KFieldOnBBigObject func(childComplexity int) int
		LFieldOnBBigObject func(childComplexity int) int
		MFieldOnBBigObject func(childComplexity int) int
		NFieldOnBBigObject func(childComplexity int) int
		OFieldOnBBigObject func(childComplexity int) int
		PFieldOnBBigObject func(childComplexity int) int
		QFieldOnBBigObject func(childComplexity int) int
		RFieldOnBBigObject func(childComplexity int) int
		SFieldOnBBigObject func(childComplexity int) int
		TFieldOnBBigObject func(childComplexity int) int
		UFieldOnBBigObject func(childComplexity int) int
		VFieldOnBBigObject func(childComplexity int) int
		WFieldOnBBigObject func(childComplexity int) int
		XFieldOnBBigObject func(childComplexity int) int
		YFieldOnBBigObject func(childComplexity int) int
		ZFieldOnBBigObject func(childComplexity int) int
	}

	BigObject struct {
		NestedObjects func(childComplexity int) int
	}

	CBigObject struct {
		AFieldOnCBigObject func(childComplexity int) int
		BFieldOnCBigObject func(childComplexity int) int
		CFieldOnCBigObject func(childComplexity int) int
		DFieldOnCBigObject func(childComplexity int) int
		EFieldOnCBigObject func(childComplexity int) int
		FFieldOnCBigObject func(childComplexity int) int
		GFieldOnCBigObject func(childComplexity int) int
		HFieldOnCBigObject func(childComplexity int) int
		IFieldOnCBigObject func(childComplexity int) int
		JFieldOnCBigObject func(childComplexity int) int
		KFieldOnCBigObject func(childComplexity int) int
		LFieldOnCBigObject func(childComplexity int) int
		MFieldOnCBigObject func(childComplexity int) int
		NFieldOnCBigObject func(childComplexity int) int
		OFieldOnCBigObject func(childComplexity int) int
		PFieldOnCBigObject func(childComplexity int) int
		QFieldOnCBigObject func(childComplexity int) int
		RFieldOnCBigObject func(childComplexity int) int
		SFieldOnCBigObject func(childComplexity int) int
		TFieldOnCBigObject func(childComplexity int) int
		UFieldOnCBigObject func(childComplexity int) int
		VFieldOnCBigObject func(childComplexity int) int
		WFieldOnCBigObject func(childComplexity int) int
		XFieldOnCBigObject func(childComplexity int) int
		YFieldOnCBigObject func(childComplexity int) int
		ZFieldOnCBigObject func(childComplexity int) int
	}

	DBigObject struct {
		AFieldOnDBigObject func(childComplexity int) int
		BFieldOnDBigObject func(childComplexity int) int
		CFieldOnDBigObject func(childComplexity int) int
		DFieldOnDBigObject func(childComplexity int) int
		EFieldOnDBigObject func(childComplexity int) int
		FFieldOnDBigObject func(childComplexity int) int
		GFieldOnDBigObject func(childComplexity int) int
		HFieldOnDBigObject func(childComplexity int) int
		IFieldOnDBigObject func(childComplexity int) int
		JFieldOnDBigObject func(childComplexity int) int
		KFieldOnDBigObject func(childComplexity int) int
		LFieldOnDBigObject func(childComplexity int) int
		MFieldOnDBigObject func(childComplexity int) int
		NFieldOnDBigObject func(childComplexity int) int
		OFieldOnDBigObject func(childComplexity int) int
		PFieldOnDBigObject func(childComplexity int) int
		QFieldOnDBigObject func(childComplexity int) int
		RFieldOnDBigObject func(childComplexity int) int
		SFieldOnDBigObject func(childComplexity int) int
		TFieldOnDBigObject func(childComplexity int) int
		UFieldOnDBigObject func(childComplexity int) int
		VFieldOnDBigObject func(childComplexity int) int
		WFieldOnDBigObject func(childComplexity int) int
		XFieldOnDBigObject func(childComplexity int) int
		YFieldOnDBigObject func(childComplexity int) int
		ZFieldOnDBigObject func(childComplexity int) int
	}

	DeeplyNestedObject struct {
		AFieldOnDeeplyNestedObject func(childComplexity int) int
		BFieldOnDeeplyNestedObject func(childComplexity int) int
		CFieldOnDeeplyNestedObject func(childComplexity int) int
		DFieldOnDeeplyNestedObject func(childComplexity int) int
		EFieldOnDeeplyNestedObject func(childComplexity int) int
		FFieldOnDeeplyNestedObject func(childComplexity int) int
		GFieldOnDeeplyNestedObject func(childComplexity int) int
		HFieldOnDeeplyNestedObject func(childComplexity int) int
		IFieldOnDeeplyNestedObject func(childComplexity int) int
		JFieldOnDeeplyNestedObject func(childComplexity int) int
		KFieldOnDeeplyNestedObject func(childComplexity int) int
		LFieldOnDeeplyNestedObject func(childComplexity int) int
		MFieldOnDeeplyNestedObject func(childComplexity int) int
		NFieldOnDeeplyNestedObject func(childComplexity int) int
		OFieldOnDeeplyNestedObject func(childComplexity int) int
		PFieldOnDeeplyNestedObject func(childComplexity int) int
		QFieldOnDeeplyNestedObject func(childComplexity int) int
		RFieldOnDeeplyNestedObject func(childComplexity int) int
		SFieldOnDeeplyNestedObject func(childComplexity int) int
		TFieldOnDeeplyNestedObject func(childComplexity int) int
		UFieldOnDeeplyNestedObject func(childComplexity int) int
		VFieldOnDeeplyNestedObject func(childComplexity int) int
		WFieldOnDeeplyNestedObject func(childComplexity int) int
		XFieldOnDeeplyNestedObject func(childComplexity int) int
		YFieldOnDeeplyNestedObject func(childComplexity int) int
		ZFieldOnDeeplyNestedObject func(childComplexity int) int
	}

	EBigObject struct {
		AFieldOnEBigObject func(childComplexity int) int
		BFieldOnEBigObject func(childComplexity int) int
		CFieldOnEBigObject func(childComplexity int) int
		DFieldOnEBigObject func(childComplexity int) int
		EFieldOnEBigObject func(childComplexity int) int
		FFieldOnEBigObject func(childComplexity int) int
		GFieldOnEBigObject func(childComplexity int) int
		HFieldOnEBigObject func(childComplexity int) int
		IFieldOnEBigObject func(childComplexity int) int
		JFieldOnEBigObject func(childComplexity int) int
		KFieldOnEBigObject func(childComplexity int) int
		LFieldOnEBigObject func(childComplexity int) int
		MFieldOnEBigObject func(childComplexity int) int
		NFieldOnEBigObject func(childComplexity int) int
		OFieldOnEBigObject func(childComplexity int) int
		PFieldOnEBigObject func(childComplexity int) int
		QFieldOnEBigObject func(childComplexity int) int
		RFieldOnEBigObject func(childComplexity int) int
		SFieldOnEBigObject func(childComplexity int) int
		TFieldOnEBigObject func(childComplexity int) int
		UFieldOnEBigObject func(childComplexity int) int
		VFieldOnEBigObject func(childComplexity int) int
		WFieldOnEBigObject func(childComplexity int) int
		XFieldOnEBigObject func(childComplexity int) int
		YFieldOnEBigObject func(childComplexity int) int
		ZFieldOnEBigObject func(childComplexity int) int
	}

	Employee struct {
		FieldThrowsError func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	Entity struct {
		FindEmployeeByID func(childComplexity int, id int) int
	}

	FBigObject struct {
		AFieldOnFBigObject func(childComplexity int) int
		BFieldOnFBigObject func(childComplexity int) int
		CFieldOnFBigObject func(childComplexity int) int
		DFieldOnFBigObject func(childComplexity int) int
		EFieldOnFBigObject func(childComplexity int) int
		FFieldOnFBigObject func(childComplexity int) int
		GFieldOnFBigObject func(childComplexity int) int
		HFieldOnFBigObject func(childComplexity int) int
		IFieldOnFBigObject func(childComplexity int) int
		JFieldOnFBigObject func(childComplexity int) int
		KFieldOnFBigObject func(childComplexity int) int
		LFieldOnFBigObject func(childComplexity int) int
		MFieldOnFBigObject func(childComplexity int) int
		NFieldOnFBigObject func(childComplexity int) int
		OFieldOnFBigObject func(childComplexity int) int
		PFieldOnFBigObject func(childComplexity int) int
		QFieldOnFBigObject func(childComplexity int) int
		RFieldOnFBigObject func(childComplexity int) int
		SFieldOnFBigObject func(childComplexity int) int
		TFieldOnFBigObject func(childComplexity int) int
		UFieldOnFBigObject func(childComplexity int) int
		VFieldOnFBigObject func(childComplexity int) int
		WFieldOnFBigObject func(childComplexity int) int
		XFieldOnFBigObject func(childComplexity int) int
		YFieldOnFBigObject func(childComplexity int) int
		ZFieldOnFBigObject func(childComplexity int) int
	}

	GBigObject struct {
		AFieldOnGBigObject func(childComplexity int) int
		BFieldOnGBigObject func(childComplexity int) int
		CFieldOnGBigObject func(childComplexity int) int
		DFieldOnGBigObject func(childComplexity int) int
		EFieldOnGBigObject func(childComplexity int) int
		FFieldOnGBigObject func(childComplexity int) int
		GFieldOnGBigObject func(childComplexity int) int
		HFieldOnGBigObject func(childComplexity int) int
		IFieldOnGBigObject func(childComplexity int) int
		JFieldOnGBigObject func(childComplexity int) int
		KFieldOnGBigObject func(childComplexity int) int
		LFieldOnGBigObject func(childComplexity int) int
		MFieldOnGBigObject func(childComplexity int) int
		NFieldOnGBigObject func(childComplexity int) int
		OFieldOnGBigObject func(childComplexity int) int
		PFieldOnGBigObject func(childComplexity int) int
		QFieldOnGBigObject func(childComplexity int) int
		RFieldOnGBigObject func(childComplexity int) int
		SFieldOnGBigObject func(childComplexity int) int
		TFieldOnGBigObject func(childComplexity int) int
		UFieldOnGBigObject func(childComplexity int) int
		VFieldOnGBigObject func(childComplexity int) int
		WFieldOnGBigObject func(childComplexity int) int
		XFieldOnGBigObject func(childComplexity int) int
		YFieldOnGBigObject func(childComplexity int) int
		ZFieldOnGBigObject func(childComplexity int) int
	}

	HBigObject struct {
		AFieldOnHBigObject func(childComplexity int) int
		BFieldOnHBigObject func(childComplexity int) int
		CFieldOnHBigObject func(childComplexity int) int
		DFieldOnHBigObject func(childComplexity int) int
		EFieldOnHBigObject func(childComplexity int) int
		FFieldOnHBigObject func(childComplexity int) int
		GFieldOnHBigObject func(childComplexity int) int
		HFieldOnHBigObject func(childComplexity int) int
		IFieldOnHBigObject func(childComplexity int) int
		JFieldOnHBigObject func(childComplexity int) int
		KFieldOnHBigObject func(childComplexity int) int
		LFieldOnHBigObject func(childComplexity int) int
		MFieldOnHBigObject func(childComplexity int) int
		NFieldOnHBigObject func(childComplexity int) int
		OFieldOnHBigObject func(childComplexity int) int
		PFieldOnHBigObject func(childComplexity int) int
		QFieldOnHBigObject func(childComplexity int) int
		RFieldOnHBigObject func(childComplexity int) int
		SFieldOnHBigObject func(childComplexity int) int
		TFieldOnHBigObject func(childComplexity int) int
		UFieldOnHBigObject func(childComplexity int) int
		VFieldOnHBigObject func(childComplexity int) int
		WFieldOnHBigObject func(childComplexity int) int
		XFieldOnHBigObject func(childComplexity int) int
		YFieldOnHBigObject func(childComplexity int) int
		ZFieldOnHBigObject func(childComplexity int) int
	}

	IBigObject struct {
		AFieldOnIBigObject func(childComplexity int) int
		BFieldOnIBigObject func(childComplexity int) int
		CFieldOnIBigObject func(childComplexity int) int
		DFieldOnIBigObject func(childComplexity int) int
		EFieldOnIBigObject func(childComplexity int) int
		FFieldOnIBigObject func(childComplexity int) int
		GFieldOnIBigObject func(childComplexity int) int
		HFieldOnIBigObject func(childComplexity int) int
		IFieldOnIBigObject func(childComplexity int) int
		JFieldOnIBigObject func(childComplexity int) int
		KFieldOnIBigObject func(childComplexity int) int
		LFieldOnIBigObject func(childComplexity int) int
		MFieldOnIBigObject func(childComplexity int) int
		NFieldOnIBigObject func(childComplexity int) int
		OFieldOnIBigObject func(childComplexity int) int
		PFieldOnIBigObject func(childComplexity int) int
		QFieldOnIBigObject func(childComplexity int) int
		RFieldOnIBigObject func(childComplexity int) int
		SFieldOnIBigObject func(childComplexity int) int
		TFieldOnIBigObject func(childComplexity int) int
		UFieldOnIBigObject func(childComplexity int) int
		VFieldOnIBigObject func(childComplexity int) int
		WFieldOnIBigObject func(childComplexity int) int
		XFieldOnIBigObject func(childComplexity int) int
		YFieldOnIBigObject func(childComplexity int) int
		ZFieldOnIBigObject func(childComplexity int) int
	}

	InputResponse struct {
		Arg func(childComplexity int) int
	}

	JBigObject struct {
		AFieldOnJBigObject func(childComplexity int) int
		BFieldOnJBigObject func(childComplexity int) int
		CFieldOnJBigObject func(childComplexity int) int
		DFieldOnJBigObject func(childComplexity int) int
		EFieldOnJBigObject func(childComplexity int) int
		FFieldOnJBigObject func(childComplexity int) int
		GFieldOnJBigObject func(childComplexity int) int
		HFieldOnJBigObject func(childComplexity int) int
		IFieldOnJBigObject func(childComplexity int) int
		JFieldOnJBigObject func(childComplexity int) int
		KFieldOnJBigObject func(childComplexity int) int
		LFieldOnJBigObject func(childComplexity int) int
		MFieldOnJBigObject func(childComplexity int) int
		NFieldOnJBigObject func(childComplexity int) int
		OFieldOnJBigObject func(childComplexity int) int
		PFieldOnJBigObject func(childComplexity int) int
		QFieldOnJBigObject func(childComplexity int) int
		RFieldOnJBigObject func(childComplexity int) int
		SFieldOnJBigObject func(childComplexity int) int
		TFieldOnJBigObject func(childComplexity int) int
		UFieldOnJBigObject func(childComplexity int) int
		VFieldOnJBigObject func(childComplexity int) int
		WFieldOnJBigObject func(childComplexity int) int
		XFieldOnJBigObject func(childComplexity int) int
		YFieldOnJBigObject func(childComplexity int) int
		ZFieldOnJBigObject func(childComplexity int) int
	}

	KBigObject struct {
		AFieldOnKBigObject func(childComplexity int) int
		BFieldOnKBigObject func(childComplexity int) int
		CFieldOnKBigObject func(childComplexity int) int
		DFieldOnKBigObject func(childComplexity int) int
		EFieldOnKBigObject func(childComplexity int) int
		FFieldOnKBigObject func(childComplexity int) int
		GFieldOnKBigObject func(childComplexity int) int
		HFieldOnKBigObject func(childComplexity int) int
		IFieldOnKBigObject func(childComplexity int) int
		JFieldOnKBigObject func(childComplexity int) int
		KFieldOnKBigObject func(childComplexity int) int
		LFieldOnKBigObject func(childComplexity int) int
		MFieldOnKBigObject func(childComplexity int) int
		NFieldOnKBigObject func(childComplexity int) int
		OFieldOnKBigObject func(childComplexity int) int
		PFieldOnKBigObject func(childComplexity int) int
		QFieldOnKBigObject func(childComplexity int) int
		RFieldOnKBigObject func(childComplexity int) int
		SFieldOnKBigObject func(childComplexity int) int
		TFieldOnKBigObject func(childComplexity int) int
		UFieldOnKBigObject func(childComplexity int) int
		VFieldOnKBigObject func(childComplexity int) int
		WFieldOnKBigObject func(childComplexity int) int
		XFieldOnKBigObject func(childComplexity int) int
		YFieldOnKBigObject func(childComplexity int) int
		ZFieldOnKBigObject func(childComplexity int) int
	}

	LBigObject struct {
		AFieldOnLBigObject func(childComplexity int) int
		BFieldOnLBigObject func(childComplexity int) int
		CFieldOnLBigObject func(childComplexity int) int
		DFieldOnLBigObject func(childComplexity int) int
		EFieldOnLBigObject func(childComplexity int) int
		FFieldOnLBigObject func(childComplexity int) int
		GFieldOnLBigObject func(childComplexity int) int
		HFieldOnLBigObject func(childComplexity int) int
		IFieldOnLBigObject func(childComplexity int) int
		JFieldOnLBigObject func(childComplexity int) int
		KFieldOnLBigObject func(childComplexity int) int
		LFieldOnLBigObject func(childComplexity int) int
		MFieldOnLBigObject func(childComplexity int) int
		NFieldOnLBigObject func(childComplexity int) int
		OFieldOnLBigObject func(childComplexity int) int
		PFieldOnLBigObject func(childComplexity int) int
		QFieldOnLBigObject func(childComplexity int) int
		RFieldOnLBigObject func(childComplexity int) int
		SFieldOnLBigObject func(childComplexity int) int
		TFieldOnLBigObject func(childComplexity int) int
		UFieldOnLBigObject func(childComplexity int) int
		VFieldOnLBigObject func(childComplexity int) int
		WFieldOnLBigObject func(childComplexity int) int
		XFieldOnLBigObject func(childComplexity int) int
		YFieldOnLBigObject func(childComplexity int) int
		ZFieldOnLBigObject func(childComplexity int) int
	}

	MBigObject struct {
		AFieldOnMBigObject func(childComplexity int) int
		BFieldOnMBigObject func(childComplexity int) int
		CFieldOnMBigObject func(childComplexity int) int
		DFieldOnMBigObject func(childComplexity int) int
		EFieldOnMBigObject func(childComplexity int) int
		FFieldOnMBigObject func(childComplexity int) int
		GFieldOnMBigObject func(childComplexity int) int
		HFieldOnMBigObject func(childComplexity int) int
		IFieldOnMBigObject func(childComplexity int) int
		JFieldOnMBigObject func(childComplexity int) int
		KFieldOnMBigObject func(childComplexity int) int
		LFieldOnMBigObject func(childComplexity int) int
		MFieldOnMBigObject func(childComplexity int) int
		NFieldOnMBigObject func(childComplexity int) int
		OFieldOnMBigObject func(childComplexity int) int
		PFieldOnMBigObject func(childComplexity int) int
		QFieldOnMBigObject func(childComplexity int) int
		RFieldOnMBigObject func(childComplexity int) int
		SFieldOnMBigObject func(childComplexity int) int
		TFieldOnMBigObject func(childComplexity int) int
		UFieldOnMBigObject func(childComplexity int) int
		VFieldOnMBigObject func(childComplexity int) int
		WFieldOnMBigObject func(childComplexity int) int
		XFieldOnMBigObject func(childComplexity int) int
		YFieldOnMBigObject func(childComplexity int) int
		ZFieldOnMBigObject func(childComplexity int) int
	}

	NBigObject struct {
		AFieldOnNBigObject func(childComplexity int) int
		BFieldOnNBigObject func(childComplexity int) int
		CFieldOnNBigObject func(childComplexity int) int
		DFieldOnNBigObject func(childComplexity int) int
		EFieldOnNBigObject func(childComplexity int) int
		FFieldOnNBigObject func(childComplexity int) int
		GFieldOnNBigObject func(childComplexity int) int
		HFieldOnNBigObject func(childComplexity int) int
		IFieldOnNBigObject func(childComplexity int) int
		JFieldOnNBigObject func(childComplexity int) int
		KFieldOnNBigObject func(childComplexity int) int
		LFieldOnNBigObject func(childComplexity int) int
		MFieldOnNBigObject func(childComplexity int) int
		NFieldOnNBigObject func(childComplexity int) int
		OFieldOnNBigObject func(childComplexity int) int
		PFieldOnNBigObject func(childComplexity int) int
		QFieldOnNBigObject func(childComplexity int) int
		RFieldOnNBigObject func(childComplexity int) int
		SFieldOnNBigObject func(childComplexity int) int
		TFieldOnNBigObject func(childComplexity int) int
		UFieldOnNBigObject func(childComplexity int) int
		VFieldOnNBigObject func(childComplexity int) int
		WFieldOnNBigObject func(childComplexity int) int
		XFieldOnNBigObject func(childComplexity int) int
		YFieldOnNBigObject func(childComplexity int) int
		ZFieldOnNBigObject func(childComplexity int) int
	}

	NestedObject struct {
		DeeplyNestedObjects func(childComplexity int) int
	}

	OBigObject struct {
		AFieldOnOBigObject func(childComplexity int) int
		BFieldOnOBigObject func(childComplexity int) int
		CFieldOnOBigObject func(childComplexity int) int
		DFieldOnOBigObject func(childComplexity int) int
		EFieldOnOBigObject func(childComplexity int) int
		FFieldOnOBigObject func(childComplexity int) int
		GFieldOnOBigObject func(childComplexity int) int
		HFieldOnOBigObject func(childComplexity int) int
		IFieldOnOBigObject func(childComplexity int) int
		JFieldOnOBigObject func(childComplexity int) int
		KFieldOnOBigObject func(childComplexity int) int
		LFieldOnOBigObject func(childComplexity int) int
		MFieldOnOBigObject func(childComplexity int) int
		NFieldOnOBigObject func(childComplexity int) int
		OFieldOnOBigObject func(childComplexity int) int
		PFieldOnOBigObject func(childComplexity int) int
		QFieldOnOBigObject func(childComplexity int) int
		RFieldOnOBigObject func(childComplexity int) int
		SFieldOnOBigObject func(childComplexity int) int
		TFieldOnOBigObject func(childComplexity int) int
		UFieldOnOBigObject func(childComplexity int) int
		VFieldOnOBigObject func(childComplexity int) int
		WFieldOnOBigObject func(childComplexity int) int
		XFieldOnOBigObject func(childComplexity int) int
		YFieldOnOBigObject func(childComplexity int) int
		ZFieldOnOBigObject func(childComplexity int) int
	}

	PBigObject struct {
		AFieldOnPBigObject func(childComplexity int) int
		BFieldOnPBigObject func(childComplexity int) int
		CFieldOnPBigObject func(childComplexity int) int
		DFieldOnPBigObject func(childComplexity int) int
		EFieldOnPBigObject func(childComplexity int) int
		FFieldOnPBigObject func(childComplexity int) int
		GFieldOnPBigObject func(childComplexity int) int
		HFieldOnPBigObject func(childComplexity int) int
		IFieldOnPBigObject func(childComplexity int) int
		JFieldOnPBigObject func(childComplexity int) int
		KFieldOnPBigObject func(childComplexity int) int
		LFieldOnPBigObject func(childComplexity int) int
		MFieldOnPBigObject func(childComplexity int) int
		NFieldOnPBigObject func(childComplexity int) int
		OFieldOnPBigObject func(childComplexity int) int
		PFieldOnPBigObject func(childComplexity int) int
		QFieldOnPBigObject func(childComplexity int) int
		RFieldOnPBigObject func(childComplexity int) int
		SFieldOnPBigObject func(childComplexity int) int
		TFieldOnPBigObject func(childComplexity int) int
		UFieldOnPBigObject func(childComplexity int) int
		VFieldOnPBigObject func(childComplexity int) int
		WFieldOnPBigObject func(childComplexity int) int
		XFieldOnPBigObject func(childComplexity int) int
		YFieldOnPBigObject func(childComplexity int) int
		ZFieldOnPBigObject func(childComplexity int) int
	}

	QBigObject struct {
		AFieldOnQBigObject func(childComplexity int) int
		BFieldOnQBigObject func(childComplexity int) int
		CFieldOnQBigObject func(childComplexity int) int
		DFieldOnQBigObject func(childComplexity int) int
		EFieldOnQBigObject func(childComplexity int) int
		FFieldOnQBigObject func(childComplexity int) int
		GFieldOnQBigObject func(childComplexity int) int
		HFieldOnQBigObject func(childComplexity int) int
		IFieldOnQBigObject func(childComplexity int) int
		JFieldOnQBigObject func(childComplexity int) int
		KFieldOnQBigObject func(childComplexity int) int
		LFieldOnQBigObject func(childComplexity int) int
		MFieldOnQBigObject func(childComplexity int) int
		NFieldOnQBigObject func(childComplexity int) int
		OFieldOnQBigObject func(childComplexity int) int
		PFieldOnQBigObject func(childComplexity int) int
		QFieldOnQBigObject func(childComplexity int) int
		RFieldOnQBigObject func(childComplexity int) int
		SFieldOnQBigObject func(childComplexity int) int
		TFieldOnQBigObject func(childComplexity int) int
		UFieldOnQBigObject func(childComplexity int) int
		VFieldOnQBigObject func(childComplexity int) int
		WFieldOnQBigObject func(childComplexity int) int
		XFieldOnQBigObject func(childComplexity int) int
		YFieldOnQBigObject func(childComplexity int) int
		ZFieldOnQBigObject func(childComplexity int) int
	}

	Query struct {
		BigAbstractResponse         func(childComplexity int) int
		BigResponse                 func(childComplexity int, artificialDelay int, bigObjects int, nestedObjects int, deeplyNestedObjects int) int
		Delay                       func(childComplexity int, response string, ms int) int
		FloatField                  func(childComplexity int, arg *float64) int
		HeaderValue                 func(childComplexity int, name string) int
		InitPayloadValue            func(childComplexity int, key string) int
		InitialPayload              func(childComplexity int) int
		RootFieldWithInput          func(childComplexity int, arg model.InputArg) int
		RootFieldWithListArg        func(childComplexity int, arg []string) int
		RootFieldWithListOfEnumArg  func(childComplexity int, arg []model.EnumType) int
		RootFieldWithListOfInputArg func(childComplexity int, arg []*model.InputType) int
		RootFieldWithNestedListArg  func(childComplexity int, arg [][]string) int
		__resolve__service          func(childComplexity int) int
		__resolve_entities          func(childComplexity int, representations []map[string]interface{}) int
	}

	RBigObject struct {
		AFieldOnRBigObject func(childComplexity int) int
		BFieldOnRBigObject func(childComplexity int) int
		CFieldOnRBigObject func(childComplexity int) int
		DFieldOnRBigObject func(childComplexity int) int
		EFieldOnRBigObject func(childComplexity int) int
		FFieldOnRBigObject func(childComplexity int) int
		GFieldOnRBigObject func(childComplexity int) int
		HFieldOnRBigObject func(childComplexity int) int
		IFieldOnRBigObject func(childComplexity int) int
		JFieldOnRBigObject func(childComplexity int) int
		KFieldOnRBigObject func(childComplexity int) int
		LFieldOnRBigObject func(childComplexity int) int
		MFieldOnRBigObject func(childComplexity int) int
		NFieldOnRBigObject func(childComplexity int) int
		OFieldOnRBigObject func(childComplexity int) int
		PFieldOnRBigObject func(childComplexity int) int
		QFieldOnRBigObject func(childComplexity int) int
		RFieldOnRBigObject func(childComplexity int) int
		SFieldOnRBigObject func(childComplexity int) int
		TFieldOnRBigObject func(childComplexity int) int
		UFieldOnRBigObject func(childComplexity int) int
		VFieldOnRBigObject func(childComplexity int) int
		WFieldOnRBigObject func(childComplexity int) int
		XFieldOnRBigObject func(childComplexity int) int
		YFieldOnRBigObject func(childComplexity int) int
		ZFieldOnRBigObject func(childComplexity int) int
	}

	SBigObject struct {
		AFieldOnSBigObject func(childComplexity int) int
		BFieldOnSBigObject func(childComplexity int) int
		CFieldOnSBigObject func(childComplexity int) int
		DFieldOnSBigObject func(childComplexity int) int
		EFieldOnSBigObject func(childComplexity int) int
		FFieldOnSBigObject func(childComplexity int) int
		GFieldOnSBigObject func(childComplexity int) int
		HFieldOnSBigObject func(childComplexity int) int
		IFieldOnSBigObject func(childComplexity int) int
		JFieldOnSBigObject func(childComplexity int) int
		KFieldOnSBigObject func(childComplexity int) int
		LFieldOnSBigObject func(childComplexity int) int
		MFieldOnSBigObject func(childComplexity int) int
		NFieldOnSBigObject func(childComplexity int) int
		OFieldOnSBigObject func(childComplexity int) int
		PFieldOnSBigObject func(childComplexity int) int
		QFieldOnSBigObject func(childComplexity int) int
		RFieldOnSBigObject func(childComplexity int) int
		SFieldOnSBigObject func(childComplexity int) int
		TFieldOnSBigObject func(childComplexity int) int
		UFieldOnSBigObject func(childComplexity int) int
		VFieldOnSBigObject func(childComplexity int) int
		WFieldOnSBigObject func(childComplexity int) int
		XFieldOnSBigObject func(childComplexity int) int
		YFieldOnSBigObject func(childComplexity int) int
		ZFieldOnSBigObject func(childComplexity int) int
	}

	Subscription struct {
		HeaderValue      func(childComplexity int, name string, repeat *int) int
		InitPayloadValue func(childComplexity int, key string, repeat *int) int
		InitialPayload   func(childComplexity int, repeat *int) int
		ReturnsError     func(childComplexity int) int
	}

	TBigObject struct {
		AFieldOnTBigObject func(childComplexity int) int
		BFieldOnTBigObject func(childComplexity int) int
		CFieldOnTBigObject func(childComplexity int) int
		DFieldOnTBigObject func(childComplexity int) int
		EFieldOnTBigObject func(childComplexity int) int
		FFieldOnTBigObject func(childComplexity int) int
		GFieldOnTBigObject func(childComplexity int) int
		HFieldOnTBigObject func(childComplexity int) int
		IFieldOnTBigObject func(childComplexity int) int
		JFieldOnTBigObject func(childComplexity int) int
		KFieldOnTBigObject func(childComplexity int) int
		LFieldOnTBigObject func(childComplexity int) int
		MFieldOnTBigObject func(childComplexity int) int
		NFieldOnTBigObject func(childComplexity int) int
		OFieldOnTBigObject func(childComplexity int) int
		PFieldOnTBigObject func(childComplexity int) int
		QFieldOnTBigObject func(childComplexity int) int
		RFieldOnTBigObject func(childComplexity int) int
		SFieldOnTBigObject func(childComplexity int) int
		TFieldOnTBigObject func(childComplexity int) int
		UFieldOnTBigObject func(childComplexity int) int
		VFieldOnTBigObject func(childComplexity int) int
		WFieldOnTBigObject func(childComplexity int) int
		XFieldOnTBigObject func(childComplexity int) int
		YFieldOnTBigObject func(childComplexity int) int
		ZFieldOnTBigObject func(childComplexity int) int
	}

	TimestampedString struct {
		InitialPayload func(childComplexity int) int
		Seq            func(childComplexity int) int
		Total          func(childComplexity int) int
		UnixTime       func(childComplexity int) int
		Value          func(childComplexity int) int
	}

	UBigObject struct {
		AFieldOnUBigObject func(childComplexity int) int
		BFieldOnUBigObject func(childComplexity int) int
		CFieldOnUBigObject func(childComplexity int) int
		DFieldOnUBigObject func(childComplexity int) int
		EFieldOnUBigObject func(childComplexity int) int
		FFieldOnUBigObject func(childComplexity int) int
		GFieldOnUBigObject func(childComplexity int) int
		HFieldOnUBigObject func(childComplexity int) int
		IFieldOnUBigObject func(childComplexity int) int
		JFieldOnUBigObject func(childComplexity int) int
		KFieldOnUBigObject func(childComplexity int) int
		LFieldOnUBigObject func(childComplexity int) int
		MFieldOnUBigObject func(childComplexity int) int
		NFieldOnUBigObject func(childComplexity int) int
		OFieldOnUBigObject func(childComplexity int) int
		PFieldOnUBigObject func(childComplexity int) int
		QFieldOnUBigObject func(childComplexity int) int
		RFieldOnUBigObject func(childComplexity int) int
		SFieldOnUBigObject func(childComplexity int) int
		TFieldOnUBigObject func(childComplexity int) int
		UFieldOnUBigObject func(childComplexity int) int
		VFieldOnUBigObject func(childComplexity int) int
		WFieldOnUBigObject func(childComplexity int) int
		XFieldOnUBigObject func(childComplexity int) int
		YFieldOnUBigObject func(childComplexity int) int
		ZFieldOnUBigObject func(childComplexity int) int
	}

	VBigObject struct {
		AFieldOnVBigObject func(childComplexity int) int
		BFieldOnVBigObject func(childComplexity int) int
		CFieldOnVBigObject func(childComplexity int) int
		DFieldOnVBigObject func(childComplexity int) int
		EFieldOnVBigObject func(childComplexity int) int
		FFieldOnVBigObject func(childComplexity int) int
		GFieldOnVBigObject func(childComplexity int) int
		HFieldOnVBigObject func(childComplexity int) int
		IFieldOnVBigObject func(childComplexity int) int
		JFieldOnVBigObject func(childComplexity int) int
		KFieldOnVBigObject func(childComplexity int) int
		LFieldOnVBigObject func(childComplexity int) int
		MFieldOnVBigObject func(childComplexity int) int
		NFieldOnVBigObject func(childComplexity int) int
		OFieldOnVBigObject func(childComplexity int) int
		PFieldOnVBigObject func(childComplexity int) int
		QFieldOnVBigObject func(childComplexity int) int
		RFieldOnVBigObject func(childComplexity int) int
		SFieldOnVBigObject func(childComplexity int) int
		TFieldOnVBigObject func(childComplexity int) int
		UFieldOnVBigObject func(childComplexity int) int
		VFieldOnVBigObject func(childComplexity int) int
		WFieldOnVBigObject func(childComplexity int) int
		XFieldOnVBigObject func(childComplexity int) int
		YFieldOnVBigObject func(childComplexity int) int
		ZFieldOnVBigObject func(childComplexity int) int
	}

	WBigObject struct {
		AFieldOnWBigObject func(childComplexity int) int
		BFieldOnWBigObject func(childComplexity int) int
		CFieldOnWBigObject func(childComplexity int) int
		DFieldOnWBigObject func(childComplexity int) int
		EFieldOnWBigObject func(childComplexity int) int
		FFieldOnWBigObject func(childComplexity int) int
		GFieldOnWBigObject func(childComplexity int) int
		HFieldOnWBigObject func(childComplexity int) int
		IFieldOnWBigObject func(childComplexity int) int
		JFieldOnWBigObject func(childComplexity int) int
		KFieldOnWBigObject func(childComplexity int) int
		LFieldOnWBigObject func(childComplexity int) int
		MFieldOnWBigObject func(childComplexity int) int
		NFieldOnWBigObject func(childComplexity int) int
		OFieldOnWBigObject func(childComplexity int) int
		PFieldOnWBigObject func(childComplexity int) int
		QFieldOnWBigObject func(childComplexity int) int
		RFieldOnWBigObject func(childComplexity int) int
		SFieldOnWBigObject func(childComplexity int) int
		TFieldOnWBigObject func(childComplexity int) int
		UFieldOnWBigObject func(childComplexity int) int
		VFieldOnWBigObject func(childComplexity int) int
		WFieldOnWBigObject func(childComplexity int) int
		XFieldOnWBigObject func(childComplexity int) int
		YFieldOnWBigObject func(childComplexity int) int
		ZFieldOnWBigObject func(childComplexity int) int
	}

	XBigObject struct {
		AFieldOnXBigObject func(childComplexity int) int
		BFieldOnXBigObject func(childComplexity int) int
		CFieldOnXBigObject func(childComplexity int) int
		DFieldOnXBigObject func(childComplexity int) int
		EFieldOnXBigObject func(childComplexity int) int
		FFieldOnXBigObject func(childComplexity int) int
		GFieldOnXBigObject func(childComplexity int) int
		HFieldOnXBigObject func(childComplexity int) int
		IFieldOnXBigObject func(childComplexity int) int
		JFieldOnXBigObject func(childComplexity int) int
		KFieldOnXBigObject func(childComplexity int) int
		LFieldOnXBigObject func(childComplexity int) int
		MFieldOnXBigObject func(childComplexity int) int
		NFieldOnXBigObject func(childComplexity int) int
		OFieldOnXBigObject func(childComplexity int) int
		PFieldOnXBigObject func(childComplexity int) int
		QFieldOnXBigObject func(childComplexity int) int
		RFieldOnXBigObject func(childComplexity int) int
		SFieldOnXBigObject func(childComplexity int) int
		TFieldOnXBigObject func(childComplexity int) int
		UFieldOnXBigObject func(childComplexity int) int
		VFieldOnXBigObject func(childComplexity int) int
		WFieldOnXBigObject func(childComplexity int) int
		XFieldOnXBigObject func(childComplexity int) int
		YFieldOnXBigObject func(childComplexity int) int
		ZFieldOnXBigObject func(childComplexity int) int
	}

	YBigObject struct {
		AFieldOnYBigObject func(childComplexity int) int
		BFieldOnYBigObject func(childComplexity int) int
		CFieldOnYBigObject func(childComplexity int) int
		DFieldOnYBigObject func(childComplexity int) int
		EFieldOnYBigObject func(childComplexity int) int
		FFieldOnYBigObject func(childComplexity int) int
		GFieldOnYBigObject func(childComplexity int) int
		HFieldOnYBigObject func(childComplexity int) int
		IFieldOnYBigObject func(childComplexity int) int
		JFieldOnYBigObject func(childComplexity int) int
		KFieldOnYBigObject func(childComplexity int) int
		LFieldOnYBigObject func(childComplexity int) int
		MFieldOnYBigObject func(childComplexity int) int
		NFieldOnYBigObject func(childComplexity int) int
		OFieldOnYBigObject func(childComplexity int) int
		PFieldOnYBigObject func(childComplexity int) int
		QFieldOnYBigObject func(childComplexity int) int
		RFieldOnYBigObject func(childComplexity int) int
		SFieldOnYBigObject func(childComplexity int) int
		TFieldOnYBigObject func(childComplexity int) int
		UFieldOnYBigObject func(childComplexity int) int
		VFieldOnYBigObject func(childComplexity int) int
		WFieldOnYBigObject func(childComplexity int) int
		XFieldOnYBigObject func(childComplexity int) int
		YFieldOnYBigObject func(childComplexity int) int
		ZFieldOnYBigObject func(childComplexity int) int
	}

	ZBigObject struct {
		AFieldOnZBigObject func(childComplexity int) int
		BFieldOnZBigObject func(childComplexity int) int
		CFieldOnZBigObject func(childComplexity int) int
		DFieldOnZBigObject func(childComplexity int) int
		EFieldOnZBigObject func(childComplexity int) int
		FFieldOnZBigObject func(childComplexity int) int
		GFieldOnZBigObject func(childComplexity int) int
		HFieldOnZBigObject func(childComplexity int) int
		IFieldOnZBigObject func(childComplexity int) int
		JFieldOnZBigObject func(childComplexity int) int
		KFieldOnZBigObject func(childComplexity int) int
		LFieldOnZBigObject func(childComplexity int) int
		MFieldOnZBigObject func(childComplexity int) int
		NFieldOnZBigObject func(childComplexity int) int
		OFieldOnZBigObject func(childComplexity int) int
		PFieldOnZBigObject func(childComplexity int) int
		QFieldOnZBigObject func(childComplexity int) int
		RFieldOnZBigObject func(childComplexity int) int
		SFieldOnZBigObject func(childComplexity int) int
		TFieldOnZBigObject func(childComplexity int) int
		UFieldOnZBigObject func(childComplexity int) int
		VFieldOnZBigObject func(childComplexity int) int
		WFieldOnZBigObject func(childComplexity int) int
		XFieldOnZBigObject func(childComplexity int) int
		YFieldOnZBigObject func(childComplexity int) int
		ZFieldOnZBigObject func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type EntityResolver interface {
	FindEmployeeByID(ctx context.Context, id int) (*model.Employee, error)
}
type QueryResolver interface {
	HeaderValue(ctx context.Context, name string) (string, error)
	InitPayloadValue(ctx context.Context, key string) (string, error)
	InitialPayload(ctx context.Context) (map[string]interface{}, error)
	Delay(ctx context.Context, response string, ms int) (string, error)
	BigResponse(ctx context.Context, artificialDelay int, bigObjects int, nestedObjects int, deeplyNestedObjects int) ([]*model.BigObject, error)
	BigAbstractResponse(ctx context.Context) (model.BigAbstractResponse, error)
	RootFieldWithListArg(ctx context.Context, arg []string) ([]string, error)
	RootFieldWithNestedListArg(ctx context.Context, arg [][]string) ([][]string, error)
	RootFieldWithListOfInputArg(ctx context.Context, arg []*model.InputType) ([]*model.InputResponse, error)
	RootFieldWithListOfEnumArg(ctx context.Context, arg []model.EnumType) ([]model.EnumType, error)
	RootFieldWithInput(ctx context.Context, arg model.InputArg) (string, error)
	FloatField(ctx context.Context, arg *float64) (*float64, error)
}
type SubscriptionResolver interface {
	HeaderValue(ctx context.Context, name string, repeat *int) (<-chan *model.TimestampedString, error)
	InitPayloadValue(ctx context.Context, key string, repeat *int) (<-chan *model.TimestampedString, error)
	InitialPayload(ctx context.Context, repeat *int) (<-chan map[string]interface{}, error)
	ReturnsError(ctx context.Context) (<-chan *string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ABigObject.aFieldOnABigObject":
		if e.complexity.ABigObject.AFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.AFieldOnABigObject(childComplexity), true

	case "ABigObject.bFieldOnABigObject":
		if e.complexity.ABigObject.BFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.BFieldOnABigObject(childComplexity), true

	case "ABigObject.cFieldOnABigObject":
		if e.complexity.ABigObject.CFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.CFieldOnABigObject(childComplexity), true

	case "ABigObject.dFieldOnABigObject":
		if e.complexity.ABigObject.DFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.DFieldOnABigObject(childComplexity), true

	case "ABigObject.eFieldOnABigObject":
		if e.complexity.ABigObject.EFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.EFieldOnABigObject(childComplexity), true

	case "ABigObject.fFieldOnABigObject":
		if e.complexity.ABigObject.FFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.FFieldOnABigObject(childComplexity), true

	case "ABigObject.gFieldOnABigObject":
		if e.complexity.ABigObject.GFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.GFieldOnABigObject(childComplexity), true

	case "ABigObject.hFieldOnABigObject":
		if e.complexity.ABigObject.HFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.HFieldOnABigObject(childComplexity), true

	case "ABigObject.iFieldOnABigObject":
		if e.complexity.ABigObject.IFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.IFieldOnABigObject(childComplexity), true

	case "ABigObject.jFieldOnABigObject":
		if e.complexity.ABigObject.JFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.JFieldOnABigObject(childComplexity), true

	case "ABigObject.kFieldOnABigObject":
		if e.complexity.ABigObject.KFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.KFieldOnABigObject(childComplexity), true

	case "ABigObject.lFieldOnABigObject":
		if e.complexity.ABigObject.LFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.LFieldOnABigObject(childComplexity), true

	case "ABigObject.mFieldOnABigObject":
		if e.complexity.ABigObject.MFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.MFieldOnABigObject(childComplexity), true

	case "ABigObject.nFieldOnABigObject":
		if e.complexity.ABigObject.NFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.NFieldOnABigObject(childComplexity), true

	case "ABigObject.oFieldOnABigObject":
		if e.complexity.ABigObject.OFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.OFieldOnABigObject(childComplexity), true

	case "ABigObject.pFieldOnABigObject":
		if e.complexity.ABigObject.PFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.PFieldOnABigObject(childComplexity), true

	case "ABigObject.qFieldOnABigObject":
		if e.complexity.ABigObject.QFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.QFieldOnABigObject(childComplexity), true

	case "ABigObject.rFieldOnABigObject":
		if e.complexity.ABigObject.RFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.RFieldOnABigObject(childComplexity), true

	case "ABigObject.sFieldOnABigObject":
		if e.complexity.ABigObject.SFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.SFieldOnABigObject(childComplexity), true

	case "ABigObject.tFieldOnABigObject":
		if e.complexity.ABigObject.TFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.TFieldOnABigObject(childComplexity), true

	case "ABigObject.uFieldOnABigObject":
		if e.complexity.ABigObject.UFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.UFieldOnABigObject(childComplexity), true

	case "ABigObject.vFieldOnABigObject":
		if e.complexity.ABigObject.VFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.VFieldOnABigObject(childComplexity), true

	case "ABigObject.wFieldOnABigObject":
		if e.complexity.ABigObject.WFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.WFieldOnABigObject(childComplexity), true

	case "ABigObject.xFieldOnABigObject":
		if e.complexity.ABigObject.XFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.XFieldOnABigObject(childComplexity), true

	case "ABigObject.yFieldOnABigObject":
		if e.complexity.ABigObject.YFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.YFieldOnABigObject(childComplexity), true

	case "ABigObject.zFieldOnABigObject":
		if e.complexity.ABigObject.ZFieldOnABigObject == nil {
			break
		}

		return e.complexity.ABigObject.ZFieldOnABigObject(childComplexity), true

	case "BBigObject.aFieldOnBBigObject":
		if e.complexity.BBigObject.AFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.AFieldOnBBigObject(childComplexity), true

	case "BBigObject.bFieldOnBBigObject":
		if e.complexity.BBigObject.BFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.BFieldOnBBigObject(childComplexity), true

	case "BBigObject.cFieldOnBBigObject":
		if e.complexity.BBigObject.CFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.CFieldOnBBigObject(childComplexity), true

	case "BBigObject.dFieldOnBBigObject":
		if e.complexity.BBigObject.DFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.DFieldOnBBigObject(childComplexity), true

	case "BBigObject.eFieldOnBBigObject":
		if e.complexity.BBigObject.EFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.EFieldOnBBigObject(childComplexity), true

	case "BBigObject.fFieldOnBBigObject":
		if e.complexity.BBigObject.FFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.FFieldOnBBigObject(childComplexity), true

	case "BBigObject.gFieldOnBBigObject":
		if e.complexity.BBigObject.GFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.GFieldOnBBigObject(childComplexity), true

	case "BBigObject.hFieldOnBBigObject":
		if e.complexity.BBigObject.HFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.HFieldOnBBigObject(childComplexity), true

	case "BBigObject.iFieldOnBBigObject":
		if e.complexity.BBigObject.IFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.IFieldOnBBigObject(childComplexity), true

	case "BBigObject.jFieldOnBBigObject":
		if e.complexity.BBigObject.JFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.JFieldOnBBigObject(childComplexity), true

	case "BBigObject.kFieldOnBBigObject":
		if e.complexity.BBigObject.KFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.KFieldOnBBigObject(childComplexity), true

	case "BBigObject.lFieldOnBBigObject":
		if e.complexity.BBigObject.LFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.LFieldOnBBigObject(childComplexity), true

	case "BBigObject.mFieldOnBBigObject":
		if e.complexity.BBigObject.MFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.MFieldOnBBigObject(childComplexity), true

	case "BBigObject.nFieldOnBBigObject":
		if e.complexity.BBigObject.NFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.NFieldOnBBigObject(childComplexity), true

	case "BBigObject.oFieldOnBBigObject":
		if e.complexity.BBigObject.OFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.OFieldOnBBigObject(childComplexity), true

	case "BBigObject.pFieldOnBBigObject":
		if e.complexity.BBigObject.PFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.PFieldOnBBigObject(childComplexity), true

	case "BBigObject.qFieldOnBBigObject":
		if e.complexity.BBigObject.QFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.QFieldOnBBigObject(childComplexity), true

	case "BBigObject.rFieldOnBBigObject":
		if e.complexity.BBigObject.RFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.RFieldOnBBigObject(childComplexity), true

	case "BBigObject.sFieldOnBBigObject":
		if e.complexity.BBigObject.SFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.SFieldOnBBigObject(childComplexity), true

	case "BBigObject.tFieldOnBBigObject":
		if e.complexity.BBigObject.TFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.TFieldOnBBigObject(childComplexity), true

	case "BBigObject.uFieldOnBBigObject":
		if e.complexity.BBigObject.UFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.UFieldOnBBigObject(childComplexity), true

	case "BBigObject.vFieldOnBBigObject":
		if e.complexity.BBigObject.VFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.VFieldOnBBigObject(childComplexity), true

	case "BBigObject.wFieldOnBBigObject":
		if e.complexity.BBigObject.WFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.WFieldOnBBigObject(childComplexity), true

	case "BBigObject.xFieldOnBBigObject":
		if e.complexity.BBigObject.XFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.XFieldOnBBigObject(childComplexity), true

	case "BBigObject.yFieldOnBBigObject":
		if e.complexity.BBigObject.YFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.YFieldOnBBigObject(childComplexity), true

	case "BBigObject.zFieldOnBBigObject":
		if e.complexity.BBigObject.ZFieldOnBBigObject == nil {
			break
		}

		return e.complexity.BBigObject.ZFieldOnBBigObject(childComplexity), true

	case "BigObject.nestedObjects":
		if e.complexity.BigObject.NestedObjects == nil {
			break
		}

		return e.complexity.BigObject.NestedObjects(childComplexity), true

	case "CBigObject.aFieldOnCBigObject":
		if e.complexity.CBigObject.AFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.AFieldOnCBigObject(childComplexity), true

	case "CBigObject.bFieldOnCBigObject":
		if e.complexity.CBigObject.BFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.BFieldOnCBigObject(childComplexity), true

	case "CBigObject.cFieldOnCBigObject":
		if e.complexity.CBigObject.CFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.CFieldOnCBigObject(childComplexity), true

	case "CBigObject.dFieldOnCBigObject":
		if e.complexity.CBigObject.DFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.DFieldOnCBigObject(childComplexity), true

	case "CBigObject.eFieldOnCBigObject":
		if e.complexity.CBigObject.EFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.EFieldOnCBigObject(childComplexity), true

	case "CBigObject.fFieldOnCBigObject":
		if e.complexity.CBigObject.FFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.FFieldOnCBigObject(childComplexity), true

	case "CBigObject.gFieldOnCBigObject":
		if e.complexity.CBigObject.GFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.GFieldOnCBigObject(childComplexity), true

	case "CBigObject.hFieldOnCBigObject":
		if e.complexity.CBigObject.HFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.HFieldOnCBigObject(childComplexity), true

	case "CBigObject.iFieldOnCBigObject":
		if e.complexity.CBigObject.IFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.IFieldOnCBigObject(childComplexity), true

	case "CBigObject.jFieldOnCBigObject":
		if e.complexity.CBigObject.JFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.JFieldOnCBigObject(childComplexity), true

	case "CBigObject.kFieldOnCBigObject":
		if e.complexity.CBigObject.KFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.KFieldOnCBigObject(childComplexity), true

	case "CBigObject.lFieldOnCBigObject":
		if e.complexity.CBigObject.LFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.LFieldOnCBigObject(childComplexity), true

	case "CBigObject.mFieldOnCBigObject":
		if e.complexity.CBigObject.MFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.MFieldOnCBigObject(childComplexity), true

	case "CBigObject.nFieldOnCBigObject":
		if e.complexity.CBigObject.NFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.NFieldOnCBigObject(childComplexity), true

	case "CBigObject.oFieldOnCBigObject":
		if e.complexity.CBigObject.OFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.OFieldOnCBigObject(childComplexity), true

	case "CBigObject.pFieldOnCBigObject":
		if e.complexity.CBigObject.PFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.PFieldOnCBigObject(childComplexity), true

	case "CBigObject.qFieldOnCBigObject":
		if e.complexity.CBigObject.QFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.QFieldOnCBigObject(childComplexity), true

	case "CBigObject.rFieldOnCBigObject":
		if e.complexity.CBigObject.RFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.RFieldOnCBigObject(childComplexity), true

	case "CBigObject.sFieldOnCBigObject":
		if e.complexity.CBigObject.SFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.SFieldOnCBigObject(childComplexity), true

	case "CBigObject.tFieldOnCBigObject":
		if e.complexity.CBigObject.TFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.TFieldOnCBigObject(childComplexity), true

	case "CBigObject.uFieldOnCBigObject":
		if e.complexity.CBigObject.UFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.UFieldOnCBigObject(childComplexity), true

	case "CBigObject.vFieldOnCBigObject":
		if e.complexity.CBigObject.VFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.VFieldOnCBigObject(childComplexity), true

	case "CBigObject.wFieldOnCBigObject":
		if e.complexity.CBigObject.WFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.WFieldOnCBigObject(childComplexity), true

	case "CBigObject.xFieldOnCBigObject":
		if e.complexity.CBigObject.XFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.XFieldOnCBigObject(childComplexity), true

	case "CBigObject.yFieldOnCBigObject":
		if e.complexity.CBigObject.YFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.YFieldOnCBigObject(childComplexity), true

	case "CBigObject.zFieldOnCBigObject":
		if e.complexity.CBigObject.ZFieldOnCBigObject == nil {
			break
		}

		return e.complexity.CBigObject.ZFieldOnCBigObject(childComplexity), true

	case "DBigObject.aFieldOnDBigObject":
		if e.complexity.DBigObject.AFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.AFieldOnDBigObject(childComplexity), true

	case "DBigObject.bFieldOnDBigObject":
		if e.complexity.DBigObject.BFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.BFieldOnDBigObject(childComplexity), true

	case "DBigObject.cFieldOnDBigObject":
		if e.complexity.DBigObject.CFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.CFieldOnDBigObject(childComplexity), true

	case "DBigObject.dFieldOnDBigObject":
		if e.complexity.DBigObject.DFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.DFieldOnDBigObject(childComplexity), true

	case "DBigObject.eFieldOnDBigObject":
		if e.complexity.DBigObject.EFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.EFieldOnDBigObject(childComplexity), true

	case "DBigObject.fFieldOnDBigObject":
		if e.complexity.DBigObject.FFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.FFieldOnDBigObject(childComplexity), true

	case "DBigObject.gFieldOnDBigObject":
		if e.complexity.DBigObject.GFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.GFieldOnDBigObject(childComplexity), true

	case "DBigObject.hFieldOnDBigObject":
		if e.complexity.DBigObject.HFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.HFieldOnDBigObject(childComplexity), true

	case "DBigObject.iFieldOnDBigObject":
		if e.complexity.DBigObject.IFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.IFieldOnDBigObject(childComplexity), true

	case "DBigObject.jFieldOnDBigObject":
		if e.complexity.DBigObject.JFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.JFieldOnDBigObject(childComplexity), true

	case "DBigObject.kFieldOnDBigObject":
		if e.complexity.DBigObject.KFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.KFieldOnDBigObject(childComplexity), true

	case "DBigObject.lFieldOnDBigObject":
		if e.complexity.DBigObject.LFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.LFieldOnDBigObject(childComplexity), true

	case "DBigObject.mFieldOnDBigObject":
		if e.complexity.DBigObject.MFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.MFieldOnDBigObject(childComplexity), true

	case "DBigObject.nFieldOnDBigObject":
		if e.complexity.DBigObject.NFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.NFieldOnDBigObject(childComplexity), true

	case "DBigObject.oFieldOnDBigObject":
		if e.complexity.DBigObject.OFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.OFieldOnDBigObject(childComplexity), true

	case "DBigObject.pFieldOnDBigObject":
		if e.complexity.DBigObject.PFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.PFieldOnDBigObject(childComplexity), true

	case "DBigObject.qFieldOnDBigObject":
		if e.complexity.DBigObject.QFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.QFieldOnDBigObject(childComplexity), true

	case "DBigObject.rFieldOnDBigObject":
		if e.complexity.DBigObject.RFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.RFieldOnDBigObject(childComplexity), true

	case "DBigObject.sFieldOnDBigObject":
		if e.complexity.DBigObject.SFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.SFieldOnDBigObject(childComplexity), true

	case "DBigObject.tFieldOnDBigObject":
		if e.complexity.DBigObject.TFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.TFieldOnDBigObject(childComplexity), true

	case "DBigObject.uFieldOnDBigObject":
		if e.complexity.DBigObject.UFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.UFieldOnDBigObject(childComplexity), true

	case "DBigObject.vFieldOnDBigObject":
		if e.complexity.DBigObject.VFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.VFieldOnDBigObject(childComplexity), true

	case "DBigObject.wFieldOnDBigObject":
		if e.complexity.DBigObject.WFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.WFieldOnDBigObject(childComplexity), true

	case "DBigObject.xFieldOnDBigObject":
		if e.complexity.DBigObject.XFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.XFieldOnDBigObject(childComplexity), true

	case "DBigObject.yFieldOnDBigObject":
		if e.complexity.DBigObject.YFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.YFieldOnDBigObject(childComplexity), true

	case "DBigObject.zFieldOnDBigObject":
		if e.complexity.DBigObject.ZFieldOnDBigObject == nil {
			break
		}

		return e.complexity.DBigObject.ZFieldOnDBigObject(childComplexity), true

	case "DeeplyNestedObject.aFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.AFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.AFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.bFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.BFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.BFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.cFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.CFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.CFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.dFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.DFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.DFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.eFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.EFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.EFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.fFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.FFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.FFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.gFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.GFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.GFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.hFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.HFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.HFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.iFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.IFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.IFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.jFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.JFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.JFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.kFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.KFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.KFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.lFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.LFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.LFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.mFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.MFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.MFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.nFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.NFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.NFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.oFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.OFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.OFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.pFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.PFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.PFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.qFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.QFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.QFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.rFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.RFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.RFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.sFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.SFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.SFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.tFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.TFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.TFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.uFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.UFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.UFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.vFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.VFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.VFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.wFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.WFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.WFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.xFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.XFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.XFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.yFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.YFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.YFieldOnDeeplyNestedObject(childComplexity), true

	case "DeeplyNestedObject.zFieldOnDeeplyNestedObject":
		if e.complexity.DeeplyNestedObject.ZFieldOnDeeplyNestedObject == nil {
			break
		}

		return e.complexity.DeeplyNestedObject.ZFieldOnDeeplyNestedObject(childComplexity), true

	case "EBigObject.aFieldOnEBigObject":
		if e.complexity.EBigObject.AFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.AFieldOnEBigObject(childComplexity), true

	case "EBigObject.bFieldOnEBigObject":
		if e.complexity.EBigObject.BFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.BFieldOnEBigObject(childComplexity), true

	case "EBigObject.cFieldOnEBigObject":
		if e.complexity.EBigObject.CFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.CFieldOnEBigObject(childComplexity), true

	case "EBigObject.dFieldOnEBigObject":
		if e.complexity.EBigObject.DFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.DFieldOnEBigObject(childComplexity), true

	case "EBigObject.eFieldOnEBigObject":
		if e.complexity.EBigObject.EFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.EFieldOnEBigObject(childComplexity), true

	case "EBigObject.fFieldOnEBigObject":
		if e.complexity.EBigObject.FFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.FFieldOnEBigObject(childComplexity), true

	case "EBigObject.gFieldOnEBigObject":
		if e.complexity.EBigObject.GFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.GFieldOnEBigObject(childComplexity), true

	case "EBigObject.hFieldOnEBigObject":
		if e.complexity.EBigObject.HFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.HFieldOnEBigObject(childComplexity), true

	case "EBigObject.iFieldOnEBigObject":
		if e.complexity.EBigObject.IFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.IFieldOnEBigObject(childComplexity), true

	case "EBigObject.jFieldOnEBigObject":
		if e.complexity.EBigObject.JFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.JFieldOnEBigObject(childComplexity), true

	case "EBigObject.kFieldOnEBigObject":
		if e.complexity.EBigObject.KFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.KFieldOnEBigObject(childComplexity), true

	case "EBigObject.lFieldOnEBigObject":
		if e.complexity.EBigObject.LFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.LFieldOnEBigObject(childComplexity), true

	case "EBigObject.mFieldOnEBigObject":
		if e.complexity.EBigObject.MFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.MFieldOnEBigObject(childComplexity), true

	case "EBigObject.nFieldOnEBigObject":
		if e.complexity.EBigObject.NFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.NFieldOnEBigObject(childComplexity), true

	case "EBigObject.oFieldOnEBigObject":
		if e.complexity.EBigObject.OFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.OFieldOnEBigObject(childComplexity), true

	case "EBigObject.pFieldOnEBigObject":
		if e.complexity.EBigObject.PFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.PFieldOnEBigObject(childComplexity), true

	case "EBigObject.qFieldOnEBigObject":
		if e.complexity.EBigObject.QFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.QFieldOnEBigObject(childComplexity), true

	case "EBigObject.rFieldOnEBigObject":
		if e.complexity.EBigObject.RFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.RFieldOnEBigObject(childComplexity), true

	case "EBigObject.sFieldOnEBigObject":
		if e.complexity.EBigObject.SFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.SFieldOnEBigObject(childComplexity), true

	case "EBigObject.tFieldOnEBigObject":
		if e.complexity.EBigObject.TFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.TFieldOnEBigObject(childComplexity), true

	case "EBigObject.uFieldOnEBigObject":
		if e.complexity.EBigObject.UFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.UFieldOnEBigObject(childComplexity), true

	case "EBigObject.vFieldOnEBigObject":
		if e.complexity.EBigObject.VFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.VFieldOnEBigObject(childComplexity), true

	case "EBigObject.wFieldOnEBigObject":
		if e.complexity.EBigObject.WFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.WFieldOnEBigObject(childComplexity), true

	case "EBigObject.xFieldOnEBigObject":
		if e.complexity.EBigObject.XFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.XFieldOnEBigObject(childComplexity), true

	case "EBigObject.yFieldOnEBigObject":
		if e.complexity.EBigObject.YFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.YFieldOnEBigObject(childComplexity), true

	case "EBigObject.zFieldOnEBigObject":
		if e.complexity.EBigObject.ZFieldOnEBigObject == nil {
			break
		}

		return e.complexity.EBigObject.ZFieldOnEBigObject(childComplexity), true

	case "Employee.fieldThrowsError":
		if e.complexity.Employee.FieldThrowsError == nil {
			break
		}

		return e.complexity.Employee.FieldThrowsError(childComplexity), true

	case "Employee.id":
		if e.complexity.Employee.ID == nil {
			break
		}

		return e.complexity.Employee.ID(childComplexity), true

	case "Entity.findEmployeeByID":
		if e.complexity.Entity.FindEmployeeByID == nil {
			break
		}

		args, err := ec.field_Entity_findEmployeeByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindEmployeeByID(childComplexity, args["id"].(int)), true

	case "FBigObject.aFieldOnFBigObject":
		if e.complexity.FBigObject.AFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.AFieldOnFBigObject(childComplexity), true

	case "FBigObject.bFieldOnFBigObject":
		if e.complexity.FBigObject.BFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.BFieldOnFBigObject(childComplexity), true

	case "FBigObject.cFieldOnFBigObject":
		if e.complexity.FBigObject.CFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.CFieldOnFBigObject(childComplexity), true

	case "FBigObject.dFieldOnFBigObject":
		if e.complexity.FBigObject.DFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.DFieldOnFBigObject(childComplexity), true

	case "FBigObject.eFieldOnFBigObject":
		if e.complexity.FBigObject.EFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.EFieldOnFBigObject(childComplexity), true

	case "FBigObject.fFieldOnFBigObject":
		if e.complexity.FBigObject.FFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.FFieldOnFBigObject(childComplexity), true

	case "FBigObject.gFieldOnFBigObject":
		if e.complexity.FBigObject.GFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.GFieldOnFBigObject(childComplexity), true

	case "FBigObject.hFieldOnFBigObject":
		if e.complexity.FBigObject.HFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.HFieldOnFBigObject(childComplexity), true

	case "FBigObject.iFieldOnFBigObject":
		if e.complexity.FBigObject.IFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.IFieldOnFBigObject(childComplexity), true

	case "FBigObject.jFieldOnFBigObject":
		if e.complexity.FBigObject.JFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.JFieldOnFBigObject(childComplexity), true

	case "FBigObject.kFieldOnFBigObject":
		if e.complexity.FBigObject.KFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.KFieldOnFBigObject(childComplexity), true

	case "FBigObject.lFieldOnFBigObject":
		if e.complexity.FBigObject.LFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.LFieldOnFBigObject(childComplexity), true

	case "FBigObject.mFieldOnFBigObject":
		if e.complexity.FBigObject.MFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.MFieldOnFBigObject(childComplexity), true

	case "FBigObject.nFieldOnFBigObject":
		if e.complexity.FBigObject.NFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.NFieldOnFBigObject(childComplexity), true

	case "FBigObject.oFieldOnFBigObject":
		if e.complexity.FBigObject.OFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.OFieldOnFBigObject(childComplexity), true

	case "FBigObject.pFieldOnFBigObject":
		if e.complexity.FBigObject.PFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.PFieldOnFBigObject(childComplexity), true

	case "FBigObject.qFieldOnFBigObject":
		if e.complexity.FBigObject.QFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.QFieldOnFBigObject(childComplexity), true

	case "FBigObject.rFieldOnFBigObject":
		if e.complexity.FBigObject.RFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.RFieldOnFBigObject(childComplexity), true

	case "FBigObject.sFieldOnFBigObject":
		if e.complexity.FBigObject.SFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.SFieldOnFBigObject(childComplexity), true

	case "FBigObject.tFieldOnFBigObject":
		if e.complexity.FBigObject.TFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.TFieldOnFBigObject(childComplexity), true

	case "FBigObject.uFieldOnFBigObject":
		if e.complexity.FBigObject.UFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.UFieldOnFBigObject(childComplexity), true

	case "FBigObject.vFieldOnFBigObject":
		if e.complexity.FBigObject.VFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.VFieldOnFBigObject(childComplexity), true

	case "FBigObject.wFieldOnFBigObject":
		if e.complexity.FBigObject.WFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.WFieldOnFBigObject(childComplexity), true

	case "FBigObject.xFieldOnFBigObject":
		if e.complexity.FBigObject.XFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.XFieldOnFBigObject(childComplexity), true

	case "FBigObject.yFieldOnFBigObject":
		if e.complexity.FBigObject.YFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.YFieldOnFBigObject(childComplexity), true

	case "FBigObject.zFieldOnFBigObject":
		if e.complexity.FBigObject.ZFieldOnFBigObject == nil {
			break
		}

		return e.complexity.FBigObject.ZFieldOnFBigObject(childComplexity), true

	case "GBigObject.aFieldOnGBigObject":
		if e.complexity.GBigObject.AFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.AFieldOnGBigObject(childComplexity), true

	case "GBigObject.bFieldOnGBigObject":
		if e.complexity.GBigObject.BFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.BFieldOnGBigObject(childComplexity), true

	case "GBigObject.cFieldOnGBigObject":
		if e.complexity.GBigObject.CFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.CFieldOnGBigObject(childComplexity), true

	case "GBigObject.dFieldOnGBigObject":
		if e.complexity.GBigObject.DFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.DFieldOnGBigObject(childComplexity), true

	case "GBigObject.eFieldOnGBigObject":
		if e.complexity.GBigObject.EFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.EFieldOnGBigObject(childComplexity), true

	case "GBigObject.fFieldOnGBigObject":
		if e.complexity.GBigObject.FFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.FFieldOnGBigObject(childComplexity), true

	case "GBigObject.gFieldOnGBigObject":
		if e.complexity.GBigObject.GFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.GFieldOnGBigObject(childComplexity), true

	case "GBigObject.hFieldOnGBigObject":
		if e.complexity.GBigObject.HFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.HFieldOnGBigObject(childComplexity), true

	case "GBigObject.iFieldOnGBigObject":
		if e.complexity.GBigObject.IFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.IFieldOnGBigObject(childComplexity), true

	case "GBigObject.jFieldOnGBigObject":
		if e.complexity.GBigObject.JFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.JFieldOnGBigObject(childComplexity), true

	case "GBigObject.kFieldOnGBigObject":
		if e.complexity.GBigObject.KFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.KFieldOnGBigObject(childComplexity), true

	case "GBigObject.lFieldOnGBigObject":
		if e.complexity.GBigObject.LFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.LFieldOnGBigObject(childComplexity), true

	case "GBigObject.mFieldOnGBigObject":
		if e.complexity.GBigObject.MFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.MFieldOnGBigObject(childComplexity), true

	case "GBigObject.nFieldOnGBigObject":
		if e.complexity.GBigObject.NFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.NFieldOnGBigObject(childComplexity), true

	case "GBigObject.oFieldOnGBigObject":
		if e.complexity.GBigObject.OFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.OFieldOnGBigObject(childComplexity), true

	case "GBigObject.pFieldOnGBigObject":
		if e.complexity.GBigObject.PFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.PFieldOnGBigObject(childComplexity), true

	case "GBigObject.qFieldOnGBigObject":
		if e.complexity.GBigObject.QFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.QFieldOnGBigObject(childComplexity), true

	case "GBigObject.rFieldOnGBigObject":
		if e.complexity.GBigObject.RFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.RFieldOnGBigObject(childComplexity), true

	case "GBigObject.sFieldOnGBigObject":
		if e.complexity.GBigObject.SFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.SFieldOnGBigObject(childComplexity), true

	case "GBigObject.tFieldOnGBigObject":
		if e.complexity.GBigObject.TFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.TFieldOnGBigObject(childComplexity), true

	case "GBigObject.uFieldOnGBigObject":
		if e.complexity.GBigObject.UFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.UFieldOnGBigObject(childComplexity), true

	case "GBigObject.vFieldOnGBigObject":
		if e.complexity.GBigObject.VFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.VFieldOnGBigObject(childComplexity), true

	case "GBigObject.wFieldOnGBigObject":
		if e.complexity.GBigObject.WFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.WFieldOnGBigObject(childComplexity), true

	case "GBigObject.xFieldOnGBigObject":
		if e.complexity.GBigObject.XFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.XFieldOnGBigObject(childComplexity), true

	case "GBigObject.yFieldOnGBigObject":
		if e.complexity.GBigObject.YFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.YFieldOnGBigObject(childComplexity), true

	case "GBigObject.zFieldOnGBigObject":
		if e.complexity.GBigObject.ZFieldOnGBigObject == nil {
			break
		}

		return e.complexity.GBigObject.ZFieldOnGBigObject(childComplexity), true

	case "HBigObject.aFieldOnHBigObject":
		if e.complexity.HBigObject.AFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.AFieldOnHBigObject(childComplexity), true

	case "HBigObject.bFieldOnHBigObject":
		if e.complexity.HBigObject.BFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.BFieldOnHBigObject(childComplexity), true

	case "HBigObject.cFieldOnHBigObject":
		if e.complexity.HBigObject.CFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.CFieldOnHBigObject(childComplexity), true

	case "HBigObject.dFieldOnHBigObject":
		if e.complexity.HBigObject.DFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.DFieldOnHBigObject(childComplexity), true

	case "HBigObject.eFieldOnHBigObject":
		if e.complexity.HBigObject.EFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.EFieldOnHBigObject(childComplexity), true

	case "HBigObject.fFieldOnHBigObject":
		if e.complexity.HBigObject.FFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.FFieldOnHBigObject(childComplexity), true

	case "HBigObject.gFieldOnHBigObject":
		if e.complexity.HBigObject.GFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.GFieldOnHBigObject(childComplexity), true

	case "HBigObject.hFieldOnHBigObject":
		if e.complexity.HBigObject.HFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.HFieldOnHBigObject(childComplexity), true

	case "HBigObject.iFieldOnHBigObject":
		if e.complexity.HBigObject.IFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.IFieldOnHBigObject(childComplexity), true

	case "HBigObject.jFieldOnHBigObject":
		if e.complexity.HBigObject.JFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.JFieldOnHBigObject(childComplexity), true

	case "HBigObject.kFieldOnHBigObject":
		if e.complexity.HBigObject.KFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.KFieldOnHBigObject(childComplexity), true

	case "HBigObject.lFieldOnHBigObject":
		if e.complexity.HBigObject.LFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.LFieldOnHBigObject(childComplexity), true

	case "HBigObject.mFieldOnHBigObject":
		if e.complexity.HBigObject.MFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.MFieldOnHBigObject(childComplexity), true

	case "HBigObject.nFieldOnHBigObject":
		if e.complexity.HBigObject.NFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.NFieldOnHBigObject(childComplexity), true

	case "HBigObject.oFieldOnHBigObject":
		if e.complexity.HBigObject.OFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.OFieldOnHBigObject(childComplexity), true

	case "HBigObject.pFieldOnHBigObject":
		if e.complexity.HBigObject.PFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.PFieldOnHBigObject(childComplexity), true

	case "HBigObject.qFieldOnHBigObject":
		if e.complexity.HBigObject.QFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.QFieldOnHBigObject(childComplexity), true

	case "HBigObject.rFieldOnHBigObject":
		if e.complexity.HBigObject.RFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.RFieldOnHBigObject(childComplexity), true

	case "HBigObject.sFieldOnHBigObject":
		if e.complexity.HBigObject.SFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.SFieldOnHBigObject(childComplexity), true

	case "HBigObject.tFieldOnHBigObject":
		if e.complexity.HBigObject.TFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.TFieldOnHBigObject(childComplexity), true

	case "HBigObject.uFieldOnHBigObject":
		if e.complexity.HBigObject.UFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.UFieldOnHBigObject(childComplexity), true

	case "HBigObject.vFieldOnHBigObject":
		if e.complexity.HBigObject.VFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.VFieldOnHBigObject(childComplexity), true

	case "HBigObject.wFieldOnHBigObject":
		if e.complexity.HBigObject.WFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.WFieldOnHBigObject(childComplexity), true

	case "HBigObject.xFieldOnHBigObject":
		if e.complexity.HBigObject.XFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.XFieldOnHBigObject(childComplexity), true

	case "HBigObject.yFieldOnHBigObject":
		if e.complexity.HBigObject.YFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.YFieldOnHBigObject(childComplexity), true

	case "HBigObject.zFieldOnHBigObject":
		if e.complexity.HBigObject.ZFieldOnHBigObject == nil {
			break
		}

		return e.complexity.HBigObject.ZFieldOnHBigObject(childComplexity), true

	case "IBigObject.aFieldOnIBigObject":
		if e.complexity.IBigObject.AFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.AFieldOnIBigObject(childComplexity), true

	case "IBigObject.bFieldOnIBigObject":
		if e.complexity.IBigObject.BFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.BFieldOnIBigObject(childComplexity), true

	case "IBigObject.cFieldOnIBigObject":
		if e.complexity.IBigObject.CFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.CFieldOnIBigObject(childComplexity), true

	case "IBigObject.dFieldOnIBigObject":
		if e.complexity.IBigObject.DFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.DFieldOnIBigObject(childComplexity), true

	case "IBigObject.eFieldOnIBigObject":
		if e.complexity.IBigObject.EFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.EFieldOnIBigObject(childComplexity), true

	case "IBigObject.fFieldOnIBigObject":
		if e.complexity.IBigObject.FFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.FFieldOnIBigObject(childComplexity), true

	case "IBigObject.gFieldOnIBigObject":
		if e.complexity.IBigObject.GFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.GFieldOnIBigObject(childComplexity), true

	case "IBigObject.hFieldOnIBigObject":
		if e.complexity.IBigObject.HFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.HFieldOnIBigObject(childComplexity), true

	case "IBigObject.iFieldOnIBigObject":
		if e.complexity.IBigObject.IFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.IFieldOnIBigObject(childComplexity), true

	case "IBigObject.jFieldOnIBigObject":
		if e.complexity.IBigObject.JFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.JFieldOnIBigObject(childComplexity), true

	case "IBigObject.kFieldOnIBigObject":
		if e.complexity.IBigObject.KFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.KFieldOnIBigObject(childComplexity), true

	case "IBigObject.lFieldOnIBigObject":
		if e.complexity.IBigObject.LFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.LFieldOnIBigObject(childComplexity), true

	case "IBigObject.mFieldOnIBigObject":
		if e.complexity.IBigObject.MFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.MFieldOnIBigObject(childComplexity), true

	case "IBigObject.nFieldOnIBigObject":
		if e.complexity.IBigObject.NFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.NFieldOnIBigObject(childComplexity), true

	case "IBigObject.oFieldOnIBigObject":
		if e.complexity.IBigObject.OFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.OFieldOnIBigObject(childComplexity), true

	case "IBigObject.pFieldOnIBigObject":
		if e.complexity.IBigObject.PFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.PFieldOnIBigObject(childComplexity), true

	case "IBigObject.qFieldOnIBigObject":
		if e.complexity.IBigObject.QFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.QFieldOnIBigObject(childComplexity), true

	case "IBigObject.rFieldOnIBigObject":
		if e.complexity.IBigObject.RFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.RFieldOnIBigObject(childComplexity), true

	case "IBigObject.sFieldOnIBigObject":
		if e.complexity.IBigObject.SFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.SFieldOnIBigObject(childComplexity), true

	case "IBigObject.tFieldOnIBigObject":
		if e.complexity.IBigObject.TFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.TFieldOnIBigObject(childComplexity), true

	case "IBigObject.uFieldOnIBigObject":
		if e.complexity.IBigObject.UFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.UFieldOnIBigObject(childComplexity), true

	case "IBigObject.vFieldOnIBigObject":
		if e.complexity.IBigObject.VFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.VFieldOnIBigObject(childComplexity), true

	case "IBigObject.wFieldOnIBigObject":
		if e.complexity.IBigObject.WFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.WFieldOnIBigObject(childComplexity), true

	case "IBigObject.xFieldOnIBigObject":
		if e.complexity.IBigObject.XFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.XFieldOnIBigObject(childComplexity), true

	case "IBigObject.yFieldOnIBigObject":
		if e.complexity.IBigObject.YFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.YFieldOnIBigObject(childComplexity), true

	case "IBigObject.zFieldOnIBigObject":
		if e.complexity.IBigObject.ZFieldOnIBigObject == nil {
			break
		}

		return e.complexity.IBigObject.ZFieldOnIBigObject(childComplexity), true

	case "InputResponse.arg":
		if e.complexity.InputResponse.Arg == nil {
			break
		}

		return e.complexity.InputResponse.Arg(childComplexity), true

	case "JBigObject.aFieldOnJBigObject":
		if e.complexity.JBigObject.AFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.AFieldOnJBigObject(childComplexity), true

	case "JBigObject.bFieldOnJBigObject":
		if e.complexity.JBigObject.BFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.BFieldOnJBigObject(childComplexity), true

	case "JBigObject.cFieldOnJBigObject":
		if e.complexity.JBigObject.CFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.CFieldOnJBigObject(childComplexity), true

	case "JBigObject.dFieldOnJBigObject":
		if e.complexity.JBigObject.DFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.DFieldOnJBigObject(childComplexity), true

	case "JBigObject.eFieldOnJBigObject":
		if e.complexity.JBigObject.EFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.EFieldOnJBigObject(childComplexity), true

	case "JBigObject.fFieldOnJBigObject":
		if e.complexity.JBigObject.FFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.FFieldOnJBigObject(childComplexity), true

	case "JBigObject.gFieldOnJBigObject":
		if e.complexity.JBigObject.GFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.GFieldOnJBigObject(childComplexity), true

	case "JBigObject.hFieldOnJBigObject":
		if e.complexity.JBigObject.HFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.HFieldOnJBigObject(childComplexity), true

	case "JBigObject.iFieldOnJBigObject":
		if e.complexity.JBigObject.IFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.IFieldOnJBigObject(childComplexity), true

	case "JBigObject.jFieldOnJBigObject":
		if e.complexity.JBigObject.JFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.JFieldOnJBigObject(childComplexity), true

	case "JBigObject.kFieldOnJBigObject":
		if e.complexity.JBigObject.KFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.KFieldOnJBigObject(childComplexity), true

	case "JBigObject.lFieldOnJBigObject":
		if e.complexity.JBigObject.LFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.LFieldOnJBigObject(childComplexity), true

	case "JBigObject.mFieldOnJBigObject":
		if e.complexity.JBigObject.MFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.MFieldOnJBigObject(childComplexity), true

	case "JBigObject.nFieldOnJBigObject":
		if e.complexity.JBigObject.NFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.NFieldOnJBigObject(childComplexity), true

	case "JBigObject.oFieldOnJBigObject":
		if e.complexity.JBigObject.OFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.OFieldOnJBigObject(childComplexity), true

	case "JBigObject.pFieldOnJBigObject":
		if e.complexity.JBigObject.PFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.PFieldOnJBigObject(childComplexity), true

	case "JBigObject.qFieldOnJBigObject":
		if e.complexity.JBigObject.QFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.QFieldOnJBigObject(childComplexity), true

	case "JBigObject.rFieldOnJBigObject":
		if e.complexity.JBigObject.RFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.RFieldOnJBigObject(childComplexity), true

	case "JBigObject.sFieldOnJBigObject":
		if e.complexity.JBigObject.SFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.SFieldOnJBigObject(childComplexity), true

	case "JBigObject.tFieldOnJBigObject":
		if e.complexity.JBigObject.TFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.TFieldOnJBigObject(childComplexity), true

	case "JBigObject.uFieldOnJBigObject":
		if e.complexity.JBigObject.UFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.UFieldOnJBigObject(childComplexity), true

	case "JBigObject.vFieldOnJBigObject":
		if e.complexity.JBigObject.VFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.VFieldOnJBigObject(childComplexity), true

	case "JBigObject.wFieldOnJBigObject":
		if e.complexity.JBigObject.WFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.WFieldOnJBigObject(childComplexity), true

	case "JBigObject.xFieldOnJBigObject":
		if e.complexity.JBigObject.XFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.XFieldOnJBigObject(childComplexity), true

	case "JBigObject.yFieldOnJBigObject":
		if e.complexity.JBigObject.YFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.YFieldOnJBigObject(childComplexity), true

	case "JBigObject.zFieldOnJBigObject":
		if e.complexity.JBigObject.ZFieldOnJBigObject == nil {
			break
		}

		return e.complexity.JBigObject.ZFieldOnJBigObject(childComplexity), true

	case "KBigObject.aFieldOnKBigObject":
		if e.complexity.KBigObject.AFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.AFieldOnKBigObject(childComplexity), true

	case "KBigObject.bFieldOnKBigObject":
		if e.complexity.KBigObject.BFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.BFieldOnKBigObject(childComplexity), true

	case "KBigObject.cFieldOnKBigObject":
		if e.complexity.KBigObject.CFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.CFieldOnKBigObject(childComplexity), true

	case "KBigObject.dFieldOnKBigObject":
		if e.complexity.KBigObject.DFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.DFieldOnKBigObject(childComplexity), true

	case "KBigObject.eFieldOnKBigObject":
		if e.complexity.KBigObject.EFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.EFieldOnKBigObject(childComplexity), true

	case "KBigObject.fFieldOnKBigObject":
		if e.complexity.KBigObject.FFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.FFieldOnKBigObject(childComplexity), true

	case "KBigObject.gFieldOnKBigObject":
		if e.complexity.KBigObject.GFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.GFieldOnKBigObject(childComplexity), true

	case "KBigObject.hFieldOnKBigObject":
		if e.complexity.KBigObject.HFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.HFieldOnKBigObject(childComplexity), true

	case "KBigObject.iFieldOnKBigObject":
		if e.complexity.KBigObject.IFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.IFieldOnKBigObject(childComplexity), true

	case "KBigObject.jFieldOnKBigObject":
		if e.complexity.KBigObject.JFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.JFieldOnKBigObject(childComplexity), true

	case "KBigObject.kFieldOnKBigObject":
		if e.complexity.KBigObject.KFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.KFieldOnKBigObject(childComplexity), true

	case "KBigObject.lFieldOnKBigObject":
		if e.complexity.KBigObject.LFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.LFieldOnKBigObject(childComplexity), true

	case "KBigObject.mFieldOnKBigObject":
		if e.complexity.KBigObject.MFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.MFieldOnKBigObject(childComplexity), true

	case "KBigObject.nFieldOnKBigObject":
		if e.complexity.KBigObject.NFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.NFieldOnKBigObject(childComplexity), true

	case "KBigObject.oFieldOnKBigObject":
		if e.complexity.KBigObject.OFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.OFieldOnKBigObject(childComplexity), true

	case "KBigObject.pFieldOnKBigObject":
		if e.complexity.KBigObject.PFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.PFieldOnKBigObject(childComplexity), true

	case "KBigObject.qFieldOnKBigObject":
		if e.complexity.KBigObject.QFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.QFieldOnKBigObject(childComplexity), true

	case "KBigObject.rFieldOnKBigObject":
		if e.complexity.KBigObject.RFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.RFieldOnKBigObject(childComplexity), true

	case "KBigObject.sFieldOnKBigObject":
		if e.complexity.KBigObject.SFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.SFieldOnKBigObject(childComplexity), true

	case "KBigObject.tFieldOnKBigObject":
		if e.complexity.KBigObject.TFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.TFieldOnKBigObject(childComplexity), true

	case "KBigObject.uFieldOnKBigObject":
		if e.complexity.KBigObject.UFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.UFieldOnKBigObject(childComplexity), true

	case "KBigObject.vFieldOnKBigObject":
		if e.complexity.KBigObject.VFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.VFieldOnKBigObject(childComplexity), true

	case "KBigObject.wFieldOnKBigObject":
		if e.complexity.KBigObject.WFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.WFieldOnKBigObject(childComplexity), true

	case "KBigObject.xFieldOnKBigObject":
		if e.complexity.KBigObject.XFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.XFieldOnKBigObject(childComplexity), true

	case "KBigObject.yFieldOnKBigObject":
		if e.complexity.KBigObject.YFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.YFieldOnKBigObject(childComplexity), true

	case "KBigObject.zFieldOnKBigObject":
		if e.complexity.KBigObject.ZFieldOnKBigObject == nil {
			break
		}

		return e.complexity.KBigObject.ZFieldOnKBigObject(childComplexity), true

	case "LBigObject.aFieldOnLBigObject":
		if e.complexity.LBigObject.AFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.AFieldOnLBigObject(childComplexity), true

	case "LBigObject.bFieldOnLBigObject":
		if e.complexity.LBigObject.BFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.BFieldOnLBigObject(childComplexity), true

	case "LBigObject.cFieldOnLBigObject":
		if e.complexity.LBigObject.CFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.CFieldOnLBigObject(childComplexity), true

	case "LBigObject.dFieldOnLBigObject":
		if e.complexity.LBigObject.DFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.DFieldOnLBigObject(childComplexity), true

	case "LBigObject.eFieldOnLBigObject":
		if e.complexity.LBigObject.EFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.EFieldOnLBigObject(childComplexity), true

	case "LBigObject.fFieldOnLBigObject":
		if e.complexity.LBigObject.FFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.FFieldOnLBigObject(childComplexity), true

	case "LBigObject.gFieldOnLBigObject":
		if e.complexity.LBigObject.GFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.GFieldOnLBigObject(childComplexity), true

	case "LBigObject.hFieldOnLBigObject":
		if e.complexity.LBigObject.HFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.HFieldOnLBigObject(childComplexity), true

	case "LBigObject.iFieldOnLBigObject":
		if e.complexity.LBigObject.IFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.IFieldOnLBigObject(childComplexity), true

	case "LBigObject.jFieldOnLBigObject":
		if e.complexity.LBigObject.JFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.JFieldOnLBigObject(childComplexity), true

	case "LBigObject.kFieldOnLBigObject":
		if e.complexity.LBigObject.KFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.KFieldOnLBigObject(childComplexity), true

	case "LBigObject.lFieldOnLBigObject":
		if e.complexity.LBigObject.LFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.LFieldOnLBigObject(childComplexity), true

	case "LBigObject.mFieldOnLBigObject":
		if e.complexity.LBigObject.MFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.MFieldOnLBigObject(childComplexity), true

	case "LBigObject.nFieldOnLBigObject":
		if e.complexity.LBigObject.NFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.NFieldOnLBigObject(childComplexity), true

	case "LBigObject.oFieldOnLBigObject":
		if e.complexity.LBigObject.OFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.OFieldOnLBigObject(childComplexity), true

	case "LBigObject.pFieldOnLBigObject":
		if e.complexity.LBigObject.PFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.PFieldOnLBigObject(childComplexity), true

	case "LBigObject.qFieldOnLBigObject":
		if e.complexity.LBigObject.QFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.QFieldOnLBigObject(childComplexity), true

	case "LBigObject.rFieldOnLBigObject":
		if e.complexity.LBigObject.RFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.RFieldOnLBigObject(childComplexity), true

	case "LBigObject.sFieldOnLBigObject":
		if e.complexity.LBigObject.SFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.SFieldOnLBigObject(childComplexity), true

	case "LBigObject.tFieldOnLBigObject":
		if e.complexity.LBigObject.TFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.TFieldOnLBigObject(childComplexity), true

	case "LBigObject.uFieldOnLBigObject":
		if e.complexity.LBigObject.UFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.UFieldOnLBigObject(childComplexity), true

	case "LBigObject.vFieldOnLBigObject":
		if e.complexity.LBigObject.VFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.VFieldOnLBigObject(childComplexity), true

	case "LBigObject.wFieldOnLBigObject":
		if e.complexity.LBigObject.WFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.WFieldOnLBigObject(childComplexity), true

	case "LBigObject.xFieldOnLBigObject":
		if e.complexity.LBigObject.XFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.XFieldOnLBigObject(childComplexity), true

	case "LBigObject.yFieldOnLBigObject":
		if e.complexity.LBigObject.YFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.YFieldOnLBigObject(childComplexity), true

	case "LBigObject.zFieldOnLBigObject":
		if e.complexity.LBigObject.ZFieldOnLBigObject == nil {
			break
		}

		return e.complexity.LBigObject.ZFieldOnLBigObject(childComplexity), true

	case "MBigObject.aFieldOnMBigObject":
		if e.complexity.MBigObject.AFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.AFieldOnMBigObject(childComplexity), true

	case "MBigObject.bFieldOnMBigObject":
		if e.complexity.MBigObject.BFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.BFieldOnMBigObject(childComplexity), true

	case "MBigObject.cFieldOnMBigObject":
		if e.complexity.MBigObject.CFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.CFieldOnMBigObject(childComplexity), true

	case "MBigObject.dFieldOnMBigObject":
		if e.complexity.MBigObject.DFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.DFieldOnMBigObject(childComplexity), true

	case "MBigObject.eFieldOnMBigObject":
		if e.complexity.MBigObject.EFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.EFieldOnMBigObject(childComplexity), true

	case "MBigObject.fFieldOnMBigObject":
		if e.complexity.MBigObject.FFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.FFieldOnMBigObject(childComplexity), true

	case "MBigObject.gFieldOnMBigObject":
		if e.complexity.MBigObject.GFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.GFieldOnMBigObject(childComplexity), true

	case "MBigObject.hFieldOnMBigObject":
		if e.complexity.MBigObject.HFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.HFieldOnMBigObject(childComplexity), true

	case "MBigObject.iFieldOnMBigObject":
		if e.complexity.MBigObject.IFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.IFieldOnMBigObject(childComplexity), true

	case "MBigObject.jFieldOnMBigObject":
		if e.complexity.MBigObject.JFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.JFieldOnMBigObject(childComplexity), true

	case "MBigObject.kFieldOnMBigObject":
		if e.complexity.MBigObject.KFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.KFieldOnMBigObject(childComplexity), true

	case "MBigObject.lFieldOnMBigObject":
		if e.complexity.MBigObject.LFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.LFieldOnMBigObject(childComplexity), true

	case "MBigObject.mFieldOnMBigObject":
		if e.complexity.MBigObject.MFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.MFieldOnMBigObject(childComplexity), true

	case "MBigObject.nFieldOnMBigObject":
		if e.complexity.MBigObject.NFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.NFieldOnMBigObject(childComplexity), true

	case "MBigObject.oFieldOnMBigObject":
		if e.complexity.MBigObject.OFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.OFieldOnMBigObject(childComplexity), true

	case "MBigObject.pFieldOnMBigObject":
		if e.complexity.MBigObject.PFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.PFieldOnMBigObject(childComplexity), true

	case "MBigObject.qFieldOnMBigObject":
		if e.complexity.MBigObject.QFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.QFieldOnMBigObject(childComplexity), true

	case "MBigObject.rFieldOnMBigObject":
		if e.complexity.MBigObject.RFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.RFieldOnMBigObject(childComplexity), true

	case "MBigObject.sFieldOnMBigObject":
		if e.complexity.MBigObject.SFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.SFieldOnMBigObject(childComplexity), true

	case "MBigObject.tFieldOnMBigObject":
		if e.complexity.MBigObject.TFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.TFieldOnMBigObject(childComplexity), true

	case "MBigObject.uFieldOnMBigObject":
		if e.complexity.MBigObject.UFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.UFieldOnMBigObject(childComplexity), true

	case "MBigObject.vFieldOnMBigObject":
		if e.complexity.MBigObject.VFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.VFieldOnMBigObject(childComplexity), true

	case "MBigObject.wFieldOnMBigObject":
		if e.complexity.MBigObject.WFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.WFieldOnMBigObject(childComplexity), true

	case "MBigObject.xFieldOnMBigObject":
		if e.complexity.MBigObject.XFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.XFieldOnMBigObject(childComplexity), true

	case "MBigObject.yFieldOnMBigObject":
		if e.complexity.MBigObject.YFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.YFieldOnMBigObject(childComplexity), true

	case "MBigObject.zFieldOnMBigObject":
		if e.complexity.MBigObject.ZFieldOnMBigObject == nil {
			break
		}

		return e.complexity.MBigObject.ZFieldOnMBigObject(childComplexity), true

	case "NBigObject.aFieldOnNBigObject":
		if e.complexity.NBigObject.AFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.AFieldOnNBigObject(childComplexity), true

	case "NBigObject.bFieldOnNBigObject":
		if e.complexity.NBigObject.BFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.BFieldOnNBigObject(childComplexity), true

	case "NBigObject.cFieldOnNBigObject":
		if e.complexity.NBigObject.CFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.CFieldOnNBigObject(childComplexity), true

	case "NBigObject.dFieldOnNBigObject":
		if e.complexity.NBigObject.DFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.DFieldOnNBigObject(childComplexity), true

	case "NBigObject.eFieldOnNBigObject":
		if e.complexity.NBigObject.EFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.EFieldOnNBigObject(childComplexity), true

	case "NBigObject.fFieldOnNBigObject":
		if e.complexity.NBigObject.FFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.FFieldOnNBigObject(childComplexity), true

	case "NBigObject.gFieldOnNBigObject":
		if e.complexity.NBigObject.GFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.GFieldOnNBigObject(childComplexity), true

	case "NBigObject.hFieldOnNBigObject":
		if e.complexity.NBigObject.HFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.HFieldOnNBigObject(childComplexity), true

	case "NBigObject.iFieldOnNBigObject":
		if e.complexity.NBigObject.IFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.IFieldOnNBigObject(childComplexity), true

	case "NBigObject.jFieldOnNBigObject":
		if e.complexity.NBigObject.JFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.JFieldOnNBigObject(childComplexity), true

	case "NBigObject.kFieldOnNBigObject":
		if e.complexity.NBigObject.KFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.KFieldOnNBigObject(childComplexity), true

	case "NBigObject.lFieldOnNBigObject":
		if e.complexity.NBigObject.LFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.LFieldOnNBigObject(childComplexity), true

	case "NBigObject.mFieldOnNBigObject":
		if e.complexity.NBigObject.MFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.MFieldOnNBigObject(childComplexity), true

	case "NBigObject.nFieldOnNBigObject":
		if e.complexity.NBigObject.NFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.NFieldOnNBigObject(childComplexity), true

	case "NBigObject.oFieldOnNBigObject":
		if e.complexity.NBigObject.OFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.OFieldOnNBigObject(childComplexity), true

	case "NBigObject.pFieldOnNBigObject":
		if e.complexity.NBigObject.PFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.PFieldOnNBigObject(childComplexity), true

	case "NBigObject.qFieldOnNBigObject":
		if e.complexity.NBigObject.QFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.QFieldOnNBigObject(childComplexity), true

	case "NBigObject.rFieldOnNBigObject":
		if e.complexity.NBigObject.RFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.RFieldOnNBigObject(childComplexity), true

	case "NBigObject.sFieldOnNBigObject":
		if e.complexity.NBigObject.SFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.SFieldOnNBigObject(childComplexity), true

	case "NBigObject.tFieldOnNBigObject":
		if e.complexity.NBigObject.TFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.TFieldOnNBigObject(childComplexity), true

	case "NBigObject.uFieldOnNBigObject":
		if e.complexity.NBigObject.UFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.UFieldOnNBigObject(childComplexity), true

	case "NBigObject.vFieldOnNBigObject":
		if e.complexity.NBigObject.VFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.VFieldOnNBigObject(childComplexity), true

	case "NBigObject.wFieldOnNBigObject":
		if e.complexity.NBigObject.WFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.WFieldOnNBigObject(childComplexity), true

	case "NBigObject.xFieldOnNBigObject":
		if e.complexity.NBigObject.XFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.XFieldOnNBigObject(childComplexity), true

	case "NBigObject.yFieldOnNBigObject":
		if e.complexity.NBigObject.YFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.YFieldOnNBigObject(childComplexity), true

	case "NBigObject.zFieldOnNBigObject":
		if e.complexity.NBigObject.ZFieldOnNBigObject == nil {
			break
		}

		return e.complexity.NBigObject.ZFieldOnNBigObject(childComplexity), true

	case "NestedObject.deeplyNestedObjects":
		if e.complexity.NestedObject.DeeplyNestedObjects == nil {
			break
		}

		return e.complexity.NestedObject.DeeplyNestedObjects(childComplexity), true

	case "OBigObject.aFieldOnOBigObject":
		if e.complexity.OBigObject.AFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.AFieldOnOBigObject(childComplexity), true

	case "OBigObject.bFieldOnOBigObject":
		if e.complexity.OBigObject.BFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.BFieldOnOBigObject(childComplexity), true

	case "OBigObject.cFieldOnOBigObject":
		if e.complexity.OBigObject.CFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.CFieldOnOBigObject(childComplexity), true

	case "OBigObject.dFieldOnOBigObject":
		if e.complexity.OBigObject.DFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.DFieldOnOBigObject(childComplexity), true

	case "OBigObject.eFieldOnOBigObject":
		if e.complexity.OBigObject.EFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.EFieldOnOBigObject(childComplexity), true

	case "OBigObject.fFieldOnOBigObject":
		if e.complexity.OBigObject.FFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.FFieldOnOBigObject(childComplexity), true

	case "OBigObject.gFieldOnOBigObject":
		if e.complexity.OBigObject.GFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.GFieldOnOBigObject(childComplexity), true

	case "OBigObject.hFieldOnOBigObject":
		if e.complexity.OBigObject.HFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.HFieldOnOBigObject(childComplexity), true

	case "OBigObject.iFieldOnOBigObject":
		if e.complexity.OBigObject.IFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.IFieldOnOBigObject(childComplexity), true

	case "OBigObject.jFieldOnOBigObject":
		if e.complexity.OBigObject.JFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.JFieldOnOBigObject(childComplexity), true

	case "OBigObject.kFieldOnOBigObject":
		if e.complexity.OBigObject.KFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.KFieldOnOBigObject(childComplexity), true

	case "OBigObject.lFieldOnOBigObject":
		if e.complexity.OBigObject.LFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.LFieldOnOBigObject(childComplexity), true

	case "OBigObject.mFieldOnOBigObject":
		if e.complexity.OBigObject.MFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.MFieldOnOBigObject(childComplexity), true

	case "OBigObject.nFieldOnOBigObject":
		if e.complexity.OBigObject.NFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.NFieldOnOBigObject(childComplexity), true

	case "OBigObject.oFieldOnOBigObject":
		if e.complexity.OBigObject.OFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.OFieldOnOBigObject(childComplexity), true

	case "OBigObject.pFieldOnOBigObject":
		if e.complexity.OBigObject.PFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.PFieldOnOBigObject(childComplexity), true

	case "OBigObject.qFieldOnOBigObject":
		if e.complexity.OBigObject.QFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.QFieldOnOBigObject(childComplexity), true

	case "OBigObject.rFieldOnOBigObject":
		if e.complexity.OBigObject.RFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.RFieldOnOBigObject(childComplexity), true

	case "OBigObject.sFieldOnOBigObject":
		if e.complexity.OBigObject.SFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.SFieldOnOBigObject(childComplexity), true

	case "OBigObject.tFieldOnOBigObject":
		if e.complexity.OBigObject.TFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.TFieldOnOBigObject(childComplexity), true

	case "OBigObject.uFieldOnOBigObject":
		if e.complexity.OBigObject.UFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.UFieldOnOBigObject(childComplexity), true

	case "OBigObject.vFieldOnOBigObject":
		if e.complexity.OBigObject.VFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.VFieldOnOBigObject(childComplexity), true

	case "OBigObject.wFieldOnOBigObject":
		if e.complexity.OBigObject.WFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.WFieldOnOBigObject(childComplexity), true

	case "OBigObject.xFieldOnOBigObject":
		if e.complexity.OBigObject.XFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.XFieldOnOBigObject(childComplexity), true

	case "OBigObject.yFieldOnOBigObject":
		if e.complexity.OBigObject.YFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.YFieldOnOBigObject(childComplexity), true

	case "OBigObject.zFieldOnOBigObject":
		if e.complexity.OBigObject.ZFieldOnOBigObject == nil {
			break
		}

		return e.complexity.OBigObject.ZFieldOnOBigObject(childComplexity), true

	case "PBigObject.aFieldOnPBigObject":
		if e.complexity.PBigObject.AFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.AFieldOnPBigObject(childComplexity), true

	case "PBigObject.bFieldOnPBigObject":
		if e.complexity.PBigObject.BFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.BFieldOnPBigObject(childComplexity), true

	case "PBigObject.cFieldOnPBigObject":
		if e.complexity.PBigObject.CFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.CFieldOnPBigObject(childComplexity), true

	case "PBigObject.dFieldOnPBigObject":
		if e.complexity.PBigObject.DFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.DFieldOnPBigObject(childComplexity), true

	case "PBigObject.eFieldOnPBigObject":
		if e.complexity.PBigObject.EFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.EFieldOnPBigObject(childComplexity), true

	case "PBigObject.fFieldOnPBigObject":
		if e.complexity.PBigObject.FFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.FFieldOnPBigObject(childComplexity), true

	case "PBigObject.gFieldOnPBigObject":
		if e.complexity.PBigObject.GFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.GFieldOnPBigObject(childComplexity), true

	case "PBigObject.hFieldOnPBigObject":
		if e.complexity.PBigObject.HFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.HFieldOnPBigObject(childComplexity), true

	case "PBigObject.iFieldOnPBigObject":
		if e.complexity.PBigObject.IFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.IFieldOnPBigObject(childComplexity), true

	case "PBigObject.jFieldOnPBigObject":
		if e.complexity.PBigObject.JFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.JFieldOnPBigObject(childComplexity), true

	case "PBigObject.kFieldOnPBigObject":
		if e.complexity.PBigObject.KFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.KFieldOnPBigObject(childComplexity), true

	case "PBigObject.lFieldOnPBigObject":
		if e.complexity.PBigObject.LFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.LFieldOnPBigObject(childComplexity), true

	case "PBigObject.mFieldOnPBigObject":
		if e.complexity.PBigObject.MFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.MFieldOnPBigObject(childComplexity), true

	case "PBigObject.nFieldOnPBigObject":
		if e.complexity.PBigObject.NFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.NFieldOnPBigObject(childComplexity), true

	case "PBigObject.oFieldOnPBigObject":
		if e.complexity.PBigObject.OFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.OFieldOnPBigObject(childComplexity), true

	case "PBigObject.pFieldOnPBigObject":
		if e.complexity.PBigObject.PFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.PFieldOnPBigObject(childComplexity), true

	case "PBigObject.qFieldOnPBigObject":
		if e.complexity.PBigObject.QFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.QFieldOnPBigObject(childComplexity), true

	case "PBigObject.rFieldOnPBigObject":
		if e.complexity.PBigObject.RFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.RFieldOnPBigObject(childComplexity), true

	case "PBigObject.sFieldOnPBigObject":
		if e.complexity.PBigObject.SFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.SFieldOnPBigObject(childComplexity), true

	case "PBigObject.tFieldOnPBigObject":
		if e.complexity.PBigObject.TFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.TFieldOnPBigObject(childComplexity), true

	case "PBigObject.uFieldOnPBigObject":
		if e.complexity.PBigObject.UFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.UFieldOnPBigObject(childComplexity), true

	case "PBigObject.vFieldOnPBigObject":
		if e.complexity.PBigObject.VFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.VFieldOnPBigObject(childComplexity), true

	case "PBigObject.wFieldOnPBigObject":
		if e.complexity.PBigObject.WFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.WFieldOnPBigObject(childComplexity), true

	case "PBigObject.xFieldOnPBigObject":
		if e.complexity.PBigObject.XFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.XFieldOnPBigObject(childComplexity), true

	case "PBigObject.yFieldOnPBigObject":
		if e.complexity.PBigObject.YFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.YFieldOnPBigObject(childComplexity), true

	case "PBigObject.zFieldOnPBigObject":
		if e.complexity.PBigObject.ZFieldOnPBigObject == nil {
			break
		}

		return e.complexity.PBigObject.ZFieldOnPBigObject(childComplexity), true

	case "QBigObject.aFieldOnQBigObject":
		if e.complexity.QBigObject.AFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.AFieldOnQBigObject(childComplexity), true

	case "QBigObject.bFieldOnQBigObject":
		if e.complexity.QBigObject.BFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.BFieldOnQBigObject(childComplexity), true

	case "QBigObject.cFieldOnQBigObject":
		if e.complexity.QBigObject.CFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.CFieldOnQBigObject(childComplexity), true

	case "QBigObject.dFieldOnQBigObject":
		if e.complexity.QBigObject.DFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.DFieldOnQBigObject(childComplexity), true

	case "QBigObject.eFieldOnQBigObject":
		if e.complexity.QBigObject.EFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.EFieldOnQBigObject(childComplexity), true

	case "QBigObject.fFieldOnQBigObject":
		if e.complexity.QBigObject.FFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.FFieldOnQBigObject(childComplexity), true

	case "QBigObject.gFieldOnQBigObject":
		if e.complexity.QBigObject.GFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.GFieldOnQBigObject(childComplexity), true

	case "QBigObject.hFieldOnQBigObject":
		if e.complexity.QBigObject.HFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.HFieldOnQBigObject(childComplexity), true

	case "QBigObject.iFieldOnQBigObject":
		if e.complexity.QBigObject.IFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.IFieldOnQBigObject(childComplexity), true

	case "QBigObject.jFieldOnQBigObject":
		if e.complexity.QBigObject.JFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.JFieldOnQBigObject(childComplexity), true

	case "QBigObject.kFieldOnQBigObject":
		if e.complexity.QBigObject.KFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.KFieldOnQBigObject(childComplexity), true

	case "QBigObject.lFieldOnQBigObject":
		if e.complexity.QBigObject.LFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.LFieldOnQBigObject(childComplexity), true

	case "QBigObject.mFieldOnQBigObject":
		if e.complexity.QBigObject.MFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.MFieldOnQBigObject(childComplexity), true

	case "QBigObject.nFieldOnQBigObject":
		if e.complexity.QBigObject.NFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.NFieldOnQBigObject(childComplexity), true

	case "QBigObject.oFieldOnQBigObject":
		if e.complexity.QBigObject.OFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.OFieldOnQBigObject(childComplexity), true

	case "QBigObject.pFieldOnQBigObject":
		if e.complexity.QBigObject.PFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.PFieldOnQBigObject(childComplexity), true

	case "QBigObject.qFieldOnQBigObject":
		if e.complexity.QBigObject.QFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.QFieldOnQBigObject(childComplexity), true

	case "QBigObject.rFieldOnQBigObject":
		if e.complexity.QBigObject.RFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.RFieldOnQBigObject(childComplexity), true

	case "QBigObject.sFieldOnQBigObject":
		if e.complexity.QBigObject.SFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.SFieldOnQBigObject(childComplexity), true

	case "QBigObject.tFieldOnQBigObject":
		if e.complexity.QBigObject.TFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.TFieldOnQBigObject(childComplexity), true

	case "QBigObject.uFieldOnQBigObject":
		if e.complexity.QBigObject.UFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.UFieldOnQBigObject(childComplexity), true

	case "QBigObject.vFieldOnQBigObject":
		if e.complexity.QBigObject.VFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.VFieldOnQBigObject(childComplexity), true

	case "QBigObject.wFieldOnQBigObject":
		if e.complexity.QBigObject.WFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.WFieldOnQBigObject(childComplexity), true

	case "QBigObject.xFieldOnQBigObject":
		if e.complexity.QBigObject.XFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.XFieldOnQBigObject(childComplexity), true

	case "QBigObject.yFieldOnQBigObject":
		if e.complexity.QBigObject.YFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.YFieldOnQBigObject(childComplexity), true

	case "QBigObject.zFieldOnQBigObject":
		if e.complexity.QBigObject.ZFieldOnQBigObject == nil {
			break
		}

		return e.complexity.QBigObject.ZFieldOnQBigObject(childComplexity), true

	case "Query.bigAbstractResponse":
		if e.complexity.Query.BigAbstractResponse == nil {
			break
		}

		return e.complexity.Query.BigAbstractResponse(childComplexity), true

	case "Query.bigResponse":
		if e.complexity.Query.BigResponse == nil {
			break
		}

		args, err := ec.field_Query_bigResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BigResponse(childComplexity, args["artificialDelay"].(int), args["bigObjects"].(int), args["nestedObjects"].(int), args["deeplyNestedObjects"].(int)), true

	case "Query.delay":
		if e.complexity.Query.Delay == nil {
			break
		}

		args, err := ec.field_Query_delay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Delay(childComplexity, args["response"].(string), args["ms"].(int)), true

	case "Query.floatField":
		if e.complexity.Query.FloatField == nil {
			break
		}

		args, err := ec.field_Query_floatField_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FloatField(childComplexity, args["arg"].(*float64)), true

	case "Query.headerValue":
		if e.complexity.Query.HeaderValue == nil {
			break
		}

		args, err := ec.field_Query_headerValue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HeaderValue(childComplexity, args["name"].(string)), true

	case "Query.initPayloadValue":
		if e.complexity.Query.InitPayloadValue == nil {
			break
		}

		args, err := ec.field_Query_initPayloadValue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InitPayloadValue(childComplexity, args["key"].(string)), true

	case "Query.initialPayload":
		if e.complexity.Query.InitialPayload == nil {
			break
		}

		return e.complexity.Query.InitialPayload(childComplexity), true

	case "Query.rootFieldWithInput":
		if e.complexity.Query.RootFieldWithInput == nil {
			break
		}

		args, err := ec.field_Query_rootFieldWithInput_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RootFieldWithInput(childComplexity, args["arg"].(model.InputArg)), true

	case "Query.rootFieldWithListArg":
		if e.complexity.Query.RootFieldWithListArg == nil {
			break
		}

		args, err := ec.field_Query_rootFieldWithListArg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RootFieldWithListArg(childComplexity, args["arg"].([]string)), true

	case "Query.rootFieldWithListOfEnumArg":
		if e.complexity.Query.RootFieldWithListOfEnumArg == nil {
			break
		}

		args, err := ec.field_Query_rootFieldWithListOfEnumArg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RootFieldWithListOfEnumArg(childComplexity, args["arg"].([]model.EnumType)), true

	case "Query.rootFieldWithListOfInputArg":
		if e.complexity.Query.RootFieldWithListOfInputArg == nil {
			break
		}

		args, err := ec.field_Query_rootFieldWithListOfInputArg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RootFieldWithListOfInputArg(childComplexity, args["arg"].([]*model.InputType)), true

	case "Query.rootFieldWithNestedListArg":
		if e.complexity.Query.RootFieldWithNestedListArg == nil {
			break
		}

		args, err := ec.field_Query_rootFieldWithNestedListArg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RootFieldWithNestedListArg(childComplexity, args["arg"].([][]string)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "RBigObject.aFieldOnRBigObject":
		if e.complexity.RBigObject.AFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.AFieldOnRBigObject(childComplexity), true

	case "RBigObject.bFieldOnRBigObject":
		if e.complexity.RBigObject.BFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.BFieldOnRBigObject(childComplexity), true

	case "RBigObject.cFieldOnRBigObject":
		if e.complexity.RBigObject.CFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.CFieldOnRBigObject(childComplexity), true

	case "RBigObject.dFieldOnRBigObject":
		if e.complexity.RBigObject.DFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.DFieldOnRBigObject(childComplexity), true

	case "RBigObject.eFieldOnRBigObject":
		if e.complexity.RBigObject.EFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.EFieldOnRBigObject(childComplexity), true

	case "RBigObject.fFieldOnRBigObject":
		if e.complexity.RBigObject.FFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.FFieldOnRBigObject(childComplexity), true

	case "RBigObject.gFieldOnRBigObject":
		if e.complexity.RBigObject.GFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.GFieldOnRBigObject(childComplexity), true

	case "RBigObject.hFieldOnRBigObject":
		if e.complexity.RBigObject.HFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.HFieldOnRBigObject(childComplexity), true

	case "RBigObject.iFieldOnRBigObject":
		if e.complexity.RBigObject.IFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.IFieldOnRBigObject(childComplexity), true

	case "RBigObject.jFieldOnRBigObject":
		if e.complexity.RBigObject.JFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.JFieldOnRBigObject(childComplexity), true

	case "RBigObject.kFieldOnRBigObject":
		if e.complexity.RBigObject.KFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.KFieldOnRBigObject(childComplexity), true

	case "RBigObject.lFieldOnRBigObject":
		if e.complexity.RBigObject.LFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.LFieldOnRBigObject(childComplexity), true

	case "RBigObject.mFieldOnRBigObject":
		if e.complexity.RBigObject.MFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.MFieldOnRBigObject(childComplexity), true

	case "RBigObject.nFieldOnRBigObject":
		if e.complexity.RBigObject.NFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.NFieldOnRBigObject(childComplexity), true

	case "RBigObject.oFieldOnRBigObject":
		if e.complexity.RBigObject.OFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.OFieldOnRBigObject(childComplexity), true

	case "RBigObject.pFieldOnRBigObject":
		if e.complexity.RBigObject.PFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.PFieldOnRBigObject(childComplexity), true

	case "RBigObject.qFieldOnRBigObject":
		if e.complexity.RBigObject.QFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.QFieldOnRBigObject(childComplexity), true

	case "RBigObject.rFieldOnRBigObject":
		if e.complexity.RBigObject.RFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.RFieldOnRBigObject(childComplexity), true

	case "RBigObject.sFieldOnRBigObject":
		if e.complexity.RBigObject.SFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.SFieldOnRBigObject(childComplexity), true

	case "RBigObject.tFieldOnRBigObject":
		if e.complexity.RBigObject.TFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.TFieldOnRBigObject(childComplexity), true

	case "RBigObject.uFieldOnRBigObject":
		if e.complexity.RBigObject.UFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.UFieldOnRBigObject(childComplexity), true

	case "RBigObject.vFieldOnRBigObject":
		if e.complexity.RBigObject.VFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.VFieldOnRBigObject(childComplexity), true

	case "RBigObject.wFieldOnRBigObject":
		if e.complexity.RBigObject.WFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.WFieldOnRBigObject(childComplexity), true

	case "RBigObject.xFieldOnRBigObject":
		if e.complexity.RBigObject.XFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.XFieldOnRBigObject(childComplexity), true

	case "RBigObject.yFieldOnRBigObject":
		if e.complexity.RBigObject.YFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.YFieldOnRBigObject(childComplexity), true

	case "RBigObject.zFieldOnRBigObject":
		if e.complexity.RBigObject.ZFieldOnRBigObject == nil {
			break
		}

		return e.complexity.RBigObject.ZFieldOnRBigObject(childComplexity), true

	case "SBigObject.aFieldOnSBigObject":
		if e.complexity.SBigObject.AFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.AFieldOnSBigObject(childComplexity), true

	case "SBigObject.bFieldOnSBigObject":
		if e.complexity.SBigObject.BFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.BFieldOnSBigObject(childComplexity), true

	case "SBigObject.cFieldOnSBigObject":
		if e.complexity.SBigObject.CFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.CFieldOnSBigObject(childComplexity), true

	case "SBigObject.dFieldOnSBigObject":
		if e.complexity.SBigObject.DFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.DFieldOnSBigObject(childComplexity), true

	case "SBigObject.eFieldOnSBigObject":
		if e.complexity.SBigObject.EFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.EFieldOnSBigObject(childComplexity), true

	case "SBigObject.fFieldOnSBigObject":
		if e.complexity.SBigObject.FFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.FFieldOnSBigObject(childComplexity), true

	case "SBigObject.gFieldOnSBigObject":
		if e.complexity.SBigObject.GFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.GFieldOnSBigObject(childComplexity), true

	case "SBigObject.hFieldOnSBigObject":
		if e.complexity.SBigObject.HFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.HFieldOnSBigObject(childComplexity), true

	case "SBigObject.iFieldOnSBigObject":
		if e.complexity.SBigObject.IFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.IFieldOnSBigObject(childComplexity), true

	case "SBigObject.jFieldOnSBigObject":
		if e.complexity.SBigObject.JFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.JFieldOnSBigObject(childComplexity), true

	case "SBigObject.kFieldOnSBigObject":
		if e.complexity.SBigObject.KFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.KFieldOnSBigObject(childComplexity), true

	case "SBigObject.lFieldOnSBigObject":
		if e.complexity.SBigObject.LFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.LFieldOnSBigObject(childComplexity), true

	case "SBigObject.mFieldOnSBigObject":
		if e.complexity.SBigObject.MFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.MFieldOnSBigObject(childComplexity), true

	case "SBigObject.nFieldOnSBigObject":
		if e.complexity.SBigObject.NFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.NFieldOnSBigObject(childComplexity), true

	case "SBigObject.oFieldOnSBigObject":
		if e.complexity.SBigObject.OFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.OFieldOnSBigObject(childComplexity), true

	case "SBigObject.pFieldOnSBigObject":
		if e.complexity.SBigObject.PFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.PFieldOnSBigObject(childComplexity), true

	case "SBigObject.qFieldOnSBigObject":
		if e.complexity.SBigObject.QFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.QFieldOnSBigObject(childComplexity), true

	case "SBigObject.rFieldOnSBigObject":
		if e.complexity.SBigObject.RFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.RFieldOnSBigObject(childComplexity), true

	case "SBigObject.sFieldOnSBigObject":
		if e.complexity.SBigObject.SFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.SFieldOnSBigObject(childComplexity), true

	case "SBigObject.tFieldOnSBigObject":
		if e.complexity.SBigObject.TFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.TFieldOnSBigObject(childComplexity), true

	case "SBigObject.uFieldOnSBigObject":
		if e.complexity.SBigObject.UFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.UFieldOnSBigObject(childComplexity), true

	case "SBigObject.vFieldOnSBigObject":
		if e.complexity.SBigObject.VFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.VFieldOnSBigObject(childComplexity), true

	case "SBigObject.wFieldOnSBigObject":
		if e.complexity.SBigObject.WFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.WFieldOnSBigObject(childComplexity), true

	case "SBigObject.xFieldOnSBigObject":
		if e.complexity.SBigObject.XFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.XFieldOnSBigObject(childComplexity), true

	case "SBigObject.yFieldOnSBigObject":
		if e.complexity.SBigObject.YFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.YFieldOnSBigObject(childComplexity), true

	case "SBigObject.zFieldOnSBigObject":
		if e.complexity.SBigObject.ZFieldOnSBigObject == nil {
			break
		}

		return e.complexity.SBigObject.ZFieldOnSBigObject(childComplexity), true

	case "Subscription.headerValue":
		if e.complexity.Subscription.HeaderValue == nil {
			break
		}

		args, err := ec.field_Subscription_headerValue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.HeaderValue(childComplexity, args["name"].(string), args["repeat"].(*int)), true

	case "Subscription.initPayloadValue":
		if e.complexity.Subscription.InitPayloadValue == nil {
			break
		}

		args, err := ec.field_Subscription_initPayloadValue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.InitPayloadValue(childComplexity, args["key"].(string), args["repeat"].(*int)), true

	case "Subscription.initialPayload":
		if e.complexity.Subscription.InitialPayload == nil {
			break
		}

		args, err := ec.field_Subscription_initialPayload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.InitialPayload(childComplexity, args["repeat"].(*int)), true

	case "Subscription.returnsError":
		if e.complexity.Subscription.ReturnsError == nil {
			break
		}

		return e.complexity.Subscription.ReturnsError(childComplexity), true

	case "TBigObject.aFieldOnTBigObject":
		if e.complexity.TBigObject.AFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.AFieldOnTBigObject(childComplexity), true

	case "TBigObject.bFieldOnTBigObject":
		if e.complexity.TBigObject.BFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.BFieldOnTBigObject(childComplexity), true

	case "TBigObject.cFieldOnTBigObject":
		if e.complexity.TBigObject.CFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.CFieldOnTBigObject(childComplexity), true

	case "TBigObject.dFieldOnTBigObject":
		if e.complexity.TBigObject.DFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.DFieldOnTBigObject(childComplexity), true

	case "TBigObject.eFieldOnTBigObject":
		if e.complexity.TBigObject.EFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.EFieldOnTBigObject(childComplexity), true

	case "TBigObject.fFieldOnTBigObject":
		if e.complexity.TBigObject.FFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.FFieldOnTBigObject(childComplexity), true

	case "TBigObject.gFieldOnTBigObject":
		if e.complexity.TBigObject.GFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.GFieldOnTBigObject(childComplexity), true

	case "TBigObject.hFieldOnTBigObject":
		if e.complexity.TBigObject.HFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.HFieldOnTBigObject(childComplexity), true

	case "TBigObject.iFieldOnTBigObject":
		if e.complexity.TBigObject.IFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.IFieldOnTBigObject(childComplexity), true

	case "TBigObject.jFieldOnTBigObject":
		if e.complexity.TBigObject.JFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.JFieldOnTBigObject(childComplexity), true

	case "TBigObject.kFieldOnTBigObject":
		if e.complexity.TBigObject.KFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.KFieldOnTBigObject(childComplexity), true

	case "TBigObject.lFieldOnTBigObject":
		if e.complexity.TBigObject.LFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.LFieldOnTBigObject(childComplexity), true

	case "TBigObject.mFieldOnTBigObject":
		if e.complexity.TBigObject.MFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.MFieldOnTBigObject(childComplexity), true

	case "TBigObject.nFieldOnTBigObject":
		if e.complexity.TBigObject.NFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.NFieldOnTBigObject(childComplexity), true

	case "TBigObject.oFieldOnTBigObject":
		if e.complexity.TBigObject.OFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.OFieldOnTBigObject(childComplexity), true

	case "TBigObject.pFieldOnTBigObject":
		if e.complexity.TBigObject.PFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.PFieldOnTBigObject(childComplexity), true

	case "TBigObject.qFieldOnTBigObject":
		if e.complexity.TBigObject.QFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.QFieldOnTBigObject(childComplexity), true

	case "TBigObject.rFieldOnTBigObject":
		if e.complexity.TBigObject.RFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.RFieldOnTBigObject(childComplexity), true

	case "TBigObject.sFieldOnTBigObject":
		if e.complexity.TBigObject.SFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.SFieldOnTBigObject(childComplexity), true

	case "TBigObject.tFieldOnTBigObject":
		if e.complexity.TBigObject.TFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.TFieldOnTBigObject(childComplexity), true

	case "TBigObject.uFieldOnTBigObject":
		if e.complexity.TBigObject.UFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.UFieldOnTBigObject(childComplexity), true

	case "TBigObject.vFieldOnTBigObject":
		if e.complexity.TBigObject.VFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.VFieldOnTBigObject(childComplexity), true

	case "TBigObject.wFieldOnTBigObject":
		if e.complexity.TBigObject.WFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.WFieldOnTBigObject(childComplexity), true

	case "TBigObject.xFieldOnTBigObject":
		if e.complexity.TBigObject.XFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.XFieldOnTBigObject(childComplexity), true

	case "TBigObject.yFieldOnTBigObject":
		if e.complexity.TBigObject.YFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.YFieldOnTBigObject(childComplexity), true

	case "TBigObject.zFieldOnTBigObject":
		if e.complexity.TBigObject.ZFieldOnTBigObject == nil {
			break
		}

		return e.complexity.TBigObject.ZFieldOnTBigObject(childComplexity), true

	case "TimestampedString.initialPayload":
		if e.complexity.TimestampedString.InitialPayload == nil {
			break
		}

		return e.complexity.TimestampedString.InitialPayload(childComplexity), true

	case "TimestampedString.seq":
		if e.complexity.TimestampedString.Seq == nil {
			break
		}

		return e.complexity.TimestampedString.Seq(childComplexity), true

	case "TimestampedString.total":
		if e.complexity.TimestampedString.Total == nil {
			break
		}

		return e.complexity.TimestampedString.Total(childComplexity), true

	case "TimestampedString.unixTime":
		if e.complexity.TimestampedString.UnixTime == nil {
			break
		}

		return e.complexity.TimestampedString.UnixTime(childComplexity), true

	case "TimestampedString.value":
		if e.complexity.TimestampedString.Value == nil {
			break
		}

		return e.complexity.TimestampedString.Value(childComplexity), true

	case "UBigObject.aFieldOnUBigObject":
		if e.complexity.UBigObject.AFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.AFieldOnUBigObject(childComplexity), true

	case "UBigObject.bFieldOnUBigObject":
		if e.complexity.UBigObject.BFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.BFieldOnUBigObject(childComplexity), true

	case "UBigObject.cFieldOnUBigObject":
		if e.complexity.UBigObject.CFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.CFieldOnUBigObject(childComplexity), true

	case "UBigObject.dFieldOnUBigObject":
		if e.complexity.UBigObject.DFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.DFieldOnUBigObject(childComplexity), true

	case "UBigObject.eFieldOnUBigObject":
		if e.complexity.UBigObject.EFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.EFieldOnUBigObject(childComplexity), true

	case "UBigObject.fFieldOnUBigObject":
		if e.complexity.UBigObject.FFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.FFieldOnUBigObject(childComplexity), true

	case "UBigObject.gFieldOnUBigObject":
		if e.complexity.UBigObject.GFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.GFieldOnUBigObject(childComplexity), true

	case "UBigObject.hFieldOnUBigObject":
		if e.complexity.UBigObject.HFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.HFieldOnUBigObject(childComplexity), true

	case "UBigObject.iFieldOnUBigObject":
		if e.complexity.UBigObject.IFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.IFieldOnUBigObject(childComplexity), true

	case "UBigObject.jFieldOnUBigObject":
		if e.complexity.UBigObject.JFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.JFieldOnUBigObject(childComplexity), true

	case "UBigObject.kFieldOnUBigObject":
		if e.complexity.UBigObject.KFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.KFieldOnUBigObject(childComplexity), true

	case "UBigObject.lFieldOnUBigObject":
		if e.complexity.UBigObject.LFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.LFieldOnUBigObject(childComplexity), true

	case "UBigObject.mFieldOnUBigObject":
		if e.complexity.UBigObject.MFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.MFieldOnUBigObject(childComplexity), true

	case "UBigObject.nFieldOnUBigObject":
		if e.complexity.UBigObject.NFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.NFieldOnUBigObject(childComplexity), true

	case "UBigObject.oFieldOnUBigObject":
		if e.complexity.UBigObject.OFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.OFieldOnUBigObject(childComplexity), true

	case "UBigObject.pFieldOnUBigObject":
		if e.complexity.UBigObject.PFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.PFieldOnUBigObject(childComplexity), true

	case "UBigObject.qFieldOnUBigObject":
		if e.complexity.UBigObject.QFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.QFieldOnUBigObject(childComplexity), true

	case "UBigObject.rFieldOnUBigObject":
		if e.complexity.UBigObject.RFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.RFieldOnUBigObject(childComplexity), true

	case "UBigObject.sFieldOnUBigObject":
		if e.complexity.UBigObject.SFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.SFieldOnUBigObject(childComplexity), true

	case "UBigObject.tFieldOnUBigObject":
		if e.complexity.UBigObject.TFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.TFieldOnUBigObject(childComplexity), true

	case "UBigObject.uFieldOnUBigObject":
		if e.complexity.UBigObject.UFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.UFieldOnUBigObject(childComplexity), true

	case "UBigObject.vFieldOnUBigObject":
		if e.complexity.UBigObject.VFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.VFieldOnUBigObject(childComplexity), true

	case "UBigObject.wFieldOnUBigObject":
		if e.complexity.UBigObject.WFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.WFieldOnUBigObject(childComplexity), true

	case "UBigObject.xFieldOnUBigObject":
		if e.complexity.UBigObject.XFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.XFieldOnUBigObject(childComplexity), true

	case "UBigObject.yFieldOnUBigObject":
		if e.complexity.UBigObject.YFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.YFieldOnUBigObject(childComplexity), true

	case "UBigObject.zFieldOnUBigObject":
		if e.complexity.UBigObject.ZFieldOnUBigObject == nil {
			break
		}

		return e.complexity.UBigObject.ZFieldOnUBigObject(childComplexity), true

	case "VBigObject.aFieldOnVBigObject":
		if e.complexity.VBigObject.AFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.AFieldOnVBigObject(childComplexity), true

	case "VBigObject.bFieldOnVBigObject":
		if e.complexity.VBigObject.BFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.BFieldOnVBigObject(childComplexity), true

	case "VBigObject.cFieldOnVBigObject":
		if e.complexity.VBigObject.CFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.CFieldOnVBigObject(childComplexity), true

	case "VBigObject.dFieldOnVBigObject":
		if e.complexity.VBigObject.DFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.DFieldOnVBigObject(childComplexity), true

	case "VBigObject.eFieldOnVBigObject":
		if e.complexity.VBigObject.EFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.EFieldOnVBigObject(childComplexity), true

	case "VBigObject.fFieldOnVBigObject":
		if e.complexity.VBigObject.FFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.FFieldOnVBigObject(childComplexity), true

	case "VBigObject.gFieldOnVBigObject":
		if e.complexity.VBigObject.GFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.GFieldOnVBigObject(childComplexity), true

	case "VBigObject.hFieldOnVBigObject":
		if e.complexity.VBigObject.HFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.HFieldOnVBigObject(childComplexity), true

	case "VBigObject.iFieldOnVBigObject":
		if e.complexity.VBigObject.IFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.IFieldOnVBigObject(childComplexity), true

	case "VBigObject.jFieldOnVBigObject":
		if e.complexity.VBigObject.JFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.JFieldOnVBigObject(childComplexity), true

	case "VBigObject.kFieldOnVBigObject":
		if e.complexity.VBigObject.KFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.KFieldOnVBigObject(childComplexity), true

	case "VBigObject.lFieldOnVBigObject":
		if e.complexity.VBigObject.LFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.LFieldOnVBigObject(childComplexity), true

	case "VBigObject.mFieldOnVBigObject":
		if e.complexity.VBigObject.MFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.MFieldOnVBigObject(childComplexity), true

	case "VBigObject.nFieldOnVBigObject":
		if e.complexity.VBigObject.NFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.NFieldOnVBigObject(childComplexity), true

	case "VBigObject.oFieldOnVBigObject":
		if e.complexity.VBigObject.OFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.OFieldOnVBigObject(childComplexity), true

	case "VBigObject.pFieldOnVBigObject":
		if e.complexity.VBigObject.PFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.PFieldOnVBigObject(childComplexity), true

	case "VBigObject.qFieldOnVBigObject":
		if e.complexity.VBigObject.QFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.QFieldOnVBigObject(childComplexity), true

	case "VBigObject.rFieldOnVBigObject":
		if e.complexity.VBigObject.RFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.RFieldOnVBigObject(childComplexity), true

	case "VBigObject.sFieldOnVBigObject":
		if e.complexity.VBigObject.SFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.SFieldOnVBigObject(childComplexity), true

	case "VBigObject.tFieldOnVBigObject":
		if e.complexity.VBigObject.TFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.TFieldOnVBigObject(childComplexity), true

	case "VBigObject.uFieldOnVBigObject":
		if e.complexity.VBigObject.UFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.UFieldOnVBigObject(childComplexity), true

	case "VBigObject.vFieldOnVBigObject":
		if e.complexity.VBigObject.VFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.VFieldOnVBigObject(childComplexity), true

	case "VBigObject.wFieldOnVBigObject":
		if e.complexity.VBigObject.WFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.WFieldOnVBigObject(childComplexity), true

	case "VBigObject.xFieldOnVBigObject":
		if e.complexity.VBigObject.XFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.XFieldOnVBigObject(childComplexity), true

	case "VBigObject.yFieldOnVBigObject":
		if e.complexity.VBigObject.YFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.YFieldOnVBigObject(childComplexity), true

	case "VBigObject.zFieldOnVBigObject":
		if e.complexity.VBigObject.ZFieldOnVBigObject == nil {
			break
		}

		return e.complexity.VBigObject.ZFieldOnVBigObject(childComplexity), true

	case "WBigObject.aFieldOnWBigObject":
		if e.complexity.WBigObject.AFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.AFieldOnWBigObject(childComplexity), true

	case "WBigObject.bFieldOnWBigObject":
		if e.complexity.WBigObject.BFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.BFieldOnWBigObject(childComplexity), true

	case "WBigObject.cFieldOnWBigObject":
		if e.complexity.WBigObject.CFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.CFieldOnWBigObject(childComplexity), true

	case "WBigObject.dFieldOnWBigObject":
		if e.complexity.WBigObject.DFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.DFieldOnWBigObject(childComplexity), true

	case "WBigObject.eFieldOnWBigObject":
		if e.complexity.WBigObject.EFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.EFieldOnWBigObject(childComplexity), true

	case "WBigObject.fFieldOnWBigObject":
		if e.complexity.WBigObject.FFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.FFieldOnWBigObject(childComplexity), true

	case "WBigObject.gFieldOnWBigObject":
		if e.complexity.WBigObject.GFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.GFieldOnWBigObject(childComplexity), true

	case "WBigObject.hFieldOnWBigObject":
		if e.complexity.WBigObject.HFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.HFieldOnWBigObject(childComplexity), true

	case "WBigObject.iFieldOnWBigObject":
		if e.complexity.WBigObject.IFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.IFieldOnWBigObject(childComplexity), true

	case "WBigObject.jFieldOnWBigObject":
		if e.complexity.WBigObject.JFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.JFieldOnWBigObject(childComplexity), true

	case "WBigObject.kFieldOnWBigObject":
		if e.complexity.WBigObject.KFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.KFieldOnWBigObject(childComplexity), true

	case "WBigObject.lFieldOnWBigObject":
		if e.complexity.WBigObject.LFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.LFieldOnWBigObject(childComplexity), true

	case "WBigObject.mFieldOnWBigObject":
		if e.complexity.WBigObject.MFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.MFieldOnWBigObject(childComplexity), true

	case "WBigObject.nFieldOnWBigObject":
		if e.complexity.WBigObject.NFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.NFieldOnWBigObject(childComplexity), true

	case "WBigObject.oFieldOnWBigObject":
		if e.complexity.WBigObject.OFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.OFieldOnWBigObject(childComplexity), true

	case "WBigObject.pFieldOnWBigObject":
		if e.complexity.WBigObject.PFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.PFieldOnWBigObject(childComplexity), true

	case "WBigObject.qFieldOnWBigObject":
		if e.complexity.WBigObject.QFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.QFieldOnWBigObject(childComplexity), true

	case "WBigObject.rFieldOnWBigObject":
		if e.complexity.WBigObject.RFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.RFieldOnWBigObject(childComplexity), true

	case "WBigObject.sFieldOnWBigObject":
		if e.complexity.WBigObject.SFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.SFieldOnWBigObject(childComplexity), true

	case "WBigObject.tFieldOnWBigObject":
		if e.complexity.WBigObject.TFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.TFieldOnWBigObject(childComplexity), true

	case "WBigObject.uFieldOnWBigObject":
		if e.complexity.WBigObject.UFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.UFieldOnWBigObject(childComplexity), true

	case "WBigObject.vFieldOnWBigObject":
		if e.complexity.WBigObject.VFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.VFieldOnWBigObject(childComplexity), true

	case "WBigObject.wFieldOnWBigObject":
		if e.complexity.WBigObject.WFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.WFieldOnWBigObject(childComplexity), true

	case "WBigObject.xFieldOnWBigObject":
		if e.complexity.WBigObject.XFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.XFieldOnWBigObject(childComplexity), true

	case "WBigObject.yFieldOnWBigObject":
		if e.complexity.WBigObject.YFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.YFieldOnWBigObject(childComplexity), true

	case "WBigObject.zFieldOnWBigObject":
		if e.complexity.WBigObject.ZFieldOnWBigObject == nil {
			break
		}

		return e.complexity.WBigObject.ZFieldOnWBigObject(childComplexity), true

	case "XBigObject.aFieldOnXBigObject":
		if e.complexity.XBigObject.AFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.AFieldOnXBigObject(childComplexity), true

	case "XBigObject.bFieldOnXBigObject":
		if e.complexity.XBigObject.BFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.BFieldOnXBigObject(childComplexity), true

	case "XBigObject.cFieldOnXBigObject":
		if e.complexity.XBigObject.CFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.CFieldOnXBigObject(childComplexity), true

	case "XBigObject.dFieldOnXBigObject":
		if e.complexity.XBigObject.DFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.DFieldOnXBigObject(childComplexity), true

	case "XBigObject.eFieldOnXBigObject":
		if e.complexity.XBigObject.EFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.EFieldOnXBigObject(childComplexity), true

	case "XBigObject.fFieldOnXBigObject":
		if e.complexity.XBigObject.FFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.FFieldOnXBigObject(childComplexity), true

	case "XBigObject.gFieldOnXBigObject":
		if e.complexity.XBigObject.GFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.GFieldOnXBigObject(childComplexity), true

	case "XBigObject.hFieldOnXBigObject":
		if e.complexity.XBigObject.HFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.HFieldOnXBigObject(childComplexity), true

	case "XBigObject.iFieldOnXBigObject":
		if e.complexity.XBigObject.IFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.IFieldOnXBigObject(childComplexity), true

	case "XBigObject.jFieldOnXBigObject":
		if e.complexity.XBigObject.JFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.JFieldOnXBigObject(childComplexity), true

	case "XBigObject.kFieldOnXBigObject":
		if e.complexity.XBigObject.KFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.KFieldOnXBigObject(childComplexity), true

	case "XBigObject.lFieldOnXBigObject":
		if e.complexity.XBigObject.LFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.LFieldOnXBigObject(childComplexity), true

	case "XBigObject.mFieldOnXBigObject":
		if e.complexity.XBigObject.MFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.MFieldOnXBigObject(childComplexity), true

	case "XBigObject.nFieldOnXBigObject":
		if e.complexity.XBigObject.NFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.NFieldOnXBigObject(childComplexity), true

	case "XBigObject.oFieldOnXBigObject":
		if e.complexity.XBigObject.OFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.OFieldOnXBigObject(childComplexity), true

	case "XBigObject.pFieldOnXBigObject":
		if e.complexity.XBigObject.PFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.PFieldOnXBigObject(childComplexity), true

	case "XBigObject.qFieldOnXBigObject":
		if e.complexity.XBigObject.QFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.QFieldOnXBigObject(childComplexity), true

	case "XBigObject.rFieldOnXBigObject":
		if e.complexity.XBigObject.RFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.RFieldOnXBigObject(childComplexity), true

	case "XBigObject.sFieldOnXBigObject":
		if e.complexity.XBigObject.SFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.SFieldOnXBigObject(childComplexity), true

	case "XBigObject.tFieldOnXBigObject":
		if e.complexity.XBigObject.TFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.TFieldOnXBigObject(childComplexity), true

	case "XBigObject.uFieldOnXBigObject":
		if e.complexity.XBigObject.UFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.UFieldOnXBigObject(childComplexity), true

	case "XBigObject.vFieldOnXBigObject":
		if e.complexity.XBigObject.VFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.VFieldOnXBigObject(childComplexity), true

	case "XBigObject.wFieldOnXBigObject":
		if e.complexity.XBigObject.WFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.WFieldOnXBigObject(childComplexity), true

	case "XBigObject.xFieldOnXBigObject":
		if e.complexity.XBigObject.XFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.XFieldOnXBigObject(childComplexity), true

	case "XBigObject.yFieldOnXBigObject":
		if e.complexity.XBigObject.YFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.YFieldOnXBigObject(childComplexity), true

	case "XBigObject.zFieldOnXBigObject":
		if e.complexity.XBigObject.ZFieldOnXBigObject == nil {
			break
		}

		return e.complexity.XBigObject.ZFieldOnXBigObject(childComplexity), true

	case "YBigObject.aFieldOnYBigObject":
		if e.complexity.YBigObject.AFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.AFieldOnYBigObject(childComplexity), true

	case "YBigObject.bFieldOnYBigObject":
		if e.complexity.YBigObject.BFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.BFieldOnYBigObject(childComplexity), true

	case "YBigObject.cFieldOnYBigObject":
		if e.complexity.YBigObject.CFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.CFieldOnYBigObject(childComplexity), true

	case "YBigObject.dFieldOnYBigObject":
		if e.complexity.YBigObject.DFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.DFieldOnYBigObject(childComplexity), true

	case "YBigObject.eFieldOnYBigObject":
		if e.complexity.YBigObject.EFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.EFieldOnYBigObject(childComplexity), true

	case "YBigObject.fFieldOnYBigObject":
		if e.complexity.YBigObject.FFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.FFieldOnYBigObject(childComplexity), true

	case "YBigObject.gFieldOnYBigObject":
		if e.complexity.YBigObject.GFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.GFieldOnYBigObject(childComplexity), true

	case "YBigObject.hFieldOnYBigObject":
		if e.complexity.YBigObject.HFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.HFieldOnYBigObject(childComplexity), true

	case "YBigObject.iFieldOnYBigObject":
		if e.complexity.YBigObject.IFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.IFieldOnYBigObject(childComplexity), true

	case "YBigObject.jFieldOnYBigObject":
		if e.complexity.YBigObject.JFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.JFieldOnYBigObject(childComplexity), true

	case "YBigObject.kFieldOnYBigObject":
		if e.complexity.YBigObject.KFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.KFieldOnYBigObject(childComplexity), true

	case "YBigObject.lFieldOnYBigObject":
		if e.complexity.YBigObject.LFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.LFieldOnYBigObject(childComplexity), true

	case "YBigObject.mFieldOnYBigObject":
		if e.complexity.YBigObject.MFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.MFieldOnYBigObject(childComplexity), true

	case "YBigObject.nFieldOnYBigObject":
		if e.complexity.YBigObject.NFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.NFieldOnYBigObject(childComplexity), true

	case "YBigObject.oFieldOnYBigObject":
		if e.complexity.YBigObject.OFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.OFieldOnYBigObject(childComplexity), true

	case "YBigObject.pFieldOnYBigObject":
		if e.complexity.YBigObject.PFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.PFieldOnYBigObject(childComplexity), true

	case "YBigObject.qFieldOnYBigObject":
		if e.complexity.YBigObject.QFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.QFieldOnYBigObject(childComplexity), true

	case "YBigObject.rFieldOnYBigObject":
		if e.complexity.YBigObject.RFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.RFieldOnYBigObject(childComplexity), true

	case "YBigObject.sFieldOnYBigObject":
		if e.complexity.YBigObject.SFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.SFieldOnYBigObject(childComplexity), true

	case "YBigObject.tFieldOnYBigObject":
		if e.complexity.YBigObject.TFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.TFieldOnYBigObject(childComplexity), true

	case "YBigObject.uFieldOnYBigObject":
		if e.complexity.YBigObject.UFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.UFieldOnYBigObject(childComplexity), true

	case "YBigObject.vFieldOnYBigObject":
		if e.complexity.YBigObject.VFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.VFieldOnYBigObject(childComplexity), true

	case "YBigObject.wFieldOnYBigObject":
		if e.complexity.YBigObject.WFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.WFieldOnYBigObject(childComplexity), true

	case "YBigObject.xFieldOnYBigObject":
		if e.complexity.YBigObject.XFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.XFieldOnYBigObject(childComplexity), true

	case "YBigObject.yFieldOnYBigObject":
		if e.complexity.YBigObject.YFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.YFieldOnYBigObject(childComplexity), true

	case "YBigObject.zFieldOnYBigObject":
		if e.complexity.YBigObject.ZFieldOnYBigObject == nil {
			break
		}

		return e.complexity.YBigObject.ZFieldOnYBigObject(childComplexity), true

	case "ZBigObject.aFieldOnZBigObject":
		if e.complexity.ZBigObject.AFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.AFieldOnZBigObject(childComplexity), true

	case "ZBigObject.bFieldOnZBigObject":
		if e.complexity.ZBigObject.BFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.BFieldOnZBigObject(childComplexity), true

	case "ZBigObject.cFieldOnZBigObject":
		if e.complexity.ZBigObject.CFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.CFieldOnZBigObject(childComplexity), true

	case "ZBigObject.dFieldOnZBigObject":
		if e.complexity.ZBigObject.DFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.DFieldOnZBigObject(childComplexity), true

	case "ZBigObject.eFieldOnZBigObject":
		if e.complexity.ZBigObject.EFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.EFieldOnZBigObject(childComplexity), true

	case "ZBigObject.fFieldOnZBigObject":
		if e.complexity.ZBigObject.FFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.FFieldOnZBigObject(childComplexity), true

	case "ZBigObject.gFieldOnZBigObject":
		if e.complexity.ZBigObject.GFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.GFieldOnZBigObject(childComplexity), true

	case "ZBigObject.hFieldOnZBigObject":
		if e.complexity.ZBigObject.HFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.HFieldOnZBigObject(childComplexity), true

	case "ZBigObject.iFieldOnZBigObject":
		if e.complexity.ZBigObject.IFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.IFieldOnZBigObject(childComplexity), true

	case "ZBigObject.jFieldOnZBigObject":
		if e.complexity.ZBigObject.JFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.JFieldOnZBigObject(childComplexity), true

	case "ZBigObject.kFieldOnZBigObject":
		if e.complexity.ZBigObject.KFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.KFieldOnZBigObject(childComplexity), true

	case "ZBigObject.lFieldOnZBigObject":
		if e.complexity.ZBigObject.LFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.LFieldOnZBigObject(childComplexity), true

	case "ZBigObject.mFieldOnZBigObject":
		if e.complexity.ZBigObject.MFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.MFieldOnZBigObject(childComplexity), true

	case "ZBigObject.nFieldOnZBigObject":
		if e.complexity.ZBigObject.NFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.NFieldOnZBigObject(childComplexity), true

	case "ZBigObject.oFieldOnZBigObject":
		if e.complexity.ZBigObject.OFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.OFieldOnZBigObject(childComplexity), true

	case "ZBigObject.pFieldOnZBigObject":
		if e.complexity.ZBigObject.PFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.PFieldOnZBigObject(childComplexity), true

	case "ZBigObject.qFieldOnZBigObject":
		if e.complexity.ZBigObject.QFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.QFieldOnZBigObject(childComplexity), true

	case "ZBigObject.rFieldOnZBigObject":
		if e.complexity.ZBigObject.RFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.RFieldOnZBigObject(childComplexity), true

	case "ZBigObject.sFieldOnZBigObject":
		if e.complexity.ZBigObject.SFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.SFieldOnZBigObject(childComplexity), true

	case "ZBigObject.tFieldOnZBigObject":
		if e.complexity.ZBigObject.TFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.TFieldOnZBigObject(childComplexity), true

	case "ZBigObject.uFieldOnZBigObject":
		if e.complexity.ZBigObject.UFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.UFieldOnZBigObject(childComplexity), true

	case "ZBigObject.vFieldOnZBigObject":
		if e.complexity.ZBigObject.VFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.VFieldOnZBigObject(childComplexity), true

	case "ZBigObject.wFieldOnZBigObject":
		if e.complexity.ZBigObject.WFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.WFieldOnZBigObject(childComplexity), true

	case "ZBigObject.xFieldOnZBigObject":
		if e.complexity.ZBigObject.XFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.XFieldOnZBigObject(childComplexity), true

	case "ZBigObject.yFieldOnZBigObject":
		if e.complexity.ZBigObject.YFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.YFieldOnZBigObject(childComplexity), true

	case "ZBigObject.zFieldOnZBigObject":
		if e.complexity.ZBigObject.ZFieldOnZBigObject == nil {
			break
		}

		return e.complexity.ZBigObject.ZFieldOnZBigObject(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputInputArg,
		ec.unmarshalInputInputType,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `extend schema
@link(url: "https://specs.apollo.dev/federation/v2.5", import: ["@authenticated", "@composeDirective", "@external", "@extends", "@inaccessible", "@interfaceObject", "@override", "@provides", "@key", "@requires", "@requiresScopes", "@shareable", "@tag"])

type Query {
    "Returns the value of the received HTTP header."
    headerValue(name: String!): String!
    "Returns the value of the given key in the WS initial payload."
    initPayloadValue(key: String!): String!
    initialPayload: Map
    "Returns response after the given delay"
    delay(response: String!, ms: Int!): String!

    bigResponse(
        artificialDelay: Int! = 0
        bigObjects: Int! = 100
        nestedObjects: Int! = 100
        deeplyNestedObjects: Int! = 100
    ): [BigObject!]!

    bigAbstractResponse: BigAbstractResponse

    rootFieldWithListArg(arg: [String!]!): [String!]!
    rootFieldWithNestedListArg(arg: [[String!]!]!): [[String!]!]!
    rootFieldWithListOfInputArg(arg: [InputType!]!): [InputResponse!]!
    rootFieldWithListOfEnumArg(arg: [EnumType!]!): [EnumType!]!
    rootFieldWithInput(arg: InputArg!): String!

    floatField(arg: Float): Float
}

input InputArg {
    enums: [EnumType!]
    enum: EnumType
    string: String
    strings: [String!]
}

enum EnumType {
    A
    B
    C
}

input InputType {
    arg: String!
}

type InputResponse {
    arg: String!
}

scalar Map

type TimestampedString {
    "The value of the string."
    value: String!
    "The timestamp when the response was generated."
    unixTime: Int!
    "Sequence number"
    seq: Int!
    "Total number of responses to be sent"
    total: Int!
    initialPayload: Map
}

type Subscription {
    "Returns a stream with the value of the received HTTP header."
    headerValue(name: String!, repeat: Int): TimestampedString!
    "Returns a stream with the value of value of the given key in the WS initial payload."
    initPayloadValue(key: String!, repeat: Int): TimestampedString!
    "Returns a stream with the value of the WS initial payload."
    initialPayload(repeat: Int): Map
    returnsError: String
}

type Employee @key(fields: "id") {
    id: Int!
    fieldThrowsError: String
}

type BigObject {
    nestedObjects: [NestedObject!]!
}

type NestedObject {
    deeplyNestedObjects: [DeeplyNestedObject!]!
}

type DeeplyNestedObject {
    aFieldOnDeeplyNestedObject: String!
    bFieldOnDeeplyNestedObject: Int!
    cFieldOnDeeplyNestedObject: Boolean!
    dFieldOnDeeplyNestedObject: Float!
    eFieldOnDeeplyNestedObject: String!
    fFieldOnDeeplyNestedObject: Int!
    gFieldOnDeeplyNestedObject: Boolean!
    hFieldOnDeeplyNestedObject: Float!
    iFieldOnDeeplyNestedObject: String!
    jFieldOnDeeplyNestedObject: Int!
    kFieldOnDeeplyNestedObject: Boolean!
    lFieldOnDeeplyNestedObject: Float!
    mFieldOnDeeplyNestedObject: String!
    nFieldOnDeeplyNestedObject: Int!
    oFieldOnDeeplyNestedObject: Boolean!
    pFieldOnDeeplyNestedObject: Float!
    qFieldOnDeeplyNestedObject: String!
    rFieldOnDeeplyNestedObject: Int!
    sFieldOnDeeplyNestedObject: Boolean!
    tFieldOnDeeplyNestedObject: Float!
    uFieldOnDeeplyNestedObject: String!
    vFieldOnDeeplyNestedObject: Int!
    wFieldOnDeeplyNestedObject: Boolean!
    xFieldOnDeeplyNestedObject: Float!
    yFieldOnDeeplyNestedObject: String!
    zFieldOnDeeplyNestedObject: Int!
}

union BigAbstractResponse = ABigObject | BBigObject | CBigObject | DBigObject | EBigObject | FBigObject | GBigObject | HBigObject | IBigObject | JBigObject | KBigObject | LBigObject | MBigObject | NBigObject | OBigObject | PBigObject | QBigObject | RBigObject | SBigObject | TBigObject | UBigObject | VBigObject | WBigObject | XBigObject | YBigObject | ZBigObject

type ABigObject {
    aFieldOnABigObject: String!
    bFieldOnABigObject: Int!
    cFieldOnABigObject: Boolean!
    dFieldOnABigObject: Float!
    eFieldOnABigObject: String!
    fFieldOnABigObject: Int!
    gFieldOnABigObject: Boolean!
    hFieldOnABigObject: Float!
    iFieldOnABigObject: String!
    jFieldOnABigObject: Int!
    kFieldOnABigObject: Boolean!
    lFieldOnABigObject: Float!
    mFieldOnABigObject: String!
    nFieldOnABigObject: Int!
    oFieldOnABigObject: Boolean!
    pFieldOnABigObject: Float!
    qFieldOnABigObject: String!
    rFieldOnABigObject: Int!
    sFieldOnABigObject: Boolean!
    tFieldOnABigObject: Float!
    uFieldOnABigObject: String!
    vFieldOnABigObject: Int!
    wFieldOnABigObject: Boolean!
    xFieldOnABigObject: Float!
    yFieldOnABigObject: String!
    zFieldOnABigObject: Int!
}

type BBigObject {
    aFieldOnBBigObject: String!
    bFieldOnBBigObject: Int!
    cFieldOnBBigObject: Boolean!
    dFieldOnBBigObject: Float!
    eFieldOnBBigObject: String!
    fFieldOnBBigObject: Int!
    gFieldOnBBigObject: Boolean!
    hFieldOnBBigObject: Float!
    iFieldOnBBigObject: String!
    jFieldOnBBigObject: Int!
    kFieldOnBBigObject: Boolean!
    lFieldOnBBigObject: Float!
    mFieldOnBBigObject: String!
    nFieldOnBBigObject: Int!
    oFieldOnBBigObject: Boolean!
    pFieldOnBBigObject: Float!
    qFieldOnBBigObject: String!
    rFieldOnBBigObject: Int!
    sFieldOnBBigObject: Boolean!
    tFieldOnBBigObject: Float!
    uFieldOnBBigObject: String!
    vFieldOnBBigObject: Int!
    wFieldOnBBigObject: Boolean!
    xFieldOnBBigObject: Float!
    yFieldOnBBigObject: String!
    zFieldOnBBigObject: Int!
}

type CBigObject {
    aFieldOnCBigObject: String!
    bFieldOnCBigObject: Int!
    cFieldOnCBigObject: Boolean!
    dFieldOnCBigObject: Float!
    eFieldOnCBigObject: String!
    fFieldOnCBigObject: Int!
    gFieldOnCBigObject: Boolean!
    hFieldOnCBigObject: Float!
    iFieldOnCBigObject: String!
    jFieldOnCBigObject: Int!
    kFieldOnCBigObject: Boolean!
    lFieldOnCBigObject: Float!
    mFieldOnCBigObject: String!
    nFieldOnCBigObject: Int!
    oFieldOnCBigObject: Boolean!
    pFieldOnCBigObject: Float!
    qFieldOnCBigObject: String!
    rFieldOnCBigObject: Int!
    sFieldOnCBigObject: Boolean!
    tFieldOnCBigObject: Float!
    uFieldOnCBigObject: String!
    vFieldOnCBigObject: Int!
    wFieldOnCBigObject: Boolean!
    xFieldOnCBigObject: Float!
    yFieldOnCBigObject: String!
    zFieldOnCBigObject: Int!
}

type DBigObject {
    aFieldOnDBigObject: String!
    bFieldOnDBigObject: Int!
    cFieldOnDBigObject: Boolean!
    dFieldOnDBigObject: Float!
    eFieldOnDBigObject: String!
    fFieldOnDBigObject: Int!
    gFieldOnDBigObject: Boolean!
    hFieldOnDBigObject: Float!
    iFieldOnDBigObject: String!
    jFieldOnDBigObject: Int!
    kFieldOnDBigObject: Boolean!
    lFieldOnDBigObject: Float!
    mFieldOnDBigObject: String!
    nFieldOnDBigObject: Int!
    oFieldOnDBigObject: Boolean!
    pFieldOnDBigObject: Float!
    qFieldOnDBigObject: String!
    rFieldOnDBigObject: Int!
    sFieldOnDBigObject: Boolean!
    tFieldOnDBigObject: Float!
    uFieldOnDBigObject: String!
    vFieldOnDBigObject: Int!
    wFieldOnDBigObject: Boolean!
    xFieldOnDBigObject: Float!
    yFieldOnDBigObject: String!
    zFieldOnDBigObject: Int!
}

type EBigObject {
    aFieldOnEBigObject: String!
    bFieldOnEBigObject: Int!
    cFieldOnEBigObject: Boolean!
    dFieldOnEBigObject: Float!
    eFieldOnEBigObject: String!
    fFieldOnEBigObject: Int!
    gFieldOnEBigObject: Boolean!
    hFieldOnEBigObject: Float!
    iFieldOnEBigObject: String!
    jFieldOnEBigObject: Int!
    kFieldOnEBigObject: Boolean!
    lFieldOnEBigObject: Float!
    mFieldOnEBigObject: String!
    nFieldOnEBigObject: Int!
    oFieldOnEBigObject: Boolean!
    pFieldOnEBigObject: Float!
    qFieldOnEBigObject: String!
    rFieldOnEBigObject: Int!
    sFieldOnEBigObject: Boolean!
    tFieldOnEBigObject: Float!
    uFieldOnEBigObject: String!
    vFieldOnEBigObject: Int!
    wFieldOnEBigObject: Boolean!
    xFieldOnEBigObject: Float!
    yFieldOnEBigObject: String!
    zFieldOnEBigObject: Int!
}

type FBigObject {
    aFieldOnFBigObject: String!
    bFieldOnFBigObject: Int!
    cFieldOnFBigObject: Boolean!
    dFieldOnFBigObject: Float!
    eFieldOnFBigObject: String!
    fFieldOnFBigObject: Int!
    gFieldOnFBigObject: Boolean!
    hFieldOnFBigObject: Float!
    iFieldOnFBigObject: String!
    jFieldOnFBigObject: Int!
    kFieldOnFBigObject: Boolean!
    lFieldOnFBigObject: Float!
    mFieldOnFBigObject: String!
    nFieldOnFBigObject: Int!
    oFieldOnFBigObject: Boolean!
    pFieldOnFBigObject: Float!
    qFieldOnFBigObject: String!
    rFieldOnFBigObject: Int!
    sFieldOnFBigObject: Boolean!
    tFieldOnFBigObject: Float!
    uFieldOnFBigObject: String!
    vFieldOnFBigObject: Int!
    wFieldOnFBigObject: Boolean!
    xFieldOnFBigObject: Float!
    yFieldOnFBigObject: String!
    zFieldOnFBigObject: Int!
}

type GBigObject {
    aFieldOnGBigObject: String!
    bFieldOnGBigObject: Int!
    cFieldOnGBigObject: Boolean!
    dFieldOnGBigObject: Float!
    eFieldOnGBigObject: String!
    fFieldOnGBigObject: Int!
    gFieldOnGBigObject: Boolean!
    hFieldOnGBigObject: Float!
    iFieldOnGBigObject: String!
    jFieldOnGBigObject: Int!
    kFieldOnGBigObject: Boolean!
    lFieldOnGBigObject: Float!
    mFieldOnGBigObject: String!
    nFieldOnGBigObject: Int!
    oFieldOnGBigObject: Boolean!
    pFieldOnGBigObject: Float!
    qFieldOnGBigObject: String!
    rFieldOnGBigObject: Int!
    sFieldOnGBigObject: Boolean!
    tFieldOnGBigObject: Float!
    uFieldOnGBigObject: String!
    vFieldOnGBigObject: Int!
    wFieldOnGBigObject: Boolean!
    xFieldOnGBigObject: Float!
    yFieldOnGBigObject: String!
    zFieldOnGBigObject: Int!
}

type HBigObject {
    aFieldOnHBigObject: String!
    bFieldOnHBigObject: Int!
    cFieldOnHBigObject: Boolean!
    dFieldOnHBigObject: Float!
    eFieldOnHBigObject: String!
    fFieldOnHBigObject: Int!
    gFieldOnHBigObject: Boolean!
    hFieldOnHBigObject: Float!
    iFieldOnHBigObject: String!
    jFieldOnHBigObject: Int!
    kFieldOnHBigObject: Boolean!
    lFieldOnHBigObject: Float!
    mFieldOnHBigObject: String!
    nFieldOnHBigObject: Int!
    oFieldOnHBigObject: Boolean!
    pFieldOnHBigObject: Float!
    qFieldOnHBigObject: String!
    rFieldOnHBigObject: Int!
    sFieldOnHBigObject: Boolean!
    tFieldOnHBigObject: Float!
    uFieldOnHBigObject: String!
    vFieldOnHBigObject: Int!
    wFieldOnHBigObject: Boolean!
    xFieldOnHBigObject: Float!
    yFieldOnHBigObject: String!
    zFieldOnHBigObject: Int!
}

type IBigObject {
    aFieldOnIBigObject: String!
    bFieldOnIBigObject: Int!
    cFieldOnIBigObject: Boolean!
    dFieldOnIBigObject: Float!
    eFieldOnIBigObject: String!
    fFieldOnIBigObject: Int!
    gFieldOnIBigObject: Boolean!
    hFieldOnIBigObject: Float!
    iFieldOnIBigObject: String!
    jFieldOnIBigObject: Int!
    kFieldOnIBigObject: Boolean!
    lFieldOnIBigObject: Float!
    mFieldOnIBigObject: String!
    nFieldOnIBigObject: Int!
    oFieldOnIBigObject: Boolean!
    pFieldOnIBigObject: Float!
    qFieldOnIBigObject: String!
    rFieldOnIBigObject: Int!
    sFieldOnIBigObject: Boolean!
    tFieldOnIBigObject: Float!
    uFieldOnIBigObject: String!
    vFieldOnIBigObject: Int!
    wFieldOnIBigObject: Boolean!
    xFieldOnIBigObject: Float!
    yFieldOnIBigObject: String!
    zFieldOnIBigObject: Int!
}

type JBigObject {
    aFieldOnJBigObject: String!
    bFieldOnJBigObject: Int!
    cFieldOnJBigObject: Boolean!
    dFieldOnJBigObject: Float!
    eFieldOnJBigObject: String!
    fFieldOnJBigObject: Int!
    gFieldOnJBigObject: Boolean!
    hFieldOnJBigObject: Float!
    iFieldOnJBigObject: String!
    jFieldOnJBigObject: Int!
    kFieldOnJBigObject: Boolean!
    lFieldOnJBigObject: Float!
    mFieldOnJBigObject: String!
    nFieldOnJBigObject: Int!
    oFieldOnJBigObject: Boolean!
    pFieldOnJBigObject: Float!
    qFieldOnJBigObject: String!
    rFieldOnJBigObject: Int!
    sFieldOnJBigObject: Boolean!
    tFieldOnJBigObject: Float!
    uFieldOnJBigObject: String!
    vFieldOnJBigObject: Int!
    wFieldOnJBigObject: Boolean!
    xFieldOnJBigObject: Float!
    yFieldOnJBigObject: String!
    zFieldOnJBigObject: Int!
}

type KBigObject {
    aFieldOnKBigObject: String!
    bFieldOnKBigObject: Int!
    cFieldOnKBigObject: Boolean!
    dFieldOnKBigObject: Float!
    eFieldOnKBigObject: String!
    fFieldOnKBigObject: Int!
    gFieldOnKBigObject: Boolean!
    hFieldOnKBigObject: Float!
    iFieldOnKBigObject: String!
    jFieldOnKBigObject: Int!
    kFieldOnKBigObject: Boolean!
    lFieldOnKBigObject: Float!
    mFieldOnKBigObject: String!
    nFieldOnKBigObject: Int!
    oFieldOnKBigObject: Boolean!
    pFieldOnKBigObject: Float!
    qFieldOnKBigObject: String!
    rFieldOnKBigObject: Int!
    sFieldOnKBigObject: Boolean!
    tFieldOnKBigObject: Float!
    uFieldOnKBigObject: String!
    vFieldOnKBigObject: Int!
    wFieldOnKBigObject: Boolean!
    xFieldOnKBigObject: Float!
    yFieldOnKBigObject: String!
    zFieldOnKBigObject: Int!
}

type LBigObject {
    aFieldOnLBigObject: String!
    bFieldOnLBigObject: Int!
    cFieldOnLBigObject: Boolean!
    dFieldOnLBigObject: Float!
    eFieldOnLBigObject: String!
    fFieldOnLBigObject: Int!
    gFieldOnLBigObject: Boolean!
    hFieldOnLBigObject: Float!
    iFieldOnLBigObject: String!
    jFieldOnLBigObject: Int!
    kFieldOnLBigObject: Boolean!
    lFieldOnLBigObject: Float!
    mFieldOnLBigObject: String!
    nFieldOnLBigObject: Int!
    oFieldOnLBigObject: Boolean!
    pFieldOnLBigObject: Float!
    qFieldOnLBigObject: String!
    rFieldOnLBigObject: Int!
    sFieldOnLBigObject: Boolean!
    tFieldOnLBigObject: Float!
    uFieldOnLBigObject: String!
    vFieldOnLBigObject: Int!
    wFieldOnLBigObject: Boolean!
    xFieldOnLBigObject: Float!
    yFieldOnLBigObject: String!
    zFieldOnLBigObject: Int!
}

type MBigObject {
    aFieldOnMBigObject: String!
    bFieldOnMBigObject: Int!
    cFieldOnMBigObject: Boolean!
    dFieldOnMBigObject: Float!
    eFieldOnMBigObject: String!
    fFieldOnMBigObject: Int!
    gFieldOnMBigObject: Boolean!
    hFieldOnMBigObject: Float!
    iFieldOnMBigObject: String!
    jFieldOnMBigObject: Int!
    kFieldOnMBigObject: Boolean!
    lFieldOnMBigObject: Float!
    mFieldOnMBigObject: String!
    nFieldOnMBigObject: Int!
    oFieldOnMBigObject: Boolean!
    pFieldOnMBigObject: Float!
    qFieldOnMBigObject: String!
    rFieldOnMBigObject: Int!
    sFieldOnMBigObject: Boolean!
    tFieldOnMBigObject: Float!
    uFieldOnMBigObject: String!
    vFieldOnMBigObject: Int!
    wFieldOnMBigObject: Boolean!
    xFieldOnMBigObject: Float!
    yFieldOnMBigObject: String!
    zFieldOnMBigObject: Int!
}

type NBigObject {
    aFieldOnNBigObject: String!
    bFieldOnNBigObject: Int!
    cFieldOnNBigObject: Boolean!
    dFieldOnNBigObject: Float!
    eFieldOnNBigObject: String!
    fFieldOnNBigObject: Int!
    gFieldOnNBigObject: Boolean!
    hFieldOnNBigObject: Float!
    iFieldOnNBigObject: String!
    jFieldOnNBigObject: Int!
    kFieldOnNBigObject: Boolean!
    lFieldOnNBigObject: Float!
    mFieldOnNBigObject: String!
    nFieldOnNBigObject: Int!
    oFieldOnNBigObject: Boolean!
    pFieldOnNBigObject: Float!
    qFieldOnNBigObject: String!
    rFieldOnNBigObject: Int!
    sFieldOnNBigObject: Boolean!
    tFieldOnNBigObject: Float!
    uFieldOnNBigObject: String!
    vFieldOnNBigObject: Int!
    wFieldOnNBigObject: Boolean!
    xFieldOnNBigObject: Float!
    yFieldOnNBigObject: String!
    zFieldOnNBigObject: Int!
}

type OBigObject {
    aFieldOnOBigObject: String!
    bFieldOnOBigObject: Int!
    cFieldOnOBigObject: Boolean!
    dFieldOnOBigObject: Float!
    eFieldOnOBigObject: String!
    fFieldOnOBigObject: Int!
    gFieldOnOBigObject: Boolean!
    hFieldOnOBigObject: Float!
    iFieldOnOBigObject: String!
    jFieldOnOBigObject: Int!
    kFieldOnOBigObject: Boolean!
    lFieldOnOBigObject: Float!
    mFieldOnOBigObject: String!
    nFieldOnOBigObject: Int!
    oFieldOnOBigObject: Boolean!
    pFieldOnOBigObject: Float!
    qFieldOnOBigObject: String!
    rFieldOnOBigObject: Int!
    sFieldOnOBigObject: Boolean!
    tFieldOnOBigObject: Float!
    uFieldOnOBigObject: String!
    vFieldOnOBigObject: Int!
    wFieldOnOBigObject: Boolean!
    xFieldOnOBigObject: Float!
    yFieldOnOBigObject: String!
    zFieldOnOBigObject: Int!
}

type PBigObject {
    aFieldOnPBigObject: String!
    bFieldOnPBigObject: Int!
    cFieldOnPBigObject: Boolean!
    dFieldOnPBigObject: Float!
    eFieldOnPBigObject: String!
    fFieldOnPBigObject: Int!
    gFieldOnPBigObject: Boolean!
    hFieldOnPBigObject: Float!
    iFieldOnPBigObject: String!
    jFieldOnPBigObject: Int!
    kFieldOnPBigObject: Boolean!
    lFieldOnPBigObject: Float!
    mFieldOnPBigObject: String!
    nFieldOnPBigObject: Int!
    oFieldOnPBigObject: Boolean!
    pFieldOnPBigObject: Float!
    qFieldOnPBigObject: String!
    rFieldOnPBigObject: Int!
    sFieldOnPBigObject: Boolean!
    tFieldOnPBigObject: Float!
    uFieldOnPBigObject: String!
    vFieldOnPBigObject: Int!
    wFieldOnPBigObject: Boolean!
    xFieldOnPBigObject: Float!
    yFieldOnPBigObject: String!
    zFieldOnPBigObject: Int!
}

type QBigObject {
    aFieldOnQBigObject: String!
    bFieldOnQBigObject: Int!
    cFieldOnQBigObject: Boolean!
    dFieldOnQBigObject: Float!
    eFieldOnQBigObject: String!
    fFieldOnQBigObject: Int!
    gFieldOnQBigObject: Boolean!
    hFieldOnQBigObject: Float!
    iFieldOnQBigObject: String!
    jFieldOnQBigObject: Int!
    kFieldOnQBigObject: Boolean!
    lFieldOnQBigObject: Float!
    mFieldOnQBigObject: String!
    nFieldOnQBigObject: Int!
    oFieldOnQBigObject: Boolean!
    pFieldOnQBigObject: Float!
    qFieldOnQBigObject: String!
    rFieldOnQBigObject: Int!
    sFieldOnQBigObject: Boolean!
    tFieldOnQBigObject: Float!
    uFieldOnQBigObject: String!
    vFieldOnQBigObject: Int!
    wFieldOnQBigObject: Boolean!
    xFieldOnQBigObject: Float!
    yFieldOnQBigObject: String!
    zFieldOnQBigObject: Int!
}

type RBigObject {
    aFieldOnRBigObject: String!
    bFieldOnRBigObject: Int!
    cFieldOnRBigObject: Boolean!
    dFieldOnRBigObject: Float!
    eFieldOnRBigObject: String!
    fFieldOnRBigObject: Int!
    gFieldOnRBigObject: Boolean!
    hFieldOnRBigObject: Float!
    iFieldOnRBigObject: String!
    jFieldOnRBigObject: Int!
    kFieldOnRBigObject: Boolean!
    lFieldOnRBigObject: Float!
    mFieldOnRBigObject: String!
    nFieldOnRBigObject: Int!
    oFieldOnRBigObject: Boolean!
    pFieldOnRBigObject: Float!
    qFieldOnRBigObject: String!
    rFieldOnRBigObject: Int!
    sFieldOnRBigObject: Boolean!
    tFieldOnRBigObject: Float!
    uFieldOnRBigObject: String!
    vFieldOnRBigObject: Int!
    wFieldOnRBigObject: Boolean!
    xFieldOnRBigObject: Float!
    yFieldOnRBigObject: String!
    zFieldOnRBigObject: Int!
}

type SBigObject {
    aFieldOnSBigObject: String!
    bFieldOnSBigObject: Int!
    cFieldOnSBigObject: Boolean!
    dFieldOnSBigObject: Float!
    eFieldOnSBigObject: String!
    fFieldOnSBigObject: Int!
    gFieldOnSBigObject: Boolean!
    hFieldOnSBigObject: Float!
    iFieldOnSBigObject: String!
    jFieldOnSBigObject: Int!
    kFieldOnSBigObject: Boolean!
    lFieldOnSBigObject: Float!
    mFieldOnSBigObject: String!
    nFieldOnSBigObject: Int!
    oFieldOnSBigObject: Boolean!
    pFieldOnSBigObject: Float!
    qFieldOnSBigObject: String!
    rFieldOnSBigObject: Int!
    sFieldOnSBigObject: Boolean!
    tFieldOnSBigObject: Float!
    uFieldOnSBigObject: String!
    vFieldOnSBigObject: Int!
    wFieldOnSBigObject: Boolean!
    xFieldOnSBigObject: Float!
    yFieldOnSBigObject: String!
    zFieldOnSBigObject: Int!
}

type TBigObject {
    aFieldOnTBigObject: String!
    bFieldOnTBigObject: Int!
    cFieldOnTBigObject: Boolean!
    dFieldOnTBigObject: Float!
    eFieldOnTBigObject: String!
    fFieldOnTBigObject: Int!
    gFieldOnTBigObject: Boolean!
    hFieldOnTBigObject: Float!
    iFieldOnTBigObject: String!
    jFieldOnTBigObject: Int!
    kFieldOnTBigObject: Boolean!
    lFieldOnTBigObject: Float!
    mFieldOnTBigObject: String!
    nFieldOnTBigObject: Int!
    oFieldOnTBigObject: Boolean!
    pFieldOnTBigObject: Float!
    qFieldOnTBigObject: String!
    rFieldOnTBigObject: Int!
    sFieldOnTBigObject: Boolean!
    tFieldOnTBigObject: Float!
    uFieldOnTBigObject: String!
    vFieldOnTBigObject: Int!
    wFieldOnTBigObject: Boolean!
    xFieldOnTBigObject: Float!
    yFieldOnTBigObject: String!
    zFieldOnTBigObject: Int!
}

type UBigObject {
    aFieldOnUBigObject: String!
    bFieldOnUBigObject: Int!
    cFieldOnUBigObject: Boolean!
    dFieldOnUBigObject: Float!
    eFieldOnUBigObject: String!
    fFieldOnUBigObject: Int!
    gFieldOnUBigObject: Boolean!
    hFieldOnUBigObject: Float!
    iFieldOnUBigObject: String!
    jFieldOnUBigObject: Int!
    kFieldOnUBigObject: Boolean!
    lFieldOnUBigObject: Float!
    mFieldOnUBigObject: String!
    nFieldOnUBigObject: Int!
    oFieldOnUBigObject: Boolean!
    pFieldOnUBigObject: Float!
    qFieldOnUBigObject: String!
    rFieldOnUBigObject: Int!
    sFieldOnUBigObject: Boolean!
    tFieldOnUBigObject: Float!
    uFieldOnUBigObject: String!
    vFieldOnUBigObject: Int!
    wFieldOnUBigObject: Boolean!
    xFieldOnUBigObject: Float!
    yFieldOnUBigObject: String!
    zFieldOnUBigObject: Int!
}

type VBigObject {
    aFieldOnVBigObject: String!
    bFieldOnVBigObject: Int!
    cFieldOnVBigObject: Boolean!
    dFieldOnVBigObject: Float!
    eFieldOnVBigObject: String!
    fFieldOnVBigObject: Int!
    gFieldOnVBigObject: Boolean!
    hFieldOnVBigObject: Float!
    iFieldOnVBigObject: String!
    jFieldOnVBigObject: Int!
    kFieldOnVBigObject: Boolean!
    lFieldOnVBigObject: Float!
    mFieldOnVBigObject: String!
    nFieldOnVBigObject: Int!
    oFieldOnVBigObject: Boolean!
    pFieldOnVBigObject: Float!
    qFieldOnVBigObject: String!
    rFieldOnVBigObject: Int!
    sFieldOnVBigObject: Boolean!
    tFieldOnVBigObject: Float!
    uFieldOnVBigObject: String!
    vFieldOnVBigObject: Int!
    wFieldOnVBigObject: Boolean!
    xFieldOnVBigObject: Float!
    yFieldOnVBigObject: String!
    zFieldOnVBigObject: Int!
}

type WBigObject {
    aFieldOnWBigObject: String!
    bFieldOnWBigObject: Int!
    cFieldOnWBigObject: Boolean!
    dFieldOnWBigObject: Float!
    eFieldOnWBigObject: String!
    fFieldOnWBigObject: Int!
    gFieldOnWBigObject: Boolean!
    hFieldOnWBigObject: Float!
    iFieldOnWBigObject: String!
    jFieldOnWBigObject: Int!
    kFieldOnWBigObject: Boolean!
    lFieldOnWBigObject: Float!
    mFieldOnWBigObject: String!
    nFieldOnWBigObject: Int!
    oFieldOnWBigObject: Boolean!
    pFieldOnWBigObject: Float!
    qFieldOnWBigObject: String!
    rFieldOnWBigObject: Int!
    sFieldOnWBigObject: Boolean!
    tFieldOnWBigObject: Float!
    uFieldOnWBigObject: String!
    vFieldOnWBigObject: Int!
    wFieldOnWBigObject: Boolean!
    xFieldOnWBigObject: Float!
    yFieldOnWBigObject: String!
    zFieldOnWBigObject: Int!
}

type XBigObject {
    aFieldOnXBigObject: String!
    bFieldOnXBigObject: Int!
    cFieldOnXBigObject: Boolean!
    dFieldOnXBigObject: Float!
    eFieldOnXBigObject: String!
    fFieldOnXBigObject: Int!
    gFieldOnXBigObject: Boolean!
    hFieldOnXBigObject: Float!
    iFieldOnXBigObject: String!
    jFieldOnXBigObject: Int!
    kFieldOnXBigObject: Boolean!
    lFieldOnXBigObject: Float!
    mFieldOnXBigObject: String!
    nFieldOnXBigObject: Int!
    oFieldOnXBigObject: Boolean!
    pFieldOnXBigObject: Float!
    qFieldOnXBigObject: String!
    rFieldOnXBigObject: Int!
    sFieldOnXBigObject: Boolean!
    tFieldOnXBigObject: Float!
    uFieldOnXBigObject: String!
    vFieldOnXBigObject: Int!
    wFieldOnXBigObject: Boolean!
    xFieldOnXBigObject: Float!
    yFieldOnXBigObject: String!
    zFieldOnXBigObject: Int!
}

type YBigObject {
    aFieldOnYBigObject: String!
    bFieldOnYBigObject: Int!
    cFieldOnYBigObject: Boolean!
    dFieldOnYBigObject: Float!
    eFieldOnYBigObject: String!
    fFieldOnYBigObject: Int!
    gFieldOnYBigObject: Boolean!
    hFieldOnYBigObject: Float!
    iFieldOnYBigObject: String!
    jFieldOnYBigObject: Int!
    kFieldOnYBigObject: Boolean!
    lFieldOnYBigObject: Float!
    mFieldOnYBigObject: String!
    nFieldOnYBigObject: Int!
    oFieldOnYBigObject: Boolean!
    pFieldOnYBigObject: Float!
    qFieldOnYBigObject: String!
    rFieldOnYBigObject: Int!
    sFieldOnYBigObject: Boolean!
    tFieldOnYBigObject: Float!
    uFieldOnYBigObject: String!
    vFieldOnYBigObject: Int!
    wFieldOnYBigObject: Boolean!
    xFieldOnYBigObject: Float!
    yFieldOnYBigObject: String!
    zFieldOnYBigObject: Int!
}

type ZBigObject {
    aFieldOnZBigObject: String!
    bFieldOnZBigObject: Int!
    cFieldOnZBigObject: Boolean!
    dFieldOnZBigObject: Float!
    eFieldOnZBigObject: String!
    fFieldOnZBigObject: Int!
    gFieldOnZBigObject: Boolean!
    hFieldOnZBigObject: Float!
    iFieldOnZBigObject: String!
    jFieldOnZBigObject: Int!
    kFieldOnZBigObject: Boolean!
    lFieldOnZBigObject: Float!
    mFieldOnZBigObject: String!
    nFieldOnZBigObject: Int!
    oFieldOnZBigObject: Boolean!
    pFieldOnZBigObject: Float!
    qFieldOnZBigObject: String!
    rFieldOnZBigObject: Int!
    sFieldOnZBigObject: Boolean!
    tFieldOnZBigObject: Float!
    uFieldOnZBigObject: String!
    vFieldOnZBigObject: Int!
    wFieldOnZBigObject: Boolean!
    xFieldOnZBigObject: Float!
    yFieldOnZBigObject: String!
    zFieldOnZBigObject: Int!
}`, BuiltIn: false},
	{Name: "../../federation/directives.graphql", Input: `
	directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM
	directive @composeDirective(name: String!) repeatable on SCHEMA
	directive @extends on OBJECT | INTERFACE
	directive @external on OBJECT | FIELD_DEFINITION
	directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
	directive @inaccessible on
	  | ARGUMENT_DEFINITION
	  | ENUM
	  | ENUM_VALUE
	  | FIELD_DEFINITION
	  | INPUT_FIELD_DEFINITION
	  | INPUT_OBJECT
	  | INTERFACE
	  | OBJECT
	  | SCALAR
	  | UNION
	directive @interfaceObject on OBJECT
	directive @link(import: [String!], url: String!) repeatable on SCHEMA
	directive @override(from: String!, label: String) on FIELD_DEFINITION
	directive @policy(policies: [[federation__Policy!]!]!) on 
	  | FIELD_DEFINITION
	  | OBJECT
	  | INTERFACE
	  | SCALAR
	  | ENUM
	directive @provides(fields: FieldSet!) on FIELD_DEFINITION
	directive @requires(fields: FieldSet!) on FIELD_DEFINITION
	directive @requiresScopes(scopes: [[federation__Scope!]!]!) on 
	  | FIELD_DEFINITION
	  | OBJECT
	  | INTERFACE
	  | SCALAR
	  | ENUM
	directive @shareable repeatable on FIELD_DEFINITION | OBJECT
	directive @tag(name: String!) repeatable on
	  | ARGUMENT_DEFINITION
	  | ENUM
	  | ENUM_VALUE
	  | FIELD_DEFINITION
	  | INPUT_FIELD_DEFINITION
	  | INPUT_OBJECT
	  | INTERFACE
	  | OBJECT
	  | SCALAR
	  | UNION
	scalar _Any
	scalar FieldSet
	scalar federation__Policy
	scalar federation__Scope
`, BuiltIn: true},
	{Name: "../../federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = Employee

# fake type to build resolver interfaces for users to implement
type Entity {
		findEmployeeByID(id: Int!,): Employee!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Entity_findEmployeeByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_bigResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["artificialDelay"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("artificialDelay"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["artificialDelay"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["bigObjects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bigObjects"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bigObjects"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["nestedObjects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nestedObjects"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nestedObjects"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["deeplyNestedObjects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deeplyNestedObjects"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deeplyNestedObjects"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_delay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["response"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["response"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["ms"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ms"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ms"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_floatField_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *float64
	if tmp, ok := rawArgs["arg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
		arg0, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["arg"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_headerValue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_initPayloadValue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rootFieldWithInput_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputArg
	if tmp, ok := rawArgs["arg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
		arg0, err = ec.unmarshalNInputArg2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputArg(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["arg"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rootFieldWithListArg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["arg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["arg"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rootFieldWithListOfEnumArg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnumType
	if tmp, ok := rawArgs["arg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
		arg0, err = ec.unmarshalNEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["arg"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rootFieldWithListOfInputArg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.InputType
	if tmp, ok := rawArgs["arg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
		arg0, err = ec.unmarshalNInputType2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["arg"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rootFieldWithNestedListArg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 [][]string
	if tmp, ok := rawArgs["arg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
		arg0, err = ec.unmarshalNString2ᚕᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["arg"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_headerValue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["repeat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repeat"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repeat"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_initPayloadValue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["repeat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repeat"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repeat"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_initialPayload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["repeat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repeat"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repeat"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ABigObject_aFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_aFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_aFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_bFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_bFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_bFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_cFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_cFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_cFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_dFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_dFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_dFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_eFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_eFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_eFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_fFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_fFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_fFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_gFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_gFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_gFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_hFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_hFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_hFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_iFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_iFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_iFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_jFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_jFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_jFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_kFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_kFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_kFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_lFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_lFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_lFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_mFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_mFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_mFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_nFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_nFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_nFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_oFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_oFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_oFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_pFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_pFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_pFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_qFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_qFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_qFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_rFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_rFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_rFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_sFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_sFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_sFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_tFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_tFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_tFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_uFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_uFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_uFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_vFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_vFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_vFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_wFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_wFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_wFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_xFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_xFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_xFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_yFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_yFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_yFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ABigObject_zFieldOnABigObject(ctx context.Context, field graphql.CollectedField, obj *model.ABigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ABigObject_zFieldOnABigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnABigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ABigObject_zFieldOnABigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ABigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_aFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_aFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_aFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_bFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_bFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_bFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_cFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_cFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_cFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_dFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_dFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_dFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_eFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_eFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_eFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_fFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_fFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_fFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_gFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_gFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_gFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_hFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_hFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_hFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_iFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_iFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_iFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_jFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_jFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_jFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_kFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_kFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_kFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_lFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_lFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_lFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_mFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_mFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_mFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_nFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_nFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_nFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_oFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_oFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_oFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_pFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_pFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_pFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_qFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_qFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_qFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_rFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_rFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_rFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_sFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_sFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_sFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_tFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_tFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_tFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_uFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_uFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_uFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_vFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_vFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_vFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_wFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_wFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_wFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_xFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_xFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_xFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_yFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_yFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_yFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BBigObject_zFieldOnBBigObject(ctx context.Context, field graphql.CollectedField, obj *model.BBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BBigObject_zFieldOnBBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnBBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BBigObject_zFieldOnBBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BigObject_nestedObjects(ctx context.Context, field graphql.CollectedField, obj *model.BigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BigObject_nestedObjects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NestedObjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NestedObject)
	fc.Result = res
	return ec.marshalNNestedObject2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐNestedObjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BigObject_nestedObjects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deeplyNestedObjects":
				return ec.fieldContext_NestedObject_deeplyNestedObjects(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NestedObject", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_aFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_aFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_aFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_bFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_bFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_bFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_cFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_cFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_cFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_dFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_dFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_dFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_eFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_eFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_eFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_fFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_fFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_fFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_gFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_gFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_gFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_hFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_hFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_hFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_iFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_iFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_iFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_jFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_jFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_jFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_kFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_kFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_kFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_lFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_lFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_lFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_mFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_mFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_mFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_nFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_nFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_nFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_oFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_oFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_oFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_pFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_pFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_pFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_qFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_qFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_qFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_rFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_rFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_rFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_sFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_sFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_sFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_tFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_tFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_tFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_uFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_uFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_uFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_vFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_vFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_vFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_wFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_wFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_wFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_xFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_xFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_xFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_yFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_yFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_yFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CBigObject_zFieldOnCBigObject(ctx context.Context, field graphql.CollectedField, obj *model.CBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CBigObject_zFieldOnCBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnCBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CBigObject_zFieldOnCBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_aFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_aFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_aFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_bFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_bFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_bFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_cFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_cFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_cFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_dFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_dFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_dFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_eFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_eFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_eFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_fFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_fFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_fFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_gFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_gFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_gFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_hFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_hFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_hFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_iFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_iFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_iFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_jFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_jFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_jFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_kFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_kFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_kFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_lFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_lFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_lFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_mFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_mFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_mFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_nFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_nFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_nFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_oFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_oFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_oFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_pFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_pFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_pFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_qFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_qFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_qFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_rFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_rFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_rFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_sFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_sFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_sFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_tFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_tFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_tFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_uFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_uFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_uFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_vFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_vFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_vFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_wFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_wFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_wFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_xFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_xFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_xFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_yFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_yFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_yFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DBigObject_zFieldOnDBigObject(ctx context.Context, field graphql.CollectedField, obj *model.DBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DBigObject_zFieldOnDBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnDBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DBigObject_zFieldOnDBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_aFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_aFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_aFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_bFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_bFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_bFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_cFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_cFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_cFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_dFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_dFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_dFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_eFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_eFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_eFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_fFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_fFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_fFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_gFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_gFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_gFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_hFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_hFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_hFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_iFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_iFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_iFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_jFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_jFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_jFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_kFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_kFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_kFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_lFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_lFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_lFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_mFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_mFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_mFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_nFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_nFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_nFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_oFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_oFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_oFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_pFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_pFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_pFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_qFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_qFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_qFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_rFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_rFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_rFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_sFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_sFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_sFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_tFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_tFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_tFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_uFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_uFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_uFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_vFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_vFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_vFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_wFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_wFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_wFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_xFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_xFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_xFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_yFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_yFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_yFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeeplyNestedObject_zFieldOnDeeplyNestedObject(ctx context.Context, field graphql.CollectedField, obj *model.DeeplyNestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeeplyNestedObject_zFieldOnDeeplyNestedObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnDeeplyNestedObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeeplyNestedObject_zFieldOnDeeplyNestedObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeeplyNestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_aFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_aFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_aFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_bFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_bFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_bFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_cFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_cFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_cFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_dFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_dFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_dFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_eFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_eFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_eFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_fFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_fFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_fFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_gFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_gFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_gFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_hFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_hFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_hFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_iFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_iFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_iFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_jFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_jFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_jFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_kFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_kFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_kFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_lFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_lFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_lFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_mFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_mFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_mFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_nFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_nFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_nFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_oFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_oFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_oFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_pFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_pFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_pFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_qFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_qFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_qFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_rFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_rFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_rFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_sFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_sFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_sFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_tFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_tFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_tFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_uFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_uFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_uFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_vFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_vFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_vFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_wFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_wFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_wFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_xFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_xFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_xFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_yFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_yFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_yFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EBigObject_zFieldOnEBigObject(ctx context.Context, field graphql.CollectedField, obj *model.EBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EBigObject_zFieldOnEBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnEBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EBigObject_zFieldOnEBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_id(ctx context.Context, field graphql.CollectedField, obj *model.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_fieldThrowsError(ctx context.Context, field graphql.CollectedField, obj *model.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_fieldThrowsError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldThrowsError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_fieldThrowsError(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findEmployeeByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findEmployeeByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindEmployeeByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findEmployeeByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "fieldThrowsError":
				return ec.fieldContext_Employee_fieldThrowsError(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findEmployeeByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_aFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_aFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_aFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_bFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_bFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_bFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_cFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_cFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_cFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_dFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_dFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_dFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_eFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_eFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_eFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_fFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_fFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_fFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_gFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_gFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_gFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_hFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_hFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_hFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_iFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_iFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_iFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_jFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_jFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_jFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_kFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_kFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_kFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_lFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_lFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_lFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_mFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_mFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_mFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_nFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_nFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_nFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_oFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_oFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_oFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_pFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_pFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_pFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_qFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_qFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_qFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_rFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_rFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_rFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_sFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_sFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_sFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_tFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_tFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_tFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_uFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_uFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_uFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_vFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_vFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_vFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_wFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_wFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_wFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_xFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_xFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_xFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_yFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_yFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_yFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FBigObject_zFieldOnFBigObject(ctx context.Context, field graphql.CollectedField, obj *model.FBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FBigObject_zFieldOnFBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnFBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FBigObject_zFieldOnFBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_aFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_aFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_aFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_bFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_bFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_bFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_cFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_cFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_cFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_dFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_dFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_dFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_eFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_eFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_eFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_fFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_fFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_fFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_gFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_gFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_gFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_hFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_hFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_hFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_iFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_iFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_iFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_jFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_jFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_jFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_kFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_kFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_kFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_lFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_lFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_lFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_mFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_mFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_mFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_nFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_nFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_nFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_oFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_oFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_oFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_pFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_pFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_pFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_qFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_qFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_qFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_rFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_rFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_rFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_sFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_sFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_sFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_tFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_tFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_tFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_uFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_uFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_uFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_vFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_vFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_vFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_wFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_wFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_wFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_xFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_xFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_xFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_yFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_yFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_yFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GBigObject_zFieldOnGBigObject(ctx context.Context, field graphql.CollectedField, obj *model.GBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GBigObject_zFieldOnGBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnGBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GBigObject_zFieldOnGBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_aFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_aFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_aFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_bFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_bFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_bFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_cFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_cFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_cFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_dFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_dFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_dFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_eFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_eFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_eFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_fFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_fFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_fFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_gFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_gFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_gFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_hFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_hFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_hFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_iFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_iFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_iFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_jFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_jFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_jFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_kFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_kFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_kFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_lFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_lFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_lFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_mFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_mFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_mFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_nFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_nFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_nFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_oFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_oFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_oFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_pFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_pFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_pFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_qFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_qFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_qFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_rFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_rFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_rFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_sFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_sFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_sFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_tFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_tFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_tFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_uFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_uFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_uFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_vFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_vFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_vFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_wFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_wFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_wFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_xFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_xFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_xFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_yFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_yFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_yFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HBigObject_zFieldOnHBigObject(ctx context.Context, field graphql.CollectedField, obj *model.HBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HBigObject_zFieldOnHBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnHBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HBigObject_zFieldOnHBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_aFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_aFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_aFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_bFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_bFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_bFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_cFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_cFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_cFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_dFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_dFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_dFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_eFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_eFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_eFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_fFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_fFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_fFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_gFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_gFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_gFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_hFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_hFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_hFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_iFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_iFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_iFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_jFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_jFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_jFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_kFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_kFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_kFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_lFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_lFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_lFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_mFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_mFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_mFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_nFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_nFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_nFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_oFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_oFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_oFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_pFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_pFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_pFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_qFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_qFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_qFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_rFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_rFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_rFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_sFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_sFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_sFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_tFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_tFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_tFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_uFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_uFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_uFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_vFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_vFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_vFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_wFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_wFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_wFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_xFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_xFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_xFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_yFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_yFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_yFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IBigObject_zFieldOnIBigObject(ctx context.Context, field graphql.CollectedField, obj *model.IBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IBigObject_zFieldOnIBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnIBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IBigObject_zFieldOnIBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InputResponse_arg(ctx context.Context, field graphql.CollectedField, obj *model.InputResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InputResponse_arg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Arg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InputResponse_arg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InputResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_aFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_aFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_aFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_bFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_bFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_bFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_cFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_cFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_cFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_dFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_dFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_dFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_eFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_eFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_eFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_fFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_fFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_fFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_gFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_gFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_gFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_hFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_hFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_hFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_iFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_iFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_iFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_jFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_jFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_jFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_kFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_kFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_kFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_lFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_lFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_lFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_mFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_mFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_mFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_nFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_nFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_nFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_oFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_oFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_oFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_pFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_pFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_pFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_qFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_qFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_qFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_rFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_rFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_rFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_sFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_sFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_sFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_tFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_tFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_tFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_uFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_uFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_uFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_vFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_vFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_vFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_wFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_wFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_wFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_xFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_xFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_xFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_yFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_yFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_yFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JBigObject_zFieldOnJBigObject(ctx context.Context, field graphql.CollectedField, obj *model.JBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JBigObject_zFieldOnJBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnJBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JBigObject_zFieldOnJBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_aFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_aFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_aFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_bFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_bFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_bFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_cFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_cFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_cFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_dFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_dFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_dFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_eFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_eFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_eFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_fFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_fFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_fFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_gFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_gFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_gFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_hFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_hFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_hFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_iFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_iFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_iFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_jFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_jFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_jFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_kFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_kFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_kFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_lFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_lFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_lFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_mFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_mFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_mFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_nFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_nFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_nFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_oFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_oFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_oFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_pFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_pFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_pFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_qFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_qFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_qFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_rFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_rFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_rFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_sFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_sFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_sFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_tFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_tFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_tFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_uFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_uFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_uFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_vFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_vFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_vFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_wFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_wFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_wFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_xFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_xFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_xFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_yFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_yFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_yFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KBigObject_zFieldOnKBigObject(ctx context.Context, field graphql.CollectedField, obj *model.KBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KBigObject_zFieldOnKBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnKBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KBigObject_zFieldOnKBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_aFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_aFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_aFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_bFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_bFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_bFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_cFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_cFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_cFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_dFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_dFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_dFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_eFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_eFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_eFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_fFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_fFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_fFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_gFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_gFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_gFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_hFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_hFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_hFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_iFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_iFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_iFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_jFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_jFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_jFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_kFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_kFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_kFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_lFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_lFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_lFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_mFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_mFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_mFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_nFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_nFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_nFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_oFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_oFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_oFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_pFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_pFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_pFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_qFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_qFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_qFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_rFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_rFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_rFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_sFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_sFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_sFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_tFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_tFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_tFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_uFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_uFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_uFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_vFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_vFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_vFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_wFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_wFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_wFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_xFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_xFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_xFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_yFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_yFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_yFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LBigObject_zFieldOnLBigObject(ctx context.Context, field graphql.CollectedField, obj *model.LBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LBigObject_zFieldOnLBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnLBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LBigObject_zFieldOnLBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_aFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_aFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_aFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_bFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_bFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_bFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_cFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_cFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_cFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_dFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_dFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_dFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_eFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_eFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_eFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_fFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_fFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_fFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_gFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_gFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_gFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_hFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_hFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_hFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_iFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_iFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_iFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_jFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_jFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_jFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_kFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_kFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_kFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_lFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_lFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_lFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_mFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_mFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_mFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_nFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_nFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_nFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_oFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_oFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_oFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_pFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_pFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_pFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_qFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_qFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_qFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_rFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_rFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_rFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_sFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_sFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_sFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_tFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_tFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_tFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_uFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_uFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_uFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_vFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_vFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_vFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_wFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_wFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_wFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_xFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_xFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_xFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_yFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_yFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_yFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MBigObject_zFieldOnMBigObject(ctx context.Context, field graphql.CollectedField, obj *model.MBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MBigObject_zFieldOnMBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnMBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MBigObject_zFieldOnMBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_aFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_aFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_aFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_bFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_bFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_bFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_cFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_cFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_cFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_dFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_dFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_dFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_eFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_eFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_eFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_fFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_fFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_fFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_gFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_gFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_gFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_hFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_hFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_hFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_iFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_iFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_iFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_jFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_jFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_jFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_kFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_kFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_kFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_lFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_lFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_lFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_mFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_mFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_mFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_nFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_nFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_nFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_oFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_oFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_oFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_pFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_pFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_pFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_qFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_qFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_qFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_rFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_rFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_rFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_sFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_sFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_sFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_tFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_tFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_tFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_uFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_uFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_uFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_vFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_vFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_vFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_wFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_wFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_wFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_xFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_xFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_xFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_yFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_yFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_yFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NBigObject_zFieldOnNBigObject(ctx context.Context, field graphql.CollectedField, obj *model.NBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NBigObject_zFieldOnNBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnNBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NBigObject_zFieldOnNBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NestedObject_deeplyNestedObjects(ctx context.Context, field graphql.CollectedField, obj *model.NestedObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NestedObject_deeplyNestedObjects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeeplyNestedObjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DeeplyNestedObject)
	fc.Result = res
	return ec.marshalNDeeplyNestedObject2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐDeeplyNestedObjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NestedObject_deeplyNestedObjects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NestedObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_aFieldOnDeeplyNestedObject(ctx, field)
			case "bFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_bFieldOnDeeplyNestedObject(ctx, field)
			case "cFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_cFieldOnDeeplyNestedObject(ctx, field)
			case "dFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_dFieldOnDeeplyNestedObject(ctx, field)
			case "eFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_eFieldOnDeeplyNestedObject(ctx, field)
			case "fFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_fFieldOnDeeplyNestedObject(ctx, field)
			case "gFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_gFieldOnDeeplyNestedObject(ctx, field)
			case "hFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_hFieldOnDeeplyNestedObject(ctx, field)
			case "iFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_iFieldOnDeeplyNestedObject(ctx, field)
			case "jFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_jFieldOnDeeplyNestedObject(ctx, field)
			case "kFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_kFieldOnDeeplyNestedObject(ctx, field)
			case "lFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_lFieldOnDeeplyNestedObject(ctx, field)
			case "mFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_mFieldOnDeeplyNestedObject(ctx, field)
			case "nFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_nFieldOnDeeplyNestedObject(ctx, field)
			case "oFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_oFieldOnDeeplyNestedObject(ctx, field)
			case "pFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_pFieldOnDeeplyNestedObject(ctx, field)
			case "qFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_qFieldOnDeeplyNestedObject(ctx, field)
			case "rFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_rFieldOnDeeplyNestedObject(ctx, field)
			case "sFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_sFieldOnDeeplyNestedObject(ctx, field)
			case "tFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_tFieldOnDeeplyNestedObject(ctx, field)
			case "uFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_uFieldOnDeeplyNestedObject(ctx, field)
			case "vFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_vFieldOnDeeplyNestedObject(ctx, field)
			case "wFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_wFieldOnDeeplyNestedObject(ctx, field)
			case "xFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_xFieldOnDeeplyNestedObject(ctx, field)
			case "yFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_yFieldOnDeeplyNestedObject(ctx, field)
			case "zFieldOnDeeplyNestedObject":
				return ec.fieldContext_DeeplyNestedObject_zFieldOnDeeplyNestedObject(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeeplyNestedObject", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_aFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_aFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_aFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_bFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_bFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_bFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_cFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_cFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_cFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_dFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_dFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_dFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_eFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_eFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_eFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_fFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_fFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_fFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_gFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_gFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_gFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_hFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_hFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_hFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_iFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_iFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_iFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_jFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_jFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_jFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_kFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_kFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_kFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_lFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_lFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_lFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_mFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_mFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_mFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_nFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_nFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_nFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_oFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_oFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_oFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_pFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_pFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_pFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_qFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_qFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_qFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_rFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_rFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_rFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_sFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_sFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_sFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_tFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_tFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_tFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_uFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_uFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_uFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_vFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_vFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_vFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_wFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_wFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_wFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_xFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_xFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_xFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_yFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_yFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_yFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OBigObject_zFieldOnOBigObject(ctx context.Context, field graphql.CollectedField, obj *model.OBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OBigObject_zFieldOnOBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnOBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OBigObject_zFieldOnOBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_aFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_aFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_aFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_bFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_bFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_bFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_cFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_cFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_cFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_dFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_dFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_dFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_eFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_eFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_eFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_fFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_fFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_fFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_gFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_gFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_gFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_hFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_hFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_hFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_iFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_iFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_iFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_jFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_jFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_jFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_kFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_kFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_kFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_lFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_lFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_lFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_mFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_mFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_mFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_nFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_nFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_nFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_oFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_oFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_oFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_pFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_pFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_pFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_qFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_qFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_qFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_rFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_rFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_rFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_sFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_sFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_sFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_tFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_tFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_tFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_uFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_uFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_uFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_vFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_vFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_vFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_wFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_wFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_wFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_xFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_xFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_xFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_yFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_yFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_yFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PBigObject_zFieldOnPBigObject(ctx context.Context, field graphql.CollectedField, obj *model.PBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PBigObject_zFieldOnPBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnPBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PBigObject_zFieldOnPBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_aFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_aFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_aFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_bFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_bFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_bFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_cFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_cFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_cFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_dFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_dFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_dFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_eFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_eFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_eFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_fFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_fFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_fFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_gFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_gFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_gFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_hFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_hFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_hFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_iFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_iFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_iFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_jFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_jFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_jFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_kFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_kFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_kFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_lFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_lFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_lFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_mFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_mFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_mFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_nFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_nFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_nFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_oFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_oFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_oFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_pFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_pFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_pFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_qFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_qFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_qFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_rFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_rFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_rFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_sFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_sFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_sFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_tFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_tFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_tFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_uFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_uFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_uFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_vFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_vFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_vFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_wFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_wFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_wFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_xFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_xFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_xFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_yFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_yFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_yFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QBigObject_zFieldOnQBigObject(ctx context.Context, field graphql.CollectedField, obj *model.QBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QBigObject_zFieldOnQBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnQBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QBigObject_zFieldOnQBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_headerValue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_headerValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().HeaderValue(rctx, fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_headerValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_headerValue_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_initPayloadValue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_initPayloadValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InitPayloadValue(rctx, fc.Args["key"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_initPayloadValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_initPayloadValue_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_initialPayload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_initialPayload(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InitialPayload(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_initialPayload(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_delay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_delay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Delay(rctx, fc.Args["response"].(string), fc.Args["ms"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_delay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_delay_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_bigResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_bigResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BigResponse(rctx, fc.Args["artificialDelay"].(int), fc.Args["bigObjects"].(int), fc.Args["nestedObjects"].(int), fc.Args["deeplyNestedObjects"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BigObject)
	fc.Result = res
	return ec.marshalNBigObject2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐBigObjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_bigResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nestedObjects":
				return ec.fieldContext_BigObject_nestedObjects(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BigObject", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_bigResponse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_bigAbstractResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_bigAbstractResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BigAbstractResponse(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.BigAbstractResponse)
	fc.Result = res
	return ec.marshalOBigAbstractResponse2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐBigAbstractResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_bigAbstractResponse(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BigAbstractResponse does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_rootFieldWithListArg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rootFieldWithListArg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RootFieldWithListArg(rctx, fc.Args["arg"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rootFieldWithListArg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rootFieldWithListArg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rootFieldWithNestedListArg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rootFieldWithNestedListArg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RootFieldWithNestedListArg(rctx, fc.Args["arg"].([][]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([][]string)
	fc.Result = res
	return ec.marshalNString2ᚕᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rootFieldWithNestedListArg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rootFieldWithNestedListArg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rootFieldWithListOfInputArg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rootFieldWithListOfInputArg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RootFieldWithListOfInputArg(rctx, fc.Args["arg"].([]*model.InputType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.InputResponse)
	fc.Result = res
	return ec.marshalNInputResponse2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rootFieldWithListOfInputArg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "arg":
				return ec.fieldContext_InputResponse_arg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InputResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rootFieldWithListOfInputArg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rootFieldWithListOfEnumArg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rootFieldWithListOfEnumArg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RootFieldWithListOfEnumArg(rctx, fc.Args["arg"].([]model.EnumType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.EnumType)
	fc.Result = res
	return ec.marshalNEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rootFieldWithListOfEnumArg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EnumType does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rootFieldWithListOfEnumArg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rootFieldWithInput(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rootFieldWithInput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RootFieldWithInput(rctx, fc.Args["arg"].(model.InputArg))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rootFieldWithInput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rootFieldWithInput_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_floatField(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_floatField(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FloatField(rctx, fc.Args["arg"].(*float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_floatField(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_floatField_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__entities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, fc.Args["representations"].([]map[string]interface{})), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__entities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type _Entity does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query__entities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_aFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_aFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_aFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_bFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_bFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_bFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_cFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_cFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_cFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_dFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_dFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_dFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_eFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_eFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_eFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_fFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_fFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_fFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_gFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_gFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_gFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_hFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_hFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_hFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_iFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_iFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_iFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_jFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_jFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_jFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_kFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_kFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_kFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_lFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_lFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_lFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_mFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_mFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_mFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_nFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_nFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_nFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_oFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_oFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_oFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_pFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_pFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_pFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_qFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_qFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_qFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_rFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_rFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_rFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_sFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_sFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_sFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_tFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_tFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_tFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_uFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_uFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_uFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_vFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_vFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_vFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_wFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_wFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_wFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_xFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_xFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_xFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_yFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_yFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_yFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RBigObject_zFieldOnRBigObject(ctx context.Context, field graphql.CollectedField, obj *model.RBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RBigObject_zFieldOnRBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnRBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RBigObject_zFieldOnRBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_aFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_aFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_aFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_bFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_bFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_bFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_cFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_cFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_cFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_dFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_dFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_dFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_eFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_eFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_eFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_fFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_fFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_fFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_gFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_gFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_gFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_hFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_hFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_hFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_iFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_iFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_iFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_jFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_jFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_jFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_kFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_kFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_kFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_lFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_lFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_lFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_mFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_mFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_mFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_nFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_nFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_nFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_oFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_oFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_oFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_pFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_pFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_pFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_qFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_qFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_qFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_rFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_rFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_rFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_sFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_sFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_sFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_tFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_tFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_tFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_uFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_uFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_uFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_vFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_vFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_vFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_wFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_wFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_wFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_xFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_xFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_xFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_yFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_yFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_yFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SBigObject_zFieldOnSBigObject(ctx context.Context, field graphql.CollectedField, obj *model.SBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SBigObject_zFieldOnSBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnSBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SBigObject_zFieldOnSBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_headerValue(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_headerValue(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().HeaderValue(rctx, fc.Args["name"].(string), fc.Args["repeat"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.TimestampedString):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNTimestampedString2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐTimestampedString(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_headerValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_TimestampedString_value(ctx, field)
			case "unixTime":
				return ec.fieldContext_TimestampedString_unixTime(ctx, field)
			case "seq":
				return ec.fieldContext_TimestampedString_seq(ctx, field)
			case "total":
				return ec.fieldContext_TimestampedString_total(ctx, field)
			case "initialPayload":
				return ec.fieldContext_TimestampedString_initialPayload(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimestampedString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_headerValue_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_initPayloadValue(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_initPayloadValue(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().InitPayloadValue(rctx, fc.Args["key"].(string), fc.Args["repeat"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.TimestampedString):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNTimestampedString2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐTimestampedString(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_initPayloadValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_TimestampedString_value(ctx, field)
			case "unixTime":
				return ec.fieldContext_TimestampedString_unixTime(ctx, field)
			case "seq":
				return ec.fieldContext_TimestampedString_seq(ctx, field)
			case "total":
				return ec.fieldContext_TimestampedString_total(ctx, field)
			case "initialPayload":
				return ec.fieldContext_TimestampedString_initialPayload(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimestampedString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_initPayloadValue_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_initialPayload(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_initialPayload(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().InitialPayload(rctx, fc.Args["repeat"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan map[string]interface{}):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOMap2map(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_initialPayload(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_initialPayload_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_returnsError(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_returnsError(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ReturnsError(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOString2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_returnsError(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_aFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_aFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_aFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_bFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_bFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_bFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_cFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_cFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_cFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_dFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_dFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_dFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_eFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_eFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_eFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_fFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_fFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_fFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_gFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_gFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_gFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_hFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_hFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_hFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_iFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_iFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_iFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_jFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_jFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_jFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_kFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_kFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_kFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_lFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_lFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_lFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_mFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_mFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_mFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_nFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_nFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_nFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_oFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_oFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_oFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_pFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_pFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_pFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_qFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_qFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_qFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_rFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_rFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_rFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_sFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_sFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_sFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_tFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_tFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_tFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_uFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_uFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_uFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_vFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_vFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_vFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_wFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_wFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_wFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_xFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_xFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_xFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_yFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_yFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_yFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TBigObject_zFieldOnTBigObject(ctx context.Context, field graphql.CollectedField, obj *model.TBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TBigObject_zFieldOnTBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnTBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TBigObject_zFieldOnTBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimestampedString_value(ctx context.Context, field graphql.CollectedField, obj *model.TimestampedString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimestampedString_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimestampedString_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimestampedString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimestampedString_unixTime(ctx context.Context, field graphql.CollectedField, obj *model.TimestampedString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimestampedString_unixTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnixTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimestampedString_unixTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimestampedString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimestampedString_seq(ctx context.Context, field graphql.CollectedField, obj *model.TimestampedString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimestampedString_seq(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimestampedString_seq(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimestampedString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimestampedString_total(ctx context.Context, field graphql.CollectedField, obj *model.TimestampedString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimestampedString_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimestampedString_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimestampedString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimestampedString_initialPayload(ctx context.Context, field graphql.CollectedField, obj *model.TimestampedString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimestampedString_initialPayload(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialPayload, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimestampedString_initialPayload(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimestampedString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_aFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_aFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_aFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_bFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_bFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_bFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_cFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_cFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_cFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_dFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_dFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_dFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_eFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_eFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_eFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_fFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_fFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_fFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_gFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_gFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_gFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_hFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_hFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_hFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_iFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_iFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_iFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_jFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_jFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_jFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_kFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_kFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_kFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_lFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_lFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_lFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_mFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_mFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_mFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_nFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_nFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_nFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_oFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_oFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_oFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_pFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_pFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_pFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_qFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_qFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_qFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_rFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_rFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_rFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_sFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_sFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_sFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_tFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_tFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_tFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_uFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_uFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_uFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_vFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_vFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_vFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_wFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_wFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_wFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_xFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_xFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_xFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_yFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_yFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_yFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UBigObject_zFieldOnUBigObject(ctx context.Context, field graphql.CollectedField, obj *model.UBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UBigObject_zFieldOnUBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnUBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UBigObject_zFieldOnUBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_aFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_aFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_aFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_bFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_bFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_bFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_cFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_cFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_cFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_dFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_dFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_dFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_eFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_eFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_eFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_fFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_fFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_fFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_gFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_gFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_gFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_hFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_hFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_hFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_iFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_iFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_iFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_jFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_jFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_jFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_kFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_kFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_kFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_lFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_lFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_lFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_mFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_mFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_mFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_nFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_nFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_nFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_oFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_oFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_oFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_pFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_pFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_pFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_qFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_qFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_qFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_rFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_rFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_rFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_sFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_sFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_sFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_tFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_tFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_tFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_uFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_uFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_uFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_vFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_vFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_vFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_wFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_wFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_wFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_xFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_xFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_xFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_yFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_yFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_yFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VBigObject_zFieldOnVBigObject(ctx context.Context, field graphql.CollectedField, obj *model.VBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VBigObject_zFieldOnVBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnVBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VBigObject_zFieldOnVBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_aFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_aFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_aFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_bFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_bFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_bFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_cFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_cFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_cFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_dFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_dFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_dFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_eFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_eFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_eFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_fFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_fFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_fFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_gFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_gFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_gFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_hFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_hFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_hFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_iFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_iFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_iFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_jFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_jFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_jFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_kFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_kFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_kFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_lFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_lFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_lFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_mFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_mFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_mFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_nFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_nFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_nFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_oFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_oFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_oFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_pFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_pFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_pFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_qFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_qFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_qFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_rFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_rFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_rFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_sFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_sFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_sFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_tFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_tFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_tFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_uFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_uFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_uFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_vFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_vFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_vFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_wFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_wFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_wFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_xFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_xFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_xFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_yFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_yFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_yFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WBigObject_zFieldOnWBigObject(ctx context.Context, field graphql.CollectedField, obj *model.WBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WBigObject_zFieldOnWBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnWBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WBigObject_zFieldOnWBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_aFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_aFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_aFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_bFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_bFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_bFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_cFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_cFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_cFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_dFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_dFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_dFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_eFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_eFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_eFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_fFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_fFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_fFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_gFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_gFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_gFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_hFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_hFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_hFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_iFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_iFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_iFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_jFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_jFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_jFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_kFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_kFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_kFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_lFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_lFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_lFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_mFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_mFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_mFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_nFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_nFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_nFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_oFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_oFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_oFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_pFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_pFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_pFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_qFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_qFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_qFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_rFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_rFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_rFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_sFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_sFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_sFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_tFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_tFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_tFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_uFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_uFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_uFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_vFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_vFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_vFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_wFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_wFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_wFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_xFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_xFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_xFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_yFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_yFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_yFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _XBigObject_zFieldOnXBigObject(ctx context.Context, field graphql.CollectedField, obj *model.XBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_XBigObject_zFieldOnXBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnXBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_XBigObject_zFieldOnXBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "XBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_aFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_aFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_aFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_bFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_bFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_bFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_cFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_cFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_cFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_dFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_dFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_dFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_eFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_eFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_eFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_fFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_fFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_fFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_gFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_gFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_gFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_hFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_hFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_hFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_iFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_iFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_iFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_jFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_jFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_jFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_kFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_kFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_kFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_lFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_lFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_lFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_mFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_mFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_mFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_nFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_nFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_nFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_oFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_oFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_oFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_pFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_pFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_pFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_qFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_qFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_qFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_rFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_rFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_rFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_sFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_sFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_sFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_tFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_tFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_tFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_uFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_uFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_uFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_vFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_vFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_vFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_wFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_wFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_wFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_xFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_xFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_xFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_yFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_yFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_yFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YBigObject_zFieldOnYBigObject(ctx context.Context, field graphql.CollectedField, obj *model.YBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YBigObject_zFieldOnYBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnYBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YBigObject_zFieldOnYBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_aFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_aFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_aFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_bFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_bFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_bFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_cFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_cFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_cFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_dFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_dFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_dFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_eFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_eFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_eFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_fFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_fFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_fFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_gFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_gFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_gFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_hFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_hFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_hFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_iFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_iFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_iFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_jFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_jFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_jFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_kFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_kFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_kFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_lFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_lFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_lFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_mFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_mFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_mFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_nFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_nFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_nFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_oFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_oFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_oFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_pFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_pFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_pFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_qFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_qFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_qFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_rFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_rFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_rFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_sFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_sFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_sFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_tFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_tFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_tFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_uFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_uFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_uFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_vFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_vFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_vFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_wFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_wFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_wFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_xFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_xFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_xFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_yFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_yFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_yFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ZBigObject_zFieldOnZBigObject(ctx context.Context, field graphql.CollectedField, obj *model.ZBigObject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ZBigObject_zFieldOnZBigObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZFieldOnZBigObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ZBigObject_zFieldOnZBigObject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ZBigObject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputInputArg(ctx context.Context, obj interface{}) (model.InputArg, error) {
	var it model.InputArg
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enums", "enum", "string", "strings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enums":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enums"))
			data, err := ec.unmarshalOEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enums = data
		case "enum":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enum"))
			data, err := ec.unmarshalOEnumType2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enum = data
		case "string":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("string"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.String = data
		case "strings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strings"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Strings = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputType(ctx context.Context, obj interface{}) (model.InputType, error) {
	var it model.InputType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"arg"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "arg":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arg"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Arg = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BigAbstractResponse(ctx context.Context, sel ast.SelectionSet, obj model.BigAbstractResponse) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ABigObject:
		return ec._ABigObject(ctx, sel, &obj)
	case *model.ABigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._ABigObject(ctx, sel, obj)
	case model.BBigObject:
		return ec._BBigObject(ctx, sel, &obj)
	case *model.BBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._BBigObject(ctx, sel, obj)
	case model.CBigObject:
		return ec._CBigObject(ctx, sel, &obj)
	case *model.CBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._CBigObject(ctx, sel, obj)
	case model.DBigObject:
		return ec._DBigObject(ctx, sel, &obj)
	case *model.DBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._DBigObject(ctx, sel, obj)
	case model.EBigObject:
		return ec._EBigObject(ctx, sel, &obj)
	case *model.EBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._EBigObject(ctx, sel, obj)
	case model.FBigObject:
		return ec._FBigObject(ctx, sel, &obj)
	case *model.FBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._FBigObject(ctx, sel, obj)
	case model.GBigObject:
		return ec._GBigObject(ctx, sel, &obj)
	case *model.GBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._GBigObject(ctx, sel, obj)
	case model.HBigObject:
		return ec._HBigObject(ctx, sel, &obj)
	case *model.HBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._HBigObject(ctx, sel, obj)
	case model.IBigObject:
		return ec._IBigObject(ctx, sel, &obj)
	case *model.IBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._IBigObject(ctx, sel, obj)
	case model.JBigObject:
		return ec._JBigObject(ctx, sel, &obj)
	case *model.JBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._JBigObject(ctx, sel, obj)
	case model.KBigObject:
		return ec._KBigObject(ctx, sel, &obj)
	case *model.KBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._KBigObject(ctx, sel, obj)
	case model.LBigObject:
		return ec._LBigObject(ctx, sel, &obj)
	case *model.LBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._LBigObject(ctx, sel, obj)
	case model.MBigObject:
		return ec._MBigObject(ctx, sel, &obj)
	case *model.MBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._MBigObject(ctx, sel, obj)
	case model.NBigObject:
		return ec._NBigObject(ctx, sel, &obj)
	case *model.NBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._NBigObject(ctx, sel, obj)
	case model.OBigObject:
		return ec._OBigObject(ctx, sel, &obj)
	case *model.OBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._OBigObject(ctx, sel, obj)
	case model.PBigObject:
		return ec._PBigObject(ctx, sel, &obj)
	case *model.PBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._PBigObject(ctx, sel, obj)
	case model.QBigObject:
		return ec._QBigObject(ctx, sel, &obj)
	case *model.QBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._QBigObject(ctx, sel, obj)
	case model.RBigObject:
		return ec._RBigObject(ctx, sel, &obj)
	case *model.RBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._RBigObject(ctx, sel, obj)
	case model.SBigObject:
		return ec._SBigObject(ctx, sel, &obj)
	case *model.SBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._SBigObject(ctx, sel, obj)
	case model.TBigObject:
		return ec._TBigObject(ctx, sel, &obj)
	case *model.TBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._TBigObject(ctx, sel, obj)
	case model.UBigObject:
		return ec._UBigObject(ctx, sel, &obj)
	case *model.UBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._UBigObject(ctx, sel, obj)
	case model.VBigObject:
		return ec._VBigObject(ctx, sel, &obj)
	case *model.VBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._VBigObject(ctx, sel, obj)
	case model.WBigObject:
		return ec._WBigObject(ctx, sel, &obj)
	case *model.WBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._WBigObject(ctx, sel, obj)
	case model.XBigObject:
		return ec._XBigObject(ctx, sel, &obj)
	case *model.XBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._XBigObject(ctx, sel, obj)
	case model.YBigObject:
		return ec._YBigObject(ctx, sel, &obj)
	case *model.YBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._YBigObject(ctx, sel, obj)
	case model.ZBigObject:
		return ec._ZBigObject(ctx, sel, &obj)
	case *model.ZBigObject:
		if obj == nil {
			return graphql.Null
		}
		return ec._ZBigObject(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Employee:
		return ec._Employee(ctx, sel, &obj)
	case *model.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var aBigObjectImplementors = []string{"ABigObject", "BigAbstractResponse"}

func (ec *executionContext) _ABigObject(ctx context.Context, sel ast.SelectionSet, obj *model.ABigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ABigObject")
		case "aFieldOnABigObject":
			out.Values[i] = ec._ABigObject_aFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnABigObject":
			out.Values[i] = ec._ABigObject_bFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnABigObject":
			out.Values[i] = ec._ABigObject_cFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnABigObject":
			out.Values[i] = ec._ABigObject_dFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnABigObject":
			out.Values[i] = ec._ABigObject_eFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnABigObject":
			out.Values[i] = ec._ABigObject_fFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnABigObject":
			out.Values[i] = ec._ABigObject_gFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnABigObject":
			out.Values[i] = ec._ABigObject_hFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnABigObject":
			out.Values[i] = ec._ABigObject_iFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnABigObject":
			out.Values[i] = ec._ABigObject_jFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnABigObject":
			out.Values[i] = ec._ABigObject_kFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnABigObject":
			out.Values[i] = ec._ABigObject_lFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnABigObject":
			out.Values[i] = ec._ABigObject_mFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnABigObject":
			out.Values[i] = ec._ABigObject_nFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnABigObject":
			out.Values[i] = ec._ABigObject_oFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnABigObject":
			out.Values[i] = ec._ABigObject_pFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnABigObject":
			out.Values[i] = ec._ABigObject_qFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnABigObject":
			out.Values[i] = ec._ABigObject_rFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnABigObject":
			out.Values[i] = ec._ABigObject_sFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnABigObject":
			out.Values[i] = ec._ABigObject_tFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnABigObject":
			out.Values[i] = ec._ABigObject_uFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnABigObject":
			out.Values[i] = ec._ABigObject_vFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnABigObject":
			out.Values[i] = ec._ABigObject_wFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnABigObject":
			out.Values[i] = ec._ABigObject_xFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnABigObject":
			out.Values[i] = ec._ABigObject_yFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnABigObject":
			out.Values[i] = ec._ABigObject_zFieldOnABigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bBigObjectImplementors = []string{"BBigObject", "BigAbstractResponse"}

func (ec *executionContext) _BBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.BBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BBigObject")
		case "aFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_aFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_bFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_cFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_dFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_eFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_fFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_gFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_hFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_iFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_jFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_kFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_lFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_mFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_nFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_oFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_pFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_qFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_rFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_sFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_tFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_uFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_vFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_wFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_xFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_yFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnBBigObject":
			out.Values[i] = ec._BBigObject_zFieldOnBBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bigObjectImplementors = []string{"BigObject"}

func (ec *executionContext) _BigObject(ctx context.Context, sel ast.SelectionSet, obj *model.BigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BigObject")
		case "nestedObjects":
			out.Values[i] = ec._BigObject_nestedObjects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cBigObjectImplementors = []string{"CBigObject", "BigAbstractResponse"}

func (ec *executionContext) _CBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.CBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CBigObject")
		case "aFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_aFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_bFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_cFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_dFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_eFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_fFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_gFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_hFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_iFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_jFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_kFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_lFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_mFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_nFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_oFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_pFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_qFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_rFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_sFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_tFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_uFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_vFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_wFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_xFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_yFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnCBigObject":
			out.Values[i] = ec._CBigObject_zFieldOnCBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dBigObjectImplementors = []string{"DBigObject", "BigAbstractResponse"}

func (ec *executionContext) _DBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.DBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DBigObject")
		case "aFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_aFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_bFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_cFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_dFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_eFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_fFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_gFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_hFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_iFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_jFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_kFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_lFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_mFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_nFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_oFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_pFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_qFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_rFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_sFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_tFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_uFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_vFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_wFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_xFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_yFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnDBigObject":
			out.Values[i] = ec._DBigObject_zFieldOnDBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deeplyNestedObjectImplementors = []string{"DeeplyNestedObject"}

func (ec *executionContext) _DeeplyNestedObject(ctx context.Context, sel ast.SelectionSet, obj *model.DeeplyNestedObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deeplyNestedObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeeplyNestedObject")
		case "aFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_aFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_bFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_cFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_dFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_eFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_fFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_gFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_hFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_iFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_jFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_kFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_lFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_mFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_nFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_oFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_pFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_qFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_rFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_sFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_tFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_uFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_vFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_wFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_xFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_yFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnDeeplyNestedObject":
			out.Values[i] = ec._DeeplyNestedObject_zFieldOnDeeplyNestedObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eBigObjectImplementors = []string{"EBigObject", "BigAbstractResponse"}

func (ec *executionContext) _EBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.EBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EBigObject")
		case "aFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_aFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_bFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_cFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_dFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_eFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_fFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_gFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_hFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_iFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_jFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_kFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_lFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_mFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_nFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_oFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_pFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_qFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_rFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_sFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_tFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_uFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_vFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_wFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_xFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_yFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnEBigObject":
			out.Values[i] = ec._EBigObject_zFieldOnEBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeImplementors = []string{"Employee", "_Entity"}

func (ec *executionContext) _Employee(ctx context.Context, sel ast.SelectionSet, obj *model.Employee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Employee")
		case "id":
			out.Values[i] = ec._Employee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fieldThrowsError":
			out.Values[i] = ec._Employee_fieldThrowsError(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findEmployeeByID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findEmployeeByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fBigObjectImplementors = []string{"FBigObject", "BigAbstractResponse"}

func (ec *executionContext) _FBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.FBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FBigObject")
		case "aFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_aFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_bFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_cFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_dFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_eFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_fFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_gFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_hFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_iFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_jFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_kFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_lFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_mFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_nFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_oFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_pFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_qFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_rFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_sFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_tFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_uFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_vFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_wFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_xFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_yFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnFBigObject":
			out.Values[i] = ec._FBigObject_zFieldOnFBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gBigObjectImplementors = []string{"GBigObject", "BigAbstractResponse"}

func (ec *executionContext) _GBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.GBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GBigObject")
		case "aFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_aFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_bFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_cFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_dFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_eFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_fFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_gFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_hFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_iFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_jFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_kFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_lFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_mFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_nFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_oFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_pFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_qFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_rFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_sFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_tFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_uFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_vFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_wFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_xFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_yFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnGBigObject":
			out.Values[i] = ec._GBigObject_zFieldOnGBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hBigObjectImplementors = []string{"HBigObject", "BigAbstractResponse"}

func (ec *executionContext) _HBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.HBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HBigObject")
		case "aFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_aFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_bFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_cFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_dFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_eFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_fFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_gFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_hFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_iFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_jFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_kFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_lFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_mFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_nFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_oFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_pFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_qFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_rFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_sFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_tFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_uFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_vFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_wFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_xFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_yFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnHBigObject":
			out.Values[i] = ec._HBigObject_zFieldOnHBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var iBigObjectImplementors = []string{"IBigObject", "BigAbstractResponse"}

func (ec *executionContext) _IBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.IBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IBigObject")
		case "aFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_aFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_bFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_cFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_dFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_eFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_fFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_gFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_hFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_iFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_jFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_kFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_lFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_mFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_nFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_oFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_pFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_qFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_rFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_sFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_tFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_uFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_vFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_wFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_xFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_yFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnIBigObject":
			out.Values[i] = ec._IBigObject_zFieldOnIBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var inputResponseImplementors = []string{"InputResponse"}

func (ec *executionContext) _InputResponse(ctx context.Context, sel ast.SelectionSet, obj *model.InputResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inputResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InputResponse")
		case "arg":
			out.Values[i] = ec._InputResponse_arg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jBigObjectImplementors = []string{"JBigObject", "BigAbstractResponse"}

func (ec *executionContext) _JBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.JBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JBigObject")
		case "aFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_aFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_bFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_cFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_dFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_eFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_fFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_gFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_hFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_iFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_jFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_kFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_lFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_mFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_nFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_oFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_pFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_qFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_rFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_sFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_tFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_uFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_vFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_wFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_xFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_yFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnJBigObject":
			out.Values[i] = ec._JBigObject_zFieldOnJBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var kBigObjectImplementors = []string{"KBigObject", "BigAbstractResponse"}

func (ec *executionContext) _KBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.KBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KBigObject")
		case "aFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_aFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_bFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_cFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_dFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_eFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_fFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_gFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_hFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_iFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_jFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_kFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_lFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_mFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_nFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_oFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_pFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_qFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_rFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_sFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_tFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_uFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_vFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_wFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_xFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_yFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnKBigObject":
			out.Values[i] = ec._KBigObject_zFieldOnKBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lBigObjectImplementors = []string{"LBigObject", "BigAbstractResponse"}

func (ec *executionContext) _LBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.LBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LBigObject")
		case "aFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_aFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_bFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_cFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_dFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_eFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_fFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_gFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_hFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_iFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_jFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_kFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_lFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_mFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_nFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_oFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_pFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_qFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_rFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_sFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_tFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_uFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_vFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_wFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_xFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_yFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnLBigObject":
			out.Values[i] = ec._LBigObject_zFieldOnLBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mBigObjectImplementors = []string{"MBigObject", "BigAbstractResponse"}

func (ec *executionContext) _MBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.MBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MBigObject")
		case "aFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_aFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_bFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_cFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_dFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_eFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_fFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_gFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_hFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_iFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_jFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_kFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_lFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_mFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_nFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_oFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_pFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_qFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_rFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_sFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_tFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_uFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_vFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_wFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_xFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_yFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnMBigObject":
			out.Values[i] = ec._MBigObject_zFieldOnMBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var nBigObjectImplementors = []string{"NBigObject", "BigAbstractResponse"}

func (ec *executionContext) _NBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.NBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NBigObject")
		case "aFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_aFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_bFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_cFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_dFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_eFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_fFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_gFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_hFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_iFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_jFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_kFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_lFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_mFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_nFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_oFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_pFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_qFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_rFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_sFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_tFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_uFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_vFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_wFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_xFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_yFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnNBigObject":
			out.Values[i] = ec._NBigObject_zFieldOnNBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var nestedObjectImplementors = []string{"NestedObject"}

func (ec *executionContext) _NestedObject(ctx context.Context, sel ast.SelectionSet, obj *model.NestedObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nestedObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NestedObject")
		case "deeplyNestedObjects":
			out.Values[i] = ec._NestedObject_deeplyNestedObjects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oBigObjectImplementors = []string{"OBigObject", "BigAbstractResponse"}

func (ec *executionContext) _OBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.OBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OBigObject")
		case "aFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_aFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_bFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_cFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_dFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_eFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_fFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_gFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_hFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_iFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_jFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_kFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_lFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_mFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_nFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_oFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_pFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_qFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_rFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_sFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_tFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_uFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_vFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_wFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_xFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_yFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnOBigObject":
			out.Values[i] = ec._OBigObject_zFieldOnOBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pBigObjectImplementors = []string{"PBigObject", "BigAbstractResponse"}

func (ec *executionContext) _PBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.PBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PBigObject")
		case "aFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_aFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_bFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_cFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_dFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_eFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_fFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_gFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_hFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_iFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_jFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_kFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_lFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_mFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_nFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_oFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_pFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_qFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_rFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_sFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_tFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_uFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_vFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_wFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_xFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_yFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnPBigObject":
			out.Values[i] = ec._PBigObject_zFieldOnPBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var qBigObjectImplementors = []string{"QBigObject", "BigAbstractResponse"}

func (ec *executionContext) _QBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.QBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, qBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QBigObject")
		case "aFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_aFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_bFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_cFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_dFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_eFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_fFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_gFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_hFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_iFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_jFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_kFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_lFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_mFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_nFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_oFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_pFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_qFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_rFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_sFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_tFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_uFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_vFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_wFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_xFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_yFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnQBigObject":
			out.Values[i] = ec._QBigObject_zFieldOnQBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "headerValue":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_headerValue(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "initPayloadValue":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_initPayloadValue(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "initialPayload":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_initialPayload(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "delay":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_delay(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "bigResponse":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bigResponse(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "bigAbstractResponse":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bigAbstractResponse(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rootFieldWithListArg":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rootFieldWithListArg(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rootFieldWithNestedListArg":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rootFieldWithNestedListArg(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rootFieldWithListOfInputArg":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rootFieldWithListOfInputArg(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rootFieldWithListOfEnumArg":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rootFieldWithListOfEnumArg(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rootFieldWithInput":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rootFieldWithInput(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "floatField":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_floatField(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "_entities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "_service":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rBigObjectImplementors = []string{"RBigObject", "BigAbstractResponse"}

func (ec *executionContext) _RBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.RBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RBigObject")
		case "aFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_aFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_bFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_cFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_dFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_eFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_fFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_gFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_hFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_iFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_jFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_kFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_lFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_mFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_nFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_oFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_pFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_qFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_rFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_sFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_tFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_uFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_vFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_wFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_xFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_yFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnRBigObject":
			out.Values[i] = ec._RBigObject_zFieldOnRBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sBigObjectImplementors = []string{"SBigObject", "BigAbstractResponse"}

func (ec *executionContext) _SBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.SBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SBigObject")
		case "aFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_aFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_bFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_cFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_dFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_eFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_fFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_gFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_hFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_iFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_jFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_kFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_lFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_mFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_nFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_oFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_pFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_qFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_rFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_sFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_tFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_uFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_vFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_wFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_xFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_yFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnSBigObject":
			out.Values[i] = ec._SBigObject_zFieldOnSBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "headerValue":
		return ec._Subscription_headerValue(ctx, fields[0])
	case "initPayloadValue":
		return ec._Subscription_initPayloadValue(ctx, fields[0])
	case "initialPayload":
		return ec._Subscription_initialPayload(ctx, fields[0])
	case "returnsError":
		return ec._Subscription_returnsError(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tBigObjectImplementors = []string{"TBigObject", "BigAbstractResponse"}

func (ec *executionContext) _TBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.TBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TBigObject")
		case "aFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_aFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_bFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_cFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_dFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_eFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_fFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_gFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_hFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_iFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_jFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_kFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_lFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_mFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_nFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_oFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_pFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_qFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_rFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_sFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_tFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_uFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_vFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_wFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_xFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_yFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnTBigObject":
			out.Values[i] = ec._TBigObject_zFieldOnTBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timestampedStringImplementors = []string{"TimestampedString"}

func (ec *executionContext) _TimestampedString(ctx context.Context, sel ast.SelectionSet, obj *model.TimestampedString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timestampedStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimestampedString")
		case "value":
			out.Values[i] = ec._TimestampedString_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unixTime":
			out.Values[i] = ec._TimestampedString_unixTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "seq":
			out.Values[i] = ec._TimestampedString_seq(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._TimestampedString_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "initialPayload":
			out.Values[i] = ec._TimestampedString_initialPayload(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var uBigObjectImplementors = []string{"UBigObject", "BigAbstractResponse"}

func (ec *executionContext) _UBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.UBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UBigObject")
		case "aFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_aFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_bFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_cFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_dFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_eFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_fFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_gFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_hFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_iFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_jFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_kFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_lFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_mFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_nFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_oFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_pFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_qFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_rFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_sFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_tFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_uFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_vFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_wFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_xFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_yFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnUBigObject":
			out.Values[i] = ec._UBigObject_zFieldOnUBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vBigObjectImplementors = []string{"VBigObject", "BigAbstractResponse"}

func (ec *executionContext) _VBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.VBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VBigObject")
		case "aFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_aFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_bFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_cFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_dFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_eFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_fFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_gFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_hFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_iFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_jFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_kFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_lFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_mFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_nFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_oFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_pFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_qFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_rFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_sFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_tFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_uFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_vFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_wFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_xFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_yFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnVBigObject":
			out.Values[i] = ec._VBigObject_zFieldOnVBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var wBigObjectImplementors = []string{"WBigObject", "BigAbstractResponse"}

func (ec *executionContext) _WBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.WBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, wBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WBigObject")
		case "aFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_aFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_bFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_cFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_dFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_eFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_fFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_gFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_hFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_iFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_jFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_kFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_lFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_mFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_nFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_oFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_pFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_qFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_rFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_sFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_tFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_uFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_vFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_wFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_xFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_yFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnWBigObject":
			out.Values[i] = ec._WBigObject_zFieldOnWBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var xBigObjectImplementors = []string{"XBigObject", "BigAbstractResponse"}

func (ec *executionContext) _XBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.XBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, xBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("XBigObject")
		case "aFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_aFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_bFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_cFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_dFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_eFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_fFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_gFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_hFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_iFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_jFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_kFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_lFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_mFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_nFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_oFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_pFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_qFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_rFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_sFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_tFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_uFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_vFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_wFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_xFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_yFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnXBigObject":
			out.Values[i] = ec._XBigObject_zFieldOnXBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yBigObjectImplementors = []string{"YBigObject", "BigAbstractResponse"}

func (ec *executionContext) _YBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.YBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YBigObject")
		case "aFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_aFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_bFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_cFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_dFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_eFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_fFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_gFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_hFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_iFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_jFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_kFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_lFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_mFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_nFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_oFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_pFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_qFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_rFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_sFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_tFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_uFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_vFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_wFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_xFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_yFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnYBigObject":
			out.Values[i] = ec._YBigObject_zFieldOnYBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var zBigObjectImplementors = []string{"ZBigObject", "BigAbstractResponse"}

func (ec *executionContext) _ZBigObject(ctx context.Context, sel ast.SelectionSet, obj *model.ZBigObject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, zBigObjectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ZBigObject")
		case "aFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_aFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_bFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_cFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_dFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_eFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_fFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_gFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_hFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_iFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_jFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_kFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_lFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_mFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_nFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "oFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_oFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_pFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_qFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_rFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_sFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_tFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_uFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_vFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "wFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_wFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_xFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_yFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zFieldOnZBigObject":
			out.Values[i] = ec._ZBigObject_zFieldOnZBigObject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNBigObject2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐBigObjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BigObject) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBigObject2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐBigObject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBigObject2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐBigObject(ctx context.Context, sel ast.SelectionSet, v *model.BigObject) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BigObject(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNDeeplyNestedObject2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐDeeplyNestedObjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DeeplyNestedObject) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeeplyNestedObject2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐDeeplyNestedObject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeeplyNestedObject2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐDeeplyNestedObject(ctx context.Context, sel ast.SelectionSet, v *model.DeeplyNestedObject) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeeplyNestedObject(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployee2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEmployee(ctx context.Context, sel ast.SelectionSet, v model.Employee) graphql.Marshaler {
	return ec._Employee(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployee2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *model.Employee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnumType2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx context.Context, v interface{}) (model.EnumType, error) {
	var res model.EnumType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnumType2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx context.Context, sel ast.SelectionSet, v model.EnumType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx context.Context, v interface{}) ([]model.EnumType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EnumType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnumType2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnumType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnumType2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNFieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNInputArg2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputArg(ctx context.Context, v interface{}) (model.InputArg, error) {
	res, err := ec.unmarshalInputInputArg(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInputResponse2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.InputResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInputResponse2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInputResponse2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputResponse(ctx context.Context, sel ast.SelectionSet, v *model.InputResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InputResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInputType2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputTypeᚄ(ctx context.Context, v interface{}) ([]*model.InputType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InputType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputType2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNInputType2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐInputType(ctx context.Context, v interface{}) (*model.InputType, error) {
	res, err := ec.unmarshalInputInputType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNNestedObject2ᚕᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐNestedObjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NestedObject) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNestedObject2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐNestedObject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNestedObject2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐNestedObject(ctx context.Context, sel ast.SelectionSet, v *model.NestedObject) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NestedObject(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚕstringᚄ(ctx context.Context, v interface{}) ([][]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2ᚕstringᚄ(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v [][]string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2ᚕstringᚄ(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTimestampedString2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐTimestampedString(ctx context.Context, sel ast.SelectionSet, v model.TimestampedString) graphql.Marshaler {
	return ec._TimestampedString(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimestampedString2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐTimestampedString(ctx context.Context, sel ast.SelectionSet, v *model.TimestampedString) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TimestampedString(ctx, sel, v)
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNfederation__Policy2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNfederation__Policy2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNfederation__Policy2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNfederation__Policy2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNfederation__Policy2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNfederation__Policy2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNfederation__Policy2ᚕᚕstringᚄ(ctx context.Context, v interface{}) ([][]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNfederation__Policy2ᚕstringᚄ(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNfederation__Policy2ᚕᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v [][]string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNfederation__Policy2ᚕstringᚄ(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNfederation__Scope2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNfederation__Scope2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNfederation__Scope2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNfederation__Scope2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNfederation__Scope2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNfederation__Scope2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNfederation__Scope2ᚕᚕstringᚄ(ctx context.Context, v interface{}) ([][]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNfederation__Scope2ᚕstringᚄ(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNfederation__Scope2ᚕᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v [][]string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNfederation__Scope2ᚕstringᚄ(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOBigAbstractResponse2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐBigAbstractResponse(ctx context.Context, sel ast.SelectionSet, v model.BigAbstractResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BigAbstractResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx context.Context, v interface{}) ([]model.EnumType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EnumType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnumType2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnumType2ᚕgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnumType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnumType2githubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEnumType2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx context.Context, v interface{}) (*model.EnumType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EnumType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnumType2ᚖgithubᚗcomᚋwundergraphᚋcosmoᚋdemoᚋpkgᚋsubgraphsᚋtest1ᚋsubgraphᚋmodelᚐEnumType(ctx context.Context, sel ast.SelectionSet, v *model.EnumType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
