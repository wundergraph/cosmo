extend schema
@link(url: "https://specs.apollo.dev/federation/v2.5", import: ["@authenticated", "@composeDirective", "@external", "@extends", "@inaccessible", "@interfaceObject", "@override", "@provides", "@key", "@requires", "@requiresScopes", "@shareable", "@tag"])

schema {
  query: Query
  mutation: Mutation
}

type Query {
  projects: [Project!]!
  project(id: ID!): Project
  projectStatuses: [ProjectStatus!]!
  projectsByStatus(status: ProjectStatus!): [Project!]!
  projectResources(projectId: ID!): [ProjectResource!]!
  searchProjects(query: String!): [ProjectSearchResult!]!
  milestones(projectId: ID!): [Milestone!]!
  tasks(projectId: ID!): [Task!]!
  projectActivities(projectId: ID!): [ProjectActivity!]!

  # query to simulate that the service goes down
  killService: Boolean!
  panic: Boolean!
}

type Mutation {
  addProject(project: ProjectInput!): Project!
  addMilestone(milestone: MilestoneInput!): Milestone!
  addTask(task: TaskInput!): Task!
  updateProjectStatus(projectId: ID!, status: ProjectStatus!): ProjectUpdate!
}

input ProjectInput {
  name: String!
  description: String
  startDate: String   # ISO date
  endDate: String     # ISO date
  status: ProjectStatus!
}

input MilestoneInput {
  projectId: ID!
  name: String!
  description: String
  dueDate: String     # ISO date
  status: MilestoneStatus!
}

input TaskInput {
  projectId: ID!
  assigneeId: Int
  name: String!
  description: String
  priority: TaskPriority!
  status: TaskStatus!
  estimatedHours: Float
}

# Interfaces
interface Node {
  id: ID!
}

interface Timestamped {
  startDate: String
  endDate: String
}

interface Assignable {
  assigneeId: Int
}

# Updated Project type implementing interfaces
type Project implements Node & Timestamped @key(fields: "id") {
  id: ID!
  name: String!
  description: String
  startDate: String   # ISO date
  endDate: String     # ISO date
  status: ProjectStatus!
  # Federated references:
  teamMembers: [Employee!]! 
  relatedProducts: [Product!]!  # from products subgraph
  # Project milestones or checkpoints
  milestoneIds: [String!]  # Array of milestone identifiers
  
  # New fields for extended functionality
  milestones: [Milestone!]!
  tasks: [Task!]!
  progress: Float  # Completion percentage
}

# New types - simplified with ID references only
type Milestone implements Node & Timestamped @key(fields: "id") {
  id: ID!
  projectId: ID!
  name: String!
  description: String
  startDate: String   # ISO date (when milestone work starts)
  endDate: String     # ISO date (milestone due date)
  status: MilestoneStatus!
  completionPercentage: Float
}

type Task implements Node & Assignable @key(fields: "id") {
  id: ID!
  projectId: ID!
  milestoneId: ID
  assigneeId: Int
  name: String!
  description: String
  priority: TaskPriority!
  status: TaskStatus!
  estimatedHours: Float
  actualHours: Float
  createdAt: String   # ISO date
  completedAt: String # ISO date
}

type ProjectUpdate implements Node {
  id: ID!
  projectId: ID!
  updatedById: Int!
  updateType: ProjectUpdateType!
  description: String!
  timestamp: String!  # ISO date
  metadata: String    # JSON metadata
}

# Enums
enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectUpdateType {
  STATUS_CHANGE
  MILESTONE_ADDED
  TASK_ASSIGNED
  PROGRESS_UPDATE
  TEAM_CHANGE
}

# Unions
union ProjectResource = Employee | Product | Milestone | Task

union ProjectSearchResult = Project | Milestone | Task

union ProjectActivity = ProjectUpdate | Milestone | Task

# Federated types (unchanged)
type Employee @key(fields: "id") {
  id: Int! 
  # New field resolved by this subgraph:
  projects: [Project!]
  # New fields for extended functionality
  assignedTasks: [Task!]!
  completedTasks: [Task!]!
}

type Product @key(fields: "upc") {
  upc: String! 
  # Projects contributing to this product:
  projects: [Project!]
}

