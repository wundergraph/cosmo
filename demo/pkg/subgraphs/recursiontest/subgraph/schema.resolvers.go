package subgraph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	generated1 "github.com/wundergraph/cosmo/demo/pkg/subgraphs/recursiontest/subgraph/generated"
	"github.com/wundergraph/cosmo/demo/pkg/subgraphs/recursiontest/subgraph/model"
)

// Manager is the resolver for the manager field.
func (r *queryResolver) Manager(ctx context.Context, id string) (*model.Manager, error) {
	return &model.Manager{
		ID: "1",
		Manager: &model.Manager{
			ID: "2",
			Manager: &model.Manager{
				ID: "3",
				Manager: &model.Manager{
					ID:      "4",
					Manager: nil,
				},
			},
		},
	}, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	return &model.Book{
		ID: "1",
		Author: &model.Author{
			ID: "1",
			Works: []*model.Book{
				{
					ID:     "2",
					Author: &model.Author{ID: "1"},
				},
				{
					ID:     "1",
					Author: &model.Author{ID: "1"},
				},
			},
		},
	}, nil
}

// Query returns generated1.QueryResolver implementation.
func (r *Resolver) Query() generated1.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
