// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Employee struct {
	ID       int            `json:"id"`
	Products []ProductNames `json:"products"`
}

func (Employee) IsEntity() {}

type ProductNames string

const (
	ProductNamesCloud          ProductNames = "CLOUD"
	ProductNamesCosmo          ProductNames = "COSMO"
	ProductNamesEngine         ProductNames = "ENGINE"
	ProductNamesFinance        ProductNames = "FINANCE"
	ProductNamesHumanResources ProductNames = "HUMAN_RESOURCES"
	ProductNamesMarketing      ProductNames = "MARKETING"
	ProductNamesSdk            ProductNames = "SDK"
)

var AllProductNames = []ProductNames{
	ProductNamesCloud,
	ProductNamesCosmo,
	ProductNamesEngine,
	ProductNamesFinance,
	ProductNamesHumanResources,
	ProductNamesMarketing,
	ProductNamesSdk,
}

func (e ProductNames) IsValid() bool {
	switch e {
	case ProductNamesCloud, ProductNamesCosmo, ProductNamesEngine, ProductNamesFinance, ProductNamesHumanResources, ProductNamesMarketing, ProductNamesSdk:
		return true
	}
	return false
}

func (e ProductNames) String() string {
	return string(e)
}

func (e *ProductNames) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductNames(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductNames", str)
	}
	return nil
}

func (e ProductNames) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
