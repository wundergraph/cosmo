package subgraph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	"github.com/wundergraph/cosmo/demo/pkg/subgraphs/products/subgraph/generated"
	"github.com/wundergraph/cosmo/demo/pkg/subgraphs/products/subgraph/model"
)

// URL is the resolver for the url field.
func (r *documentationResolver) URL(ctx context.Context, obj *model.Documentation, product model.ProductName) (string, error) {
	return documentationURL(product), nil
}

// Urls is the resolver for the urls field.
func (r *documentationResolver) Urls(ctx context.Context, obj *model.Documentation, products []model.ProductName) ([]string, error) {
	urls := make([]string, 0, 8)
	for _, product := range products {
		urls = append(urls, documentationURL(product))
	}
	return urls, nil
}

// ProductTypes is the resolver for the productTypes field.
func (r *queriesResolver) ProductTypes(ctx context.Context) ([]model.Products, error) {
	return products, nil
}

// Documentation returns generated.DocumentationResolver implementation.
func (r *Resolver) Documentation() generated.DocumentationResolver { return &documentationResolver{r} }

// Queries returns generated.QueriesResolver implementation.
func (r *Resolver) Queries() generated.QueriesResolver { return &queriesResolver{r} }

type documentationResolver struct{ *Resolver }
type queriesResolver struct{ *Resolver }
