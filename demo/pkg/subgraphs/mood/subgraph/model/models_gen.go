// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Employee struct {
	ID          int  `json:"id"`
	CurrentMood Mood `json:"currentMood"`
}

func (Employee) IsEntity() {}

type Mutation struct {
}

type Query struct {
}

type Mood string

const (
	MoodHappy Mood = "HAPPY"
	MoodSad   Mood = "SAD"
)

var AllMood = []Mood{
	MoodHappy,
	MoodSad,
}

func (e Mood) IsValid() bool {
	switch e {
	case MoodHappy, MoodSad:
		return true
	}
	return false
}

func (e Mood) String() string {
	return string(e)
}

func (e *Mood) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Mood(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Mood", str)
	}
	return nil
}

func (e Mood) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
