// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: generated/service.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	A7Service_QueryHello_FullMethodName = "/service.A7Service/QueryHello"
)

// A7ServiceClient is the client API for A7Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for A7Service
type A7ServiceClient interface {
	// The hello query
	QueryHello(ctx context.Context, in *QueryHelloRequest, opts ...grpc.CallOption) (*QueryHelloResponse, error)
}

type a7ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewA7ServiceClient(cc grpc.ClientConnInterface) A7ServiceClient {
	return &a7ServiceClient{cc}
}

func (c *a7ServiceClient) QueryHello(ctx context.Context, in *QueryHelloRequest, opts ...grpc.CallOption) (*QueryHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryHelloResponse)
	err := c.cc.Invoke(ctx, A7Service_QueryHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// A7ServiceServer is the server API for A7Service service.
// All implementations must embed UnimplementedA7ServiceServer
// for forward compatibility.
//
// Service definition for A7Service
type A7ServiceServer interface {
	// The hello query
	QueryHello(context.Context, *QueryHelloRequest) (*QueryHelloResponse, error)
	mustEmbedUnimplementedA7ServiceServer()
}

// UnimplementedA7ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedA7ServiceServer struct{}

func (UnimplementedA7ServiceServer) QueryHello(context.Context, *QueryHelloRequest) (*QueryHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHello not implemented")
}
func (UnimplementedA7ServiceServer) mustEmbedUnimplementedA7ServiceServer() {}
func (UnimplementedA7ServiceServer) testEmbeddedByValue()                   {}

// UnsafeA7ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to A7ServiceServer will
// result in compilation errors.
type UnsafeA7ServiceServer interface {
	mustEmbedUnimplementedA7ServiceServer()
}

func RegisterA7ServiceServer(s grpc.ServiceRegistrar, srv A7ServiceServer) {
	// If the following call pancis, it indicates UnimplementedA7ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&A7Service_ServiceDesc, srv)
}

func _A7Service_QueryHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(A7ServiceServer).QueryHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: A7Service_QueryHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(A7ServiceServer).QueryHello(ctx, req.(*QueryHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// A7Service_ServiceDesc is the grpc.ServiceDesc for A7Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var A7Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.A7Service",
	HandlerType: (*A7ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryHello",
			Handler:    _A7Service_QueryHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generated/service.proto",
}
