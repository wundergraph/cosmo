directive @eventsRequest(topic: String!, sourceName: String! = "default") on FIELD_DEFINITION
directive @eventsPublish(topic: String!, sourceName: String! = "default") on FIELD_DEFINITION
directive @eventsSubscribe(topic: String!, sourceName: String! = "default") on FIELD_DEFINITION

type PublishEventResult {
    success: Boolean!
}

type Query {
    employeeFromEvent(id: ID!): Employee! @eventsRequest(topic: "getEmployee.{{ args.id }}")
    employeeFromEventMyNats(employeeID: ID!): Employee! @eventsRequest(topic: "getEmployeeMyNats.{{ args.employeeID }}", sourceName: "my-nats")
}

input UpdateEmployeeInput {
    name: String
    email: String
}

type Mutation {
    updateEmployee(id: ID!, update: UpdateEmployeeInput!): PublishEventResult! @eventsPublish(topic: "updateEmployee.{{ args.id }}")
    updateEmployeeMyNats(employeeID: ID!, update: UpdateEmployeeInput!): PublishEventResult! @eventsPublish(topic: "updateEmployeeMyNats.{{ args.employeeID }}", sourceName: "my-nats")
}

type Subscription {
    employeeUpdated(employeeID: ID!): Employee! @eventsSubscribe(topic: "employeeUpdated.{{ args.employeeID }}")
    employeeUpdatedMyNats(id: ID!): Employee! @eventsSubscribe(topic: "employeeUpdatedMyNats.{{ args.id }}", sourceName: "my-nats")
}

type Employee @key(fields: "id", resolvable: false) {
  id: Int! @external
}