{
  "engineConfig": {
    "defaultFlushInterval": "500",
    "datasourceConfigurations": [
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "employee",
              "employees",
              "products",
              "teammates"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateEmployeeTag"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "currentTime",
              "countEmp",
              "countEmp2"
            ]
          },
          {
            "typeName": "Country",
            "fieldNames": [
              "key"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "details",
              "id",
              "tag",
              "role",
              "updatedAt",
              "startDate"
            ]
          },
          {
            "typeName": "Consultancy",
            "fieldNames": [
              "upc",
              "lead"
            ]
          },
          {
            "typeName": "Cosmo",
            "fieldNames": [
              "upc",
              "engineers",
              "lead"
            ]
          },
          {
            "typeName": "SDK",
            "fieldNames": [
              "upc",
              "engineers",
              "owner"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "RoleType",
            "fieldNames": [
              "departments",
              "title",
              "employees"
            ]
          },
          {
            "typeName": "Identifiable",
            "fieldNames": [
              "id"
            ]
          },
          {
            "typeName": "Engineer",
            "fieldNames": [
              "departments",
              "title",
              "employees",
              "engineerType"
            ]
          },
          {
            "typeName": "Marketer",
            "fieldNames": [
              "departments",
              "title",
              "employees"
            ]
          },
          {
            "typeName": "Operator",
            "fieldNames": [
              "departments",
              "title",
              "employees",
              "operatorType"
            ]
          },
          {
            "typeName": "Details",
            "fieldNames": [
              "forename",
              "location",
              "surname",
              "pastLocations"
            ]
          },
          {
            "typeName": "City",
            "fieldNames": [
              "type",
              "name",
              "country"
            ]
          },
          {
            "typeName": "CountryKey",
            "fieldNames": [
              "name"
            ]
          },
          {
            "typeName": "Time",
            "fieldNames": [
              "unixTime",
              "timeStamp"
            ]
          },
          {
            "typeName": "IProduct",
            "fieldNames": [
              "upc",
              "engineers"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4001/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4001/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "directive @goField(\n\tforceResolver: Boolean\n\tname: String\n\tomittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\ntype Query {\n  employee(id: Int!): Employee\n  employees: [Employee!]!\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n}\n\ntype Subscription {\n  \"\"\"\n  `currentTime` will return a stream of `Time` objects.\n  \"\"\"\n  currentTime: Time!\n  countEmp(max: Int! intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int! intervalMilliseconds: Int!): Int!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  surname: String! @shareable\n  pastLocations: [City!]!\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  details: Details! @shareable\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String @shareable\n  updatedAt: String!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  lead: Employee!\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n}\n"
          },
          "upstreamSchema": {
            "key": "7ca56b7592222b795cafd01267e86f974c7d0de5"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "0",
        "keys": [
          {
            "typeName": "Country",
            "selectionSet": "key { name }",
            "disableEntityResolver": true
          },
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "Consultancy",
            "selectionSet": "upc"
          },
          {
            "typeName": "Cosmo",
            "selectionSet": "upc"
          },
          {
            "typeName": "SDK",
            "selectionSet": "upc"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "findEmployees"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "details"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Animal",
            "fieldNames": [
              "class",
              "gender"
            ]
          },
          {
            "typeName": "Pet",
            "fieldNames": [
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Alligator",
            "fieldNames": [
              "class",
              "dangerous",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Cat",
            "fieldNames": [
              "class",
              "gender",
              "name",
              "type"
            ]
          },
          {
            "typeName": "Dog",
            "fieldNames": [
              "breed",
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Mouse",
            "fieldNames": [
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Pony",
            "fieldNames": [
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Details",
            "fieldNames": [
              "forename",
              "middlename",
              "surname",
              "hasChildren",
              "maritalStatus",
              "nationality",
              "pets"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4002/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4002/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "type Query {\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ntype Details {\n  forename: String! @shareable\n  middlename: String @deprecated\n  surname: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  details: Details @shareable\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n"
          },
          "upstreamSchema": {
            "key": "a2004ce79c42883f0c26905f98b3b76f69fcbf1b"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "1",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Country",
            "fieldNames": [
              "key"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "hobbies"
            ]
          },
          {
            "typeName": "SDK",
            "fieldNames": [
              "upc",
              "clientLanguages"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "countHob"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Exercise",
            "fieldNames": [
              "employees",
              "category"
            ]
          },
          {
            "typeName": "Experience",
            "fieldNames": [
              "yearsOfExperience"
            ]
          },
          {
            "typeName": "Flying",
            "fieldNames": [
              "employees",
              "planeModels",
              "yearsOfExperience"
            ]
          },
          {
            "typeName": "Gaming",
            "fieldNames": [
              "employees",
              "genres",
              "name",
              "yearsOfExperience"
            ]
          },
          {
            "typeName": "Other",
            "fieldNames": [
              "employees",
              "name"
            ]
          },
          {
            "typeName": "Programming",
            "fieldNames": [
              "employees",
              "languages"
            ]
          },
          {
            "typeName": "CountryKey",
            "fieldNames": [
              "name"
            ]
          },
          {
            "typeName": "Travelling",
            "fieldNames": [
              "employees",
              "countriesLived"
            ]
          },
          {
            "typeName": "Hobby",
            "fieldNames": [
              "employees"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4003/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4003/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "directive @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  category: ExerciseType!\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  countriesLived: [Country!]!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  hobbies: [Hobby!]\n}\n\ntype SDK @key(fields: \"upc\") {\n  upc: ID!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ntype Subscription {\n  countHob(max: Int! intervalMilliseconds: Int!): Int!\n}"
          },
          "upstreamSchema": {
            "key": "724c06483343451f5ee86d42c6a9f9cb2610b97d"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "2",
        "keys": [
          {
            "typeName": "Country",
            "selectionSet": "key { name }",
            "disableEntityResolver": true
          },
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "SDK",
            "selectionSet": "upc"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "productTypes",
              "topSecretFederationFacts",
              "factTypes"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "addFact"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "products",
              "notes"
            ]
          },
          {
            "typeName": "Consultancy",
            "fieldNames": [
              "upc",
              "name"
            ]
          },
          {
            "typeName": "Cosmo",
            "fieldNames": [
              "upc",
              "name",
              "repositoryURL"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "TopSecretFact",
            "fieldNames": [
              "description",
              "factType"
            ]
          },
          {
            "typeName": "DirectiveFact",
            "fieldNames": [
              "title",
              "description",
              "factType"
            ]
          },
          {
            "typeName": "EntityFact",
            "fieldNames": [
              "title",
              "description",
              "factType"
            ]
          },
          {
            "typeName": "MiscellaneousFact",
            "fieldNames": [
              "title",
              "description",
              "factType"
            ]
          },
          {
            "typeName": "Documentation",
            "fieldNames": [
              "url",
              "urls"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4004/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4004/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "schema {\n  query: Queries\n  mutation: Mutation\n}\n\ntype Queries {\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n  factTypes: [TopSecretFactType!]\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE,\n  ENTITY,\n  MISCELLANEOUS,\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]){\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  products: [ProductName!]!\n  notes: String @override(from: \"employees\")\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n"
          },
          "upstreamSchema": {
            "key": "3137f2ca7ef4abe0c88c07c16256197ecb9f5673"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "3",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "Consultancy",
            "selectionSet": "upc"
          },
          {
            "typeName": "Cosmo",
            "selectionSet": "upc"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "headerValue",
              "initPayloadValue",
              "initialPayload",
              "delay"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "headerValue",
              "initPayloadValue",
              "initialPayload",
              "returnsError"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "TimestampedString",
            "fieldNames": [
              "value",
              "unixTime",
              "seq",
              "total",
              "initialPayload"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4006/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4006/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "type Query {\n  \"Returns the value of the received HTTP header.\"\n  headerValue(name: String!): String!\n  \"Returns the value of the given key in the WS initial payload.\"\n  initPayloadValue(key: String!): String!\n  initialPayload: Map\n  \"Returns response after the given delay\"\n  delay(response: String!, ms: Int!): String!\n}\n\nscalar Map\n\ntype TimestampedString {\n  \"The value of the string.\"\n  value: String!\n  \"The timestamp when the response was generated.\"\n  unixTime: Int!\n  \"Sequence number\"\n  seq: Int!\n  \"Total number of responses to be sent\"\n  total: Int!\n  initialPayload: Map\n}\n\ntype Subscription {\n  \"Returns a stream with the value of the received HTTP header.\"\n  headerValue(name: String!, repeat: Int): TimestampedString!\n  \"Returns a stream with the value of value of the given key in the WS initial payload.\"\n  initPayloadValue(key: String!, repeat: Int): TimestampedString!\n  \"Returns a stream with the value of the WS initial payload.\"\n  initialPayload(repeat: Int): Map\n  returnsError: String\n}\n"
          },
          "upstreamSchema": {
            "key": "bd94ba13e43ffd3586673fb3325ca7627e9b98f1"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "4"
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateAvailability"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "isAvailable"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4007/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4007/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "type Mutation {\n    updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n"
          },
          "upstreamSchema": {
            "key": "5fdda1c3fd39161632a5e8d70ac8aa781de47039"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "5",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateMood"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "currentMood"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4008/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4008/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "type Mutation {\n    updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\nenum Mood {\n    HAPPY\n    SAD\n}\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  currentMood: Mood!\n}\n"
          },
          "upstreamSchema": {
            "key": "02fab2519999b8e3d4671871fd2ab01b6bc321b7"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "6",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Country",
            "fieldNames": [
              "key",
              "language"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "CountryKey",
            "fieldNames": [
              "name"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4009/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4009/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\") {\n  key: CountryKey!\n  language: String\n}\n\ntype CountryKey {\n  name: String!\n}\n"
          },
          "upstreamSchema": {
            "key": "c22fbefe427c67589c258911d5697ff4ba708918"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "7",
        "keys": [
          {
            "typeName": "Country",
            "selectionSet": "key { name }"
          }
        ]
      },
      {
        "kind": "PUBSUB",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "employeeFromEvent",
              "employeeFromEventMyNats"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateEmployee",
              "updateEmployeeMyNats"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "employeeUpdated",
              "employeeUpdatedMyNats",
              "employeeUpdatedStream"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "edfs__PublishResult",
            "fieldNames": [
              "success"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "requestTimeoutSeconds": "10",
        "id": "8",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id",
            "disableEntityResolver": true
          }
        ],
        "customEvents": {
          "events": [
            {
              "type": "REQUEST",
              "typeName": "Query",
              "fieldName": "employeeFromEvent",
              "subjects": [
                "getEmployee.{{ args.id }}"
              ],
              "sourceName": "default"
            },
            {
              "type": "REQUEST",
              "typeName": "Query",
              "fieldName": "employeeFromEventMyNats",
              "subjects": [
                "getEmployeeMyNats.{{ args.employeeID }}"
              ],
              "sourceName": "my-nats"
            },
            {
              "typeName": "Mutation",
              "fieldName": "updateEmployee",
              "subjects": [
                "updateEmployee.{{ args.id }}"
              ],
              "sourceName": "default"
            },
            {
              "typeName": "Mutation",
              "fieldName": "updateEmployeeMyNats",
              "subjects": [
                "updateEmployeeMyNats.{{ args.employeeID }}"
              ],
              "sourceName": "my-nats"
            },
            {
              "type": "SUBSCRIBE",
              "typeName": "Subscription",
              "fieldName": "employeeUpdated",
              "subjects": [
                "employeeUpdated.{{ args.employeeID }}"
              ],
              "sourceName": "default"
            },
            {
              "type": "SUBSCRIBE",
              "typeName": "Subscription",
              "fieldName": "employeeUpdatedMyNats",
              "subjects": [
                "employeeUpdatedMyNats.{{ args.id }}",
                "employeeUpdatedMyNatsTwo.{{ args.id }}"
              ],
              "sourceName": "my-nats"
            },
            {
              "type": "SUBSCRIBE",
              "typeName": "Subscription",
              "fieldName": "employeeUpdatedStream",
              "subjects": [
                "employeeUpdated.{{ args.id }}"
              ],
              "sourceName": "default",
              "streamConfiguration": {
                "consumerName": "consumerName",
                "streamName": "streamName"
              }
            }
          ]
        }
      }
    ],
    "fieldConfigurations": [
      {
        "typeName": "Query",
        "fieldName": "employee",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "teammates",
        "argumentsConfiguration": [
          {
            "name": "team",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "findEmployees",
        "argumentsConfiguration": [
          {
            "name": "criteria",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "headerValue",
        "argumentsConfiguration": [
          {
            "name": "name",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "initPayloadValue",
        "argumentsConfiguration": [
          {
            "name": "key",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "delay",
        "argumentsConfiguration": [
          {
            "name": "response",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "ms",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeFromEvent",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeFromEventMyNats",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeTag",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "tag",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "addFact",
        "argumentsConfiguration": [
          {
            "name": "fact",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "write:fact"
              ]
            },
            {
              "requiredAndScopes": [
                "write:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateAvailability",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "isAvailable",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateMood",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "mood",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployee",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "update",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyNats",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "update",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countEmp",
        "argumentsConfiguration": [
          {
            "name": "max",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "intervalMilliseconds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countEmp2",
        "argumentsConfiguration": [
          {
            "name": "max",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "intervalMilliseconds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countHob",
        "argumentsConfiguration": [
          {
            "name": "max",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "intervalMilliseconds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "headerValue",
        "argumentsConfiguration": [
          {
            "name": "name",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "repeat",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "initPayloadValue",
        "argumentsConfiguration": [
          {
            "name": "key",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "repeat",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "initialPayload",
        "argumentsConfiguration": [
          {
            "name": "repeat",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdated",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyNats",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedStream",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Documentation",
        "fieldName": "url",
        "argumentsConfiguration": [
          {
            "name": "product",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Documentation",
        "fieldName": "urls",
        "argumentsConfiguration": [
          {
            "name": "products",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Employee",
        "fieldName": "startDate",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:employee",
                "read:private"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "Query",
        "fieldName": "topSecretFederationFacts",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:fact"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "Query",
        "fieldName": "factTypes",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "MiscellaneousFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:miscellaneous",
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:miscellaneous",
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "MiscellaneousFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "TopSecretFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "TopSecretFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "title",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "title",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:entity"
              ]
            }
          ]
        }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:entity",
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:entity",
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:entity"
              ]
            }
          ]
        }
      }
    ],
    "graphqlSchema": "directive @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Query {\n  employee(id: Int!): Employee\n  employees: [Employee!]!\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n  factTypes: [TopSecretFactType!]\n\n  \"\"\"Returns the value of the received HTTP header.\"\"\"\n  headerValue(name: String!): String!\n\n  \"\"\"Returns the value of the given key in the WS initial payload.\"\"\"\n  initPayloadValue(key: String!): String!\n  initialPayload: Map\n\n  \"\"\"Returns response after the given delay\"\"\"\n  delay(response: String!, ms: Int!): String!\n  employeeFromEvent(id: ID!): Employee!\n  employeeFromEventMyNats(employeeID: ID!): Employee!\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  addFact(fact: TopSecretFactInput!): TopSecretFact!\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n  updateEmployee(id: ID!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyNats(employeeID: ID!, update: UpdateEmployeeInput!): edfs__PublishResult!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n\n  \"\"\"Returns a stream with the value of the received HTTP header.\"\"\"\n  headerValue(name: String!, repeat: Int): TimestampedString!\n\n  \"\"\"\n  Returns a stream with the value of value of the given key in the WS initial payload.\n  \"\"\"\n  initPayloadValue(key: String!, repeat: Int): TimestampedString!\n\n  \"\"\"Returns a stream with the value of the WS initial payload.\"\"\"\n  initialPayload(repeat: Int): Map\n  returnsError: String\n  employeeUpdated(employeeID: ID!): Employee!\n  employeeUpdatedMyNats(id: ID!): Employee!\n  employeeUpdatedStream(id: ID!): Employee!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n  language: String\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nscalar Map\n\ntype TimestampedString {\n  \"\"\"The value of the string.\"\"\"\n  value: String!\n\n  \"\"\"The timestamp when the response was generated.\"\"\"\n  unixTime: Int!\n\n  \"\"\"Sequence number\"\"\"\n  seq: Int!\n\n  \"\"\"Total number of responses to be sent\"\"\"\n  total: Int!\n  initialPayload: Map\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ninput UpdateEmployeeInput {\n  name: String\n  email: String\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\ninput edfs__StreamConfiguration {\n  consumerName: String!\n  streamName: String!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String!\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n  isAvailable: Boolean!\n  currentMood: Mood!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}",
    "stringStorage": {
      "7ca56b7592222b795cafd01267e86f974c7d0de5": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype City {\n  country: Country\n  name: String!\n  type: String!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  lead: Employee!\n  upc: ID!\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  lead: Employee!\n  upc: ID!\n}\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  pastLocations: [City!]!\n  surname: String! @shareable\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  details: Details! @shareable\n  id: Int!\n  notes: String @shareable\n  role: RoleType!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  tag: String!\n  updatedAt: String!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n  title: [String!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface IProduct {\n  engineers: [Employee!]!\n  upc: ID!\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n  title: [String!]!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ntype Query {\n  employee(id: Int!): Employee\n  employees: [Employee!]!\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  owner: Employee!\n  upc: ID!\n}\n\ntype Subscription {\n  countEmp(intervalMilliseconds: Int!, max: Int!): Int!\n  countEmp2(intervalMilliseconds: Int!, max: Int!): Int!\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n}\n\ntype Time {\n  timeStamp: String!\n  unixTime: Int!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "a2004ce79c42883f0c26905f98b3b76f69fcbf1b": "schema {\n  query: Query\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Alligator implements Animal & Pet {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ntype Cat implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\ntype Details {\n  forename: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  middlename: String @deprecated\n  nationality: Nationality!\n  pets: [Pet]\n  surname: String! @shareable\n}\n\ntype Dog implements Animal & Pet {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Employee @key(fields: \"id\") {\n  details: Details @shareable\n  id: Int!\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\ntype Mouse implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput NestedSearchInput {\n  hasChildren: Boolean\n  maritalStatus: MaritalStatus\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Query {\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "724c06483343451f5ee86d42c6a9f9cb2610b97d": "schema {\n  subscription: Subscription\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Employee @key(fields: \"id\") {\n  hobbies: [Hobby!]\n  id: Int!\n}\n\ntype Exercise implements Hobby {\n  category: ExerciseType!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  CARD\n  FPS\n  ROGUELITE\n  RPG\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype SDK @key(fields: \"upc\") {\n  clientLanguages: [ProgrammingLanguage!]!\n  upc: ID!\n}\n\ntype Subscription {\n  countHob(intervalMilliseconds: Int!, max: Int!): Int!\n}\n\ntype Travelling implements Hobby {\n  countriesLived: [Country!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nscalar openfed__FieldSet",
      "3137f2ca7ef4abe0c88c07c16256197ecb9f5673": "schema {\n  query: Queries\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Consultancy @key(fields: \"upc\") {\n  name: ProductName!\n  upc: ID!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  name: ProductName!\n  repositoryURL: String!\n  upc: ID!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n  factType: TopSecretFactType @authenticated\n  title: String! @authenticated\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  notes: String\n  products: [ProductName!]!\n}\n\ntype EntityFact implements TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:entity\", \"read:scalar\"], [\"read:entity\", \"read:all\"]])\n  factType: TopSecretFactType @authenticated @requiresScopes(scopes: [[\"read:entity\"]])\n  title: String! @requiresScopes(scopes: [[\"read:entity\"]])\n}\n\nscalar FactContent\n\ntype MiscellaneousFact implements TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:miscellaneous\", \"read:scalar\"], [\"read:miscellaneous\", \"read:all\"]])\n  factType: TopSecretFactType @authenticated\n  title: String!\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Queries {\n  factTypes: [TopSecretFactType!]\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n}\n\ninterface TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n  factType: TopSecretFactType @authenticated\n}\n\ninput TopSecretFactInput {\n  description: FactContent!\n  factType: TopSecretFactType!\n  title: String!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "bd94ba13e43ffd3586673fb3325ca7627e9b98f1": "schema {\n  query: Query\n  subscription: Subscription\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar Map\n\ntype Query {\n  \"\"\"Returns response after the given delay\"\"\"\n  delay(ms: Int!, response: String!): String!\n  \"\"\"Returns the value of the received HTTP header.\"\"\"\n  headerValue(name: String!): String!\n  \"\"\"Returns the value of the given key in the WS initial payload.\"\"\"\n  initPayloadValue(key: String!): String!\n  initialPayload: Map\n}\n\ntype Subscription {\n  \"\"\"Returns a stream with the value of the received HTTP header.\"\"\"\n  headerValue(name: String!, repeat: Int): TimestampedString!\n  \"\"\"\n  Returns a stream with the value of value of the given key in the WS initial payload.\n  \"\"\"\n  initPayloadValue(key: String!, repeat: Int): TimestampedString!\n  \"\"\"Returns a stream with the value of the WS initial payload.\"\"\"\n  initialPayload(repeat: Int): Map\n  returnsError: String\n}\n\ntype TimestampedString {\n  initialPayload: Map\n  \"\"\"Sequence number\"\"\"\n  seq: Int!\n  \"\"\"Total number of responses to be sent\"\"\"\n  total: Int!\n  \"\"\"The timestamp when the response was generated.\"\"\"\n  unixTime: Int!\n  \"\"\"The value of the string.\"\"\"\n  value: String!\n}\n\nscalar openfed__FieldSet",
      "5fdda1c3fd39161632a5e8d70ac8aa781de47039": "schema {\n  mutation: Mutation\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n\ntype Mutation {\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\n\nscalar openfed__FieldSet",
      "02fab2519999b8e3d4671871fd2ab01b6bc321b7": "schema {\n  mutation: Mutation\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  currentMood: Mood!\n  id: Int!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Mutation {\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\nscalar openfed__FieldSet",
      "c22fbefe427c67589c258911d5697ff4ba708918": "directive @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Country @key(fields: \"key { name }\") {\n  key: CountryKey!\n  language: String\n}\n\ntype CountryKey {\n  name: String!\n}\n\nscalar openfed__FieldSet",
      "5e356400ea40620d30486859f8cca86292a4a35e": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @edfs__publish(sourceName: String! = \"default\", subject: String!) on FIELD_DEFINITION\n\ndirective @edfs__request(sourceName: String! = \"default\", subject: String!) on FIELD_DEFINITION\n\ndirective @edfs__subscribe(sourceName: String! = \"default\", streamConfiguration: edfs__StreamConfiguration, subjects: [String!]!) on FIELD_DEFINITION\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\", resolvable: false) {\n  id: Int! @external\n}\n\ntype Mutation {\n  updateEmployee(id: ID!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__publish(subject: \"updateEmployee.{{ args.id }}\")\n  updateEmployeeMyNats(employeeID: ID!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__publish(subject: \"updateEmployeeMyNats.{{ args.employeeID }}\", sourceName: \"my-nats\")\n}\n\ntype Query {\n  employeeFromEvent(id: ID!): Employee! @edfs__request(subject: \"getEmployee.{{ args.id }}\")\n  employeeFromEventMyNats(employeeID: ID!): Employee! @edfs__request(subject: \"getEmployeeMyNats.{{ args.employeeID }}\", sourceName: \"my-nats\")\n}\n\ntype Subscription {\n  employeeUpdated(employeeID: ID!): Employee! @edfs__subscribe(subjects: [\"employeeUpdated.{{ args.employeeID }}\"])\n  employeeUpdatedMyNats(id: ID!): Employee! @edfs__subscribe(subjects: [\"employeeUpdatedMyNats.{{ args.id }}\", \"employeeUpdatedMyNatsTwo.{{ args.id }}\"], sourceName: \"my-nats\")\n  employeeUpdatedStream(id: ID!): Employee! @edfs__subscribe(subjects: [\"employeeUpdated.{{ args.id }}\"], streamConfiguration: {consumerName: \"consumerName\", streamName: \"streamName\"})\n}\n\ninput UpdateEmployeeInput {\n  email: String\n  name: String\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\ninput edfs__StreamConfiguration {\n  consumerName: String!\n  streamName: String!\n}\n\nscalar openfed__FieldSet"
    }
  },
  "subgraphs": [
    {
      "id": "0",
      "name": "employees",
      "routingUrl": "http://localhost:4001/graphql"
    },
    {
      "id": "1",
      "name": "family",
      "routingUrl": "http://localhost:4002/graphql"
    },
    {
      "id": "2",
      "name": "hobbies",
      "routingUrl": "http://localhost:4003/graphql"
    },
    {
      "id": "3",
      "name": "products",
      "routingUrl": "http://localhost:4004/graphql"
    },
    {
      "id": "4",
      "name": "test1",
      "routingUrl": "http://localhost:4006/graphql"
    },
    {
      "id": "5",
      "name": "availability",
      "routingUrl": "http://localhost:4007/graphql"
    },
    {
      "id": "6",
      "name": "mood",
      "routingUrl": "http://localhost:4008/graphql"
    },
    {
      "id": "7",
      "name": "countries",
      "routingUrl": "http://localhost:4009/graphql"
    },
    {
      "id": "8",
      "name": "employeeupdated"
    }
  ]
}
