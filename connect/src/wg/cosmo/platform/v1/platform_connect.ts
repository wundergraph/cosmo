// https://protobuf.dev/programming-guides/style/

// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=ts"
// @generated from file wg/cosmo/platform/v1/platform.proto (package wg.cosmo.platform.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AcceptOrDeclineInvitationRequest, AcceptOrDeclineInvitationResponse, AddReadmeRequest, AddReadmeResponse, AddSubgraphMemberRequest, AddSubgraphMemberResponse, CheckFederatedGraphRequest, CheckFederatedGraphResponse, CheckSubgraphSchemaRequest, CheckSubgraphSchemaResponse, ConfigureNamespaceLintConfigRequest, ConfigureNamespaceLintConfigResponse, CreateAPIKeyRequest, CreateAPIKeyResponse, CreateBillingPortalSessionRequest, CreateBillingPortalSessionResponse, CreateCheckoutSessionRequest, CreateCheckoutSessionResponse, CreateDiscussionRequest, CreateDiscussionResponse, CreateFederatedGraphRequest, CreateFederatedGraphResponse, CreateFederatedGraphTokenRequest, CreateFederatedGraphTokenResponse, CreateFederatedSubgraphRequest, CreateFederatedSubgraphResponse, CreateIntegrationRequest, CreateIntegrationResponse, CreateMonographRequest, CreateMonographResponse, CreateNamespaceRequest, CreateNamespaceResponse, CreateOIDCProviderRequest, CreateOIDCProviderResponse, CreateOperationIgnoreAllOverrideRequest, CreateOperationIgnoreAllOverrideResponse, CreateOperationOverridesRequest, CreateOperationOverridesResponse, CreateOrganizationRequest, CreateOrganizationResponse, CreateOrganizationWebhookConfigRequest, CreateOrganizationWebhookConfigResponse, DeleteAPIKeyRequest, DeleteAPIKeyResponse, DeleteDiscussionCommentRequest, DeleteDiscussionCommentResponse, DeleteFederatedGraphRequest, DeleteFederatedGraphResponse, DeleteFederatedSubgraphRequest, DeleteFederatedSubgraphResponse, DeleteIntegrationRequest, DeleteIntegrationResponse, DeleteMonographRequest, DeleteMonographResponse, DeleteNamespaceRequest, DeleteNamespaceResponse, DeleteOIDCProviderRequest, DeleteOIDCProviderResponse, DeleteOrganizationRequest, DeleteOrganizationResponse, DeleteOrganizationWebhookConfigRequest, DeleteOrganizationWebhookConfigResponse, DeleteRouterTokenRequest, DeleteRouterTokenResponse, EnableLintingForTheNamespaceRequest, EnableLintingForTheNamespaceResponse, FixSubgraphSchemaRequest, FixSubgraphSchemaResponse, ForceCheckSuccessRequest, ForceCheckSuccessResponse, GenerateRouterTokenRequest, GenerateRouterTokenResponse, GetAllDiscussionsRequest, GetAllDiscussionsResponse, GetAllOverridesRequest, GetAllOverridesResponse, GetAnalyticsViewRequest, GetAnalyticsViewResponse, GetAPIKeysRequest, GetAPIKeysResponse, GetAuditLogsRequest, GetAuditLogsResponse, GetBillingPlansRequest, GetBillingPlansResponse, GetChangelogBySchemaVersionRequest, GetChangelogBySchemaVersionResponse, GetCheckOperationsRequest, GetCheckOperationsResponse, GetChecksByFederatedGraphNameRequest, GetChecksByFederatedGraphNameResponse, GetCheckSummaryRequest, GetCheckSummaryResponse, GetClientsRequest, GetClientsResponse, GetCompositionDetailsRequest, GetCompositionDetailsResponse, GetCompositionsRequest, GetCompositionsResponse, GetConfigRequest, GetDashboardAnalyticsViewRequest, GetDashboardAnalyticsViewResponse, GetDiscussionRequest, GetDiscussionResponse, GetDiscussionSchemasRequest, GetDiscussionSchemasResponse, GetFederatedGraphByNameRequest, GetFederatedGraphByNameResponse, GetFederatedGraphChangelogRequest, GetFederatedGraphChangelogResponse, GetFederatedGraphsBySubgraphLabelsRequest, GetFederatedGraphsBySubgraphLabelsResponse, GetFederatedGraphSDLByNameRequest, GetFederatedGraphSDLByNameResponse, GetFederatedGraphsRequest, GetFederatedGraphsResponse, GetFieldUsageRequest, GetFieldUsageResponse, GetGraphMetricsRequest, GetGraphMetricsResponse, GetInvitationsRequest, GetInvitationsResponse, GetLatestSubgraphSDLRequest, GetLatestSubgraphSDLResponse, GetMetricsErrorRateRequest, GetMetricsErrorRateResponse, GetNamespaceLintConfigRequest, GetNamespaceLintConfigResponse, GetNamespacesRequest, GetNamespacesResponse, GetOIDCProviderRequest, GetOIDCProviderResponse, GetOperationContentRequest, GetOperationContentResponse, GetOperationOverridesRequest, GetOperationOverridesResponse, GetOrganizationIntegrationsRequest, GetOrganizationIntegrationsResponse, GetOrganizationMembersRequest, GetOrganizationMembersResponse, GetOrganizationRequestsCountRequest, GetOrganizationRequestsCountResponse, GetOrganizationWebhookConfigsRequest, GetOrganizationWebhookConfigsResponse, GetOrganizationWebhookMetaRequest, GetOrganizationWebhookMetaResponse, GetPersistedOperationsRequest, GetPersistedOperationsResponse, GetRoutersRequest, GetRoutersResponse, GetRouterTokensRequest, GetRouterTokensResponse, GetSdlBySchemaVersionRequest, GetSdlBySchemaVersionResponse, GetSubgraphByNameRequest, GetSubgraphByNameResponse, GetSubgraphMembersRequest, GetSubgraphMembersResponse, GetSubgraphMetricsErrorRateRequest, GetSubgraphMetricsErrorRateResponse, GetSubgraphMetricsRequest, GetSubgraphMetricsResponse, GetSubgraphSDLFromLatestCompositionRequest, GetSubgraphSDLFromLatestCompositionResponse, GetSubgraphsRequest, GetSubgraphsResponse, GetTraceRequest, GetTraceResponse, GetUserAccessiblePermissionsRequest, GetUserAccessiblePermissionsResponse, GetUserAccessibleResourcesRequest, GetUserAccessibleResourcesResponse, InviteUserRequest, InviteUserResponse, IsGitHubAppInstalledRequest, IsGitHubAppInstalledResponse, LeaveOrganizationRequest, LeaveOrganizationResponse, MigrateFromApolloRequest, MigrateFromApolloResponse, MigrateMonographRequest, MigrateMonographResponse, MoveGraphRequest, MoveGraphResponse, PublishFederatedSubgraphRequest, PublishFederatedSubgraphResponse, PublishMonographRequest, PublishMonographResponse, PublishPersistedOperationsRequest, PublishPersistedOperationsResponse, RemoveInvitationRequest, RemoveInvitationResponse, RemoveOperationIgnoreAllOverrideRequest, RemoveOperationIgnoreAllOverrideResponse, RemoveOperationOverridesRequest, RemoveOperationOverridesResponse, RemoveOrganizationMemberRequest, RemoveOrganizationMemberResponse, RemoveSubgraphMemberRequest, RemoveSubgraphMemberResponse, RenameNamespaceRequest, RenameNamespaceResponse, ReplyToDiscussionRequest, ReplyToDiscussionResponse, SetDiscussionResolutionRequest, SetDiscussionResolutionResponse, UpdateDiscussionCommentRequest, UpdateDiscussionCommentResponse, UpdateFeatureSettingsRequest, UpdateFeatureSettingsResponse, UpdateFederatedGraphRequest, UpdateFederatedGraphResponse, UpdateIntegrationConfigRequest, UpdateIntegrationConfigResponse, UpdateMonographRequest, UpdateMonographResponse, UpdateOrganizationDetailsRequest, UpdateOrganizationDetailsResponse, UpdateOrganizationWebhookConfigRequest, UpdateOrganizationWebhookConfigResponse, UpdateOrgMemberRoleRequest, UpdateOrgMemberRoleResponse, UpdateSubgraphRequest, UpdateSubgraphResponse, UpgradePlanRequest, UpgradePlanResponse, WhoAmIRequest, WhoAmIResponse } from "./platform_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { GetConfigResponse } from "../../node/v1/node_pb.js";

/**
 * @generated from service wg.cosmo.platform.v1.PlatformService
 */
export const PlatformService = {
  typeName: "wg.cosmo.platform.v1.PlatformService",
  methods: {
    /**
     * Namespaces
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateNamespace
     */
    createNamespace: {
      name: "CreateNamespace",
      I: CreateNamespaceRequest,
      O: CreateNamespaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteNamespace
     */
    deleteNamespace: {
      name: "DeleteNamespace",
      I: DeleteNamespaceRequest,
      O: DeleteNamespaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RenameNamespace
     */
    renameNamespace: {
      name: "RenameNamespace",
      I: RenameNamespaceRequest,
      O: RenameNamespaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetNamespaces
     */
    getNamespaces: {
      name: "GetNamespaces",
      I: GetNamespacesRequest,
      O: GetNamespacesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.MoveFederatedGraph
     */
    moveFederatedGraph: {
      name: "MoveFederatedGraph",
      I: MoveGraphRequest,
      O: MoveGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.MoveSubgraph
     */
    moveSubgraph: {
      name: "MoveSubgraph",
      I: MoveGraphRequest,
      O: MoveGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.MoveMonograph
     */
    moveMonograph: {
      name: "MoveMonograph",
      I: MoveGraphRequest,
      O: MoveGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateMonograph creates a monograph on the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateMonograph
     */
    createMonograph: {
      name: "CreateMonograph",
      I: CreateMonographRequest,
      O: CreateMonographResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PublishMonograph pushes the schema of the monograph to the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishMonograph
     */
    publishMonograph: {
      name: "PublishMonograph",
      I: PublishMonographRequest,
      O: PublishMonographResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteMonograph deletes a monograph from the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteMonograph
     */
    deleteMonograph: {
      name: "DeleteMonograph",
      I: DeleteMonographRequest,
      O: DeleteMonographResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateMonograph updates a monograph with new labels, urls, subscription config and readme
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateMonograph
     */
    updateMonograph: {
      name: "UpdateMonograph",
      I: UpdateMonographRequest,
      O: UpdateMonographResponse,
      kind: MethodKind.Unary,
    },
    /**
     * MigrateMonograph converts a monograph into a federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.MigrateMonograph
     */
    migrateMonograph: {
      name: "MigrateMonograph",
      I: MigrateMonographRequest,
      O: MigrateMonographResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateFederatedSubgraph creates a federated subgraph on the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph
     */
    createFederatedSubgraph: {
      name: "CreateFederatedSubgraph",
      I: CreateFederatedSubgraphRequest,
      O: CreateFederatedSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph
     */
    publishFederatedSubgraph: {
      name: "PublishFederatedSubgraph",
      I: PublishFederatedSubgraphRequest,
      O: PublishFederatedSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateFederatedGraph creates a federated graph on the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph
     */
    createFederatedGraph: {
      name: "CreateFederatedGraph",
      I: CreateFederatedGraphRequest,
      O: CreateFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteFederatedGraph deletes a federated graph from the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph
     */
    deleteFederatedGraph: {
      name: "DeleteFederatedGraph",
      I: DeleteFederatedGraphRequest,
      O: DeleteFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph
     */
    deleteFederatedSubgraph: {
      name: "DeleteFederatedSubgraph",
      I: DeleteFederatedSubgraphRequest,
      O: DeleteFederatedSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema
     */
    checkSubgraphSchema: {
      name: "CheckSubgraphSchema",
      I: CheckSubgraphSchemaRequest,
      O: CheckSubgraphSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema
     */
    fixSubgraphSchema: {
      name: "FixSubgraphSchema",
      I: FixSubgraphSchemaRequest,
      O: FixSubgraphSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateFederatedGraph updates a federated graph with new labels and routing url
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph
     */
    updateFederatedGraph: {
      name: "UpdateFederatedGraph",
      I: UpdateFederatedGraphRequest,
      O: UpdateFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSubgraph updates a subgraph with new labels and routing url
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateSubgraph
     */
    updateSubgraph: {
      name: "UpdateSubgraph",
      I: UpdateSubgraphRequest,
      O: UpdateSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph
     */
    checkFederatedGraph: {
      name: "CheckFederatedGraph",
      I: CheckFederatedGraphRequest,
      O: CheckFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * WhoAmI returns the identity of the user currently logged in.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.WhoAmI
     */
    whoAmI: {
      name: "WhoAmI",
      I: WhoAmIRequest,
      O: WhoAmIResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateRouterToken generates a temporary router token to fetch the router config.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GenerateRouterToken
     */
    generateRouterToken: {
      name: "GenerateRouterToken",
      I: GenerateRouterTokenRequest,
      O: GenerateRouterTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRouterTokens returns the router tokens of a federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetRouterTokens
     */
    getRouterTokens: {
      name: "GetRouterTokens",
      I: GetRouterTokensRequest,
      O: GetRouterTokensResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRouterToken deletes the router token of a federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteRouterToken
     */
    deleteRouterToken: {
      name: "DeleteRouterToken",
      I: DeleteRouterTokenRequest,
      O: DeleteRouterTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add persisted operations
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishPersistedOperations
     */
    publishPersistedOperations: {
      name: "PublishPersistedOperations",
      I: PublishPersistedOperationsRequest,
      O: PublishPersistedOperationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetPersistedOperations returns operations for the registered client id
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetPersistedOperations
     */
    getPersistedOperations: {
      name: "GetPersistedOperations",
      I: GetPersistedOperationsRequest,
      O: GetPersistedOperationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuditLogs returns the audit logs of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAuditLogs
     */
    getAuditLogs: {
      name: "GetAuditLogs",
      I: GetAuditLogsRequest,
      O: GetAuditLogsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphs returns the list of federated graphs.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs
     */
    getFederatedGraphs: {
      name: "GetFederatedGraphs",
      I: GetFederatedGraphsRequest,
      O: GetFederatedGraphsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphsBySubgraphLabels returns the list of federated graphs based on the subgraph labels
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphsBySubgraphLabels
     */
    getFederatedGraphsBySubgraphLabels: {
      name: "GetFederatedGraphsBySubgraphLabels",
      I: GetFederatedGraphsBySubgraphLabelsRequest,
      O: GetFederatedGraphsBySubgraphLabelsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphByName returns the federated graph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName
     */
    getFederatedGraphByName: {
      name: "GetFederatedGraphByName",
      I: GetFederatedGraphByNameRequest,
      O: GetFederatedGraphByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphSDLByName returns the latest valid SDL of the federated graph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName
     */
    getFederatedGraphSDLByName: {
      name: "GetFederatedGraphSDLByName",
      I: GetFederatedGraphSDLByNameRequest,
      O: GetFederatedGraphSDLByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubgraphs returns the list of subgraphs.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphs
     */
    getSubgraphs: {
      name: "GetSubgraphs",
      I: GetSubgraphsRequest,
      O: GetSubgraphsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubgraphByName returns the subgraph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphByName
     */
    getSubgraphByName: {
      name: "GetSubgraphByName",
      I: GetSubgraphByNameRequest,
      O: GetSubgraphByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubgraphSDLFromLatestComposition returns the latest valid SDL of the subgraph composed with the federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphSDLFromLatestComposition
     */
    getSubgraphSDLFromLatestComposition: {
      name: "GetSubgraphSDLFromLatestComposition",
      I: GetSubgraphSDLFromLatestCompositionRequest,
      O: GetSubgraphSDLFromLatestCompositionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetLatestSubgraphSDL returns the latest SDL of the subgraph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestSubgraphSDL
     */
    getLatestSubgraphSDL: {
      name: "GetLatestSubgraphSDL",
      I: GetLatestSubgraphSDLRequest,
      O: GetLatestSubgraphSDLResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName
     */
    getChecksByFederatedGraphName: {
      name: "GetChecksByFederatedGraphName",
      I: GetChecksByFederatedGraphNameRequest,
      O: GetChecksByFederatedGraphNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCheckSummary returns top level information about a schema check
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckSummary
     */
    getCheckSummary: {
      name: "GetCheckSummary",
      I: GetCheckSummaryRequest,
      O: GetCheckSummaryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCheckOperations returns affected operations for a check
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckOperations
     */
    getCheckOperations: {
      name: "GetCheckOperations",
      I: GetCheckOperationsRequest,
      O: GetCheckOperationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ForceCheckSuccess forces a failed check to be marked as successful
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.ForceCheckSuccess
     */
    forceCheckSuccess: {
      name: "ForceCheckSuccess",
      I: ForceCheckSuccessRequest,
      O: ForceCheckSuccessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOperationOverrides marks if the given set of changes as safe for an operation
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOperationOverrides
     */
    createOperationOverrides: {
      name: "CreateOperationOverrides",
      I: CreateOperationOverridesRequest,
      O: CreateOperationOverridesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveOperationOverride removes a change from the safe-list for an operation
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveOperationOverrides
     */
    removeOperationOverrides: {
      name: "RemoveOperationOverrides",
      I: RemoveOperationOverridesRequest,
      O: RemoveOperationOverridesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOperationIgnoreAllOverride adds an ignore all override for the operation
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOperationIgnoreAllOverride
     */
    createOperationIgnoreAllOverride: {
      name: "CreateOperationIgnoreAllOverride",
      I: CreateOperationIgnoreAllOverrideRequest,
      O: CreateOperationIgnoreAllOverrideResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveOperationIgnoreAllOverride removes the ignore all override for the operation
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveOperationIgnoreAllOverride
     */
    removeOperationIgnoreAllOverride: {
      name: "RemoveOperationIgnoreAllOverride",
      I: RemoveOperationIgnoreAllOverrideRequest,
      O: RemoveOperationIgnoreAllOverrideResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOperationOverrides retrieves all overrides for an operation hash
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOperationOverrides
     */
    getOperationOverrides: {
      name: "GetOperationOverrides",
      I: GetOperationOverridesRequest,
      O: GetOperationOverridesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAllOverrides returns all overrides for operations within a namespace
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAllOverrides
     */
    getAllOverrides: {
      name: "GetAllOverrides",
      I: GetAllOverridesRequest,
      O: GetAllOverridesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOperationContent returns the operation body by searching using the hash
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOperationContent
     */
    getOperationContent: {
      name: "GetOperationContent",
      I: GetOperationContentRequest,
      O: GetOperationContentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphChangelog returns the changelog of the federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog
     */
    getFederatedGraphChangelog: {
      name: "GetFederatedGraphChangelog",
      I: GetFederatedGraphChangelogRequest,
      O: GetFederatedGraphChangelogResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken
     */
    createFederatedGraphToken: {
      name: "CreateFederatedGraphToken",
      I: CreateFederatedGraphTokenRequest,
      O: CreateFederatedGraphTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationMembers returns the list of organization members
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers
     */
    getOrganizationMembers: {
      name: "GetOrganizationMembers",
      I: GetOrganizationMembersRequest,
      O: GetOrganizationMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * InviteUser invites an user to join the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.InviteUser
     */
    inviteUser: {
      name: "InviteUser",
      I: InviteUserRequest,
      O: InviteUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAPIKeys returns a list of API keys of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAPIKeys
     */
    getAPIKeys: {
      name: "GetAPIKeys",
      I: GetAPIKeysRequest,
      O: GetAPIKeysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAPIKey creates an API key for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateAPIKey
     */
    createAPIKey: {
      name: "CreateAPIKey",
      I: CreateAPIKeyRequest,
      O: CreateAPIKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAPIKey deletes an API key for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteAPIKey
     */
    deleteAPIKey: {
      name: "DeleteAPIKey",
      I: DeleteAPIKeyRequest,
      O: DeleteAPIKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveOrganizationMember removes the user from the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveOrganizationMember
     */
    removeOrganizationMember: {
      name: "RemoveOrganizationMember",
      I: RemoveOrganizationMemberRequest,
      O: RemoveOrganizationMemberResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveInvitation removes the org invitation of the user
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveInvitation
     */
    removeInvitation: {
      name: "RemoveInvitation",
      I: RemoveInvitationRequest,
      O: RemoveInvitationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetLatestValidRouterConfig returns the router config for the federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestValidRouterConfig
     */
    getLatestValidRouterConfig: {
      name: "GetLatestValidRouterConfig",
      I: GetConfigRequest,
      O: GetConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * MigrateFromApollo migrates the graphs from apollo to cosmo
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.MigrateFromApollo
     */
    migrateFromApollo: {
      name: "MigrateFromApollo",
      I: MigrateFromApolloRequest,
      O: MigrateFromApolloResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOrganizationWebhookConfig create a new webhook config for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOrganizationWebhookConfig
     */
    createOrganizationWebhookConfig: {
      name: "CreateOrganizationWebhookConfig",
      I: CreateOrganizationWebhookConfigRequest,
      O: CreateOrganizationWebhookConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationWebhookConfigs returns all webhooks for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookConfigs
     */
    getOrganizationWebhookConfigs: {
      name: "GetOrganizationWebhookConfigs",
      I: GetOrganizationWebhookConfigsRequest,
      O: GetOrganizationWebhookConfigsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationWebhookMeta returns the meta data for a particular webhook
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookMeta
     */
    getOrganizationWebhookMeta: {
      name: "GetOrganizationWebhookMeta",
      I: GetOrganizationWebhookMetaRequest,
      O: GetOrganizationWebhookMetaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrganizationWebhookConfig updates an existing webhook for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationWebhookConfig
     */
    updateOrganizationWebhookConfig: {
      name: "UpdateOrganizationWebhookConfig",
      I: UpdateOrganizationWebhookConfigRequest,
      O: UpdateOrganizationWebhookConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOrganizationWebhookConfig deletes an organization webhook
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganizationWebhookConfig
     */
    deleteOrganizationWebhookConfig: {
      name: "DeleteOrganizationWebhookConfig",
      I: DeleteOrganizationWebhookConfigRequest,
      O: DeleteOrganizationWebhookConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateIntegration create a new integration for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateIntegration
     */
    createIntegration: {
      name: "CreateIntegration",
      I: CreateIntegrationRequest,
      O: CreateIntegrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationIntegrations returns all integrations of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationIntegrations
     */
    getOrganizationIntegrations: {
      name: "GetOrganizationIntegrations",
      I: GetOrganizationIntegrationsRequest,
      O: GetOrganizationIntegrationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateIntegrationConfig updates an existing integration of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateIntegrationConfig
     */
    updateIntegrationConfig: {
      name: "UpdateIntegrationConfig",
      I: UpdateIntegrationConfigRequest,
      O: UpdateIntegrationConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteIntegration deletes an organization web integration hook
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteIntegration
     */
    deleteIntegration: {
      name: "DeleteIntegration",
      I: DeleteIntegrationRequest,
      O: DeleteIntegrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOrganization deletes an organization 
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganization
     */
    deleteOrganization: {
      name: "DeleteOrganization",
      I: DeleteOrganizationRequest,
      O: DeleteOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * LeaveOrganization removes a member from the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.LeaveOrganization
     */
    leaveOrganization: {
      name: "LeaveOrganization",
      I: LeaveOrganizationRequest,
      O: LeaveOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrganizationDetails updates the name and slug of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationDetails
     */
    updateOrganizationDetails: {
      name: "UpdateOrganizationDetails",
      I: UpdateOrganizationDetailsRequest,
      O: UpdateOrganizationDetailsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrgMemberRole updates the role of an org member
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrgMemberRole
     */
    updateOrgMemberRole: {
      name: "UpdateOrgMemberRole",
      I: UpdateOrgMemberRoleRequest,
      O: UpdateOrgMemberRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * IsGitHubAppInstalled checks if the cosmo github app is installed to a repository
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.IsGitHubAppInstalled
     */
    isGitHubAppInstalled: {
      name: "IsGitHubAppInstalled",
      I: IsGitHubAppInstalledRequest,
      O: IsGitHubAppInstalledResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOIDCProvider adds an oidc provider to the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOIDCProvider
     */
    createOIDCProvider: {
      name: "CreateOIDCProvider",
      I: CreateOIDCProviderRequest,
      O: CreateOIDCProviderResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOIDCProvider gets the oidc provider connected the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOIDCProvider
     */
    getOIDCProvider: {
      name: "GetOIDCProvider",
      I: GetOIDCProviderRequest,
      O: GetOIDCProviderResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOIDCProvider deletes the oidc provider connected the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOIDCProvider
     */
    deleteOIDCProvider: {
      name: "DeleteOIDCProvider",
      I: DeleteOIDCProviderRequest,
      O: DeleteOIDCProviderResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetClients returns all the clients of the federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetClients
     */
    getClients: {
      name: "GetClients",
      I: GetClientsRequest,
      O: GetClientsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRouters returns all active routers of the federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetRouters
     */
    getRouters: {
      name: "GetRouters",
      I: GetRoutersRequest,
      O: GetRoutersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetInvitations returns all the invitations a user has received
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetInvitations
     */
    getInvitations: {
      name: "GetInvitations",
      I: GetInvitationsRequest,
      O: GetInvitationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AcceptOrDeclineInvitation accepts or declines the invitation
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.AcceptOrDeclineInvitation
     */
    acceptOrDeclineInvitation: {
      name: "AcceptOrDeclineInvitation",
      I: AcceptOrDeclineInvitationRequest,
      O: AcceptOrDeclineInvitationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCompositions returns all the compositions of the federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCompositions
     */
    getCompositions: {
      name: "GetCompositions",
      I: GetCompositionsRequest,
      O: GetCompositionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCompositionDetails returns the details of that composition
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCompositionDetails
     */
    getCompositionDetails: {
      name: "GetCompositionDetails",
      I: GetCompositionDetailsRequest,
      O: GetCompositionDetailsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSdlBySchemaVersion returns the sdl based on the schema version
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSdlBySchemaVersion
     */
    getSdlBySchemaVersion: {
      name: "GetSdlBySchemaVersion",
      I: GetSdlBySchemaVersionRequest,
      O: GetSdlBySchemaVersionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetChangelogBySchemaVersion returns the changelog based on the schema version
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetChangelogBySchemaVersion
     */
    getChangelogBySchemaVersion: {
      name: "GetChangelogBySchemaVersion",
      I: GetChangelogBySchemaVersionRequest,
      O: GetChangelogBySchemaVersionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetUserAccessibleResources returns all the federated and subgraphs where the user has write permissions
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetUserAccessibleResources
     */
    getUserAccessibleResources: {
      name: "GetUserAccessibleResources",
      I: GetUserAccessibleResourcesRequest,
      O: GetUserAccessibleResourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateFeatureSettings updates the setinngs of features(ai, rbac, scim) of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFeatureSettings
     */
    updateFeatureSettings: {
      name: "UpdateFeatureSettings",
      I: UpdateFeatureSettingsRequest,
      O: UpdateFeatureSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddSubgraphMember adds a user to the subgraph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.AddSubgraphMember
     */
    addSubgraphMember: {
      name: "AddSubgraphMember",
      I: AddSubgraphMemberRequest,
      O: AddSubgraphMemberResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveSubgraphMember removes a member from the subgraph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveSubgraphMember
     */
    removeSubgraphMember: {
      name: "RemoveSubgraphMember",
      I: RemoveSubgraphMemberRequest,
      O: RemoveSubgraphMemberResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubgraphMembers gets all the members of the subgraph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphMembers
     */
    getSubgraphMembers: {
      name: "GetSubgraphMembers",
      I: GetSubgraphMembersRequest,
      O: GetSubgraphMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateDiscussion creates a new discussion with an opening comment
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateDiscussion
     */
    createDiscussion: {
      name: "CreateDiscussion",
      I: CreateDiscussionRequest,
      O: CreateDiscussionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ReplyToDiscussion creates a new comment in the discussion
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.ReplyToDiscussion
     */
    replyToDiscussion: {
      name: "ReplyToDiscussion",
      I: ReplyToDiscussionRequest,
      O: ReplyToDiscussionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAllDiscussions fetches all discussions which may be scoped to a schema version if passed
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAllDiscussions
     */
    getAllDiscussions: {
      name: "GetAllDiscussions",
      I: GetAllDiscussionsRequest,
      O: GetAllDiscussionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateDiscussionComment edits the comment in the discussion
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateDiscussionComment
     */
    updateDiscussionComment: {
      name: "UpdateDiscussionComment",
      I: UpdateDiscussionCommentRequest,
      O: UpdateDiscussionCommentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteDiscussionComment deletes the comment or the discussion if it is an opening comment
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteDiscussionComment
     */
    deleteDiscussionComment: {
      name: "DeleteDiscussionComment",
      I: DeleteDiscussionCommentRequest,
      O: DeleteDiscussionCommentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDiscussion gets the entire discussion thread
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDiscussion
     */
    getDiscussion: {
      name: "GetDiscussion",
      I: GetDiscussionRequest,
      O: GetDiscussionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDiscussionSchemas gets the reference and latest schema of the target graph in which the discussion was created
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDiscussionSchemas
     */
    getDiscussionSchemas: {
      name: "GetDiscussionSchemas",
      I: GetDiscussionSchemasRequest,
      O: GetDiscussionSchemasResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SetDiscussionResolutionRequest marks the discussion as resolved or not
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.SetDiscussionResolution
     */
    setDiscussionResolution: {
      name: "SetDiscussionResolution",
      I: SetDiscussionResolutionRequest,
      O: SetDiscussionResolutionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddReadme adds a readme of a target, can be a subgraph or a federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.AddReadme
     */
    addReadme: {
      name: "AddReadme",
      I: AddReadmeRequest,
      O: AddReadmeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetUserAccessiblePermissions returns all the federated and subgraphs where the user has write permissions
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetUserAccessiblePermissions
     */
    getUserAccessiblePermissions: {
      name: "GetUserAccessiblePermissions",
      I: GetUserAccessiblePermissionsRequest,
      O: GetUserAccessiblePermissionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Analytics
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAnalyticsView
     */
    getAnalyticsView: {
      name: "GetAnalyticsView",
      I: GetAnalyticsViewRequest,
      O: GetAnalyticsViewResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView
     */
    getDashboardAnalyticsView: {
      name: "GetDashboardAnalyticsView",
      I: GetDashboardAnalyticsViewRequest,
      O: GetDashboardAnalyticsViewResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetTrace
     */
    getTrace: {
      name: "GetTrace",
      I: GetTraceRequest,
      O: GetTraceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetGraphMetrics
     */
    getGraphMetrics: {
      name: "GetGraphMetrics",
      I: GetGraphMetricsRequest,
      O: GetGraphMetricsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetMetricsErrorRate
     */
    getMetricsErrorRate: {
      name: "GetMetricsErrorRate",
      I: GetMetricsErrorRateRequest,
      O: GetMetricsErrorRateResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphMetrics
     */
    getSubgraphMetrics: {
      name: "GetSubgraphMetrics",
      I: GetSubgraphMetricsRequest,
      O: GetSubgraphMetricsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphMetricsErrorRate
     */
    getSubgraphMetricsErrorRate: {
      name: "GetSubgraphMetricsErrorRate",
      I: GetSubgraphMetricsErrorRateRequest,
      O: GetSubgraphMetricsErrorRateResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFieldUsage
     */
    getFieldUsage: {
      name: "GetFieldUsage",
      I: GetFieldUsageRequest,
      O: GetFieldUsageResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationRequestsCount
     */
    getOrganizationRequestsCount: {
      name: "GetOrganizationRequestsCount",
      I: GetOrganizationRequestsCountRequest,
      O: GetOrganizationRequestsCountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOrganization
     */
    createOrganization: {
      name: "CreateOrganization",
      I: CreateOrganizationRequest,
      O: CreateOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EnableLintingForTheNamespace enables the lint check for the namespace passed.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.EnableLintingForTheNamespace
     */
    enableLintingForTheNamespace: {
      name: "EnableLintingForTheNamespace",
      I: EnableLintingForTheNamespaceRequest,
      O: EnableLintingForTheNamespaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ConfigureNamespaceLintConfig configures the lint config of the organization.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceLintConfig
     */
    configureNamespaceLintConfig: {
      name: "ConfigureNamespaceLintConfig",
      I: ConfigureNamespaceLintConfigRequest,
      O: ConfigureNamespaceLintConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetNamespaceLintConfig returns the lint config of the organization.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetNamespaceLintConfig
     */
    getNamespaceLintConfig: {
      name: "GetNamespaceLintConfig",
      I: GetNamespaceLintConfigRequest,
      O: GetNamespaceLintConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Billing
     * -----------------------------------------------------------------------------------------------------------------------------
     * Return the available billing plans
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetBillingPlans
     */
    getBillingPlans: {
      name: "GetBillingPlans",
      I: GetBillingPlansRequest,
      O: GetBillingPlansResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a Stripe checkout session
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateCheckoutSession
     */
    createCheckoutSession: {
      name: "CreateCheckoutSession",
      I: CreateCheckoutSessionRequest,
      O: CreateCheckoutSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a Stripe billing portal session
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateBillingPortalSession
     */
    createBillingPortalSession: {
      name: "CreateBillingPortalSession",
      I: CreateBillingPortalSessionRequest,
      O: CreateBillingPortalSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Upgrade the current plan
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpgradePlan
     */
    upgradePlan: {
      name: "UpgradePlan",
      I: UpgradePlanRequest,
      O: UpgradePlanResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

