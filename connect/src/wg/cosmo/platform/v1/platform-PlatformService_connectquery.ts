// https://protobuf.dev/programming-guides/style/

// @generated by protoc-gen-connect-query v0.6.0 with parameter "target=ts"
// @generated from file wg/cosmo/platform/v1/platform.proto (package wg.cosmo.platform.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckFederatedGraphRequest, CheckFederatedGraphResponse, CheckSubgraphSchemaRequest, CheckSubgraphSchemaResponse, CreateAPIKeyRequest, CreateAPIKeyResponse, CreateFederatedGraphRequest, CreateFederatedGraphResponse, CreateFederatedGraphTokenRequest, CreateFederatedGraphTokenResponse, CreateFederatedSubgraphRequest, CreateFederatedSubgraphResponse, CreateIntegrationRequest, CreateIntegrationResponse, CreateOIDCProviderRequest, CreateOIDCProviderResponse, CreateOrganizationWebhookConfigRequest, CreateOrganizationWebhookConfigResponse, DeleteAPIKeyRequest, DeleteAPIKeyResponse, DeleteFederatedGraphRequest, DeleteFederatedGraphResponse, DeleteFederatedSubgraphRequest, DeleteFederatedSubgraphResponse, DeleteIntegrationRequest, DeleteIntegrationResponse, DeleteOIDCProviderRequest, DeleteOIDCProviderResponse, DeleteOrganizationRequest, DeleteOrganizationResponse, DeleteOrganizationWebhookConfigRequest, DeleteOrganizationWebhookConfigResponse, DeleteRouterTokenRequest, DeleteRouterTokenResponse, FixSubgraphSchemaRequest, FixSubgraphSchemaResponse, ForceCheckSuccessRequest, ForceCheckSuccessResponse, GetAnalyticsViewRequest, GetAnalyticsViewResponse, GetAPIKeysRequest, GetAPIKeysResponse, GetCheckDetailsRequest, GetCheckDetailsResponse, GetCheckOperationsRequest, GetCheckOperationsResponse, GetChecksByFederatedGraphNameRequest, GetChecksByFederatedGraphNameResponse, GetCheckSummaryRequest, GetCheckSummaryResponse, GetClientsRequest, GetClientsResponse, GetDashboardAnalyticsViewRequest, GetDashboardAnalyticsViewResponse, GetFederatedGraphByNameRequest, GetFederatedGraphByNameResponse, GetFederatedGraphChangelogRequest, GetFederatedGraphChangelogResponse, GetFederatedGraphSDLByNameRequest, GetFederatedGraphSDLByNameResponse, GetFederatedGraphsRequest, GetFederatedGraphsResponse, GetFieldUsageRequest, GetFieldUsageResponse, GetGraphMetricsRequest, GetGraphMetricsResponse, GetLatestValidSubgraphSDLByNameRequest, GetLatestValidSubgraphSDLByNameResponse, GetMetricsErrorRateRequest, GetMetricsErrorRateResponse, GetOIDCProviderRequest, GetOIDCProviderResponse, GetOperationContentRequest, GetOperationContentResponse, GetOrganizationIntegrationsRequest, GetOrganizationIntegrationsResponse, GetOrganizationMembersRequest, GetOrganizationMembersResponse, GetOrganizationWebhookConfigsRequest, GetOrganizationWebhookConfigsResponse, GetOrganizationWebhookMetaRequest, GetOrganizationWebhookMetaResponse, GetRouterTokensRequest, GetRouterTokensResponse, GetSubgraphByNameRequest, GetSubgraphByNameResponse, GetSubgraphsRequest, GetSubgraphsResponse, GetTraceRequest, GetTraceResponse, InviteUserRequest, InviteUserResponse, IsGitHubAppInstalledRequest, IsGitHubAppInstalledResponse, LeaveOrganizationRequest, LeaveOrganizationResponse, MigrateFromApolloRequest, MigrateFromApolloResponse, PublishFederatedSubgraphRequest, PublishFederatedSubgraphResponse, PublishPersistedOperationsRequest, PublishPersistedOperationsResponse, RemoveInvitationRequest, RemoveInvitationResponse, UpdateFederatedGraphRequest, UpdateFederatedGraphResponse, UpdateIntegrationConfigRequest, UpdateIntegrationConfigResponse, UpdateOrganizationDetailsRequest, UpdateOrganizationDetailsResponse, UpdateOrganizationWebhookConfigRequest, UpdateOrganizationWebhookConfigResponse, UpdateOrgMemberRoleRequest, UpdateOrgMemberRoleResponse, UpdateSubgraphRequest, UpdateSubgraphResponse, WhoAmIRequest, WhoAmIResponse } from "./platform_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { GetConfigRequest, GetConfigResponse } from "../../node/v1/node_pb.js";
import { createQueryService, createUnaryHooks, UnaryFunctionsWithHooks } from "@connectrpc/connect-query";

export const typeName = "wg.cosmo.platform.v1.PlatformService";

/**
 * @generated from service wg.cosmo.platform.v1.PlatformService
 */
export const PlatformService = {
  typeName: "wg.cosmo.platform.v1.PlatformService",
  methods: {
    /**
     * CreateFederatedGraph creates a federated graph on the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph
     */
    createFederatedGraph: {
      name: "CreateFederatedGraph",
      I: CreateFederatedGraphRequest,
      O: CreateFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateFederatedSubgraph creates a federated subgraph on the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph
     */
    createFederatedSubgraph: {
      name: "CreateFederatedSubgraph",
      I: CreateFederatedSubgraphRequest,
      O: CreateFederatedSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph
     */
    publishFederatedSubgraph: {
      name: "PublishFederatedSubgraph",
      I: PublishFederatedSubgraphRequest,
      O: PublishFederatedSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteFederatedGraph deletes a federated graph from the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph
     */
    deleteFederatedGraph: {
      name: "DeleteFederatedGraph",
      I: DeleteFederatedGraphRequest,
      O: DeleteFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph
     */
    deleteFederatedSubgraph: {
      name: "DeleteFederatedSubgraph",
      I: DeleteFederatedSubgraphRequest,
      O: DeleteFederatedSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema
     */
    checkSubgraphSchema: {
      name: "CheckSubgraphSchema",
      I: CheckSubgraphSchemaRequest,
      O: CheckSubgraphSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema
     */
    fixSubgraphSchema: {
      name: "FixSubgraphSchema",
      I: FixSubgraphSchemaRequest,
      O: FixSubgraphSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateFederatedGraph updates a federated graph with new labels and routing url
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph
     */
    updateFederatedGraph: {
      name: "UpdateFederatedGraph",
      I: UpdateFederatedGraphRequest,
      O: UpdateFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSubgraph updates a subgraph with new labels and routing url
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateSubgraph
     */
    updateSubgraph: {
      name: "UpdateSubgraph",
      I: UpdateSubgraphRequest,
      O: UpdateSubgraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph
     */
    checkFederatedGraph: {
      name: "CheckFederatedGraph",
      I: CheckFederatedGraphRequest,
      O: CheckFederatedGraphResponse,
      kind: MethodKind.Unary,
    },
    /**
     * WhoAmI returns the identity of the user currently logged in.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.WhoAmI
     */
    whoAmI: {
      name: "WhoAmI",
      I: WhoAmIRequest,
      O: WhoAmIResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRouterTokens returns the router tokens of a federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetRouterTokens
     */
    getRouterTokens: {
      name: "GetRouterTokens",
      I: GetRouterTokensRequest,
      O: GetRouterTokensResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRouterToken deletes the router token of a federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteRouterToken
     */
    deleteRouterToken: {
      name: "DeleteRouterToken",
      I: DeleteRouterTokenRequest,
      O: DeleteRouterTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add persisted operations
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishPersistedOperations
     */
    publishPersistedOperations: {
      name: "PublishPersistedOperations",
      I: PublishPersistedOperationsRequest,
      O: PublishPersistedOperationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphs returns the list of federated graphs.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs
     */
    getFederatedGraphs: {
      name: "GetFederatedGraphs",
      I: GetFederatedGraphsRequest,
      O: GetFederatedGraphsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphByName returns the federated graph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName
     */
    getFederatedGraphByName: {
      name: "GetFederatedGraphByName",
      I: GetFederatedGraphByNameRequest,
      O: GetFederatedGraphByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphSDLByName returns the latest valid SDL of the federated graph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName
     */
    getFederatedGraphSDLByName: {
      name: "GetFederatedGraphSDLByName",
      I: GetFederatedGraphSDLByNameRequest,
      O: GetFederatedGraphSDLByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubgraphs returns the list of subgraphs.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphs
     */
    getSubgraphs: {
      name: "GetSubgraphs",
      I: GetSubgraphsRequest,
      O: GetSubgraphsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubgraphByName returns the subgraph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphByName
     */
    getSubgraphByName: {
      name: "GetSubgraphByName",
      I: GetSubgraphByNameRequest,
      O: GetSubgraphByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedSubgraphSDLByName returns the SDL of the subgraph by name.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestValidSubgraphSDLByName
     */
    getLatestValidSubgraphSDLByName: {
      name: "GetLatestValidSubgraphSDLByName",
      I: GetLatestValidSubgraphSDLByNameRequest,
      O: GetLatestValidSubgraphSDLByNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName
     */
    getChecksByFederatedGraphName: {
      name: "GetChecksByFederatedGraphName",
      I: GetChecksByFederatedGraphNameRequest,
      O: GetChecksByFederatedGraphNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCheckSummary returns top level information about a schema check
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckSummary
     */
    getCheckSummary: {
      name: "GetCheckSummary",
      I: GetCheckSummaryRequest,
      O: GetCheckSummaryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCheckDetails returns changes and composition errors recorded for a check
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckDetails
     */
    getCheckDetails: {
      name: "GetCheckDetails",
      I: GetCheckDetailsRequest,
      O: GetCheckDetailsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCheckOperations returns affected operations for a check
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckOperations
     */
    getCheckOperations: {
      name: "GetCheckOperations",
      I: GetCheckOperationsRequest,
      O: GetCheckOperationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ForceCheckSuccess forces a failed check to be marked as successful
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.ForceCheckSuccess
     */
    forceCheckSuccess: {
      name: "ForceCheckSuccess",
      I: ForceCheckSuccessRequest,
      O: ForceCheckSuccessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOperationContent returns the operation body by searching using the hash
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOperationContent
     */
    getOperationContent: {
      name: "GetOperationContent",
      I: GetOperationContentRequest,
      O: GetOperationContentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFederatedGraphChangelog returns the changelog of the federated graph.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog
     */
    getFederatedGraphChangelog: {
      name: "GetFederatedGraphChangelog",
      I: GetFederatedGraphChangelogRequest,
      O: GetFederatedGraphChangelogResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken
     */
    createFederatedGraphToken: {
      name: "CreateFederatedGraphToken",
      I: CreateFederatedGraphTokenRequest,
      O: CreateFederatedGraphTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationMembers returns the list of organization members
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers
     */
    getOrganizationMembers: {
      name: "GetOrganizationMembers",
      I: GetOrganizationMembersRequest,
      O: GetOrganizationMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * InviteUser invites an user to join the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.InviteUser
     */
    inviteUser: {
      name: "InviteUser",
      I: InviteUserRequest,
      O: InviteUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAPIKeys returns a list of API keys of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAPIKeys
     */
    getAPIKeys: {
      name: "GetAPIKeys",
      I: GetAPIKeysRequest,
      O: GetAPIKeysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAPIKey creates an API key for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateAPIKey
     */
    createAPIKey: {
      name: "CreateAPIKey",
      I: CreateAPIKeyRequest,
      O: CreateAPIKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAPIKey deletes an API key for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteAPIKey
     */
    deleteAPIKey: {
      name: "DeleteAPIKey",
      I: DeleteAPIKeyRequest,
      O: DeleteAPIKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveOrganizationMember removes the user from the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveInvitation
     */
    removeInvitation: {
      name: "RemoveInvitation",
      I: RemoveInvitationRequest,
      O: RemoveInvitationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetLatestValidRouterConfig returns the router config for the federated graph
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestValidRouterConfig
     */
    getLatestValidRouterConfig: {
      name: "GetLatestValidRouterConfig",
      I: GetConfigRequest,
      O: GetConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * MigrateFromApollo migrates the graphs from apollo to cosmo
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.MigrateFromApollo
     */
    migrateFromApollo: {
      name: "MigrateFromApollo",
      I: MigrateFromApolloRequest,
      O: MigrateFromApolloResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOrganizationWebhookConfig create a new webhook config for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOrganizationWebhookConfig
     */
    createOrganizationWebhookConfig: {
      name: "CreateOrganizationWebhookConfig",
      I: CreateOrganizationWebhookConfigRequest,
      O: CreateOrganizationWebhookConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationWebhookConfigs returns all webhooks for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookConfigs
     */
    getOrganizationWebhookConfigs: {
      name: "GetOrganizationWebhookConfigs",
      I: GetOrganizationWebhookConfigsRequest,
      O: GetOrganizationWebhookConfigsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationWebhookMeta returns the meta data for a particular webhook
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookMeta
     */
    getOrganizationWebhookMeta: {
      name: "GetOrganizationWebhookMeta",
      I: GetOrganizationWebhookMetaRequest,
      O: GetOrganizationWebhookMetaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrganizationWebhookConfig updates an existing webhook for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationWebhookConfig
     */
    updateOrganizationWebhookConfig: {
      name: "UpdateOrganizationWebhookConfig",
      I: UpdateOrganizationWebhookConfigRequest,
      O: UpdateOrganizationWebhookConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOrganizationWebhookConfig deletes an organization webhook
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganizationWebhookConfig
     */
    deleteOrganizationWebhookConfig: {
      name: "DeleteOrganizationWebhookConfig",
      I: DeleteOrganizationWebhookConfigRequest,
      O: DeleteOrganizationWebhookConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateIntegration create a new integration for the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateIntegration
     */
    createIntegration: {
      name: "CreateIntegration",
      I: CreateIntegrationRequest,
      O: CreateIntegrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrganizationIntegrations returns all integrations of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationIntegrations
     */
    getOrganizationIntegrations: {
      name: "GetOrganizationIntegrations",
      I: GetOrganizationIntegrationsRequest,
      O: GetOrganizationIntegrationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateIntegrationConfig updates an existing integration of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateIntegrationConfig
     */
    updateIntegrationConfig: {
      name: "UpdateIntegrationConfig",
      I: UpdateIntegrationConfigRequest,
      O: UpdateIntegrationConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteIntegration deletes an organization webhintegrationook
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteIntegration
     */
    deleteIntegration: {
      name: "DeleteIntegration",
      I: DeleteIntegrationRequest,
      O: DeleteIntegrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOrganization deletes an organization 
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganization
     */
    deleteOrganization: {
      name: "DeleteOrganization",
      I: DeleteOrganizationRequest,
      O: DeleteOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * LeaveOrganization removes a member from the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.LeaveOrganization
     */
    leaveOrganization: {
      name: "LeaveOrganization",
      I: LeaveOrganizationRequest,
      O: LeaveOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrganizationDetails updates the name and slug of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationDetails
     */
    updateOrganizationDetails: {
      name: "UpdateOrganizationDetails",
      I: UpdateOrganizationDetailsRequest,
      O: UpdateOrganizationDetailsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOrgMemberRole updates the role of an org member
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrgMemberRole
     */
    updateOrgMemberRole: {
      name: "UpdateOrgMemberRole",
      I: UpdateOrgMemberRoleRequest,
      O: UpdateOrgMemberRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * IsGitHubAppInstalled checks if the cosmo github app is installed to a repository
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.IsGitHubAppInstalled
     */
    isGitHubAppInstalled: {
      name: "IsGitHubAppInstalled",
      I: IsGitHubAppInstalledRequest,
      O: IsGitHubAppInstalledResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOIDCProvider adds an oidc provider to the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOIDCProvider
     */
    createOIDCProvider: {
      name: "CreateOIDCProvider",
      I: CreateOIDCProviderRequest,
      O: CreateOIDCProviderResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOIDCProvider gets the oidc provider connected the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOIDCProvider
     */
    getOIDCProvider: {
      name: "GetOIDCProvider",
      I: GetOIDCProviderRequest,
      O: GetOIDCProviderResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOIDCProvider deletes the oidc provider connected the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOIDCProvider
     */
    deleteOIDCProvider: {
      name: "DeleteOIDCProvider",
      I: DeleteOIDCProviderRequest,
      O: DeleteOIDCProviderResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetClients returns all the clients of the organization
     *
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetClients
     */
    getClients: {
      name: "GetClients",
      I: GetClientsRequest,
      O: GetClientsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAnalyticsView
     */
    getAnalyticsView: {
      name: "GetAnalyticsView",
      I: GetAnalyticsViewRequest,
      O: GetAnalyticsViewResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView
     */
    getDashboardAnalyticsView: {
      name: "GetDashboardAnalyticsView",
      I: GetDashboardAnalyticsViewRequest,
      O: GetDashboardAnalyticsViewResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetTrace
     */
    getTrace: {
      name: "GetTrace",
      I: GetTraceRequest,
      O: GetTraceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetGraphMetrics
     */
    getGraphMetrics: {
      name: "GetGraphMetrics",
      I: GetGraphMetricsRequest,
      O: GetGraphMetricsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetMetricsErrorRate
     */
    getMetricsErrorRate: {
      name: "GetMetricsErrorRate",
      I: GetMetricsErrorRateRequest,
      O: GetMetricsErrorRateResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFieldUsage
     */
    getFieldUsage: {
      name: "GetFieldUsage",
      I: GetFieldUsageRequest,
      O: GetFieldUsageResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
  }
} as const;

const $queryService = createQueryService({  service: PlatformService,});

/**
 * CreateFederatedGraph creates a federated graph on the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph
 */
export const createFederatedGraph: UnaryFunctionsWithHooks<CreateFederatedGraphRequest, CreateFederatedGraphResponse> = {   ...$queryService.createFederatedGraph,  ...createUnaryHooks($queryService.createFederatedGraph)};

/**
 * CreateFederatedSubgraph creates a federated subgraph on the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph
 */
export const createFederatedSubgraph: UnaryFunctionsWithHooks<CreateFederatedSubgraphRequest, CreateFederatedSubgraphResponse> = {   ...$queryService.createFederatedSubgraph,  ...createUnaryHooks($queryService.createFederatedSubgraph)};

/**
 * PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph
 */
export const publishFederatedSubgraph: UnaryFunctionsWithHooks<PublishFederatedSubgraphRequest, PublishFederatedSubgraphResponse> = {   ...$queryService.publishFederatedSubgraph,  ...createUnaryHooks($queryService.publishFederatedSubgraph)};

/**
 * DeleteFederatedGraph deletes a federated graph from the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph
 */
export const deleteFederatedGraph: UnaryFunctionsWithHooks<DeleteFederatedGraphRequest, DeleteFederatedGraphResponse> = {   ...$queryService.deleteFederatedGraph,  ...createUnaryHooks($queryService.deleteFederatedGraph)};

/**
 * DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph
 */
export const deleteFederatedSubgraph: UnaryFunctionsWithHooks<DeleteFederatedSubgraphRequest, DeleteFederatedSubgraphResponse> = {   ...$queryService.deleteFederatedSubgraph,  ...createUnaryHooks($queryService.deleteFederatedSubgraph)};

/**
 * CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema
 */
export const checkSubgraphSchema: UnaryFunctionsWithHooks<CheckSubgraphSchemaRequest, CheckSubgraphSchemaResponse> = {   ...$queryService.checkSubgraphSchema,  ...createUnaryHooks($queryService.checkSubgraphSchema)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema
 */
export const fixSubgraphSchema: UnaryFunctionsWithHooks<FixSubgraphSchemaRequest, FixSubgraphSchemaResponse> = {   ...$queryService.fixSubgraphSchema,  ...createUnaryHooks($queryService.fixSubgraphSchema)};

/**
 * UpdateFederatedGraph updates a federated graph with new labels and routing url
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph
 */
export const updateFederatedGraph: UnaryFunctionsWithHooks<UpdateFederatedGraphRequest, UpdateFederatedGraphResponse> = {   ...$queryService.updateFederatedGraph,  ...createUnaryHooks($queryService.updateFederatedGraph)};

/**
 * UpdateSubgraph updates a subgraph with new labels and routing url
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateSubgraph
 */
export const updateSubgraph: UnaryFunctionsWithHooks<UpdateSubgraphRequest, UpdateSubgraphResponse> = {   ...$queryService.updateSubgraph,  ...createUnaryHooks($queryService.updateSubgraph)};

/**
 * CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph
 */
export const checkFederatedGraph: UnaryFunctionsWithHooks<CheckFederatedGraphRequest, CheckFederatedGraphResponse> = {   ...$queryService.checkFederatedGraph,  ...createUnaryHooks($queryService.checkFederatedGraph)};

/**
 * WhoAmI returns the identity of the user currently logged in.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.WhoAmI
 */
export const whoAmI: UnaryFunctionsWithHooks<WhoAmIRequest, WhoAmIResponse> = {   ...$queryService.whoAmI,  ...createUnaryHooks($queryService.whoAmI)};

/**
 * GetRouterTokens returns the router tokens of a federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetRouterTokens
 */
export const getRouterTokens: UnaryFunctionsWithHooks<GetRouterTokensRequest, GetRouterTokensResponse> = {   ...$queryService.getRouterTokens,  ...createUnaryHooks($queryService.getRouterTokens)};

/**
 * DeleteRouterToken deletes the router token of a federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteRouterToken
 */
export const deleteRouterToken: UnaryFunctionsWithHooks<DeleteRouterTokenRequest, DeleteRouterTokenResponse> = {   ...$queryService.deleteRouterToken,  ...createUnaryHooks($queryService.deleteRouterToken)};

/**
 * Add persisted operations
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishPersistedOperations
 */
export const publishPersistedOperations: UnaryFunctionsWithHooks<PublishPersistedOperationsRequest, PublishPersistedOperationsResponse> = {   ...$queryService.publishPersistedOperations,  ...createUnaryHooks($queryService.publishPersistedOperations)};

/**
 * GetFederatedGraphs returns the list of federated graphs.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs
 */
export const getFederatedGraphs: UnaryFunctionsWithHooks<GetFederatedGraphsRequest, GetFederatedGraphsResponse> = {   ...$queryService.getFederatedGraphs,  ...createUnaryHooks($queryService.getFederatedGraphs)};

/**
 * GetFederatedGraphByName returns the federated graph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName
 */
export const getFederatedGraphByName: UnaryFunctionsWithHooks<GetFederatedGraphByNameRequest, GetFederatedGraphByNameResponse> = {   ...$queryService.getFederatedGraphByName,  ...createUnaryHooks($queryService.getFederatedGraphByName)};

/**
 * GetFederatedGraphSDLByName returns the latest valid SDL of the federated graph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName
 */
export const getFederatedGraphSDLByName: UnaryFunctionsWithHooks<GetFederatedGraphSDLByNameRequest, GetFederatedGraphSDLByNameResponse> = {   ...$queryService.getFederatedGraphSDLByName,  ...createUnaryHooks($queryService.getFederatedGraphSDLByName)};

/**
 * GetSubgraphs returns the list of subgraphs.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphs
 */
export const getSubgraphs: UnaryFunctionsWithHooks<GetSubgraphsRequest, GetSubgraphsResponse> = {   ...$queryService.getSubgraphs,  ...createUnaryHooks($queryService.getSubgraphs)};

/**
 * GetSubgraphByName returns the subgraph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphByName
 */
export const getSubgraphByName: UnaryFunctionsWithHooks<GetSubgraphByNameRequest, GetSubgraphByNameResponse> = {   ...$queryService.getSubgraphByName,  ...createUnaryHooks($queryService.getSubgraphByName)};

/**
 * GetFederatedSubgraphSDLByName returns the SDL of the subgraph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestValidSubgraphSDLByName
 */
export const getLatestValidSubgraphSDLByName: UnaryFunctionsWithHooks<GetLatestValidSubgraphSDLByNameRequest, GetLatestValidSubgraphSDLByNameResponse> = {   ...$queryService.getLatestValidSubgraphSDLByName,  ...createUnaryHooks($queryService.getLatestValidSubgraphSDLByName)};

/**
 * GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName
 */
export const getChecksByFederatedGraphName: UnaryFunctionsWithHooks<GetChecksByFederatedGraphNameRequest, GetChecksByFederatedGraphNameResponse> = {   ...$queryService.getChecksByFederatedGraphName,  ...createUnaryHooks($queryService.getChecksByFederatedGraphName)};

/**
 * GetCheckSummary returns top level information about a schema check
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckSummary
 */
export const getCheckSummary: UnaryFunctionsWithHooks<GetCheckSummaryRequest, GetCheckSummaryResponse> = {   ...$queryService.getCheckSummary,  ...createUnaryHooks($queryService.getCheckSummary)};

/**
 * GetCheckDetails returns changes and composition errors recorded for a check
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckDetails
 */
export const getCheckDetails: UnaryFunctionsWithHooks<GetCheckDetailsRequest, GetCheckDetailsResponse> = {   ...$queryService.getCheckDetails,  ...createUnaryHooks($queryService.getCheckDetails)};

/**
 * GetCheckOperations returns affected operations for a check
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckOperations
 */
export const getCheckOperations: UnaryFunctionsWithHooks<GetCheckOperationsRequest, GetCheckOperationsResponse> = {   ...$queryService.getCheckOperations,  ...createUnaryHooks($queryService.getCheckOperations)};

/**
 * ForceCheckSuccess forces a failed check to be marked as successful
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.ForceCheckSuccess
 */
export const forceCheckSuccess: UnaryFunctionsWithHooks<ForceCheckSuccessRequest, ForceCheckSuccessResponse> = {   ...$queryService.forceCheckSuccess,  ...createUnaryHooks($queryService.forceCheckSuccess)};

/**
 * GetOperationContent returns the operation body by searching using the hash
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOperationContent
 */
export const getOperationContent: UnaryFunctionsWithHooks<GetOperationContentRequest, GetOperationContentResponse> = {   ...$queryService.getOperationContent,  ...createUnaryHooks($queryService.getOperationContent)};

/**
 * GetFederatedGraphChangelog returns the changelog of the federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog
 */
export const getFederatedGraphChangelog: UnaryFunctionsWithHooks<GetFederatedGraphChangelogRequest, GetFederatedGraphChangelogResponse> = {   ...$queryService.getFederatedGraphChangelog,  ...createUnaryHooks($queryService.getFederatedGraphChangelog)};

/**
 * CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken
 */
export const createFederatedGraphToken: UnaryFunctionsWithHooks<CreateFederatedGraphTokenRequest, CreateFederatedGraphTokenResponse> = {   ...$queryService.createFederatedGraphToken,  ...createUnaryHooks($queryService.createFederatedGraphToken)};

/**
 * GetOrganizationMembers returns the list of organization members
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers
 */
export const getOrganizationMembers: UnaryFunctionsWithHooks<GetOrganizationMembersRequest, GetOrganizationMembersResponse> = {   ...$queryService.getOrganizationMembers,  ...createUnaryHooks($queryService.getOrganizationMembers)};

/**
 * InviteUser invites an user to join the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.InviteUser
 */
export const inviteUser: UnaryFunctionsWithHooks<InviteUserRequest, InviteUserResponse> = {   ...$queryService.inviteUser,  ...createUnaryHooks($queryService.inviteUser)};

/**
 * GetAPIKeys returns a list of API keys of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAPIKeys
 */
export const getAPIKeys: UnaryFunctionsWithHooks<GetAPIKeysRequest, GetAPIKeysResponse> = {   ...$queryService.getAPIKeys,  ...createUnaryHooks($queryService.getAPIKeys)};

/**
 * CreateAPIKey creates an API key for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateAPIKey
 */
export const createAPIKey: UnaryFunctionsWithHooks<CreateAPIKeyRequest, CreateAPIKeyResponse> = {   ...$queryService.createAPIKey,  ...createUnaryHooks($queryService.createAPIKey)};

/**
 * DeleteAPIKey deletes an API key for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteAPIKey
 */
export const deleteAPIKey: UnaryFunctionsWithHooks<DeleteAPIKeyRequest, DeleteAPIKeyResponse> = {   ...$queryService.deleteAPIKey,  ...createUnaryHooks($queryService.deleteAPIKey)};

/**
 * RemoveOrganizationMember removes the user from the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveInvitation
 */
export const removeInvitation: UnaryFunctionsWithHooks<RemoveInvitationRequest, RemoveInvitationResponse> = {   ...$queryService.removeInvitation,  ...createUnaryHooks($queryService.removeInvitation)};

/**
 * GetLatestValidRouterConfig returns the router config for the federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestValidRouterConfig
 */
export const getLatestValidRouterConfig: UnaryFunctionsWithHooks<GetConfigRequest, GetConfigResponse> = {   ...$queryService.getLatestValidRouterConfig,  ...createUnaryHooks($queryService.getLatestValidRouterConfig)};

/**
 * MigrateFromApollo migrates the graphs from apollo to cosmo
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.MigrateFromApollo
 */
export const migrateFromApollo: UnaryFunctionsWithHooks<MigrateFromApolloRequest, MigrateFromApolloResponse> = {   ...$queryService.migrateFromApollo,  ...createUnaryHooks($queryService.migrateFromApollo)};

/**
 * CreateOrganizationWebhookConfig create a new webhook config for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOrganizationWebhookConfig
 */
export const createOrganizationWebhookConfig: UnaryFunctionsWithHooks<CreateOrganizationWebhookConfigRequest, CreateOrganizationWebhookConfigResponse> = {   ...$queryService.createOrganizationWebhookConfig,  ...createUnaryHooks($queryService.createOrganizationWebhookConfig)};

/**
 * GetOrganizationWebhookConfigs returns all webhooks for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookConfigs
 */
export const getOrganizationWebhookConfigs: UnaryFunctionsWithHooks<GetOrganizationWebhookConfigsRequest, GetOrganizationWebhookConfigsResponse> = {   ...$queryService.getOrganizationWebhookConfigs,  ...createUnaryHooks($queryService.getOrganizationWebhookConfigs)};

/**
 * GetOrganizationWebhookMeta returns the meta data for a particular webhook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookMeta
 */
export const getOrganizationWebhookMeta: UnaryFunctionsWithHooks<GetOrganizationWebhookMetaRequest, GetOrganizationWebhookMetaResponse> = {   ...$queryService.getOrganizationWebhookMeta,  ...createUnaryHooks($queryService.getOrganizationWebhookMeta)};

/**
 * UpdateOrganizationWebhookConfig updates an existing webhook for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationWebhookConfig
 */
export const updateOrganizationWebhookConfig: UnaryFunctionsWithHooks<UpdateOrganizationWebhookConfigRequest, UpdateOrganizationWebhookConfigResponse> = {   ...$queryService.updateOrganizationWebhookConfig,  ...createUnaryHooks($queryService.updateOrganizationWebhookConfig)};

/**
 * DeleteOrganizationWebhookConfig deletes an organization webhook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganizationWebhookConfig
 */
export const deleteOrganizationWebhookConfig: UnaryFunctionsWithHooks<DeleteOrganizationWebhookConfigRequest, DeleteOrganizationWebhookConfigResponse> = {   ...$queryService.deleteOrganizationWebhookConfig,  ...createUnaryHooks($queryService.deleteOrganizationWebhookConfig)};

/**
 * CreateIntegration create a new integration for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateIntegration
 */
export const createIntegration: UnaryFunctionsWithHooks<CreateIntegrationRequest, CreateIntegrationResponse> = {   ...$queryService.createIntegration,  ...createUnaryHooks($queryService.createIntegration)};

/**
 * GetOrganizationIntegrations returns all integrations of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationIntegrations
 */
export const getOrganizationIntegrations: UnaryFunctionsWithHooks<GetOrganizationIntegrationsRequest, GetOrganizationIntegrationsResponse> = {   ...$queryService.getOrganizationIntegrations,  ...createUnaryHooks($queryService.getOrganizationIntegrations)};

/**
 * UpdateIntegrationConfig updates an existing integration of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateIntegrationConfig
 */
export const updateIntegrationConfig: UnaryFunctionsWithHooks<UpdateIntegrationConfigRequest, UpdateIntegrationConfigResponse> = {   ...$queryService.updateIntegrationConfig,  ...createUnaryHooks($queryService.updateIntegrationConfig)};

/**
 * DeleteIntegration deletes an organization webhintegrationook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteIntegration
 */
export const deleteIntegration: UnaryFunctionsWithHooks<DeleteIntegrationRequest, DeleteIntegrationResponse> = {   ...$queryService.deleteIntegration,  ...createUnaryHooks($queryService.deleteIntegration)};

/**
 * DeleteOrganization deletes an organization 
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganization
 */
export const deleteOrganization: UnaryFunctionsWithHooks<DeleteOrganizationRequest, DeleteOrganizationResponse> = {   ...$queryService.deleteOrganization,  ...createUnaryHooks($queryService.deleteOrganization)};

/**
 * LeaveOrganization removes a member from the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.LeaveOrganization
 */
export const leaveOrganization: UnaryFunctionsWithHooks<LeaveOrganizationRequest, LeaveOrganizationResponse> = {   ...$queryService.leaveOrganization,  ...createUnaryHooks($queryService.leaveOrganization)};

/**
 * UpdateOrganizationDetails updates the name and slug of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationDetails
 */
export const updateOrganizationDetails: UnaryFunctionsWithHooks<UpdateOrganizationDetailsRequest, UpdateOrganizationDetailsResponse> = {   ...$queryService.updateOrganizationDetails,  ...createUnaryHooks($queryService.updateOrganizationDetails)};

/**
 * UpdateOrgMemberRole updates the role of an org member
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrgMemberRole
 */
export const updateOrgMemberRole: UnaryFunctionsWithHooks<UpdateOrgMemberRoleRequest, UpdateOrgMemberRoleResponse> = {   ...$queryService.updateOrgMemberRole,  ...createUnaryHooks($queryService.updateOrgMemberRole)};

/**
 * IsGitHubAppInstalled checks if the cosmo github app is installed to a repository
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.IsGitHubAppInstalled
 */
export const isGitHubAppInstalled: UnaryFunctionsWithHooks<IsGitHubAppInstalledRequest, IsGitHubAppInstalledResponse> = {   ...$queryService.isGitHubAppInstalled,  ...createUnaryHooks($queryService.isGitHubAppInstalled)};

/**
 * CreateOIDCProvider adds an oidc provider to the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOIDCProvider
 */
export const createOIDCProvider: UnaryFunctionsWithHooks<CreateOIDCProviderRequest, CreateOIDCProviderResponse> = {   ...$queryService.createOIDCProvider,  ...createUnaryHooks($queryService.createOIDCProvider)};

/**
 * GetOIDCProvider gets the oidc provider connected the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOIDCProvider
 */
export const getOIDCProvider: UnaryFunctionsWithHooks<GetOIDCProviderRequest, GetOIDCProviderResponse> = {   ...$queryService.getOIDCProvider,  ...createUnaryHooks($queryService.getOIDCProvider)};

/**
 * DeleteOIDCProvider deletes the oidc provider connected the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOIDCProvider
 */
export const deleteOIDCProvider: UnaryFunctionsWithHooks<DeleteOIDCProviderRequest, DeleteOIDCProviderResponse> = {   ...$queryService.deleteOIDCProvider,  ...createUnaryHooks($queryService.deleteOIDCProvider)};

/**
 * GetClients returns all the clients of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetClients
 */
export const getClients: UnaryFunctionsWithHooks<GetClientsRequest, GetClientsResponse> = {   ...$queryService.getClients,  ...createUnaryHooks($queryService.getClients)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAnalyticsView
 */
export const getAnalyticsView: UnaryFunctionsWithHooks<GetAnalyticsViewRequest, GetAnalyticsViewResponse> = {   ...$queryService.getAnalyticsView,  ...createUnaryHooks($queryService.getAnalyticsView)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView
 */
export const getDashboardAnalyticsView: UnaryFunctionsWithHooks<GetDashboardAnalyticsViewRequest, GetDashboardAnalyticsViewResponse> = {   ...$queryService.getDashboardAnalyticsView,  ...createUnaryHooks($queryService.getDashboardAnalyticsView)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetTrace
 */
export const getTrace: UnaryFunctionsWithHooks<GetTraceRequest, GetTraceResponse> = {   ...$queryService.getTrace,  ...createUnaryHooks($queryService.getTrace)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetGraphMetrics
 */
export const getGraphMetrics: UnaryFunctionsWithHooks<GetGraphMetricsRequest, GetGraphMetricsResponse> = {   ...$queryService.getGraphMetrics,  ...createUnaryHooks($queryService.getGraphMetrics)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetMetricsErrorRate
 */
export const getMetricsErrorRate: UnaryFunctionsWithHooks<GetMetricsErrorRateRequest, GetMetricsErrorRateResponse> = {   ...$queryService.getMetricsErrorRate,  ...createUnaryHooks($queryService.getMetricsErrorRate)};

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFieldUsage
 */
export const getFieldUsage: UnaryFunctionsWithHooks<GetFieldUsageRequest, GetFieldUsageResponse> = {   ...$queryService.getFieldUsage,  ...createUnaryHooks($queryService.getFieldUsage)};
