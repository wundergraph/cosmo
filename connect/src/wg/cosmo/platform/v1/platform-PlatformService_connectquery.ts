// https://protobuf.dev/programming-guides/style/

// @generated by protoc-gen-connect-query v1.4.1 with parameter "target=ts"
// @generated from file wg/cosmo/platform/v1/platform.proto (package wg.cosmo.platform.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { AcceptOrDeclineInvitationRequest, AcceptOrDeclineInvitationResponse, AddReadmeRequest, AddReadmeResponse, AddSubgraphMemberRequest, AddSubgraphMemberResponse, CheckFederatedGraphRequest, CheckFederatedGraphResponse, CheckSubgraphSchemaRequest, CheckSubgraphSchemaResponse, ConfigureNamespaceGraphPruningConfigRequest, ConfigureNamespaceGraphPruningConfigResponse, ConfigureNamespaceLintConfigRequest, ConfigureNamespaceLintConfigResponse, CreateAPIKeyRequest, CreateAPIKeyResponse, CreateBillingPortalSessionRequest, CreateBillingPortalSessionResponse, CreateCheckoutSessionRequest, CreateCheckoutSessionResponse, CreateContractRequest, CreateContractResponse, CreateDiscussionRequest, CreateDiscussionResponse, CreateFeatureFlagRequest, CreateFeatureFlagResponse, CreateFederatedGraphRequest, CreateFederatedGraphResponse, CreateFederatedGraphTokenRequest, CreateFederatedGraphTokenResponse, CreateFederatedSubgraphRequest, CreateFederatedSubgraphResponse, CreateIgnoreOverridesForAllOperationsRequest, CreateIgnoreOverridesForAllOperationsResponse, CreateIntegrationRequest, CreateIntegrationResponse, CreateMonographRequest, CreateMonographResponse, CreateNamespaceRequest, CreateNamespaceResponse, CreateOIDCProviderRequest, CreateOIDCProviderResponse, CreateOperationIgnoreAllOverrideRequest, CreateOperationIgnoreAllOverrideResponse, CreateOperationOverridesRequest, CreateOperationOverridesResponse, CreateOrganizationRequest, CreateOrganizationResponse, CreateOrganizationWebhookConfigRequest, CreateOrganizationWebhookConfigResponse, DeleteAPIKeyRequest, DeleteAPIKeyResponse, DeleteDiscussionCommentRequest, DeleteDiscussionCommentResponse, DeleteFeatureFlagRequest, DeleteFeatureFlagResponse, DeleteFederatedGraphRequest, DeleteFederatedGraphResponse, DeleteFederatedSubgraphRequest, DeleteFederatedSubgraphResponse, DeleteIntegrationRequest, DeleteIntegrationResponse, DeleteMonographRequest, DeleteMonographResponse, DeleteNamespaceRequest, DeleteNamespaceResponse, DeleteOIDCProviderRequest, DeleteOIDCProviderResponse, DeleteOrganizationRequest, DeleteOrganizationResponse, DeleteOrganizationWebhookConfigRequest, DeleteOrganizationWebhookConfigResponse, DeleteRouterTokenRequest, DeleteRouterTokenResponse, DeleteUserRequest, DeleteUserResponse, EnableFeatureFlagRequest, EnableFeatureFlagResponse, EnableGraphPruningRequest, EnableGraphPruningResponse, EnableLintingForTheNamespaceRequest, EnableLintingForTheNamespaceResponse, FixSubgraphSchemaRequest, FixSubgraphSchemaResponse, ForceCheckSuccessRequest, ForceCheckSuccessResponse, GenerateRouterTokenRequest, GenerateRouterTokenResponse, GetAllDiscussionsRequest, GetAllDiscussionsResponse, GetAllOverridesRequest, GetAllOverridesResponse, GetAnalyticsViewRequest, GetAnalyticsViewResponse, GetAPIKeysRequest, GetAPIKeysResponse, GetAuditLogsRequest, GetAuditLogsResponse, GetBillingPlansRequest, GetBillingPlansResponse, GetChangelogBySchemaVersionRequest, GetChangelogBySchemaVersionResponse, GetCheckOperationsRequest, GetCheckOperationsResponse, GetChecksByFederatedGraphNameRequest, GetChecksByFederatedGraphNameResponse, GetCheckSummaryRequest, GetCheckSummaryResponse, GetClientsRequest, GetClientsResponse, GetCompositionDetailsRequest, GetCompositionDetailsResponse, GetCompositionsRequest, GetCompositionsResponse, GetDashboardAnalyticsViewRequest, GetDashboardAnalyticsViewResponse, GetDiscussionRequest, GetDiscussionResponse, GetDiscussionSchemasRequest, GetDiscussionSchemasResponse, GetFeatureFlagByNameRequest, GetFeatureFlagByNameResponse, GetFeatureFlagsByFederatedGraphRequest, GetFeatureFlagsByFederatedGraphResponse, GetFeatureFlagsRequest, GetFeatureFlagsResponse, GetFeatureSubgraphsByFeatureFlagRequest, GetFeatureSubgraphsByFeatureFlagResponse, GetFeatureSubgraphsRequest, GetFeatureSubgraphsResponse, GetFederatedGraphByNameRequest, GetFederatedGraphByNameResponse, GetFederatedGraphChangelogRequest, GetFederatedGraphChangelogResponse, GetFederatedGraphsBySubgraphLabelsRequest, GetFederatedGraphsBySubgraphLabelsResponse, GetFederatedGraphSDLByNameRequest, GetFederatedGraphSDLByNameResponse, GetFederatedGraphsRequest, GetFederatedGraphsResponse, GetFieldUsageRequest, GetFieldUsageResponse, GetGraphMetricsRequest, GetGraphMetricsResponse, GetInvitationsRequest, GetInvitationsResponse, GetLatestSubgraphSDLRequest, GetLatestSubgraphSDLResponse, GetMetricsErrorRateRequest, GetMetricsErrorRateResponse, GetNamespaceGraphPruningConfigRequest, GetNamespaceGraphPruningConfigResponse, GetNamespaceLintConfigRequest, GetNamespaceLintConfigResponse, GetNamespacesRequest, GetNamespacesResponse, GetOIDCProviderRequest, GetOIDCProviderResponse, GetOperationContentRequest, GetOperationContentResponse, GetOperationOverridesRequest, GetOperationOverridesResponse, GetOrganizationIntegrationsRequest, GetOrganizationIntegrationsResponse, GetOrganizationMembersRequest, GetOrganizationMembersResponse, GetOrganizationRequestsCountRequest, GetOrganizationRequestsCountResponse, GetOrganizationWebhookConfigsRequest, GetOrganizationWebhookConfigsResponse, GetOrganizationWebhookHistoryRequest, GetOrganizationWebhookHistoryResponse, GetOrganizationWebhookMetaRequest, GetOrganizationWebhookMetaResponse, GetPendingOrganizationMembersRequest, GetPendingOrganizationMembersResponse, GetPersistedOperationsRequest, GetPersistedOperationsResponse, GetRoutersRequest, GetRoutersResponse, GetRouterTokensRequest, GetRouterTokensResponse, GetSdlBySchemaVersionRequest, GetSdlBySchemaVersionResponse, GetSubgraphByNameRequest, GetSubgraphByNameResponse, GetSubgraphMembersRequest, GetSubgraphMembersResponse, GetSubgraphMetricsErrorRateRequest, GetSubgraphMetricsErrorRateResponse, GetSubgraphMetricsRequest, GetSubgraphMetricsResponse, GetSubgraphSDLFromLatestCompositionRequest, GetSubgraphSDLFromLatestCompositionResponse, GetSubgraphsRequest, GetSubgraphsResponse, GetTraceRequest, GetTraceResponse, GetUserAccessiblePermissionsRequest, GetUserAccessiblePermissionsResponse, GetUserAccessibleResourcesRequest, GetUserAccessibleResourcesResponse, GetWebhookDeliveryDetailsRequest, GetWebhookDeliveryDetailsResponse, InviteUserRequest, InviteUserResponse, IsGitHubAppInstalledRequest, IsGitHubAppInstalledResponse, IsMemberLimitReachedRequest, IsMemberLimitReachedResponse, LeaveOrganizationRequest, LeaveOrganizationResponse, MigrateFromApolloRequest, MigrateFromApolloResponse, MigrateMonographRequest, MigrateMonographResponse, MoveGraphRequest, MoveGraphResponse, PublishFederatedSubgraphRequest, PublishFederatedSubgraphResponse, PublishMonographRequest, PublishMonographResponse, PublishPersistedOperationsRequest, PublishPersistedOperationsResponse, RedeliverWebhookRequest, RedeliverWebhookResponse, RemoveInvitationRequest, RemoveInvitationResponse, RemoveOperationIgnoreAllOverrideRequest, RemoveOperationIgnoreAllOverrideResponse, RemoveOperationOverridesRequest, RemoveOperationOverridesResponse, RemoveOrganizationMemberRequest, RemoveOrganizationMemberResponse, RemoveSubgraphMemberRequest, RemoveSubgraphMemberResponse, RenameNamespaceRequest, RenameNamespaceResponse, ReplyToDiscussionRequest, ReplyToDiscussionResponse, SetDiscussionResolutionRequest, SetDiscussionResolutionResponse, ToggleChangeOverridesForAllOperationsRequest, ToggleChangeOverridesForAllOperationsResponse, UpdateContractRequest, UpdateContractResponse, UpdateDiscussionCommentRequest, UpdateDiscussionCommentResponse, UpdateFeatureFlagRequest, UpdateFeatureFlagResponse, UpdateFeatureSettingsRequest, UpdateFeatureSettingsResponse, UpdateFederatedGraphRequest, UpdateFederatedGraphResponse, UpdateIDPMappersRequest, UpdateIDPMappersResponse, UpdateIntegrationConfigRequest, UpdateIntegrationConfigResponse, UpdateMonographRequest, UpdateMonographResponse, UpdateOrganizationDetailsRequest, UpdateOrganizationDetailsResponse, UpdateOrganizationWebhookConfigRequest, UpdateOrganizationWebhookConfigResponse, UpdateOrgMemberRoleRequest, UpdateOrgMemberRoleResponse, UpdateSubgraphRequest, UpdateSubgraphResponse, UpgradePlanRequest, UpgradePlanResponse, WhoAmIRequest, WhoAmIResponse } from "./platform_pb.js";

/**
 * Namespaces
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateNamespace
 */
export const createNamespace = {
  localName: "createNamespace",
  name: "CreateNamespace",
  kind: MethodKind.Unary,
  I: CreateNamespaceRequest,
  O: CreateNamespaceResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteNamespace
 */
export const deleteNamespace = {
  localName: "deleteNamespace",
  name: "DeleteNamespace",
  kind: MethodKind.Unary,
  I: DeleteNamespaceRequest,
  O: DeleteNamespaceResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RenameNamespace
 */
export const renameNamespace = {
  localName: "renameNamespace",
  name: "RenameNamespace",
  kind: MethodKind.Unary,
  I: RenameNamespaceRequest,
  O: RenameNamespaceResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetNamespaces
 */
export const getNamespaces = {
  localName: "getNamespaces",
  name: "GetNamespaces",
  kind: MethodKind.Unary,
  I: GetNamespacesRequest,
  O: GetNamespacesResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * Contracts
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateContract
 */
export const createContract = {
  localName: "createContract",
  name: "CreateContract",
  kind: MethodKind.Unary,
  I: CreateContractRequest,
  O: CreateContractResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateContract
 */
export const updateContract = {
  localName: "updateContract",
  name: "UpdateContract",
  kind: MethodKind.Unary,
  I: UpdateContractRequest,
  O: UpdateContractResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.MoveFederatedGraph
 */
export const moveFederatedGraph = {
  localName: "moveFederatedGraph",
  name: "MoveFederatedGraph",
  kind: MethodKind.Unary,
  I: MoveGraphRequest,
  O: MoveGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.MoveSubgraph
 */
export const moveSubgraph = {
  localName: "moveSubgraph",
  name: "MoveSubgraph",
  kind: MethodKind.Unary,
  I: MoveGraphRequest,
  O: MoveGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.MoveMonograph
 */
export const moveMonograph = {
  localName: "moveMonograph",
  name: "MoveMonograph",
  kind: MethodKind.Unary,
  I: MoveGraphRequest,
  O: MoveGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateMonograph creates a monograph on the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateMonograph
 */
export const createMonograph = {
  localName: "createMonograph",
  name: "CreateMonograph",
  kind: MethodKind.Unary,
  I: CreateMonographRequest,
  O: CreateMonographResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * PublishMonograph pushes the schema of the monograph to the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishMonograph
 */
export const publishMonograph = {
  localName: "publishMonograph",
  name: "PublishMonograph",
  kind: MethodKind.Unary,
  I: PublishMonographRequest,
  O: PublishMonographResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteMonograph deletes a monograph from the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteMonograph
 */
export const deleteMonograph = {
  localName: "deleteMonograph",
  name: "DeleteMonograph",
  kind: MethodKind.Unary,
  I: DeleteMonographRequest,
  O: DeleteMonographResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateMonograph updates a monograph with new urls, subscription config and readme
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateMonograph
 */
export const updateMonograph = {
  localName: "updateMonograph",
  name: "UpdateMonograph",
  kind: MethodKind.Unary,
  I: UpdateMonographRequest,
  O: UpdateMonographResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * MigrateMonograph converts a monograph into a federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.MigrateMonograph
 */
export const migrateMonograph = {
  localName: "migrateMonograph",
  name: "MigrateMonograph",
  kind: MethodKind.Unary,
  I: MigrateMonographRequest,
  O: MigrateMonographResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateFederatedSubgraph creates a federated subgraph on the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph
 */
export const createFederatedSubgraph = {
  localName: "createFederatedSubgraph",
  name: "CreateFederatedSubgraph",
  kind: MethodKind.Unary,
  I: CreateFederatedSubgraphRequest,
  O: CreateFederatedSubgraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph
 */
export const publishFederatedSubgraph = {
  localName: "publishFederatedSubgraph",
  name: "PublishFederatedSubgraph",
  kind: MethodKind.Unary,
  I: PublishFederatedSubgraphRequest,
  O: PublishFederatedSubgraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateFederatedGraph creates a federated graph on the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph
 */
export const createFederatedGraph = {
  localName: "createFederatedGraph",
  name: "CreateFederatedGraph",
  kind: MethodKind.Unary,
  I: CreateFederatedGraphRequest,
  O: CreateFederatedGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteFederatedGraph deletes a federated graph from the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph
 */
export const deleteFederatedGraph = {
  localName: "deleteFederatedGraph",
  name: "DeleteFederatedGraph",
  kind: MethodKind.Unary,
  I: DeleteFederatedGraphRequest,
  O: DeleteFederatedGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph
 */
export const deleteFederatedSubgraph = {
  localName: "deleteFederatedSubgraph",
  name: "DeleteFederatedSubgraph",
  kind: MethodKind.Unary,
  I: DeleteFederatedSubgraphRequest,
  O: DeleteFederatedSubgraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema
 */
export const checkSubgraphSchema = {
  localName: "checkSubgraphSchema",
  name: "CheckSubgraphSchema",
  kind: MethodKind.Unary,
  I: CheckSubgraphSchemaRequest,
  O: CheckSubgraphSchemaResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema
 */
export const fixSubgraphSchema = {
  localName: "fixSubgraphSchema",
  name: "FixSubgraphSchema",
  kind: MethodKind.Unary,
  I: FixSubgraphSchemaRequest,
  O: FixSubgraphSchemaResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateFederatedGraph updates a federated graph with new labels and routing url
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph
 */
export const updateFederatedGraph = {
  localName: "updateFederatedGraph",
  name: "UpdateFederatedGraph",
  kind: MethodKind.Unary,
  I: UpdateFederatedGraphRequest,
  O: UpdateFederatedGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateSubgraph updates a subgraph with new labels and routing url
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateSubgraph
 */
export const updateSubgraph = {
  localName: "updateSubgraph",
  name: "UpdateSubgraph",
  kind: MethodKind.Unary,
  I: UpdateSubgraphRequest,
  O: UpdateSubgraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph
 */
export const checkFederatedGraph = {
  localName: "checkFederatedGraph",
  name: "CheckFederatedGraph",
  kind: MethodKind.Unary,
  I: CheckFederatedGraphRequest,
  O: CheckFederatedGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * WhoAmI returns the identity of the user currently logged in.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.WhoAmI
 */
export const whoAmI = {
  localName: "whoAmI",
  name: "WhoAmI",
  kind: MethodKind.Unary,
  I: WhoAmIRequest,
  O: WhoAmIResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GenerateRouterToken generates a temporary router token to fetch the router config.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GenerateRouterToken
 */
export const generateRouterToken = {
  localName: "generateRouterToken",
  name: "GenerateRouterToken",
  kind: MethodKind.Unary,
  I: GenerateRouterTokenRequest,
  O: GenerateRouterTokenResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetRouterTokens returns the router tokens of a federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetRouterTokens
 */
export const getRouterTokens = {
  localName: "getRouterTokens",
  name: "GetRouterTokens",
  kind: MethodKind.Unary,
  I: GetRouterTokensRequest,
  O: GetRouterTokensResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteRouterToken deletes the router token of a federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteRouterToken
 */
export const deleteRouterToken = {
  localName: "deleteRouterToken",
  name: "DeleteRouterToken",
  kind: MethodKind.Unary,
  I: DeleteRouterTokenRequest,
  O: DeleteRouterTokenResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * Add persisted operations
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.PublishPersistedOperations
 */
export const publishPersistedOperations = {
  localName: "publishPersistedOperations",
  name: "PublishPersistedOperations",
  kind: MethodKind.Unary,
  I: PublishPersistedOperationsRequest,
  O: PublishPersistedOperationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetPersistedOperations returns operations for the registered client id
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetPersistedOperations
 */
export const getPersistedOperations = {
  localName: "getPersistedOperations",
  name: "GetPersistedOperations",
  kind: MethodKind.Unary,
  I: GetPersistedOperationsRequest,
  O: GetPersistedOperationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetAuditLogs returns the audit logs of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAuditLogs
 */
export const getAuditLogs = {
  localName: "getAuditLogs",
  name: "GetAuditLogs",
  kind: MethodKind.Unary,
  I: GetAuditLogsRequest,
  O: GetAuditLogsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFederatedGraphs returns the list of federated graphs.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs
 */
export const getFederatedGraphs = {
  localName: "getFederatedGraphs",
  name: "GetFederatedGraphs",
  kind: MethodKind.Unary,
  I: GetFederatedGraphsRequest,
  O: GetFederatedGraphsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFederatedGraphsBySubgraphLabels returns the list of federated graphs based on the subgraph labels
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphsBySubgraphLabels
 */
export const getFederatedGraphsBySubgraphLabels = {
  localName: "getFederatedGraphsBySubgraphLabels",
  name: "GetFederatedGraphsBySubgraphLabels",
  kind: MethodKind.Unary,
  I: GetFederatedGraphsBySubgraphLabelsRequest,
  O: GetFederatedGraphsBySubgraphLabelsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFederatedGraphByName returns the federated graph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName
 */
export const getFederatedGraphByName = {
  localName: "getFederatedGraphByName",
  name: "GetFederatedGraphByName",
  kind: MethodKind.Unary,
  I: GetFederatedGraphByNameRequest,
  O: GetFederatedGraphByNameResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFederatedGraphSDLByName returns the latest valid SDL of the federated graph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName
 */
export const getFederatedGraphSDLByName = {
  localName: "getFederatedGraphSDLByName",
  name: "GetFederatedGraphSDLByName",
  kind: MethodKind.Unary,
  I: GetFederatedGraphSDLByNameRequest,
  O: GetFederatedGraphSDLByNameResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetSubgraphs returns the list of subgraphs.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphs
 */
export const getSubgraphs = {
  localName: "getSubgraphs",
  name: "GetSubgraphs",
  kind: MethodKind.Unary,
  I: GetSubgraphsRequest,
  O: GetSubgraphsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetSubgraphByName returns the subgraph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphByName
 */
export const getSubgraphByName = {
  localName: "getSubgraphByName",
  name: "GetSubgraphByName",
  kind: MethodKind.Unary,
  I: GetSubgraphByNameRequest,
  O: GetSubgraphByNameResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetSubgraphSDLFromLatestComposition returns the latest valid SDL of the subgraph composed with the federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphSDLFromLatestComposition
 */
export const getSubgraphSDLFromLatestComposition = {
  localName: "getSubgraphSDLFromLatestComposition",
  name: "GetSubgraphSDLFromLatestComposition",
  kind: MethodKind.Unary,
  I: GetSubgraphSDLFromLatestCompositionRequest,
  O: GetSubgraphSDLFromLatestCompositionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetLatestSubgraphSDL returns the latest SDL of the subgraph by name.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetLatestSubgraphSDL
 */
export const getLatestSubgraphSDL = {
  localName: "getLatestSubgraphSDL",
  name: "GetLatestSubgraphSDL",
  kind: MethodKind.Unary,
  I: GetLatestSubgraphSDLRequest,
  O: GetLatestSubgraphSDLResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName
 */
export const getChecksByFederatedGraphName = {
  localName: "getChecksByFederatedGraphName",
  name: "GetChecksByFederatedGraphName",
  kind: MethodKind.Unary,
  I: GetChecksByFederatedGraphNameRequest,
  O: GetChecksByFederatedGraphNameResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetCheckSummary returns top level information about a schema check
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckSummary
 */
export const getCheckSummary = {
  localName: "getCheckSummary",
  name: "GetCheckSummary",
  kind: MethodKind.Unary,
  I: GetCheckSummaryRequest,
  O: GetCheckSummaryResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetCheckOperations returns affected operations for a check
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCheckOperations
 */
export const getCheckOperations = {
  localName: "getCheckOperations",
  name: "GetCheckOperations",
  kind: MethodKind.Unary,
  I: GetCheckOperationsRequest,
  O: GetCheckOperationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * ForceCheckSuccess forces a failed check to be marked as successful
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.ForceCheckSuccess
 */
export const forceCheckSuccess = {
  localName: "forceCheckSuccess",
  name: "ForceCheckSuccess",
  kind: MethodKind.Unary,
  I: ForceCheckSuccessRequest,
  O: ForceCheckSuccessResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateOperationOverrides marks if the given set of changes as safe for an operation
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOperationOverrides
 */
export const createOperationOverrides = {
  localName: "createOperationOverrides",
  name: "CreateOperationOverrides",
  kind: MethodKind.Unary,
  I: CreateOperationOverridesRequest,
  O: CreateOperationOverridesResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * RemoveOperationOverride removes a change from the safe-list for an operation
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveOperationOverrides
 */
export const removeOperationOverrides = {
  localName: "removeOperationOverrides",
  name: "RemoveOperationOverrides",
  kind: MethodKind.Unary,
  I: RemoveOperationOverridesRequest,
  O: RemoveOperationOverridesResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateOperationIgnoreAllOverride adds an ignore all override for the operation
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOperationIgnoreAllOverride
 */
export const createOperationIgnoreAllOverride = {
  localName: "createOperationIgnoreAllOverride",
  name: "CreateOperationIgnoreAllOverride",
  kind: MethodKind.Unary,
  I: CreateOperationIgnoreAllOverrideRequest,
  O: CreateOperationIgnoreAllOverrideResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * RemoveOperationIgnoreAllOverride removes the ignore all override for the operation
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveOperationIgnoreAllOverride
 */
export const removeOperationIgnoreAllOverride = {
  localName: "removeOperationIgnoreAllOverride",
  name: "RemoveOperationIgnoreAllOverride",
  kind: MethodKind.Unary,
  I: RemoveOperationIgnoreAllOverrideRequest,
  O: RemoveOperationIgnoreAllOverrideResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOperationOverrides retrieves all overrides for an operation hash
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOperationOverrides
 */
export const getOperationOverrides = {
  localName: "getOperationOverrides",
  name: "GetOperationOverrides",
  kind: MethodKind.Unary,
  I: GetOperationOverridesRequest,
  O: GetOperationOverridesResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetAllOverrides returns all overrides for operations within a namespace
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAllOverrides
 */
export const getAllOverrides = {
  localName: "getAllOverrides",
  name: "GetAllOverrides",
  kind: MethodKind.Unary,
  I: GetAllOverridesRequest,
  O: GetAllOverridesResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * ToggleChangeOverridesForAllOperations marks all impacting changes of a given check either safe or unsafe
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.ToggleChangeOverridesForAllOperations
 */
export const toggleChangeOverridesForAllOperations = {
  localName: "toggleChangeOverridesForAllOperations",
  name: "ToggleChangeOverridesForAllOperations",
  kind: MethodKind.Unary,
  I: ToggleChangeOverridesForAllOperationsRequest,
  O: ToggleChangeOverridesForAllOperationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateIgnoreOverridesForAllOperations creates ignore override for all operations of a given check
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateIgnoreOverridesForAllOperations
 */
export const createIgnoreOverridesForAllOperations = {
  localName: "createIgnoreOverridesForAllOperations",
  name: "CreateIgnoreOverridesForAllOperations",
  kind: MethodKind.Unary,
  I: CreateIgnoreOverridesForAllOperationsRequest,
  O: CreateIgnoreOverridesForAllOperationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOperationContent returns the operation body by searching using the hash
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOperationContent
 */
export const getOperationContent = {
  localName: "getOperationContent",
  name: "GetOperationContent",
  kind: MethodKind.Unary,
  I: GetOperationContentRequest,
  O: GetOperationContentResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFederatedGraphChangelog returns the changelog of the federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog
 */
export const getFederatedGraphChangelog = {
  localName: "getFederatedGraphChangelog",
  name: "GetFederatedGraphChangelog",
  kind: MethodKind.Unary,
  I: GetFederatedGraphChangelogRequest,
  O: GetFederatedGraphChangelogResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken
 */
export const createFederatedGraphToken = {
  localName: "createFederatedGraphToken",
  name: "CreateFederatedGraphToken",
  kind: MethodKind.Unary,
  I: CreateFederatedGraphTokenRequest,
  O: CreateFederatedGraphTokenResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOrganizationMembers returns the list of organization members
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers
 */
export const getOrganizationMembers = {
  localName: "getOrganizationMembers",
  name: "GetOrganizationMembers",
  kind: MethodKind.Unary,
  I: GetOrganizationMembersRequest,
  O: GetOrganizationMembersResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOrganizationMembers returns the list of pending organization invites
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetPendingOrganizationMembers
 */
export const getPendingOrganizationMembers = {
  localName: "getPendingOrganizationMembers",
  name: "GetPendingOrganizationMembers",
  kind: MethodKind.Unary,
  I: GetPendingOrganizationMembersRequest,
  O: GetPendingOrganizationMembersResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * IsMemberLimitReached returns whether the organization has reached the member limit
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.IsMemberLimitReached
 */
export const isMemberLimitReached = {
  localName: "isMemberLimitReached",
  name: "IsMemberLimitReached",
  kind: MethodKind.Unary,
  I: IsMemberLimitReachedRequest,
  O: IsMemberLimitReachedResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * InviteUser invites an user to join the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.InviteUser
 */
export const inviteUser = {
  localName: "inviteUser",
  name: "InviteUser",
  kind: MethodKind.Unary,
  I: InviteUserRequest,
  O: InviteUserResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetAPIKeys returns a list of API keys of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAPIKeys
 */
export const getAPIKeys = {
  localName: "getAPIKeys",
  name: "GetAPIKeys",
  kind: MethodKind.Unary,
  I: GetAPIKeysRequest,
  O: GetAPIKeysResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateAPIKey creates an API key for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateAPIKey
 */
export const createAPIKey = {
  localName: "createAPIKey",
  name: "CreateAPIKey",
  kind: MethodKind.Unary,
  I: CreateAPIKeyRequest,
  O: CreateAPIKeyResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteAPIKey deletes an API key for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteAPIKey
 */
export const deleteAPIKey = {
  localName: "deleteAPIKey",
  name: "DeleteAPIKey",
  kind: MethodKind.Unary,
  I: DeleteAPIKeyRequest,
  O: DeleteAPIKeyResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * RemoveOrganizationMember removes the user from the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveOrganizationMember
 */
export const removeOrganizationMember = {
  localName: "removeOrganizationMember",
  name: "RemoveOrganizationMember",
  kind: MethodKind.Unary,
  I: RemoveOrganizationMemberRequest,
  O: RemoveOrganizationMemberResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * RemoveInvitation removes the org invitation of the user
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveInvitation
 */
export const removeInvitation = {
  localName: "removeInvitation",
  name: "RemoveInvitation",
  kind: MethodKind.Unary,
  I: RemoveInvitationRequest,
  O: RemoveInvitationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * MigrateFromApollo migrates the graphs from apollo to cosmo
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.MigrateFromApollo
 */
export const migrateFromApollo = {
  localName: "migrateFromApollo",
  name: "MigrateFromApollo",
  kind: MethodKind.Unary,
  I: MigrateFromApolloRequest,
  O: MigrateFromApolloResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateOrganizationWebhookConfig create a new webhook config for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOrganizationWebhookConfig
 */
export const createOrganizationWebhookConfig = {
  localName: "createOrganizationWebhookConfig",
  name: "CreateOrganizationWebhookConfig",
  kind: MethodKind.Unary,
  I: CreateOrganizationWebhookConfigRequest,
  O: CreateOrganizationWebhookConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOrganizationWebhookConfigs returns all webhooks for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookConfigs
 */
export const getOrganizationWebhookConfigs = {
  localName: "getOrganizationWebhookConfigs",
  name: "GetOrganizationWebhookConfigs",
  kind: MethodKind.Unary,
  I: GetOrganizationWebhookConfigsRequest,
  O: GetOrganizationWebhookConfigsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOrganizationWebhookMeta returns the meta data for a particular webhook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookMeta
 */
export const getOrganizationWebhookMeta = {
  localName: "getOrganizationWebhookMeta",
  name: "GetOrganizationWebhookMeta",
  kind: MethodKind.Unary,
  I: GetOrganizationWebhookMetaRequest,
  O: GetOrganizationWebhookMetaResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateOrganizationWebhookConfig updates an existing webhook for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationWebhookConfig
 */
export const updateOrganizationWebhookConfig = {
  localName: "updateOrganizationWebhookConfig",
  name: "UpdateOrganizationWebhookConfig",
  kind: MethodKind.Unary,
  I: UpdateOrganizationWebhookConfigRequest,
  O: UpdateOrganizationWebhookConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteOrganizationWebhookConfig deletes an organization webhook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganizationWebhookConfig
 */
export const deleteOrganizationWebhookConfig = {
  localName: "deleteOrganizationWebhookConfig",
  name: "DeleteOrganizationWebhookConfig",
  kind: MethodKind.Unary,
  I: DeleteOrganizationWebhookConfigRequest,
  O: DeleteOrganizationWebhookConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOrganizationWebhookHistory retrieves all webhook deliveries for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookHistory
 */
export const getOrganizationWebhookHistory = {
  localName: "getOrganizationWebhookHistory",
  name: "GetOrganizationWebhookHistory",
  kind: MethodKind.Unary,
  I: GetOrganizationWebhookHistoryRequest,
  O: GetOrganizationWebhookHistoryResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetWebhookDeliveryDetails retrieves details for a particular webhook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetWebhookDeliveryDetails
 */
export const getWebhookDeliveryDetails = {
  localName: "getWebhookDeliveryDetails",
  name: "GetWebhookDeliveryDetails",
  kind: MethodKind.Unary,
  I: GetWebhookDeliveryDetailsRequest,
  O: GetWebhookDeliveryDetailsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * RedeliverWebhook triggers the delivery of the given webhook once again
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RedeliverWebhook
 */
export const redeliverWebhook = {
  localName: "redeliverWebhook",
  name: "RedeliverWebhook",
  kind: MethodKind.Unary,
  I: RedeliverWebhookRequest,
  O: RedeliverWebhookResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateIntegration create a new integration for the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateIntegration
 */
export const createIntegration = {
  localName: "createIntegration",
  name: "CreateIntegration",
  kind: MethodKind.Unary,
  I: CreateIntegrationRequest,
  O: CreateIntegrationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOrganizationIntegrations returns all integrations of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationIntegrations
 */
export const getOrganizationIntegrations = {
  localName: "getOrganizationIntegrations",
  name: "GetOrganizationIntegrations",
  kind: MethodKind.Unary,
  I: GetOrganizationIntegrationsRequest,
  O: GetOrganizationIntegrationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateIntegrationConfig updates an existing integration of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateIntegrationConfig
 */
export const updateIntegrationConfig = {
  localName: "updateIntegrationConfig",
  name: "UpdateIntegrationConfig",
  kind: MethodKind.Unary,
  I: UpdateIntegrationConfigRequest,
  O: UpdateIntegrationConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteIntegration deletes an organization web integration hook
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteIntegration
 */
export const deleteIntegration = {
  localName: "deleteIntegration",
  name: "DeleteIntegration",
  kind: MethodKind.Unary,
  I: DeleteIntegrationRequest,
  O: DeleteIntegrationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteUser deletes the user
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteUser
 */
export const deleteUser = {
  localName: "deleteUser",
  name: "DeleteUser",
  kind: MethodKind.Unary,
  I: DeleteUserRequest,
  O: DeleteUserResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteOrganization deletes an organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOrganization
 */
export const deleteOrganization = {
  localName: "deleteOrganization",
  name: "DeleteOrganization",
  kind: MethodKind.Unary,
  I: DeleteOrganizationRequest,
  O: DeleteOrganizationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * LeaveOrganization removes a member from the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.LeaveOrganization
 */
export const leaveOrganization = {
  localName: "leaveOrganization",
  name: "LeaveOrganization",
  kind: MethodKind.Unary,
  I: LeaveOrganizationRequest,
  O: LeaveOrganizationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateOrganizationDetails updates the name and slug of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrganizationDetails
 */
export const updateOrganizationDetails = {
  localName: "updateOrganizationDetails",
  name: "UpdateOrganizationDetails",
  kind: MethodKind.Unary,
  I: UpdateOrganizationDetailsRequest,
  O: UpdateOrganizationDetailsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateOrgMemberRole updates the role of an org member
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateOrgMemberRole
 */
export const updateOrgMemberRole = {
  localName: "updateOrgMemberRole",
  name: "UpdateOrgMemberRole",
  kind: MethodKind.Unary,
  I: UpdateOrgMemberRoleRequest,
  O: UpdateOrgMemberRoleResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * IsGitHubAppInstalled checks if the cosmo github app is installed to a repository
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.IsGitHubAppInstalled
 */
export const isGitHubAppInstalled = {
  localName: "isGitHubAppInstalled",
  name: "IsGitHubAppInstalled",
  kind: MethodKind.Unary,
  I: IsGitHubAppInstalledRequest,
  O: IsGitHubAppInstalledResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateOIDCProvider adds an oidc provider to the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOIDCProvider
 */
export const createOIDCProvider = {
  localName: "createOIDCProvider",
  name: "CreateOIDCProvider",
  kind: MethodKind.Unary,
  I: CreateOIDCProviderRequest,
  O: CreateOIDCProviderResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetOIDCProvider gets the oidc provider connected the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOIDCProvider
 */
export const getOIDCProvider = {
  localName: "getOIDCProvider",
  name: "GetOIDCProvider",
  kind: MethodKind.Unary,
  I: GetOIDCProviderRequest,
  O: GetOIDCProviderResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteOIDCProvider deletes the oidc provider connected the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteOIDCProvider
 */
export const deleteOIDCProvider = {
  localName: "deleteOIDCProvider",
  name: "DeleteOIDCProvider",
  kind: MethodKind.Unary,
  I: DeleteOIDCProviderRequest,
  O: DeleteOIDCProviderResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateIDPMappers updates the mappings of the oidc provider
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateIDPMappers
 */
export const updateIDPMappers = {
  localName: "updateIDPMappers",
  name: "UpdateIDPMappers",
  kind: MethodKind.Unary,
  I: UpdateIDPMappersRequest,
  O: UpdateIDPMappersResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetClients returns all the clients of the federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetClients
 */
export const getClients = {
  localName: "getClients",
  name: "GetClients",
  kind: MethodKind.Unary,
  I: GetClientsRequest,
  O: GetClientsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetRouters returns all active routers of the federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetRouters
 */
export const getRouters = {
  localName: "getRouters",
  name: "GetRouters",
  kind: MethodKind.Unary,
  I: GetRoutersRequest,
  O: GetRoutersResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetInvitations returns all the invitations a user has received
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetInvitations
 */
export const getInvitations = {
  localName: "getInvitations",
  name: "GetInvitations",
  kind: MethodKind.Unary,
  I: GetInvitationsRequest,
  O: GetInvitationsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * AcceptOrDeclineInvitation accepts or declines the invitation
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.AcceptOrDeclineInvitation
 */
export const acceptOrDeclineInvitation = {
  localName: "acceptOrDeclineInvitation",
  name: "AcceptOrDeclineInvitation",
  kind: MethodKind.Unary,
  I: AcceptOrDeclineInvitationRequest,
  O: AcceptOrDeclineInvitationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetCompositions returns all the compositions of the federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCompositions
 */
export const getCompositions = {
  localName: "getCompositions",
  name: "GetCompositions",
  kind: MethodKind.Unary,
  I: GetCompositionsRequest,
  O: GetCompositionsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetCompositionDetails returns the details of that composition
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetCompositionDetails
 */
export const getCompositionDetails = {
  localName: "getCompositionDetails",
  name: "GetCompositionDetails",
  kind: MethodKind.Unary,
  I: GetCompositionDetailsRequest,
  O: GetCompositionDetailsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetSdlBySchemaVersion returns the sdl based on the schema version
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSdlBySchemaVersion
 */
export const getSdlBySchemaVersion = {
  localName: "getSdlBySchemaVersion",
  name: "GetSdlBySchemaVersion",
  kind: MethodKind.Unary,
  I: GetSdlBySchemaVersionRequest,
  O: GetSdlBySchemaVersionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetChangelogBySchemaVersion returns the changelog based on the schema version
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetChangelogBySchemaVersion
 */
export const getChangelogBySchemaVersion = {
  localName: "getChangelogBySchemaVersion",
  name: "GetChangelogBySchemaVersion",
  kind: MethodKind.Unary,
  I: GetChangelogBySchemaVersionRequest,
  O: GetChangelogBySchemaVersionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetUserAccessibleResources returns all the federated and subgraphs where the user has write permissions
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetUserAccessibleResources
 */
export const getUserAccessibleResources = {
  localName: "getUserAccessibleResources",
  name: "GetUserAccessibleResources",
  kind: MethodKind.Unary,
  I: GetUserAccessibleResourcesRequest,
  O: GetUserAccessibleResourcesResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateFeatureSettings updates the setinngs of features(ai, rbac, scim) of the organization
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFeatureSettings
 */
export const updateFeatureSettings = {
  localName: "updateFeatureSettings",
  name: "UpdateFeatureSettings",
  kind: MethodKind.Unary,
  I: UpdateFeatureSettingsRequest,
  O: UpdateFeatureSettingsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * AddSubgraphMember adds a user to the subgraph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.AddSubgraphMember
 */
export const addSubgraphMember = {
  localName: "addSubgraphMember",
  name: "AddSubgraphMember",
  kind: MethodKind.Unary,
  I: AddSubgraphMemberRequest,
  O: AddSubgraphMemberResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * RemoveSubgraphMember removes a member from the subgraph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.RemoveSubgraphMember
 */
export const removeSubgraphMember = {
  localName: "removeSubgraphMember",
  name: "RemoveSubgraphMember",
  kind: MethodKind.Unary,
  I: RemoveSubgraphMemberRequest,
  O: RemoveSubgraphMemberResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetSubgraphMembers gets all the members of the subgraph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphMembers
 */
export const getSubgraphMembers = {
  localName: "getSubgraphMembers",
  name: "GetSubgraphMembers",
  kind: MethodKind.Unary,
  I: GetSubgraphMembersRequest,
  O: GetSubgraphMembersResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateDiscussion creates a new discussion with an opening comment
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateDiscussion
 */
export const createDiscussion = {
  localName: "createDiscussion",
  name: "CreateDiscussion",
  kind: MethodKind.Unary,
  I: CreateDiscussionRequest,
  O: CreateDiscussionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * ReplyToDiscussion creates a new comment in the discussion
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.ReplyToDiscussion
 */
export const replyToDiscussion = {
  localName: "replyToDiscussion",
  name: "ReplyToDiscussion",
  kind: MethodKind.Unary,
  I: ReplyToDiscussionRequest,
  O: ReplyToDiscussionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetAllDiscussions fetches all discussions which may be scoped to a schema version if passed
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAllDiscussions
 */
export const getAllDiscussions = {
  localName: "getAllDiscussions",
  name: "GetAllDiscussions",
  kind: MethodKind.Unary,
  I: GetAllDiscussionsRequest,
  O: GetAllDiscussionsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateDiscussionComment edits the comment in the discussion
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateDiscussionComment
 */
export const updateDiscussionComment = {
  localName: "updateDiscussionComment",
  name: "UpdateDiscussionComment",
  kind: MethodKind.Unary,
  I: UpdateDiscussionCommentRequest,
  O: UpdateDiscussionCommentResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteDiscussionComment deletes the comment or the discussion if it is an opening comment
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteDiscussionComment
 */
export const deleteDiscussionComment = {
  localName: "deleteDiscussionComment",
  name: "DeleteDiscussionComment",
  kind: MethodKind.Unary,
  I: DeleteDiscussionCommentRequest,
  O: DeleteDiscussionCommentResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetDiscussion gets the entire discussion thread
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDiscussion
 */
export const getDiscussion = {
  localName: "getDiscussion",
  name: "GetDiscussion",
  kind: MethodKind.Unary,
  I: GetDiscussionRequest,
  O: GetDiscussionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetDiscussionSchemas gets the reference and latest schema of the target graph in which the discussion was created
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDiscussionSchemas
 */
export const getDiscussionSchemas = {
  localName: "getDiscussionSchemas",
  name: "GetDiscussionSchemas",
  kind: MethodKind.Unary,
  I: GetDiscussionSchemasRequest,
  O: GetDiscussionSchemasResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * SetDiscussionResolutionRequest marks the discussion as resolved or not
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.SetDiscussionResolution
 */
export const setDiscussionResolution = {
  localName: "setDiscussionResolution",
  name: "SetDiscussionResolution",
  kind: MethodKind.Unary,
  I: SetDiscussionResolutionRequest,
  O: SetDiscussionResolutionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * AddReadme adds a readme of a target, can be a subgraph or a federated graph
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.AddReadme
 */
export const addReadme = {
  localName: "addReadme",
  name: "AddReadme",
  kind: MethodKind.Unary,
  I: AddReadmeRequest,
  O: AddReadmeResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetUserAccessiblePermissions returns all the federated and subgraphs where the user has write permissions
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetUserAccessiblePermissions
 */
export const getUserAccessiblePermissions = {
  localName: "getUserAccessiblePermissions",
  name: "GetUserAccessiblePermissions",
  kind: MethodKind.Unary,
  I: GetUserAccessiblePermissionsRequest,
  O: GetUserAccessiblePermissionsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * CreateFeatureFlag creates a new feature flag for the selected feature graphs
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateFeatureFlag
 */
export const createFeatureFlag = {
  localName: "createFeatureFlag",
  name: "CreateFeatureFlag",
  kind: MethodKind.Unary,
  I: CreateFeatureFlagRequest,
  O: CreateFeatureFlagResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * DeleteFeatureFlag deletes an existing feature flag
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.DeleteFeatureFlag
 */
export const deleteFeatureFlag = {
  localName: "deleteFeatureFlag",
  name: "DeleteFeatureFlag",
  kind: MethodKind.Unary,
  I: DeleteFeatureFlagRequest,
  O: DeleteFeatureFlagResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * UpdateFeatureFlag updates a new feature flag for the selected feature graphs
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpdateFeatureFlag
 */
export const updateFeatureFlag = {
  localName: "updateFeatureFlag",
  name: "UpdateFeatureFlag",
  kind: MethodKind.Unary,
  I: UpdateFeatureFlagRequest,
  O: UpdateFeatureFlagResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * EnableFeatureFlag enables/disables a feature flag
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.EnableFeatureFlag
 */
export const enableFeatureFlag = {
  localName: "enableFeatureFlag",
  name: "EnableFeatureFlag",
  kind: MethodKind.Unary,
  I: EnableFeatureFlagRequest,
  O: EnableFeatureFlagResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * Analytics
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetAnalyticsView
 */
export const getAnalyticsView = {
  localName: "getAnalyticsView",
  name: "GetAnalyticsView",
  kind: MethodKind.Unary,
  I: GetAnalyticsViewRequest,
  O: GetAnalyticsViewResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView
 */
export const getDashboardAnalyticsView = {
  localName: "getDashboardAnalyticsView",
  name: "GetDashboardAnalyticsView",
  kind: MethodKind.Unary,
  I: GetDashboardAnalyticsViewRequest,
  O: GetDashboardAnalyticsViewResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetTrace
 */
export const getTrace = {
  localName: "getTrace",
  name: "GetTrace",
  kind: MethodKind.Unary,
  I: GetTraceRequest,
  O: GetTraceResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetGraphMetrics
 */
export const getGraphMetrics = {
  localName: "getGraphMetrics",
  name: "GetGraphMetrics",
  kind: MethodKind.Unary,
  I: GetGraphMetricsRequest,
  O: GetGraphMetricsResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetMetricsErrorRate
 */
export const getMetricsErrorRate = {
  localName: "getMetricsErrorRate",
  name: "GetMetricsErrorRate",
  kind: MethodKind.Unary,
  I: GetMetricsErrorRateRequest,
  O: GetMetricsErrorRateResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphMetrics
 */
export const getSubgraphMetrics = {
  localName: "getSubgraphMetrics",
  name: "GetSubgraphMetrics",
  kind: MethodKind.Unary,
  I: GetSubgraphMetricsRequest,
  O: GetSubgraphMetricsResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetSubgraphMetricsErrorRate
 */
export const getSubgraphMetricsErrorRate = {
  localName: "getSubgraphMetricsErrorRate",
  name: "GetSubgraphMetricsErrorRate",
  kind: MethodKind.Unary,
  I: GetSubgraphMetricsErrorRateRequest,
  O: GetSubgraphMetricsErrorRateResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFieldUsage
 */
export const getFieldUsage = {
  localName: "getFieldUsage",
  name: "GetFieldUsage",
  kind: MethodKind.Unary,
  I: GetFieldUsageRequest,
  O: GetFieldUsageResponse,
      idempotency: MethodIdempotency.NoSideEffects,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetOrganizationRequestsCount
 */
export const getOrganizationRequestsCount = {
  localName: "getOrganizationRequestsCount",
  name: "GetOrganizationRequestsCount",
  kind: MethodKind.Unary,
  I: GetOrganizationRequestsCountRequest,
  O: GetOrganizationRequestsCountResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateOrganization
 */
export const createOrganization = {
  localName: "createOrganization",
  name: "CreateOrganization",
  kind: MethodKind.Unary,
  I: CreateOrganizationRequest,
  O: CreateOrganizationResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * EnableLintingForTheNamespace enables the lint check for the namespace passed.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.EnableLintingForTheNamespace
 */
export const enableLintingForTheNamespace = {
  localName: "enableLintingForTheNamespace",
  name: "EnableLintingForTheNamespace",
  kind: MethodKind.Unary,
  I: EnableLintingForTheNamespaceRequest,
  O: EnableLintingForTheNamespaceResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * ConfigureNamespaceLintConfig configures the lint config of the organization.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceLintConfig
 */
export const configureNamespaceLintConfig = {
  localName: "configureNamespaceLintConfig",
  name: "ConfigureNamespaceLintConfig",
  kind: MethodKind.Unary,
  I: ConfigureNamespaceLintConfigRequest,
  O: ConfigureNamespaceLintConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetNamespaceLintConfig returns the lint config of the namespace.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetNamespaceLintConfig
 */
export const getNamespaceLintConfig = {
  localName: "getNamespaceLintConfig",
  name: "GetNamespaceLintConfig",
  kind: MethodKind.Unary,
  I: GetNamespaceLintConfigRequest,
  O: GetNamespaceLintConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * EnablePruningForTheNamespace enables the graph pruning check for the namespace passed.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.EnableGraphPruning
 */
export const enableGraphPruning = {
  localName: "enableGraphPruning",
  name: "EnableGraphPruning",
  kind: MethodKind.Unary,
  I: EnableGraphPruningRequest,
  O: EnableGraphPruningResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * ConfigureNamespaceGraphPruningConfig configures the graph pruning config of the organization.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceGraphPruningConfig
 */
export const configureNamespaceGraphPruningConfig = {
  localName: "configureNamespaceGraphPruningConfig",
  name: "ConfigureNamespaceGraphPruningConfig",
  kind: MethodKind.Unary,
  I: ConfigureNamespaceGraphPruningConfigRequest,
  O: ConfigureNamespaceGraphPruningConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetNamespaceGraphPruningConfig returns the graph pruning config of the namespace.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetNamespaceGraphPruningConfig
 */
export const getNamespaceGraphPruningConfig = {
  localName: "getNamespaceGraphPruningConfig",
  name: "GetNamespaceGraphPruningConfig",
  kind: MethodKind.Unary,
  I: GetNamespaceGraphPruningConfigRequest,
  O: GetNamespaceGraphPruningConfigResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFeatureFlags returns the feature flags of the namespace
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFeatureFlags
 */
export const getFeatureFlags = {
  localName: "getFeatureFlags",
  name: "GetFeatureFlags",
  kind: MethodKind.Unary,
  I: GetFeatureFlagsRequest,
  O: GetFeatureFlagsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFeatureFlagByName returns the feature flag of the namespace
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFeatureFlagByName
 */
export const getFeatureFlagByName = {
  localName: "getFeatureFlagByName",
  name: "GetFeatureFlagByName",
  kind: MethodKind.Unary,
  I: GetFeatureFlagByNameRequest,
  O: GetFeatureFlagByNameResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFeatureSubgraphsByFeatureFlag returns the feature subgraphs of a feature flag
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFeatureSubgraphsByFeatureFlag
 */
export const getFeatureSubgraphsByFeatureFlag = {
  localName: "getFeatureSubgraphsByFeatureFlag",
  name: "GetFeatureSubgraphsByFeatureFlag",
  kind: MethodKind.Unary,
  I: GetFeatureSubgraphsByFeatureFlagRequest,
  O: GetFeatureSubgraphsByFeatureFlagResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFeatureSubgraphs returns the list of feature subgraphs.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFeatureSubgraphs
 */
export const getFeatureSubgraphs = {
  localName: "getFeatureSubgraphs",
  name: "GetFeatureSubgraphs",
  kind: MethodKind.Unary,
  I: GetFeatureSubgraphsRequest,
  O: GetFeatureSubgraphsResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * GetFeatureFlagsByFederatedGraph returns the list of feature flags which match the label matchers of the federated graph.
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetFeatureFlagsByFederatedGraph
 */
export const getFeatureFlagsByFederatedGraph = {
  localName: "getFeatureFlagsByFederatedGraph",
  name: "GetFeatureFlagsByFederatedGraph",
  kind: MethodKind.Unary,
  I: GetFeatureFlagsByFederatedGraphRequest,
  O: GetFeatureFlagsByFederatedGraphResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 *
 * Billing
 * -----------------------------------------------------------------------------------------------------------------------------
 * Return the available billing plans
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.GetBillingPlans
 */
export const getBillingPlans = {
  localName: "getBillingPlans",
  name: "GetBillingPlans",
  kind: MethodKind.Unary,
  I: GetBillingPlansRequest,
  O: GetBillingPlansResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * Create a Stripe checkout session
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateCheckoutSession
 */
export const createCheckoutSession = {
  localName: "createCheckoutSession",
  name: "CreateCheckoutSession",
  kind: MethodKind.Unary,
  I: CreateCheckoutSessionRequest,
  O: CreateCheckoutSessionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * Create a Stripe billing portal session
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.CreateBillingPortalSession
 */
export const createBillingPortalSession = {
  localName: "createBillingPortalSession",
  name: "CreateBillingPortalSession",
  kind: MethodKind.Unary,
  I: CreateBillingPortalSessionRequest,
  O: CreateBillingPortalSessionResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;

/**
 * Upgrade the current plan
 *
 * @generated from rpc wg.cosmo.platform.v1.PlatformService.UpgradePlan
 */
export const upgradePlan = {
  localName: "upgradePlan",
  name: "UpgradePlan",
  kind: MethodKind.Unary,
  I: UpgradePlanRequest,
  O: UpgradePlanResponse,
  service: {
    typeName: "wg.cosmo.platform.v1.PlatformService"
  }
} as const;
