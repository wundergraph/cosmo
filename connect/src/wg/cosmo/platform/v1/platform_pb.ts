// https://protobuf.dev/programming-guides/style/

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file wg/cosmo/platform/v1/platform.proto (package wg.cosmo.platform.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { EnumStatusCode, GraphQLSubscriptionProtocol } from "../../common/common_pb.js";
import { EventMeta } from "../../notifications/events_pb.js";

/**
 * @generated from enum wg.cosmo.platform.v1.LintSeverity
 */
export enum LintSeverity {
  /**
   * @generated from enum value: warn = 0;
   */
  warn = 0,

  /**
   * @generated from enum value: error = 1;
   */
  error = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(LintSeverity)
proto3.util.setEnumType(LintSeverity, "wg.cosmo.platform.v1.LintSeverity", [
  { no: 0, name: "warn" },
  { no: 1, name: "error" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.AnalyticsViewGroupName
 */
export enum AnalyticsViewGroupName {
  /**
   * @generated from enum value: None = 0;
   */
  None = 0,

  /**
   * @generated from enum value: OperationName = 1;
   */
  OperationName = 1,

  /**
   * @generated from enum value: Client = 2;
   */
  Client = 2,

  /**
   * @generated from enum value: HttpStatusCode = 3;
   */
  HttpStatusCode = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AnalyticsViewGroupName)
proto3.util.setEnumType(AnalyticsViewGroupName, "wg.cosmo.platform.v1.AnalyticsViewGroupName", [
  { no: 0, name: "None" },
  { no: 1, name: "OperationName" },
  { no: 2, name: "Client" },
  { no: 3, name: "HttpStatusCode" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.CustomOptions
 */
export enum CustomOptions {
  /**
   * @generated from enum value: Text = 0;
   */
  Text = 0,

  /**
   * @generated from enum value: Range = 1;
   */
  Range = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CustomOptions)
proto3.util.setEnumType(CustomOptions, "wg.cosmo.platform.v1.CustomOptions", [
  { no: 0, name: "Text" },
  { no: 1, name: "Range" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.Unit
 */
export enum Unit {
  /**
   * @generated from enum value: Unspecified = 0;
   */
  Unspecified = 0,

  /**
   * @generated from enum value: Nanoseconds = 1;
   */
  Nanoseconds = 1,

  /**
   * @generated from enum value: UnixTimestamp = 2;
   */
  UnixTimestamp = 2,

  /**
   * @generated from enum value: Bytes = 3;
   */
  Bytes = 3,

  /**
   * @generated from enum value: CodeBlock = 4;
   */
  CodeBlock = 4,

  /**
   * @generated from enum value: StatusCode = 5;
   */
  StatusCode = 5,

  /**
   * @generated from enum value: TraceID = 6;
   */
  TraceID = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(Unit)
proto3.util.setEnumType(Unit, "wg.cosmo.platform.v1.Unit", [
  { no: 0, name: "Unspecified" },
  { no: 1, name: "Nanoseconds" },
  { no: 2, name: "UnixTimestamp" },
  { no: 3, name: "Bytes" },
  { no: 4, name: "CodeBlock" },
  { no: 5, name: "StatusCode" },
  { no: 6, name: "TraceID" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.AnalyticsViewFilterOperator
 */
export enum AnalyticsViewFilterOperator {
  /**
   * @generated from enum value: EQUALS = 0;
   */
  EQUALS = 0,

  /**
   * @generated from enum value: NOT_EQUALS = 1;
   */
  NOT_EQUALS = 1,

  /**
   * @generated from enum value: GREATER_THAN = 2;
   */
  GREATER_THAN = 2,

  /**
   * @generated from enum value: LESS_THAN = 3;
   */
  LESS_THAN = 3,

  /**
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * @generated from enum value: LESS_THAN_OR_EQUAL = 5;
   */
  LESS_THAN_OR_EQUAL = 5,

  /**
   * @generated from enum value: CONTAINS = 6;
   */
  CONTAINS = 6,

  /**
   * @generated from enum value: NOT_CONTAINS = 7;
   */
  NOT_CONTAINS = 7,

  /**
   * @generated from enum value: IN = 8;
   */
  IN = 8,

  /**
   * @generated from enum value: NOT_IN = 9;
   */
  NOT_IN = 9,

  /**
   * @generated from enum value: BETWEEN = 10;
   */
  BETWEEN = 10,

  /**
   * @generated from enum value: NOT_BETWEEN = 11;
   */
  NOT_BETWEEN = 11,

  /**
   * @generated from enum value: IS_NULL = 12;
   */
  IS_NULL = 12,

  /**
   * @generated from enum value: IS_NOT_NULL = 13;
   */
  IS_NOT_NULL = 13,
}
// Retrieve enum metadata with: proto3.getEnumType(AnalyticsViewFilterOperator)
proto3.util.setEnumType(AnalyticsViewFilterOperator, "wg.cosmo.platform.v1.AnalyticsViewFilterOperator", [
  { no: 0, name: "EQUALS" },
  { no: 1, name: "NOT_EQUALS" },
  { no: 2, name: "GREATER_THAN" },
  { no: 3, name: "LESS_THAN" },
  { no: 4, name: "GREATER_THAN_OR_EQUAL" },
  { no: 5, name: "LESS_THAN_OR_EQUAL" },
  { no: 6, name: "CONTAINS" },
  { no: 7, name: "NOT_CONTAINS" },
  { no: 8, name: "IN" },
  { no: 9, name: "NOT_IN" },
  { no: 10, name: "BETWEEN" },
  { no: 11, name: "NOT_BETWEEN" },
  { no: 12, name: "IS_NULL" },
  { no: 13, name: "IS_NOT_NULL" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.ExpiresAt
 */
export enum ExpiresAt {
  /**
   * @generated from enum value: NEVER = 0;
   */
  NEVER = 0,

  /**
   * @generated from enum value: THIRTY_DAYS = 1;
   */
  THIRTY_DAYS = 1,

  /**
   * @generated from enum value: SIX_MONTHS = 2;
   */
  SIX_MONTHS = 2,

  /**
   * @generated from enum value: ONE_YEAR = 3;
   */
  ONE_YEAR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ExpiresAt)
proto3.util.setEnumType(ExpiresAt, "wg.cosmo.platform.v1.ExpiresAt", [
  { no: 0, name: "NEVER" },
  { no: 1, name: "THIRTY_DAYS" },
  { no: 2, name: "SIX_MONTHS" },
  { no: 3, name: "ONE_YEAR" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.PublishedOperationStatus
 */
export enum PublishedOperationStatus {
  /**
   * @generated from enum value: UP_TO_DATE = 0;
   */
  UP_TO_DATE = 0,

  /**
   * @generated from enum value: CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: CONFLICT = 2;
   */
  CONFLICT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PublishedOperationStatus)
proto3.util.setEnumType(PublishedOperationStatus, "wg.cosmo.platform.v1.PublishedOperationStatus", [
  { no: 0, name: "UP_TO_DATE" },
  { no: 1, name: "CREATED" },
  { no: 2, name: "CONFLICT" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.IntegrationType
 */
export enum IntegrationType {
  /**
   * @generated from enum value: SLACK = 0;
   */
  SLACK = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(IntegrationType)
proto3.util.setEnumType(IntegrationType, "wg.cosmo.platform.v1.IntegrationType", [
  { no: 0, name: "SLACK" },
]);

/**
 * @generated from enum wg.cosmo.platform.v1.Feature
 */
export enum Feature {
  /**
   * @generated from enum value: rbac = 0;
   */
  rbac = 0,

  /**
   * @generated from enum value: ai = 1;
   */
  ai = 1,

  /**
   * @generated from enum value: scim = 2;
   */
  scim = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Feature)
proto3.util.setEnumType(Feature, "wg.cosmo.platform.v1.Feature", [
  { no: 0, name: "rbac" },
  { no: 1, name: "ai" },
  { no: 2, name: "scim" },
]);

/**
 * @generated from message wg.cosmo.platform.v1.Label
 */
export class Label extends Message<Label> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Label>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Label";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Label {
    return new Label().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJsonString(jsonString, options);
  }

  static equals(a: Label | PlainMessage<Label> | undefined, b: Label | PlainMessage<Label> | undefined): boolean {
    return proto3.util.equals(Label, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from field: wg.cosmo.common.EnumStatusCode code = 1;
   */
  code = EnumStatusCode.OK;

  /**
   * details is an optional field which can be used to provide more details about the error.
   *
   * @generated from field: optional string details = 2;
   */
  details?: string;

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(EnumStatusCode) },
    { no: 2, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ResponseStatus
 */
export class ResponseStatus extends Message<ResponseStatus> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<ResponseStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ResponseStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseStatus {
    return new ResponseStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseStatus {
    return new ResponseStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseStatus {
    return new ResponseStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseStatus | PlainMessage<ResponseStatus> | undefined, b: ResponseStatus | PlainMessage<ResponseStatus> | undefined): boolean {
    return proto3.util.equals(ResponseStatus, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishMonographRequest
 */
export class PublishMonographRequest extends Message<PublishMonographRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string schema = 3;
   */
  schema = "";

  constructor(data?: PartialMessage<PublishMonographRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishMonographRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishMonographRequest {
    return new PublishMonographRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishMonographRequest {
    return new PublishMonographRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishMonographRequest {
    return new PublishMonographRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishMonographRequest | PlainMessage<PublishMonographRequest> | undefined, b: PublishMonographRequest | PlainMessage<PublishMonographRequest> | undefined): boolean {
    return proto3.util.equals(PublishMonographRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishMonographResponse
 */
export class PublishMonographResponse extends Message<PublishMonographResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<PublishMonographResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishMonographResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishMonographResponse {
    return new PublishMonographResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishMonographResponse {
    return new PublishMonographResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishMonographResponse {
    return new PublishMonographResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishMonographResponse | PlainMessage<PublishMonographResponse> | undefined, b: PublishMonographResponse | PlainMessage<PublishMonographResponse> | undefined): boolean {
    return proto3.util.equals(PublishMonographResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishFederatedSubgraphRequest
 */
export class PublishFederatedSubgraphRequest extends Message<PublishFederatedSubgraphRequest> {
  /**
   * The FQDN of the subgraph to be published e.g. "wg.team1.orders"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The string representation of the schema, the content of the file
   *
   * @generated from field: string schema = 2;
   */
  schema = "";

  /**
   * The routing_url is the URL of the service which will be used to route the requests to the subgraph.
   *
   * @generated from field: optional string routing_url = 3;
   */
  routingUrl?: string;

  /**
   * The labels are the labels of the services which will form the federated graph. If the proposed is not valid, the service will be rejected.
   *
   * @generated from field: repeated wg.cosmo.platform.v1.Label labels = 4;
   */
  labels: Label[] = [];

  /**
   * The subscription protocol to use when subscribing to this subgraph
   *
   * @generated from field: optional wg.cosmo.common.GraphQLSubscriptionProtocol subscription_protocol = 6;
   */
  subscriptionProtocol?: GraphQLSubscriptionProtocol;

  /**
   * The url used for subscriptions
   *
   * @generated from field: optional string subscription_url = 7;
   */
  subscriptionUrl?: string;

  /**
   * The namespace of the subgraph
   *
   * @generated from field: string namespace = 8;
   */
  namespace = "";

  /**
   * If true, the labels will be unset
   *
   * @generated from field: optional bool unset_labels = 9;
   */
  unsetLabels?: boolean;

  constructor(data?: PartialMessage<PublishFederatedSubgraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishFederatedSubgraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 6, name: "subscription_protocol", kind: "enum", T: proto3.getEnumType(GraphQLSubscriptionProtocol), opt: true },
    { no: 7, name: "subscription_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "unset_labels", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishFederatedSubgraphRequest {
    return new PublishFederatedSubgraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishFederatedSubgraphRequest {
    return new PublishFederatedSubgraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishFederatedSubgraphRequest {
    return new PublishFederatedSubgraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishFederatedSubgraphRequest | PlainMessage<PublishFederatedSubgraphRequest> | undefined, b: PublishFederatedSubgraphRequest | PlainMessage<PublishFederatedSubgraphRequest> | undefined): boolean {
    return proto3.util.equals(PublishFederatedSubgraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishFederatedSubgraphResponse
 */
export class PublishFederatedSubgraphResponse extends Message<PublishFederatedSubgraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<PublishFederatedSubgraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishFederatedSubgraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishFederatedSubgraphResponse {
    return new PublishFederatedSubgraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishFederatedSubgraphResponse {
    return new PublishFederatedSubgraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishFederatedSubgraphResponse {
    return new PublishFederatedSubgraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishFederatedSubgraphResponse | PlainMessage<PublishFederatedSubgraphResponse> | undefined, b: PublishFederatedSubgraphResponse | PlainMessage<PublishFederatedSubgraphResponse> | undefined): boolean {
    return proto3.util.equals(PublishFederatedSubgraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GitInfo
 */
export class GitInfo extends Message<GitInfo> {
  /**
   * @generated from field: string commit_sha = 1;
   */
  commitSha = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * @generated from field: string owner_slug = 3;
   */
  ownerSlug = "";

  /**
   * @generated from field: string repository_slug = 4;
   */
  repositorySlug = "";

  constructor(data?: PartialMessage<GitInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GitInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repository_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitInfo {
    return new GitInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitInfo {
    return new GitInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitInfo {
    return new GitInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GitInfo | PlainMessage<GitInfo> | undefined, b: GitInfo | PlainMessage<GitInfo> | undefined): boolean {
    return proto3.util.equals(GitInfo, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CheckSubgraphSchemaRequest
 */
export class CheckSubgraphSchemaRequest extends Message<CheckSubgraphSchemaRequest> {
  /**
   * The FQDN of the subgraph to be checked e.g. "wg.team1.orders"
   *
   * @generated from field: string subgraph_name = 1;
   */
  subgraphName = "";

  /**
   * The binary representation of the schema, the content of the file
   *
   * @generated from field: bytes schema = 2;
   */
  schema = new Uint8Array(0);

  /**
   * @generated from field: wg.cosmo.platform.v1.GitInfo gitInfo = 3;
   */
  gitInfo?: GitInfo;

  /**
   * Check breaking changes and composition when this subgraph is deleted
   *
   * @generated from field: optional bool delete = 4;
   */
  delete?: boolean;

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  constructor(data?: PartialMessage<CheckSubgraphSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CheckSubgraphSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "gitInfo", kind: "message", T: GitInfo },
    { no: 4, name: "delete", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckSubgraphSchemaRequest {
    return new CheckSubgraphSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckSubgraphSchemaRequest {
    return new CheckSubgraphSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckSubgraphSchemaRequest {
    return new CheckSubgraphSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckSubgraphSchemaRequest | PlainMessage<CheckSubgraphSchemaRequest> | undefined, b: CheckSubgraphSchemaRequest | PlainMessage<CheckSubgraphSchemaRequest> | undefined): boolean {
    return proto3.util.equals(CheckSubgraphSchemaRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FixSubgraphSchemaRequest
 */
export class FixSubgraphSchemaRequest extends Message<FixSubgraphSchemaRequest> {
  /**
   * The FQDN of the subgraph to be checked e.g. "wg.team1.orders"
   *
   * @generated from field: string subgraph_name = 1;
   */
  subgraphName = "";

  /**
   * The string representation of the schema, the content of the file
   *
   * @generated from field: string schema = 2;
   */
  schema = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<FixSubgraphSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FixSubgraphSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixSubgraphSchemaRequest {
    return new FixSubgraphSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixSubgraphSchemaRequest {
    return new FixSubgraphSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixSubgraphSchemaRequest {
    return new FixSubgraphSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FixSubgraphSchemaRequest | PlainMessage<FixSubgraphSchemaRequest> | undefined, b: FixSubgraphSchemaRequest | PlainMessage<FixSubgraphSchemaRequest> | undefined): boolean {
    return proto3.util.equals(FixSubgraphSchemaRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateMonographRequest
 */
export class CreateMonographRequest extends Message<CreateMonographRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string routing_url = 3;
   */
  routingUrl = "";

  /**
   * @generated from field: string graph_url = 4;
   */
  graphUrl = "";

  /**
   * @generated from field: optional string subscription_url = 5;
   */
  subscriptionUrl?: string;

  /**
   * @generated from field: optional wg.cosmo.common.GraphQLSubscriptionProtocol subscription_protocol = 6;
   */
  subscriptionProtocol?: GraphQLSubscriptionProtocol;

  /**
   * @generated from field: optional string readme = 7;
   */
  readme?: string;

  /**
   * @generated from field: string admissionWebhookURL = 8;
   */
  admissionWebhookURL = "";

  constructor(data?: PartialMessage<CreateMonographRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateMonographRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "graph_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subscription_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "subscription_protocol", kind: "enum", T: proto3.getEnumType(GraphQLSubscriptionProtocol), opt: true },
    { no: 7, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "admissionWebhookURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMonographRequest {
    return new CreateMonographRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMonographRequest {
    return new CreateMonographRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMonographRequest {
    return new CreateMonographRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMonographRequest | PlainMessage<CreateMonographRequest> | undefined, b: CreateMonographRequest | PlainMessage<CreateMonographRequest> | undefined): boolean {
    return proto3.util.equals(CreateMonographRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateMonographResponse
 */
export class CreateMonographResponse extends Message<CreateMonographResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateMonographResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateMonographResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMonographResponse {
    return new CreateMonographResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMonographResponse {
    return new CreateMonographResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMonographResponse {
    return new CreateMonographResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMonographResponse | PlainMessage<CreateMonographResponse> | undefined, b: CreateMonographResponse | PlainMessage<CreateMonographResponse> | undefined): boolean {
    return proto3.util.equals(CreateMonographResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateFederatedGraphRequest
 */
export class CreateFederatedGraphRequest extends Message<CreateFederatedGraphRequest> {
  /**
   * name is the FQDN of the federated graph e.g. "wg.main"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * routing_url is the URL of the service which will be used to route the requests to the subgraph.
   *
   * @generated from field: string routing_url = 2;
   */
  routingUrl = "";

  /**
   * label_matchers match the labels of the services which will form the federated graph. If the proposed schema composition is invalid, it will be rejected.
   *
   * @generated from field: repeated string label_matchers = 3;
   */
  labelMatchers: string[] = [];

  /**
   * readme of the fed graph
   *
   * @generated from field: optional string readme = 4;
   */
  readme?: string;

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  /**
   * @generated from field: string admissionWebhookURL = 6;
   */
  admissionWebhookURL = "";

  constructor(data?: PartialMessage<CreateFederatedGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateFederatedGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label_matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "admissionWebhookURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFederatedGraphRequest {
    return new CreateFederatedGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFederatedGraphRequest {
    return new CreateFederatedGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFederatedGraphRequest {
    return new CreateFederatedGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFederatedGraphRequest | PlainMessage<CreateFederatedGraphRequest> | undefined, b: CreateFederatedGraphRequest | PlainMessage<CreateFederatedGraphRequest> | undefined): boolean {
    return proto3.util.equals(CreateFederatedGraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateFederatedSubgraphRequest
 */
export class CreateFederatedSubgraphRequest extends Message<CreateFederatedSubgraphRequest> {
  /**
   * The FQDN of the subgraph to be published e.g. "wg.team1.orders"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * routing_url is the URL of the service which will be used to route the requests to the subgraph.
   *
   * @generated from field: string routing_url = 2;
   */
  routingUrl = "";

  /**
   * labels are the labels of the services which will form the federated graph. If the proposed is not valid, the service will be rejected.
   *
   * @generated from field: repeated wg.cosmo.platform.v1.Label labels = 3;
   */
  labels: Label[] = [];

  /**
   * subscription protocol to use when subscribing to this subgraph
   *
   * @generated from field: optional wg.cosmo.common.GraphQLSubscriptionProtocol subscription_protocol = 5;
   */
  subscriptionProtocol?: GraphQLSubscriptionProtocol;

  /**
   * url used for subscriptions
   *
   * @generated from field: optional string subscription_url = 6;
   */
  subscriptionUrl?: string;

  /**
   * readme of the subgraph
   *
   * @generated from field: optional string readme = 7;
   */
  readme?: string;

  /**
   * @generated from field: string namespace = 8;
   */
  namespace = "";

  constructor(data?: PartialMessage<CreateFederatedSubgraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateFederatedSubgraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 5, name: "subscription_protocol", kind: "enum", T: proto3.getEnumType(GraphQLSubscriptionProtocol), opt: true },
    { no: 6, name: "subscription_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFederatedSubgraphRequest {
    return new CreateFederatedSubgraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFederatedSubgraphRequest {
    return new CreateFederatedSubgraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFederatedSubgraphRequest {
    return new CreateFederatedSubgraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFederatedSubgraphRequest | PlainMessage<CreateFederatedSubgraphRequest> | undefined, b: CreateFederatedSubgraphRequest | PlainMessage<CreateFederatedSubgraphRequest> | undefined): boolean {
    return proto3.util.equals(CreateFederatedSubgraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteFederatedGraphRequest
 */
export class DeleteFederatedGraphRequest extends Message<DeleteFederatedGraphRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<DeleteFederatedGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteFederatedGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFederatedGraphRequest {
    return new DeleteFederatedGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFederatedGraphRequest {
    return new DeleteFederatedGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFederatedGraphRequest {
    return new DeleteFederatedGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFederatedGraphRequest | PlainMessage<DeleteFederatedGraphRequest> | undefined, b: DeleteFederatedGraphRequest | PlainMessage<DeleteFederatedGraphRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFederatedGraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteMonographRequest
 */
export class DeleteMonographRequest extends Message<DeleteMonographRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<DeleteMonographRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteMonographRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMonographRequest {
    return new DeleteMonographRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMonographRequest {
    return new DeleteMonographRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMonographRequest {
    return new DeleteMonographRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMonographRequest | PlainMessage<DeleteMonographRequest> | undefined, b: DeleteMonographRequest | PlainMessage<DeleteMonographRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMonographRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteMonographResponse
 */
export class DeleteMonographResponse extends Message<DeleteMonographResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteMonographResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteMonographResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMonographResponse {
    return new DeleteMonographResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMonographResponse {
    return new DeleteMonographResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMonographResponse {
    return new DeleteMonographResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMonographResponse | PlainMessage<DeleteMonographResponse> | undefined, b: DeleteMonographResponse | PlainMessage<DeleteMonographResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMonographResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteFederatedSubgraphRequest
 */
export class DeleteFederatedSubgraphRequest extends Message<DeleteFederatedSubgraphRequest> {
  /**
   * The FQDN of the subgraph to be checked e.g. "wg.team1.orders"
   *
   * @generated from field: string subgraph_name = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<DeleteFederatedSubgraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteFederatedSubgraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFederatedSubgraphRequest {
    return new DeleteFederatedSubgraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFederatedSubgraphRequest {
    return new DeleteFederatedSubgraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFederatedSubgraphRequest {
    return new DeleteFederatedSubgraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFederatedSubgraphRequest | PlainMessage<DeleteFederatedSubgraphRequest> | undefined, b: DeleteFederatedSubgraphRequest | PlainMessage<DeleteFederatedSubgraphRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFederatedSubgraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SchemaChange
 */
export class SchemaChange extends Message<SchemaChange> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string changeType = 2;
   */
  changeType = "";

  /**
   * @generated from field: optional string path = 3;
   */
  path?: string;

  /**
   * @generated from field: bool isBreaking = 4;
   */
  isBreaking = false;

  /**
   * @generated from field: optional bool hasOverride = 5;
   */
  hasOverride?: boolean;

  constructor(data?: PartialMessage<SchemaChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SchemaChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changeType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "isBreaking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "hasOverride", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaChange {
    return new SchemaChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaChange {
    return new SchemaChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaChange {
    return new SchemaChange().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaChange | PlainMessage<SchemaChange> | undefined, b: SchemaChange | PlainMessage<SchemaChange> | undefined): boolean {
    return proto3.util.equals(SchemaChange, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CompositionError
 */
export class CompositionError extends Message<CompositionError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string federatedGraphName = 2;
   */
  federatedGraphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<CompositionError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CompositionError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "federatedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompositionError {
    return new CompositionError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompositionError {
    return new CompositionError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompositionError {
    return new CompositionError().fromJsonString(jsonString, options);
  }

  static equals(a: CompositionError | PlainMessage<CompositionError> | undefined, b: CompositionError | PlainMessage<CompositionError> | undefined): boolean {
    return proto3.util.equals(CompositionError, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeploymentError
 */
export class DeploymentError extends Message<DeploymentError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string federatedGraphName = 2;
   */
  federatedGraphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<DeploymentError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeploymentError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "federatedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentError {
    return new DeploymentError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentError {
    return new DeploymentError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentError {
    return new DeploymentError().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentError | PlainMessage<DeploymentError> | undefined, b: DeploymentError | PlainMessage<DeploymentError> | undefined): boolean {
    return proto3.util.equals(DeploymentError, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CheckOperationUsageStats
 */
export class CheckOperationUsageStats extends Message<CheckOperationUsageStats> {
  /**
   * @generated from field: uint32 totalOperations = 1;
   */
  totalOperations = 0;

  /**
   * @generated from field: string firstSeenAt = 2;
   */
  firstSeenAt = "";

  /**
   * @generated from field: string lastSeenAt = 3;
   */
  lastSeenAt = "";

  /**
   * @generated from field: uint32 safeOperations = 4;
   */
  safeOperations = 0;

  constructor(data?: PartialMessage<CheckOperationUsageStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CheckOperationUsageStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "totalOperations", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "firstSeenAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lastSeenAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "safeOperations", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckOperationUsageStats {
    return new CheckOperationUsageStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckOperationUsageStats {
    return new CheckOperationUsageStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckOperationUsageStats {
    return new CheckOperationUsageStats().fromJsonString(jsonString, options);
  }

  static equals(a: CheckOperationUsageStats | PlainMessage<CheckOperationUsageStats> | undefined, b: CheckOperationUsageStats | PlainMessage<CheckOperationUsageStats> | undefined): boolean {
    return proto3.util.equals(CheckOperationUsageStats, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CheckedFederatedGraphs
 */
export class CheckedFederatedGraphs extends Message<CheckedFederatedGraphs> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * @generated from field: string organization_slug = 4;
   */
  organizationSlug = "";

  constructor(data?: PartialMessage<CheckedFederatedGraphs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CheckedFederatedGraphs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckedFederatedGraphs {
    return new CheckedFederatedGraphs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckedFederatedGraphs {
    return new CheckedFederatedGraphs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckedFederatedGraphs {
    return new CheckedFederatedGraphs().fromJsonString(jsonString, options);
  }

  static equals(a: CheckedFederatedGraphs | PlainMessage<CheckedFederatedGraphs> | undefined, b: CheckedFederatedGraphs | PlainMessage<CheckedFederatedGraphs> | undefined): boolean {
    return proto3.util.equals(CheckedFederatedGraphs, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.LintLocation
 */
export class LintLocation extends Message<LintLocation> {
  /**
   * @generated from field: uint32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: uint32 column = 2;
   */
  column = 0;

  /**
   * @generated from field: optional uint32 endLine = 3;
   */
  endLine?: number;

  /**
   * @generated from field: optional uint32 endColumn = 4;
   */
  endColumn?: number;

  constructor(data?: PartialMessage<LintLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.LintLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "column", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "endLine", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "endColumn", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LintLocation {
    return new LintLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LintLocation {
    return new LintLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LintLocation {
    return new LintLocation().fromJsonString(jsonString, options);
  }

  static equals(a: LintLocation | PlainMessage<LintLocation> | undefined, b: LintLocation | PlainMessage<LintLocation> | undefined): boolean {
    return proto3.util.equals(LintLocation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.LintIssue
 */
export class LintIssue extends Message<LintIssue> {
  /**
   * @generated from field: optional string lintRuleType = 1;
   */
  lintRuleType?: string;

  /**
   * @generated from field: wg.cosmo.platform.v1.LintSeverity severity = 2;
   */
  severity = LintSeverity.warn;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: wg.cosmo.platform.v1.LintLocation issueLocation = 4;
   */
  issueLocation?: LintLocation;

  constructor(data?: PartialMessage<LintIssue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.LintIssue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lintRuleType", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "severity", kind: "enum", T: proto3.getEnumType(LintSeverity) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "issueLocation", kind: "message", T: LintLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LintIssue {
    return new LintIssue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LintIssue {
    return new LintIssue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LintIssue {
    return new LintIssue().fromJsonString(jsonString, options);
  }

  static equals(a: LintIssue | PlainMessage<LintIssue> | undefined, b: LintIssue | PlainMessage<LintIssue> | undefined): boolean {
    return proto3.util.equals(LintIssue, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CheckSubgraphSchemaResponse
 */
export class CheckSubgraphSchemaResponse extends Message<CheckSubgraphSchemaResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SchemaChange breakingChanges = 2;
   */
  breakingChanges: SchemaChange[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SchemaChange nonBreakingChanges = 3;
   */
  nonBreakingChanges: SchemaChange[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 4;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * Contains the operation usage stats for the operations that are impacted by the schema changes.
   * Can be undefined when the schema changes are not inspectable by real traffic breaking change detection.
   *
   * @generated from field: wg.cosmo.platform.v1.CheckOperationUsageStats operationUsageStats = 5;
   */
  operationUsageStats?: CheckOperationUsageStats;

  /**
   * @generated from field: string check_id = 6;
   */
  checkId = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CheckedFederatedGraphs checked_federated_graphs = 7;
   */
  checkedFederatedGraphs: CheckedFederatedGraphs[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.LintIssue lintWarnings = 8;
   */
  lintWarnings: LintIssue[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.LintIssue lintErrors = 9;
   */
  lintErrors: LintIssue[] = [];

  constructor(data?: PartialMessage<CheckSubgraphSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CheckSubgraphSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "breakingChanges", kind: "message", T: SchemaChange, repeated: true },
    { no: 3, name: "nonBreakingChanges", kind: "message", T: SchemaChange, repeated: true },
    { no: 4, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 5, name: "operationUsageStats", kind: "message", T: CheckOperationUsageStats },
    { no: 6, name: "check_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "checked_federated_graphs", kind: "message", T: CheckedFederatedGraphs, repeated: true },
    { no: 8, name: "lintWarnings", kind: "message", T: LintIssue, repeated: true },
    { no: 9, name: "lintErrors", kind: "message", T: LintIssue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckSubgraphSchemaResponse {
    return new CheckSubgraphSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckSubgraphSchemaResponse {
    return new CheckSubgraphSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckSubgraphSchemaResponse {
    return new CheckSubgraphSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckSubgraphSchemaResponse | PlainMessage<CheckSubgraphSchemaResponse> | undefined, b: CheckSubgraphSchemaResponse | PlainMessage<CheckSubgraphSchemaResponse> | undefined): boolean {
    return proto3.util.equals(CheckSubgraphSchemaResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FixSubgraphSchemaResponse
 */
export class FixSubgraphSchemaResponse extends Message<FixSubgraphSchemaResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: bool modified = 2;
   */
  modified = false;

  /**
   * @generated from field: string schema = 3;
   */
  schema = "";

  constructor(data?: PartialMessage<FixSubgraphSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FixSubgraphSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "modified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixSubgraphSchemaResponse {
    return new FixSubgraphSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixSubgraphSchemaResponse {
    return new FixSubgraphSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixSubgraphSchemaResponse {
    return new FixSubgraphSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FixSubgraphSchemaResponse | PlainMessage<FixSubgraphSchemaResponse> | undefined, b: FixSubgraphSchemaResponse | PlainMessage<FixSubgraphSchemaResponse> | undefined): boolean {
    return proto3.util.equals(FixSubgraphSchemaResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateFederatedGraphResponse
 */
export class CreateFederatedGraphResponse extends Message<CreateFederatedGraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<CreateFederatedGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateFederatedGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFederatedGraphResponse {
    return new CreateFederatedGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFederatedGraphResponse {
    return new CreateFederatedGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFederatedGraphResponse {
    return new CreateFederatedGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFederatedGraphResponse | PlainMessage<CreateFederatedGraphResponse> | undefined, b: CreateFederatedGraphResponse | PlainMessage<CreateFederatedGraphResponse> | undefined): boolean {
    return proto3.util.equals(CreateFederatedGraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateFederatedSubgraphResponse
 */
export class CreateFederatedSubgraphResponse extends Message<CreateFederatedSubgraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateFederatedSubgraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateFederatedSubgraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFederatedSubgraphResponse {
    return new CreateFederatedSubgraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFederatedSubgraphResponse {
    return new CreateFederatedSubgraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFederatedSubgraphResponse {
    return new CreateFederatedSubgraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFederatedSubgraphResponse | PlainMessage<CreateFederatedSubgraphResponse> | undefined, b: CreateFederatedSubgraphResponse | PlainMessage<CreateFederatedSubgraphResponse> | undefined): boolean {
    return proto3.util.equals(CreateFederatedSubgraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteFederatedSubgraphResponse
 */
export class DeleteFederatedSubgraphResponse extends Message<DeleteFederatedSubgraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<DeleteFederatedSubgraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteFederatedSubgraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFederatedSubgraphResponse {
    return new DeleteFederatedSubgraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFederatedSubgraphResponse {
    return new DeleteFederatedSubgraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFederatedSubgraphResponse {
    return new DeleteFederatedSubgraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFederatedSubgraphResponse | PlainMessage<DeleteFederatedSubgraphResponse> | undefined, b: DeleteFederatedSubgraphResponse | PlainMessage<DeleteFederatedSubgraphResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFederatedSubgraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteFederatedGraphResponse
 */
export class DeleteFederatedGraphResponse extends Message<DeleteFederatedGraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteFederatedGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteFederatedGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFederatedGraphResponse {
    return new DeleteFederatedGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFederatedGraphResponse {
    return new DeleteFederatedGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFederatedGraphResponse {
    return new DeleteFederatedGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFederatedGraphResponse | PlainMessage<DeleteFederatedGraphResponse> | undefined, b: DeleteFederatedGraphResponse | PlainMessage<DeleteFederatedGraphResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFederatedGraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphsRequest
 */
export class GetFederatedGraphsRequest extends Message<GetFederatedGraphsRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: bool includeMetrics = 3;
   */
  includeMetrics = false;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  /**
   * @generated from field: optional bool supports_federation = 5;
   */
  supportsFederation?: boolean;

  constructor(data?: PartialMessage<GetFederatedGraphsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "includeMetrics", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "supports_federation", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphsRequest {
    return new GetFederatedGraphsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphsRequest {
    return new GetFederatedGraphsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphsRequest {
    return new GetFederatedGraphsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphsRequest | PlainMessage<GetFederatedGraphsRequest> | undefined, b: GetFederatedGraphsRequest | PlainMessage<GetFederatedGraphsRequest> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FederatedGraph
 */
export class FederatedGraph extends Message<FederatedGraph> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string routingURL = 3;
   */
  routingURL = "";

  /**
   * @generated from field: repeated string label_matchers = 4;
   */
  labelMatchers: string[] = [];

  /**
   * @generated from field: string lastUpdatedAt = 5;
   */
  lastUpdatedAt = "";

  /**
   * @generated from field: bool isComposable = 6;
   */
  isComposable = false;

  /**
   * @generated from field: string compositionErrors = 7;
   */
  compositionErrors = "";

  /**
   * @generated from field: int32 connectedSubgraphs = 8;
   */
  connectedSubgraphs = 0;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.RequestSeriesItem requestSeries = 9;
   */
  requestSeries: RequestSeriesItem[] = [];

  /**
   * @generated from field: optional string readme = 10;
   */
  readme?: string;

  /**
   * @generated from field: string target_id = 11;
   */
  targetId = "";

  /**
   * @generated from field: string namespace = 12;
   */
  namespace = "";

  /**
   * @generated from field: optional string compositionId = 13;
   */
  compositionId?: string;

  /**
   * @generated from field: bool supports_federation = 14;
   */
  supportsFederation = false;

  constructor(data?: PartialMessage<FederatedGraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FederatedGraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routingURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "label_matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "lastUpdatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "isComposable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "compositionErrors", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "connectedSubgraphs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "requestSeries", kind: "message", T: RequestSeriesItem, repeated: true },
    { no: 10, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "compositionId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "supports_federation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FederatedGraph {
    return new FederatedGraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FederatedGraph {
    return new FederatedGraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FederatedGraph {
    return new FederatedGraph().fromJsonString(jsonString, options);
  }

  static equals(a: FederatedGraph | PlainMessage<FederatedGraph> | undefined, b: FederatedGraph | PlainMessage<FederatedGraph> | undefined): boolean {
    return proto3.util.equals(FederatedGraph, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphsResponse
 */
export class GetFederatedGraphsResponse extends Message<GetFederatedGraphsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.FederatedGraph graphs = 2;
   */
  graphs: FederatedGraph[] = [];

  constructor(data?: PartialMessage<GetFederatedGraphsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "graphs", kind: "message", T: FederatedGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphsResponse {
    return new GetFederatedGraphsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphsResponse {
    return new GetFederatedGraphsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphsResponse {
    return new GetFederatedGraphsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphsResponse | PlainMessage<GetFederatedGraphsResponse> | undefined, b: GetFederatedGraphsResponse | PlainMessage<GetFederatedGraphsResponse> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphsBySubgraphLabelsRequest
 */
export class GetFederatedGraphsBySubgraphLabelsRequest extends Message<GetFederatedGraphsBySubgraphLabelsRequest> {
  /**
   * @generated from field: string subgraphName = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetFederatedGraphsBySubgraphLabelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphsBySubgraphLabelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphsBySubgraphLabelsRequest {
    return new GetFederatedGraphsBySubgraphLabelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphsBySubgraphLabelsRequest {
    return new GetFederatedGraphsBySubgraphLabelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphsBySubgraphLabelsRequest {
    return new GetFederatedGraphsBySubgraphLabelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphsBySubgraphLabelsRequest | PlainMessage<GetFederatedGraphsBySubgraphLabelsRequest> | undefined, b: GetFederatedGraphsBySubgraphLabelsRequest | PlainMessage<GetFederatedGraphsBySubgraphLabelsRequest> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphsBySubgraphLabelsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphsBySubgraphLabelsResponse
 */
export class GetFederatedGraphsBySubgraphLabelsResponse extends Message<GetFederatedGraphsBySubgraphLabelsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.FederatedGraph graphs = 2;
   */
  graphs: FederatedGraph[] = [];

  constructor(data?: PartialMessage<GetFederatedGraphsBySubgraphLabelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphsBySubgraphLabelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "graphs", kind: "message", T: FederatedGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphsBySubgraphLabelsResponse {
    return new GetFederatedGraphsBySubgraphLabelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphsBySubgraphLabelsResponse {
    return new GetFederatedGraphsBySubgraphLabelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphsBySubgraphLabelsResponse {
    return new GetFederatedGraphsBySubgraphLabelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphsBySubgraphLabelsResponse | PlainMessage<GetFederatedGraphsBySubgraphLabelsResponse> | undefined, b: GetFederatedGraphsBySubgraphLabelsResponse | PlainMessage<GetFederatedGraphsBySubgraphLabelsResponse> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphsBySubgraphLabelsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphsRequest
 */
export class GetSubgraphsRequest extends Message<GetSubgraphsRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetSubgraphsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphsRequest {
    return new GetSubgraphsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphsRequest {
    return new GetSubgraphsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphsRequest {
    return new GetSubgraphsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphsRequest | PlainMessage<GetSubgraphsRequest> | undefined, b: GetSubgraphsRequest | PlainMessage<GetSubgraphsRequest> | undefined): boolean {
    return proto3.util.equals(GetSubgraphsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Subgraph
 */
export class Subgraph extends Message<Subgraph> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string routingURL = 3;
   */
  routingURL = "";

  /**
   * @generated from field: string lastUpdatedAt = 4;
   */
  lastUpdatedAt = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Label labels = 5;
   */
  labels: Label[] = [];

  /**
   * @generated from field: optional string creatorUserId = 6;
   */
  creatorUserId?: string;

  /**
   * @generated from field: optional string readme = 7;
   */
  readme?: string;

  /**
   * @generated from field: string subscriptionUrl = 8;
   */
  subscriptionUrl = "";

  /**
   * @generated from field: string target_id = 9;
   */
  targetId = "";

  /**
   * @generated from field: string namespace = 10;
   */
  namespace = "";

  constructor(data?: PartialMessage<Subgraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Subgraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routingURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastUpdatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 6, name: "creatorUserId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "subscriptionUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subgraph {
    return new Subgraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subgraph {
    return new Subgraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subgraph {
    return new Subgraph().fromJsonString(jsonString, options);
  }

  static equals(a: Subgraph | PlainMessage<Subgraph> | undefined, b: Subgraph | PlainMessage<Subgraph> | undefined): boolean {
    return proto3.util.equals(Subgraph, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphsResponse
 */
export class GetSubgraphsResponse extends Message<GetSubgraphsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Subgraph graphs = 2;
   */
  graphs: Subgraph[] = [];

  constructor(data?: PartialMessage<GetSubgraphsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "graphs", kind: "message", T: Subgraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphsResponse {
    return new GetSubgraphsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphsResponse {
    return new GetSubgraphsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphsResponse {
    return new GetSubgraphsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphsResponse | PlainMessage<GetSubgraphsResponse> | undefined, b: GetSubgraphsResponse | PlainMessage<GetSubgraphsResponse> | undefined): boolean {
    return proto3.util.equals(GetSubgraphsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphByNameRequest
 */
export class GetFederatedGraphByNameRequest extends Message<GetFederatedGraphByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool includeMetrics = 2;
   */
  includeMetrics = false;

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetFederatedGraphByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "includeMetrics", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphByNameRequest {
    return new GetFederatedGraphByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphByNameRequest {
    return new GetFederatedGraphByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphByNameRequest {
    return new GetFederatedGraphByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphByNameRequest | PlainMessage<GetFederatedGraphByNameRequest> | undefined, b: GetFederatedGraphByNameRequest | PlainMessage<GetFederatedGraphByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphByNameRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphByNameResponse
 */
export class GetFederatedGraphByNameResponse extends Message<GetFederatedGraphByNameResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.FederatedGraph graph = 2;
   */
  graph?: FederatedGraph;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Subgraph subgraphs = 3;
   */
  subgraphs: Subgraph[] = [];

  /**
   * @generated from field: string graphRequestToken = 4;
   */
  graphRequestToken = "";

  constructor(data?: PartialMessage<GetFederatedGraphByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "graph", kind: "message", T: FederatedGraph },
    { no: 3, name: "subgraphs", kind: "message", T: Subgraph, repeated: true },
    { no: 4, name: "graphRequestToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphByNameResponse {
    return new GetFederatedGraphByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphByNameResponse {
    return new GetFederatedGraphByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphByNameResponse {
    return new GetFederatedGraphByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphByNameResponse | PlainMessage<GetFederatedGraphByNameResponse> | undefined, b: GetFederatedGraphByNameResponse | PlainMessage<GetFederatedGraphByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphByNameResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphSDLByNameRequest
 */
export class GetFederatedGraphSDLByNameRequest extends Message<GetFederatedGraphSDLByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetFederatedGraphSDLByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphSDLByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphSDLByNameRequest {
    return new GetFederatedGraphSDLByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphSDLByNameRequest {
    return new GetFederatedGraphSDLByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphSDLByNameRequest {
    return new GetFederatedGraphSDLByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphSDLByNameRequest | PlainMessage<GetFederatedGraphSDLByNameRequest> | undefined, b: GetFederatedGraphSDLByNameRequest | PlainMessage<GetFederatedGraphSDLByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphSDLByNameRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphSDLByNameResponse
 */
export class GetFederatedGraphSDLByNameResponse extends Message<GetFederatedGraphSDLByNameResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: optional string sdl = 2;
   */
  sdl?: string;

  /**
   * @generated from field: optional string version_id = 3;
   */
  versionId?: string;

  constructor(data?: PartialMessage<GetFederatedGraphSDLByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphSDLByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "sdl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphSDLByNameResponse {
    return new GetFederatedGraphSDLByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphSDLByNameResponse {
    return new GetFederatedGraphSDLByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphSDLByNameResponse {
    return new GetFederatedGraphSDLByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphSDLByNameResponse | PlainMessage<GetFederatedGraphSDLByNameResponse> | undefined, b: GetFederatedGraphSDLByNameResponse | PlainMessage<GetFederatedGraphSDLByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphSDLByNameResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphByNameRequest
 */
export class GetSubgraphByNameRequest extends Message<GetSubgraphByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetSubgraphByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphByNameRequest {
    return new GetSubgraphByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphByNameRequest {
    return new GetSubgraphByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphByNameRequest {
    return new GetSubgraphByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphByNameRequest | PlainMessage<GetSubgraphByNameRequest> | undefined, b: GetSubgraphByNameRequest | PlainMessage<GetSubgraphByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetSubgraphByNameRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphByNameResponse
 */
export class GetSubgraphByNameResponse extends Message<GetSubgraphByNameResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.Subgraph graph = 2;
   */
  graph?: Subgraph;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SubgraphMember members = 3;
   */
  members: SubgraphMember[] = [];

  constructor(data?: PartialMessage<GetSubgraphByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "graph", kind: "message", T: Subgraph },
    { no: 3, name: "members", kind: "message", T: SubgraphMember, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphByNameResponse {
    return new GetSubgraphByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphByNameResponse {
    return new GetSubgraphByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphByNameResponse {
    return new GetSubgraphByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphByNameResponse | PlainMessage<GetSubgraphByNameResponse> | undefined, b: GetSubgraphByNameResponse | PlainMessage<GetSubgraphByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetSubgraphByNameResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphSDLFromLatestCompositionRequest
 */
export class GetSubgraphSDLFromLatestCompositionRequest extends Message<GetSubgraphSDLFromLatestCompositionRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string fedGraphName = 2;
   */
  fedGraphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetSubgraphSDLFromLatestCompositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphSDLFromLatestCompositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphSDLFromLatestCompositionRequest {
    return new GetSubgraphSDLFromLatestCompositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphSDLFromLatestCompositionRequest {
    return new GetSubgraphSDLFromLatestCompositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphSDLFromLatestCompositionRequest {
    return new GetSubgraphSDLFromLatestCompositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphSDLFromLatestCompositionRequest | PlainMessage<GetSubgraphSDLFromLatestCompositionRequest> | undefined, b: GetSubgraphSDLFromLatestCompositionRequest | PlainMessage<GetSubgraphSDLFromLatestCompositionRequest> | undefined): boolean {
    return proto3.util.equals(GetSubgraphSDLFromLatestCompositionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphSDLFromLatestCompositionResponse
 */
export class GetSubgraphSDLFromLatestCompositionResponse extends Message<GetSubgraphSDLFromLatestCompositionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: optional string sdl = 2;
   */
  sdl?: string;

  /**
   * @generated from field: optional string version_id = 3;
   */
  versionId?: string;

  constructor(data?: PartialMessage<GetSubgraphSDLFromLatestCompositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphSDLFromLatestCompositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "sdl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphSDLFromLatestCompositionResponse {
    return new GetSubgraphSDLFromLatestCompositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphSDLFromLatestCompositionResponse {
    return new GetSubgraphSDLFromLatestCompositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphSDLFromLatestCompositionResponse {
    return new GetSubgraphSDLFromLatestCompositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphSDLFromLatestCompositionResponse | PlainMessage<GetSubgraphSDLFromLatestCompositionResponse> | undefined, b: GetSubgraphSDLFromLatestCompositionResponse | PlainMessage<GetSubgraphSDLFromLatestCompositionResponse> | undefined): boolean {
    return proto3.util.equals(GetSubgraphSDLFromLatestCompositionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetLatestSubgraphSDLRequest
 */
export class GetLatestSubgraphSDLRequest extends Message<GetLatestSubgraphSDLRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetLatestSubgraphSDLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetLatestSubgraphSDLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestSubgraphSDLRequest {
    return new GetLatestSubgraphSDLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestSubgraphSDLRequest {
    return new GetLatestSubgraphSDLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestSubgraphSDLRequest {
    return new GetLatestSubgraphSDLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestSubgraphSDLRequest | PlainMessage<GetLatestSubgraphSDLRequest> | undefined, b: GetLatestSubgraphSDLRequest | PlainMessage<GetLatestSubgraphSDLRequest> | undefined): boolean {
    return proto3.util.equals(GetLatestSubgraphSDLRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetLatestSubgraphSDLResponse
 */
export class GetLatestSubgraphSDLResponse extends Message<GetLatestSubgraphSDLResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: optional string sdl = 2;
   */
  sdl?: string;

  /**
   * @generated from field: optional string version_id = 3;
   */
  versionId?: string;

  constructor(data?: PartialMessage<GetLatestSubgraphSDLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetLatestSubgraphSDLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "sdl", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestSubgraphSDLResponse {
    return new GetLatestSubgraphSDLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestSubgraphSDLResponse {
    return new GetLatestSubgraphSDLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestSubgraphSDLResponse {
    return new GetLatestSubgraphSDLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestSubgraphSDLResponse | PlainMessage<GetLatestSubgraphSDLResponse> | undefined, b: GetLatestSubgraphSDLResponse | PlainMessage<GetLatestSubgraphSDLResponse> | undefined): boolean {
    return proto3.util.equals(GetLatestSubgraphSDLResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetChecksByFederatedGraphNameRequest
 */
export class GetChecksByFederatedGraphNameRequest extends Message<GetChecksByFederatedGraphNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  /**
   * @generated from field: string startDate = 4;
   */
  startDate = "";

  /**
   * @generated from field: string endDate = 5;
   */
  endDate = "";

  /**
   * @generated from field: string namespace = 6;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetChecksByFederatedGraphNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetChecksByFederatedGraphNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "startDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "endDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChecksByFederatedGraphNameRequest {
    return new GetChecksByFederatedGraphNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChecksByFederatedGraphNameRequest {
    return new GetChecksByFederatedGraphNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChecksByFederatedGraphNameRequest {
    return new GetChecksByFederatedGraphNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChecksByFederatedGraphNameRequest | PlainMessage<GetChecksByFederatedGraphNameRequest> | undefined, b: GetChecksByFederatedGraphNameRequest | PlainMessage<GetChecksByFederatedGraphNameRequest> | undefined): boolean {
    return proto3.util.equals(GetChecksByFederatedGraphNameRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SchemaCheck
 */
export class SchemaCheck extends Message<SchemaCheck> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string targetID = 2;
   */
  targetID = "";

  /**
   * @generated from field: string subgraphName = 3;
   */
  subgraphName = "";

  /**
   * @generated from field: string timestamp = 4;
   */
  timestamp = "";

  /**
   * @generated from field: bool isComposable = 5;
   */
  isComposable = false;

  /**
   * @generated from field: bool isBreaking = 6;
   */
  isBreaking = false;

  /**
   * @generated from field: bool hasClientTraffic = 7;
   */
  hasClientTraffic = false;

  /**
   * @generated from field: bool isForcedSuccess = 8;
   */
  isForcedSuccess = false;

  /**
   * @generated from field: bool isDeleted = 9;
   */
  isDeleted = false;

  /**
   * @generated from field: optional wg.cosmo.platform.v1.SchemaCheckGhDetails ghDetails = 10;
   */
  ghDetails?: SchemaCheckGhDetails;

  /**
   * @generated from field: bool hasLintErrors = 11;
   */
  hasLintErrors = false;

  constructor(data?: PartialMessage<SchemaCheck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SchemaCheck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "targetID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "isComposable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "isBreaking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "hasClientTraffic", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "isForcedSuccess", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "isDeleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "ghDetails", kind: "message", T: SchemaCheckGhDetails, opt: true },
    { no: 11, name: "hasLintErrors", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaCheck {
    return new SchemaCheck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaCheck {
    return new SchemaCheck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaCheck {
    return new SchemaCheck().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaCheck | PlainMessage<SchemaCheck> | undefined, b: SchemaCheck | PlainMessage<SchemaCheck> | undefined): boolean {
    return proto3.util.equals(SchemaCheck, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SchemaCheckGhDetails
 */
export class SchemaCheckGhDetails extends Message<SchemaCheckGhDetails> {
  /**
   * @generated from field: string commitSha = 1;
   */
  commitSha = "";

  /**
   * @generated from field: string ownerSlug = 3;
   */
  ownerSlug = "";

  /**
   * @generated from field: string repositorySlug = 4;
   */
  repositorySlug = "";

  /**
   * @generated from field: int32 checkRunId = 5;
   */
  checkRunId = 0;

  constructor(data?: PartialMessage<SchemaCheckGhDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SchemaCheckGhDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitSha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ownerSlug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repositorySlug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "checkRunId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaCheckGhDetails {
    return new SchemaCheckGhDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaCheckGhDetails {
    return new SchemaCheckGhDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaCheckGhDetails {
    return new SchemaCheckGhDetails().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaCheckGhDetails | PlainMessage<SchemaCheckGhDetails> | undefined, b: SchemaCheckGhDetails | PlainMessage<SchemaCheckGhDetails> | undefined): boolean {
    return proto3.util.equals(SchemaCheckGhDetails, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetChecksByFederatedGraphNameResponse
 */
export class GetChecksByFederatedGraphNameResponse extends Message<GetChecksByFederatedGraphNameResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SchemaCheck checks = 2;
   */
  checks: SchemaCheck[] = [];

  /**
   * @generated from field: int32 checksCountBasedOnDateRange = 3;
   */
  checksCountBasedOnDateRange = 0;

  /**
   * @generated from field: int32 totalChecksCount = 4;
   */
  totalChecksCount = 0;

  constructor(data?: PartialMessage<GetChecksByFederatedGraphNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetChecksByFederatedGraphNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "checks", kind: "message", T: SchemaCheck, repeated: true },
    { no: 3, name: "checksCountBasedOnDateRange", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "totalChecksCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChecksByFederatedGraphNameResponse {
    return new GetChecksByFederatedGraphNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChecksByFederatedGraphNameResponse {
    return new GetChecksByFederatedGraphNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChecksByFederatedGraphNameResponse {
    return new GetChecksByFederatedGraphNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChecksByFederatedGraphNameResponse | PlainMessage<GetChecksByFederatedGraphNameResponse> | undefined, b: GetChecksByFederatedGraphNameResponse | PlainMessage<GetChecksByFederatedGraphNameResponse> | undefined): boolean {
    return proto3.util.equals(GetChecksByFederatedGraphNameResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCheckSummaryRequest
 */
export class GetCheckSummaryRequest extends Message<GetCheckSummaryRequest> {
  /**
   * @generated from field: string check_id = 1;
   */
  checkId = "";

  /**
   * @generated from field: string graph_name = 2;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetCheckSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCheckSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCheckSummaryRequest {
    return new GetCheckSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCheckSummaryRequest {
    return new GetCheckSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCheckSummaryRequest {
    return new GetCheckSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCheckSummaryRequest | PlainMessage<GetCheckSummaryRequest> | undefined, b: GetCheckSummaryRequest | PlainMessage<GetCheckSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetCheckSummaryRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ChangeCounts
 */
export class ChangeCounts extends Message<ChangeCounts> {
  /**
   * @generated from field: int32 additions = 1;
   */
  additions = 0;

  /**
   * @generated from field: int32 deletions = 2;
   */
  deletions = 0;

  constructor(data?: PartialMessage<ChangeCounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ChangeCounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "additions", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "deletions", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeCounts {
    return new ChangeCounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeCounts {
    return new ChangeCounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeCounts {
    return new ChangeCounts().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeCounts | PlainMessage<ChangeCounts> | undefined, b: ChangeCounts | PlainMessage<ChangeCounts> | undefined): boolean {
    return proto3.util.equals(ChangeCounts, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCheckSummaryResponse
 */
export class GetCheckSummaryResponse extends Message<GetCheckSummaryResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.SchemaCheck check = 2;
   */
  check?: SchemaCheck;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetCheckSummaryResponse.AffectedGraph affected_graphs = 3;
   */
  affectedGraphs: GetCheckSummaryResponse_AffectedGraph[] = [];

  /**
   * @generated from field: optional string proposedSubgraphSchemaSDL = 4;
   */
  proposedSubgraphSchemaSDL?: string;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SchemaChange changes = 6;
   */
  changes: SchemaChange[] = [];

  /**
   * @generated from field: repeated string compositionErrors = 7;
   */
  compositionErrors: string[] = [];

  /**
   * @generated from field: int32 traffic_check_days = 8;
   */
  trafficCheckDays = 0;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.LintIssue lintIssues = 9;
   */
  lintIssues: LintIssue[] = [];

  constructor(data?: PartialMessage<GetCheckSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCheckSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "check", kind: "message", T: SchemaCheck },
    { no: 3, name: "affected_graphs", kind: "message", T: GetCheckSummaryResponse_AffectedGraph, repeated: true },
    { no: 4, name: "proposedSubgraphSchemaSDL", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "changes", kind: "message", T: SchemaChange, repeated: true },
    { no: 7, name: "compositionErrors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "traffic_check_days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "lintIssues", kind: "message", T: LintIssue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCheckSummaryResponse {
    return new GetCheckSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCheckSummaryResponse {
    return new GetCheckSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCheckSummaryResponse {
    return new GetCheckSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCheckSummaryResponse | PlainMessage<GetCheckSummaryResponse> | undefined, b: GetCheckSummaryResponse | PlainMessage<GetCheckSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetCheckSummaryResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCheckSummaryResponse.AffectedGraph
 */
export class GetCheckSummaryResponse_AffectedGraph extends Message<GetCheckSummaryResponse_AffectedGraph> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 traffic_check_days = 2;
   */
  trafficCheckDays = 0;

  constructor(data?: PartialMessage<GetCheckSummaryResponse_AffectedGraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCheckSummaryResponse.AffectedGraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "traffic_check_days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCheckSummaryResponse_AffectedGraph {
    return new GetCheckSummaryResponse_AffectedGraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCheckSummaryResponse_AffectedGraph {
    return new GetCheckSummaryResponse_AffectedGraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCheckSummaryResponse_AffectedGraph {
    return new GetCheckSummaryResponse_AffectedGraph().fromJsonString(jsonString, options);
  }

  static equals(a: GetCheckSummaryResponse_AffectedGraph | PlainMessage<GetCheckSummaryResponse_AffectedGraph> | undefined, b: GetCheckSummaryResponse_AffectedGraph | PlainMessage<GetCheckSummaryResponse_AffectedGraph> | undefined): boolean {
    return proto3.util.equals(GetCheckSummaryResponse_AffectedGraph, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCheckOperationsRequest
 */
export class GetCheckOperationsRequest extends Message<GetCheckOperationsRequest> {
  /**
   * @generated from field: string check_id = 1;
   */
  checkId = "";

  /**
   * @generated from field: string graph_name = 2;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetCheckOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCheckOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCheckOperationsRequest {
    return new GetCheckOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCheckOperationsRequest {
    return new GetCheckOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCheckOperationsRequest {
    return new GetCheckOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCheckOperationsRequest | PlainMessage<GetCheckOperationsRequest> | undefined, b: GetCheckOperationsRequest | PlainMessage<GetCheckOperationsRequest> | undefined): boolean {
    return proto3.util.equals(GetCheckOperationsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCheckOperationsResponse
 */
export class GetCheckOperationsResponse extends Message<GetCheckOperationsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetCheckOperationsResponse.CheckOperation operations = 2;
   */
  operations: GetCheckOperationsResponse_CheckOperation[] = [];

  /**
   * @generated from field: int32 traffic_check_days = 3;
   */
  trafficCheckDays = 0;

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt = "";

  constructor(data?: PartialMessage<GetCheckOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCheckOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "operations", kind: "message", T: GetCheckOperationsResponse_CheckOperation, repeated: true },
    { no: 3, name: "traffic_check_days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCheckOperationsResponse {
    return new GetCheckOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCheckOperationsResponse {
    return new GetCheckOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCheckOperationsResponse {
    return new GetCheckOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCheckOperationsResponse | PlainMessage<GetCheckOperationsResponse> | undefined, b: GetCheckOperationsResponse | PlainMessage<GetCheckOperationsResponse> | undefined): boolean {
    return proto3.util.equals(GetCheckOperationsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCheckOperationsResponse.CheckOperation
 */
export class GetCheckOperationsResponse_CheckOperation extends Message<GetCheckOperationsResponse_CheckOperation> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: string first_seen_at = 4;
   */
  firstSeenAt = "";

  /**
   * @generated from field: string last_seen_at = 5;
   */
  lastSeenAt = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SchemaChange impacting_changes = 6;
   */
  impactingChanges: SchemaChange[] = [];

  /**
   * @generated from field: bool is_safe = 7;
   */
  isSafe = false;

  /**
   * @generated from field: bool hasIgnoreAllOverride = 8;
   */
  hasIgnoreAllOverride = false;

  constructor(data?: PartialMessage<GetCheckOperationsResponse_CheckOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCheckOperationsResponse.CheckOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "first_seen_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_seen_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "impacting_changes", kind: "message", T: SchemaChange, repeated: true },
    { no: 7, name: "is_safe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "hasIgnoreAllOverride", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCheckOperationsResponse_CheckOperation {
    return new GetCheckOperationsResponse_CheckOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCheckOperationsResponse_CheckOperation {
    return new GetCheckOperationsResponse_CheckOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCheckOperationsResponse_CheckOperation {
    return new GetCheckOperationsResponse_CheckOperation().fromJsonString(jsonString, options);
  }

  static equals(a: GetCheckOperationsResponse_CheckOperation | PlainMessage<GetCheckOperationsResponse_CheckOperation> | undefined, b: GetCheckOperationsResponse_CheckOperation | PlainMessage<GetCheckOperationsResponse_CheckOperation> | undefined): boolean {
    return proto3.util.equals(GetCheckOperationsResponse_CheckOperation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOperationContentRequest
 */
export class GetOperationContentRequest extends Message<GetOperationContentRequest> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<GetOperationContentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOperationContentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOperationContentRequest {
    return new GetOperationContentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOperationContentRequest {
    return new GetOperationContentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOperationContentRequest {
    return new GetOperationContentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOperationContentRequest | PlainMessage<GetOperationContentRequest> | undefined, b: GetOperationContentRequest | PlainMessage<GetOperationContentRequest> | undefined): boolean {
    return proto3.util.equals(GetOperationContentRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOperationContentResponse
 */
export class GetOperationContentResponse extends Message<GetOperationContentResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string operation_content = 2;
   */
  operationContent = "";

  constructor(data?: PartialMessage<GetOperationContentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOperationContentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "operation_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOperationContentResponse {
    return new GetOperationContentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOperationContentResponse {
    return new GetOperationContentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOperationContentResponse {
    return new GetOperationContentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOperationContentResponse | PlainMessage<GetOperationContentResponse> | undefined, b: GetOperationContentResponse | PlainMessage<GetOperationContentResponse> | undefined): boolean {
    return proto3.util.equals(GetOperationContentResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphChangelogRequest
 */
export class GetFederatedGraphChangelogRequest extends Message<GetFederatedGraphChangelogRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: wg.cosmo.platform.v1.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 3;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetFederatedGraphChangelogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphChangelogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "dateRange", kind: "message", T: DateRange },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphChangelogRequest {
    return new GetFederatedGraphChangelogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphChangelogRequest {
    return new GetFederatedGraphChangelogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphChangelogRequest {
    return new GetFederatedGraphChangelogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphChangelogRequest | PlainMessage<GetFederatedGraphChangelogRequest> | undefined, b: GetFederatedGraphChangelogRequest | PlainMessage<GetFederatedGraphChangelogRequest> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphChangelogRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FederatedGraphChangelog
 */
export class FederatedGraphChangelog extends Message<FederatedGraphChangelog> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string changeType = 3;
   */
  changeType = "";

  /**
   * @generated from field: string changeMessage = 4;
   */
  changeMessage = "";

  /**
   * @generated from field: string createdAt = 5;
   */
  createdAt = "";

  constructor(data?: PartialMessage<FederatedGraphChangelog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FederatedGraphChangelog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "changeType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "changeMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FederatedGraphChangelog {
    return new FederatedGraphChangelog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FederatedGraphChangelog {
    return new FederatedGraphChangelog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FederatedGraphChangelog {
    return new FederatedGraphChangelog().fromJsonString(jsonString, options);
  }

  static equals(a: FederatedGraphChangelog | PlainMessage<FederatedGraphChangelog> | undefined, b: FederatedGraphChangelog | PlainMessage<FederatedGraphChangelog> | undefined): boolean {
    return proto3.util.equals(FederatedGraphChangelog, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FederatedGraphChangelogOutput
 */
export class FederatedGraphChangelogOutput extends Message<FederatedGraphChangelogOutput> {
  /**
   * @generated from field: string createdAt = 1;
   */
  createdAt = "";

  /**
   * @generated from field: string schemaVersionId = 2;
   */
  schemaVersionId = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.FederatedGraphChangelog changelogs = 3;
   */
  changelogs: FederatedGraphChangelog[] = [];

  constructor(data?: PartialMessage<FederatedGraphChangelogOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FederatedGraphChangelogOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schemaVersionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "changelogs", kind: "message", T: FederatedGraphChangelog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FederatedGraphChangelogOutput {
    return new FederatedGraphChangelogOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FederatedGraphChangelogOutput {
    return new FederatedGraphChangelogOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FederatedGraphChangelogOutput {
    return new FederatedGraphChangelogOutput().fromJsonString(jsonString, options);
  }

  static equals(a: FederatedGraphChangelogOutput | PlainMessage<FederatedGraphChangelogOutput> | undefined, b: FederatedGraphChangelogOutput | PlainMessage<FederatedGraphChangelogOutput> | undefined): boolean {
    return proto3.util.equals(FederatedGraphChangelogOutput, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedGraphChangelogResponse
 */
export class GetFederatedGraphChangelogResponse extends Message<GetFederatedGraphChangelogResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.FederatedGraphChangelogOutput federatedGraphChangelogOutput = 2;
   */
  federatedGraphChangelogOutput: FederatedGraphChangelogOutput[] = [];

  /**
   * @generated from field: bool hasNextPage = 3;
   */
  hasNextPage = false;

  constructor(data?: PartialMessage<GetFederatedGraphChangelogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedGraphChangelogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "federatedGraphChangelogOutput", kind: "message", T: FederatedGraphChangelogOutput, repeated: true },
    { no: 3, name: "hasNextPage", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedGraphChangelogResponse {
    return new GetFederatedGraphChangelogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedGraphChangelogResponse {
    return new GetFederatedGraphChangelogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedGraphChangelogResponse {
    return new GetFederatedGraphChangelogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedGraphChangelogResponse | PlainMessage<GetFederatedGraphChangelogResponse> | undefined, b: GetFederatedGraphChangelogResponse | PlainMessage<GetFederatedGraphChangelogResponse> | undefined): boolean {
    return proto3.util.equals(GetFederatedGraphChangelogResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFederatedResponse
 */
export class GetFederatedResponse extends Message<GetFederatedResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string FederatedSchemaSDL = 2;
   */
  FederatedSchemaSDL = "";

  constructor(data?: PartialMessage<GetFederatedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFederatedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "FederatedSchemaSDL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFederatedResponse {
    return new GetFederatedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFederatedResponse {
    return new GetFederatedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFederatedResponse {
    return new GetFederatedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFederatedResponse | PlainMessage<GetFederatedResponse> | undefined, b: GetFederatedResponse | PlainMessage<GetFederatedResponse> | undefined): boolean {
    return proto3.util.equals(GetFederatedResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateSubgraphRequest
 */
export class UpdateSubgraphRequest extends Message<UpdateSubgraphRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string routing_url = 2;
   */
  routingUrl = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Label labels = 3;
   */
  labels: Label[] = [];

  /**
   * @generated from field: repeated string headers = 4;
   */
  headers: string[] = [];

  /**
   * subscription protocol to use when subscribing to this subgraph
   *
   * @generated from field: optional wg.cosmo.common.GraphQLSubscriptionProtocol subscription_protocol = 5;
   */
  subscriptionProtocol?: GraphQLSubscriptionProtocol;

  /**
   * url used for subscriptions
   *
   * @generated from field: optional string subscription_url = 6;
   */
  subscriptionUrl?: string;

  /**
   * @generated from field: optional string readme = 7;
   */
  readme?: string;

  /**
   * @generated from field: string namespace = 8;
   */
  namespace = "";

  /**
   * @generated from field: optional bool unset_labels = 9;
   */
  unsetLabels?: boolean;

  constructor(data?: PartialMessage<UpdateSubgraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateSubgraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 4, name: "headers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "subscription_protocol", kind: "enum", T: proto3.getEnumType(GraphQLSubscriptionProtocol), opt: true },
    { no: 6, name: "subscription_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "unset_labels", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubgraphRequest {
    return new UpdateSubgraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubgraphRequest {
    return new UpdateSubgraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubgraphRequest {
    return new UpdateSubgraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSubgraphRequest | PlainMessage<UpdateSubgraphRequest> | undefined, b: UpdateSubgraphRequest | PlainMessage<UpdateSubgraphRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSubgraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateSubgraphResponse
 */
export class UpdateSubgraphResponse extends Message<UpdateSubgraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<UpdateSubgraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateSubgraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubgraphResponse {
    return new UpdateSubgraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubgraphResponse {
    return new UpdateSubgraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubgraphResponse {
    return new UpdateSubgraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSubgraphResponse | PlainMessage<UpdateSubgraphResponse> | undefined, b: UpdateSubgraphResponse | PlainMessage<UpdateSubgraphResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSubgraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateFederatedGraphRequest
 */
export class UpdateFederatedGraphRequest extends Message<UpdateFederatedGraphRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string routing_url = 2;
   */
  routingUrl = "";

  /**
   * @generated from field: repeated string label_matchers = 3;
   */
  labelMatchers: string[] = [];

  /**
   * @generated from field: optional string readme = 4;
   */
  readme?: string;

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  /**
   * @generated from field: optional bool unset_label_matchers = 6;
   */
  unsetLabelMatchers?: boolean;

  /**
   * @generated from field: optional string admissionWebhookURL = 7;
   */
  admissionWebhookURL?: string;

  constructor(data?: PartialMessage<UpdateFederatedGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateFederatedGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label_matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "unset_label_matchers", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "admissionWebhookURL", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFederatedGraphRequest {
    return new UpdateFederatedGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFederatedGraphRequest {
    return new UpdateFederatedGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFederatedGraphRequest {
    return new UpdateFederatedGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFederatedGraphRequest | PlainMessage<UpdateFederatedGraphRequest> | undefined, b: UpdateFederatedGraphRequest | PlainMessage<UpdateFederatedGraphRequest> | undefined): boolean {
    return proto3.util.equals(UpdateFederatedGraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateFederatedGraphResponse
 */
export class UpdateFederatedGraphResponse extends Message<UpdateFederatedGraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<UpdateFederatedGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateFederatedGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFederatedGraphResponse {
    return new UpdateFederatedGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFederatedGraphResponse {
    return new UpdateFederatedGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFederatedGraphResponse {
    return new UpdateFederatedGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFederatedGraphResponse | PlainMessage<UpdateFederatedGraphResponse> | undefined, b: UpdateFederatedGraphResponse | PlainMessage<UpdateFederatedGraphResponse> | undefined): boolean {
    return proto3.util.equals(UpdateFederatedGraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateMonographRequest
 */
export class UpdateMonographRequest extends Message<UpdateMonographRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string routing_url = 3;
   */
  routingUrl = "";

  /**
   * @generated from field: string graph_url = 4;
   */
  graphUrl = "";

  /**
   * @generated from field: optional wg.cosmo.common.GraphQLSubscriptionProtocol subscription_protocol = 5;
   */
  subscriptionProtocol?: GraphQLSubscriptionProtocol;

  /**
   * @generated from field: optional string subscription_url = 6;
   */
  subscriptionUrl?: string;

  /**
   * @generated from field: optional string readme = 7;
   */
  readme?: string;

  constructor(data?: PartialMessage<UpdateMonographRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateMonographRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routing_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "graph_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subscription_protocol", kind: "enum", T: proto3.getEnumType(GraphQLSubscriptionProtocol), opt: true },
    { no: 6, name: "subscription_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMonographRequest {
    return new UpdateMonographRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMonographRequest {
    return new UpdateMonographRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMonographRequest {
    return new UpdateMonographRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMonographRequest | PlainMessage<UpdateMonographRequest> | undefined, b: UpdateMonographRequest | PlainMessage<UpdateMonographRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMonographRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateMonographResponse
 */
export class UpdateMonographResponse extends Message<UpdateMonographResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateMonographResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateMonographResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMonographResponse {
    return new UpdateMonographResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMonographResponse {
    return new UpdateMonographResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMonographResponse {
    return new UpdateMonographResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMonographResponse | PlainMessage<UpdateMonographResponse> | undefined, b: UpdateMonographResponse | PlainMessage<UpdateMonographResponse> | undefined): boolean {
    return proto3.util.equals(UpdateMonographResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CheckFederatedGraphRequest
 */
export class CheckFederatedGraphRequest extends Message<CheckFederatedGraphRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string label_matchers = 2;
   */
  labelMatchers: string[] = [];

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<CheckFederatedGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CheckFederatedGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label_matchers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckFederatedGraphRequest {
    return new CheckFederatedGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckFederatedGraphRequest {
    return new CheckFederatedGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckFederatedGraphRequest {
    return new CheckFederatedGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckFederatedGraphRequest | PlainMessage<CheckFederatedGraphRequest> | undefined, b: CheckFederatedGraphRequest | PlainMessage<CheckFederatedGraphRequest> | undefined): boolean {
    return proto3.util.equals(CheckFederatedGraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CheckFederatedGraphResponse
 */
export class CheckFederatedGraphResponse extends Message<CheckFederatedGraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Subgraph subgraphs = 3;
   */
  subgraphs: Subgraph[] = [];

  constructor(data?: PartialMessage<CheckFederatedGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CheckFederatedGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "subgraphs", kind: "message", T: Subgraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckFederatedGraphResponse {
    return new CheckFederatedGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckFederatedGraphResponse {
    return new CheckFederatedGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckFederatedGraphResponse {
    return new CheckFederatedGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckFederatedGraphResponse | PlainMessage<CheckFederatedGraphResponse> | undefined, b: CheckFederatedGraphResponse | PlainMessage<CheckFederatedGraphResponse> | undefined): boolean {
    return proto3.util.equals(CheckFederatedGraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Pagination
 */
export class Pagination extends Message<Pagination> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<Pagination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Pagination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pagination {
    return new Pagination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJsonString(jsonString, options);
  }

  static equals(a: Pagination | PlainMessage<Pagination> | undefined, b: Pagination | PlainMessage<Pagination> | undefined): boolean {
    return proto3.util.equals(Pagination, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Sort
 */
export class Sort extends Message<Sort> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bool desc = 2;
   */
  desc = false;

  constructor(data?: PartialMessage<Sort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Sort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sort {
    return new Sort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sort {
    return new Sort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sort {
    return new Sort().fromJsonString(jsonString, options);
  }

  static equals(a: Sort | PlainMessage<Sort> | undefined, b: Sort | PlainMessage<Sort> | undefined): boolean {
    return proto3.util.equals(Sort, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsConfig
 */
export class AnalyticsConfig extends Message<AnalyticsConfig> {
  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 1;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: optional int32 range = 2;
   */
  range?: number;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsFilter filters = 3;
   */
  filters: AnalyticsFilter[] = [];

  /**
   * @generated from field: wg.cosmo.platform.v1.Pagination pagination = 4;
   */
  pagination?: Pagination;

  /**
   * @generated from field: optional wg.cosmo.platform.v1.Sort sort = 5;
   */
  sort?: Sort;

  constructor(data?: PartialMessage<AnalyticsConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dateRange", kind: "message", T: DateRange },
    { no: 2, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "filters", kind: "message", T: AnalyticsFilter, repeated: true },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
    { no: 5, name: "sort", kind: "message", T: Sort, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsConfig {
    return new AnalyticsConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsConfig {
    return new AnalyticsConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsConfig {
    return new AnalyticsConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsConfig | PlainMessage<AnalyticsConfig> | undefined, b: AnalyticsConfig | PlainMessage<AnalyticsConfig> | undefined): boolean {
    return proto3.util.equals(AnalyticsConfig, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsFilter
 */
export class AnalyticsFilter extends Message<AnalyticsFilter> {
  /**
   * The name of the column / attribute to filter on.
   *
   * @generated from field: string field = 1;
   */
  field = "";

  /**
   * The value to filter on.
   *
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * The operator to use for the filter.
   *
   * @generated from field: wg.cosmo.platform.v1.AnalyticsViewFilterOperator operator = 3;
   */
  operator = AnalyticsViewFilterOperator.EQUALS;

  constructor(data?: PartialMessage<AnalyticsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator", kind: "enum", T: proto3.getEnumType(AnalyticsViewFilterOperator) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsFilter {
    return new AnalyticsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsFilter {
    return new AnalyticsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsFilter {
    return new AnalyticsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsFilter | PlainMessage<AnalyticsFilter> | undefined, b: AnalyticsFilter | PlainMessage<AnalyticsFilter> | undefined): boolean {
    return proto3.util.equals(AnalyticsFilter, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DateRange
 */
export class DateRange extends Message<DateRange> {
  /**
   * The start date of the date range in ISO 8601 format.
   *
   * @generated from field: string start = 1;
   */
  start = "";

  /**
   * The end date of the date range in ISO 8601 format.
   *
   * @generated from field: string end = 2;
   */
  end = "";

  constructor(data?: PartialMessage<DateRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DateRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DateRange {
    return new DateRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DateRange {
    return new DateRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DateRange {
    return new DateRange().fromJsonString(jsonString, options);
  }

  static equals(a: DateRange | PlainMessage<DateRange> | undefined, b: DateRange | PlainMessage<DateRange> | undefined): boolean {
    return proto3.util.equals(DateRange, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAnalyticsViewRequest
 */
export class GetAnalyticsViewRequest extends Message<GetAnalyticsViewRequest> {
  /**
   * @generated from field: string federatedGraphName = 1;
   */
  federatedGraphName = "";

  /**
   * @generated from field: wg.cosmo.platform.v1.AnalyticsViewGroupName name = 2;
   */
  name = AnalyticsViewGroupName.None;

  /**
   * @generated from field: wg.cosmo.platform.v1.AnalyticsConfig config = 3;
   */
  config?: AnalyticsConfig;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetAnalyticsViewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAnalyticsViewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "federatedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "enum", T: proto3.getEnumType(AnalyticsViewGroupName) },
    { no: 3, name: "config", kind: "message", T: AnalyticsConfig },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnalyticsViewRequest {
    return new GetAnalyticsViewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnalyticsViewRequest {
    return new GetAnalyticsViewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnalyticsViewRequest {
    return new GetAnalyticsViewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnalyticsViewRequest | PlainMessage<GetAnalyticsViewRequest> | undefined, b: GetAnalyticsViewRequest | PlainMessage<GetAnalyticsViewRequest> | undefined): boolean {
    return proto3.util.equals(GetAnalyticsViewRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsViewResult
 */
export class AnalyticsViewResult extends Message<AnalyticsViewResult> {
  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsViewColumn columns = 1;
   */
  columns: AnalyticsViewColumn[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsViewRow rows = 2;
   */
  rows: AnalyticsViewRow[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsViewResultFilter filters = 3;
   */
  filters: AnalyticsViewResultFilter[] = [];

  /**
   * @generated from field: int32 pages = 4;
   */
  pages = 0;

  constructor(data?: PartialMessage<AnalyticsViewResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsViewResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "columns", kind: "message", T: AnalyticsViewColumn, repeated: true },
    { no: 2, name: "rows", kind: "message", T: AnalyticsViewRow, repeated: true },
    { no: 3, name: "filters", kind: "message", T: AnalyticsViewResultFilter, repeated: true },
    { no: 4, name: "pages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsViewResult {
    return new AnalyticsViewResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsViewResult {
    return new AnalyticsViewResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsViewResult {
    return new AnalyticsViewResult().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsViewResult | PlainMessage<AnalyticsViewResult> | undefined, b: AnalyticsViewResult | PlainMessage<AnalyticsViewResult> | undefined): boolean {
    return proto3.util.equals(AnalyticsViewResult, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsViewColumn
 */
export class AnalyticsViewColumn extends Message<AnalyticsViewColumn> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: optional wg.cosmo.platform.v1.Unit unit = 4;
   */
  unit?: Unit;

  /**
   * @generated from field: optional bool is_hidden = 5;
   */
  isHidden?: boolean;

  /**
   * @generated from field: optional bool is_cta = 6;
   */
  isCta?: boolean;

  constructor(data?: PartialMessage<AnalyticsViewColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsViewColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unit", kind: "enum", T: proto3.getEnumType(Unit), opt: true },
    { no: 5, name: "is_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "is_cta", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsViewColumn {
    return new AnalyticsViewColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsViewColumn {
    return new AnalyticsViewColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsViewColumn {
    return new AnalyticsViewColumn().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsViewColumn | PlainMessage<AnalyticsViewColumn> | undefined, b: AnalyticsViewColumn | PlainMessage<AnalyticsViewColumn> | undefined): boolean {
    return proto3.util.equals(AnalyticsViewColumn, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsViewResultFilter
 */
export class AnalyticsViewResultFilter extends Message<AnalyticsViewResultFilter> {
  /**
   * @generated from field: string columnName = 1;
   */
  columnName = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsViewResultFilterOption options = 3;
   */
  options: AnalyticsViewResultFilterOption[] = [];

  /**
   * @generated from field: optional wg.cosmo.platform.v1.CustomOptions custom_options = 4;
   */
  customOptions?: CustomOptions;

  constructor(data?: PartialMessage<AnalyticsViewResultFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsViewResultFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "columnName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: AnalyticsViewResultFilterOption, repeated: true },
    { no: 4, name: "custom_options", kind: "enum", T: proto3.getEnumType(CustomOptions), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsViewResultFilter {
    return new AnalyticsViewResultFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsViewResultFilter {
    return new AnalyticsViewResultFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsViewResultFilter {
    return new AnalyticsViewResultFilter().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsViewResultFilter | PlainMessage<AnalyticsViewResultFilter> | undefined, b: AnalyticsViewResultFilter | PlainMessage<AnalyticsViewResultFilter> | undefined): boolean {
    return proto3.util.equals(AnalyticsViewResultFilter, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsViewResultFilterOption
 */
export class AnalyticsViewResultFilterOption extends Message<AnalyticsViewResultFilterOption> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * @generated from field: wg.cosmo.platform.v1.AnalyticsViewFilterOperator operator = 3;
   */
  operator = AnalyticsViewFilterOperator.EQUALS;

  constructor(data?: PartialMessage<AnalyticsViewResultFilterOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsViewResultFilterOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "operator", kind: "enum", T: proto3.getEnumType(AnalyticsViewFilterOperator) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsViewResultFilterOption {
    return new AnalyticsViewResultFilterOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsViewResultFilterOption {
    return new AnalyticsViewResultFilterOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsViewResultFilterOption {
    return new AnalyticsViewResultFilterOption().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsViewResultFilterOption | PlainMessage<AnalyticsViewResultFilterOption> | undefined, b: AnalyticsViewResultFilterOption | PlainMessage<AnalyticsViewResultFilterOption> | undefined): boolean {
    return proto3.util.equals(AnalyticsViewResultFilterOption, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsViewRow
 */
export class AnalyticsViewRow extends Message<AnalyticsViewRow> {
  /**
   * @generated from field: map<string, wg.cosmo.platform.v1.AnalyticsViewRowValue> value = 1;
   */
  value: { [key: string]: AnalyticsViewRowValue } = {};

  constructor(data?: PartialMessage<AnalyticsViewRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsViewRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: AnalyticsViewRowValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsViewRow {
    return new AnalyticsViewRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsViewRow {
    return new AnalyticsViewRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsViewRow {
    return new AnalyticsViewRow().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsViewRow | PlainMessage<AnalyticsViewRow> | undefined, b: AnalyticsViewRow | PlainMessage<AnalyticsViewRow> | undefined): boolean {
    return proto3.util.equals(AnalyticsViewRow, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AnalyticsViewRowValue
 */
export class AnalyticsViewRowValue extends Message<AnalyticsViewRowValue> {
  /**
   * The kind of value.
   *
   * @generated from oneof wg.cosmo.platform.v1.AnalyticsViewRowValue.kind
   */
  kind: {
    /**
     * Represents a double value.
     *
     * @generated from field: double number_value = 1;
     */
    value: number;
    case: "numberValue";
  } | {
    /**
     * Represents a string value.
     *
     * @generated from field: string string_value = 2;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * Represents a boolean value.
     *
     * @generated from field: bool bool_value = 3;
     */
    value: boolean;
    case: "boolValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AnalyticsViewRowValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AnalyticsViewRowValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "kind" },
    { no: 2, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 3, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsViewRowValue {
    return new AnalyticsViewRowValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsViewRowValue {
    return new AnalyticsViewRowValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsViewRowValue {
    return new AnalyticsViewRowValue().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsViewRowValue | PlainMessage<AnalyticsViewRowValue> | undefined, b: AnalyticsViewRowValue | PlainMessage<AnalyticsViewRowValue> | undefined): boolean {
    return proto3.util.equals(AnalyticsViewRowValue, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAnalyticsViewResponse
 */
export class GetAnalyticsViewResponse extends Message<GetAnalyticsViewResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.AnalyticsViewResult view = 2;
   */
  view?: AnalyticsViewResult;

  constructor(data?: PartialMessage<GetAnalyticsViewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAnalyticsViewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "view", kind: "message", T: AnalyticsViewResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnalyticsViewResponse {
    return new GetAnalyticsViewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnalyticsViewResponse {
    return new GetAnalyticsViewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnalyticsViewResponse {
    return new GetAnalyticsViewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnalyticsViewResponse | PlainMessage<GetAnalyticsViewResponse> | undefined, b: GetAnalyticsViewResponse | PlainMessage<GetAnalyticsViewResponse> | undefined): boolean {
    return proto3.util.equals(GetAnalyticsViewResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDashboardAnalyticsViewRequest
 */
export class GetDashboardAnalyticsViewRequest extends Message<GetDashboardAnalyticsViewRequest> {
  /**
   * @generated from field: string federatedGraphName = 1;
   */
  federatedGraphName = "";

  /**
   * @generated from field: string startDate = 2;
   */
  startDate = "";

  /**
   * @generated from field: string endDate = 3;
   */
  endDate = "";

  /**
   * @generated from field: int32 range = 4;
   */
  range = 0;

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetDashboardAnalyticsViewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDashboardAnalyticsViewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "federatedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "startDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDashboardAnalyticsViewRequest {
    return new GetDashboardAnalyticsViewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDashboardAnalyticsViewRequest {
    return new GetDashboardAnalyticsViewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDashboardAnalyticsViewRequest {
    return new GetDashboardAnalyticsViewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDashboardAnalyticsViewRequest | PlainMessage<GetDashboardAnalyticsViewRequest> | undefined, b: GetDashboardAnalyticsViewRequest | PlainMessage<GetDashboardAnalyticsViewRequest> | undefined): boolean {
    return proto3.util.equals(GetDashboardAnalyticsViewRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RequestSeriesItem
 */
export class RequestSeriesItem extends Message<RequestSeriesItem> {
  /**
   * @generated from field: string timestamp = 1;
   */
  timestamp = "";

  /**
   * @generated from field: int32 totalRequests = 2;
   */
  totalRequests = 0;

  /**
   * @generated from field: int32 erroredRequests = 3;
   */
  erroredRequests = 0;

  constructor(data?: PartialMessage<RequestSeriesItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RequestSeriesItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "totalRequests", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "erroredRequests", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestSeriesItem {
    return new RequestSeriesItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestSeriesItem {
    return new RequestSeriesItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestSeriesItem {
    return new RequestSeriesItem().fromJsonString(jsonString, options);
  }

  static equals(a: RequestSeriesItem | PlainMessage<RequestSeriesItem> | undefined, b: RequestSeriesItem | PlainMessage<RequestSeriesItem> | undefined): boolean {
    return proto3.util.equals(RequestSeriesItem, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.OperationRequestCount
 */
export class OperationRequestCount extends Message<OperationRequestCount> {
  /**
   * @generated from field: string operationHash = 1;
   */
  operationHash = "";

  /**
   * @generated from field: string operationName = 2;
   */
  operationName = "";

  /**
   * @generated from field: int32 totalRequests = 3;
   */
  totalRequests = 0;

  constructor(data?: PartialMessage<OperationRequestCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.OperationRequestCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operationHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operationName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "totalRequests", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationRequestCount {
    return new OperationRequestCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationRequestCount {
    return new OperationRequestCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationRequestCount {
    return new OperationRequestCount().fromJsonString(jsonString, options);
  }

  static equals(a: OperationRequestCount | PlainMessage<OperationRequestCount> | undefined, b: OperationRequestCount | PlainMessage<OperationRequestCount> | undefined): boolean {
    return proto3.util.equals(OperationRequestCount, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FederatedGraphMetrics
 */
export class FederatedGraphMetrics extends Message<FederatedGraphMetrics> {
  /**
   * @generated from field: string federatedGraphID = 1;
   */
  federatedGraphID = "";

  /**
   * @generated from field: float requestRate = 2;
   */
  requestRate = 0;

  /**
   * @generated from field: float errorRate = 3;
   */
  errorRate = 0;

  /**
   * @generated from field: float latency = 4;
   */
  latency = 0;

  constructor(data?: PartialMessage<FederatedGraphMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FederatedGraphMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "federatedGraphID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requestRate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "errorRate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "latency", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FederatedGraphMetrics {
    return new FederatedGraphMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FederatedGraphMetrics {
    return new FederatedGraphMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FederatedGraphMetrics {
    return new FederatedGraphMetrics().fromJsonString(jsonString, options);
  }

  static equals(a: FederatedGraphMetrics | PlainMessage<FederatedGraphMetrics> | undefined, b: FederatedGraphMetrics | PlainMessage<FederatedGraphMetrics> | undefined): boolean {
    return proto3.util.equals(FederatedGraphMetrics, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SubgraphMetrics
 */
export class SubgraphMetrics extends Message<SubgraphMetrics> {
  /**
   * @generated from field: string subgraphID = 1;
   */
  subgraphID = "";

  /**
   * @generated from field: float requestRate = 2;
   */
  requestRate = 0;

  /**
   * @generated from field: float errorRate = 3;
   */
  errorRate = 0;

  /**
   * @generated from field: float latency = 4;
   */
  latency = 0;

  constructor(data?: PartialMessage<SubgraphMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SubgraphMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requestRate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "errorRate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "latency", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubgraphMetrics {
    return new SubgraphMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubgraphMetrics {
    return new SubgraphMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubgraphMetrics {
    return new SubgraphMetrics().fromJsonString(jsonString, options);
  }

  static equals(a: SubgraphMetrics | PlainMessage<SubgraphMetrics> | undefined, b: SubgraphMetrics | PlainMessage<SubgraphMetrics> | undefined): boolean {
    return proto3.util.equals(SubgraphMetrics, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDashboardAnalyticsViewResponse
 */
export class GetDashboardAnalyticsViewResponse extends Message<GetDashboardAnalyticsViewResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.RequestSeriesItem requestSeries = 2;
   */
  requestSeries: RequestSeriesItem[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.OperationRequestCount mostRequestedOperations = 3;
   */
  mostRequestedOperations: OperationRequestCount[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SubgraphMetrics subgraphMetrics = 4;
   */
  subgraphMetrics: SubgraphMetrics[] = [];

  /**
   * @generated from field: wg.cosmo.platform.v1.FederatedGraphMetrics federatedGraphMetrics = 5;
   */
  federatedGraphMetrics?: FederatedGraphMetrics;

  constructor(data?: PartialMessage<GetDashboardAnalyticsViewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDashboardAnalyticsViewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "requestSeries", kind: "message", T: RequestSeriesItem, repeated: true },
    { no: 3, name: "mostRequestedOperations", kind: "message", T: OperationRequestCount, repeated: true },
    { no: 4, name: "subgraphMetrics", kind: "message", T: SubgraphMetrics, repeated: true },
    { no: 5, name: "federatedGraphMetrics", kind: "message", T: FederatedGraphMetrics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDashboardAnalyticsViewResponse {
    return new GetDashboardAnalyticsViewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDashboardAnalyticsViewResponse {
    return new GetDashboardAnalyticsViewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDashboardAnalyticsViewResponse {
    return new GetDashboardAnalyticsViewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDashboardAnalyticsViewResponse | PlainMessage<GetDashboardAnalyticsViewResponse> | undefined, b: GetDashboardAnalyticsViewResponse | PlainMessage<GetDashboardAnalyticsViewResponse> | undefined): boolean {
    return proto3.util.equals(GetDashboardAnalyticsViewResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateFederatedGraphTokenRequest
 */
export class CreateFederatedGraphTokenRequest extends Message<CreateFederatedGraphTokenRequest> {
  /**
   * @generated from field: string graphName = 1;
   */
  graphName = "";

  /**
   * @generated from field: string tokenName = 2;
   */
  tokenName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<CreateFederatedGraphTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateFederatedGraphTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tokenName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFederatedGraphTokenRequest {
    return new CreateFederatedGraphTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFederatedGraphTokenRequest {
    return new CreateFederatedGraphTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFederatedGraphTokenRequest {
    return new CreateFederatedGraphTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFederatedGraphTokenRequest | PlainMessage<CreateFederatedGraphTokenRequest> | undefined, b: CreateFederatedGraphTokenRequest | PlainMessage<CreateFederatedGraphTokenRequest> | undefined): boolean {
    return proto3.util.equals(CreateFederatedGraphTokenRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateFederatedGraphTokenResponse
 */
export class CreateFederatedGraphTokenResponse extends Message<CreateFederatedGraphTokenResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<CreateFederatedGraphTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateFederatedGraphTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFederatedGraphTokenResponse {
    return new CreateFederatedGraphTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFederatedGraphTokenResponse {
    return new CreateFederatedGraphTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFederatedGraphTokenResponse {
    return new CreateFederatedGraphTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFederatedGraphTokenResponse | PlainMessage<CreateFederatedGraphTokenResponse> | undefined, b: CreateFederatedGraphTokenResponse | PlainMessage<CreateFederatedGraphTokenResponse> | undefined): boolean {
    return proto3.util.equals(CreateFederatedGraphTokenResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.OrgMember
 */
export class OrgMember extends Message<OrgMember> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: repeated string roles = 3;
   */
  roles: string[] = [];

  /**
   * @generated from field: string orgMemberID = 4;
   */
  orgMemberID = "";

  /**
   * @generated from field: bool active = 5;
   */
  active = false;

  constructor(data?: PartialMessage<OrgMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.OrgMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "orgMemberID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgMember {
    return new OrgMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgMember {
    return new OrgMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgMember {
    return new OrgMember().fromJsonString(jsonString, options);
  }

  static equals(a: OrgMember | PlainMessage<OrgMember> | undefined, b: OrgMember | PlainMessage<OrgMember> | undefined): boolean {
    return proto3.util.equals(OrgMember, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PendingOrgInvitation
 */
export class PendingOrgInvitation extends Message<PendingOrgInvitation> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<PendingOrgInvitation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PendingOrgInvitation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PendingOrgInvitation {
    return new PendingOrgInvitation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PendingOrgInvitation {
    return new PendingOrgInvitation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PendingOrgInvitation {
    return new PendingOrgInvitation().fromJsonString(jsonString, options);
  }

  static equals(a: PendingOrgInvitation | PlainMessage<PendingOrgInvitation> | undefined, b: PendingOrgInvitation | PlainMessage<PendingOrgInvitation> | undefined): boolean {
    return proto3.util.equals(PendingOrgInvitation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationMembersRequest
 */
export class GetOrganizationMembersRequest extends Message<GetOrganizationMembersRequest> {
  constructor(data?: PartialMessage<GetOrganizationMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationMembersRequest {
    return new GetOrganizationMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationMembersRequest {
    return new GetOrganizationMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationMembersRequest {
    return new GetOrganizationMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationMembersRequest | PlainMessage<GetOrganizationMembersRequest> | undefined, b: GetOrganizationMembersRequest | PlainMessage<GetOrganizationMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationMembersRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationMembersResponse
 */
export class GetOrganizationMembersResponse extends Message<GetOrganizationMembersResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.OrgMember members = 2;
   */
  members: OrgMember[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.PendingOrgInvitation pendingInvitations = 3;
   */
  pendingInvitations: PendingOrgInvitation[] = [];

  constructor(data?: PartialMessage<GetOrganizationMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "members", kind: "message", T: OrgMember, repeated: true },
    { no: 3, name: "pendingInvitations", kind: "message", T: PendingOrgInvitation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationMembersResponse {
    return new GetOrganizationMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationMembersResponse {
    return new GetOrganizationMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationMembersResponse {
    return new GetOrganizationMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationMembersResponse | PlainMessage<GetOrganizationMembersResponse> | undefined, b: GetOrganizationMembersResponse | PlainMessage<GetOrganizationMembersResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationMembersResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.InviteUserResponse
 */
export class InviteUserResponse extends Message<InviteUserResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<InviteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.InviteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined, b: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.APIKey
 */
export class APIKey extends Message<APIKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string createdBy = 3;
   */
  createdBy = "";

  /**
   * @generated from field: string createdAt = 4;
   */
  createdAt = "";

  /**
   * @generated from field: string lastUsedAt = 5;
   */
  lastUsedAt = "";

  /**
   * @generated from field: string expiresAt = 6;
   */
  expiresAt = "";

  constructor(data?: PartialMessage<APIKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.APIKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "createdBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lastUsedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "expiresAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): APIKey {
    return new APIKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJsonString(jsonString, options);
  }

  static equals(a: APIKey | PlainMessage<APIKey> | undefined, b: APIKey | PlainMessage<APIKey> | undefined): boolean {
    return proto3.util.equals(APIKey, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAPIKeysRequest
 */
export class GetAPIKeysRequest extends Message<GetAPIKeysRequest> {
  constructor(data?: PartialMessage<GetAPIKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAPIKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAPIKeysRequest {
    return new GetAPIKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAPIKeysRequest {
    return new GetAPIKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAPIKeysRequest {
    return new GetAPIKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAPIKeysRequest | PlainMessage<GetAPIKeysRequest> | undefined, b: GetAPIKeysRequest | PlainMessage<GetAPIKeysRequest> | undefined): boolean {
    return proto3.util.equals(GetAPIKeysRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAPIKeysResponse
 */
export class GetAPIKeysResponse extends Message<GetAPIKeysResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.APIKey apiKeys = 2;
   */
  apiKeys: APIKey[] = [];

  constructor(data?: PartialMessage<GetAPIKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAPIKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "apiKeys", kind: "message", T: APIKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAPIKeysResponse {
    return new GetAPIKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAPIKeysResponse {
    return new GetAPIKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAPIKeysResponse {
    return new GetAPIKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAPIKeysResponse | PlainMessage<GetAPIKeysResponse> | undefined, b: GetAPIKeysResponse | PlainMessage<GetAPIKeysResponse> | undefined): boolean {
    return proto3.util.equals(GetAPIKeysResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateAPIKeyRequest
 */
export class CreateAPIKeyRequest extends Message<CreateAPIKeyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string userID = 2;
   */
  userID = "";

  /**
   * @generated from field: wg.cosmo.platform.v1.ExpiresAt expires = 3;
   */
  expires = ExpiresAt.NEVER;

  /**
   * @generated from field: repeated string federatedGraphTargetIds = 4;
   */
  federatedGraphTargetIds: string[] = [];

  /**
   * @generated from field: repeated string subgraphTargetIds = 5;
   */
  subgraphTargetIds: string[] = [];

  /**
   * @generated from field: repeated string permissions = 6;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<CreateAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires", kind: "enum", T: proto3.getEnumType(ExpiresAt) },
    { no: 4, name: "federatedGraphTargetIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "subgraphTargetIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined, b: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateAPIKeyResponse
 */
export class CreateAPIKeyResponse extends Message<CreateAPIKeyResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string apiKey = 2;
   */
  apiKey = "";

  constructor(data?: PartialMessage<CreateAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "apiKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined, b: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteAPIKeyRequest
 */
export class DeleteAPIKeyRequest extends Message<DeleteAPIKeyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined, b: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteAPIKeyResponse
 */
export class DeleteAPIKeyResponse extends Message<DeleteAPIKeyResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyResponse | PlainMessage<DeleteAPIKeyResponse> | undefined, b: DeleteAPIKeyResponse | PlainMessage<DeleteAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveOrganizationMemberRequest
 */
export class RemoveOrganizationMemberRequest extends Message<RemoveOrganizationMemberRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<RemoveOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberRequest | PlainMessage<RemoveOrganizationMemberRequest> | undefined, b: RemoveOrganizationMemberRequest | PlainMessage<RemoveOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveOrganizationMemberResponse
 */
export class RemoveOrganizationMemberResponse extends Message<RemoveOrganizationMemberResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<RemoveOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberResponse | PlainMessage<RemoveOrganizationMemberResponse> | undefined, b: RemoveOrganizationMemberResponse | PlainMessage<RemoveOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveInvitationRequest
 */
export class RemoveInvitationRequest extends Message<RemoveInvitationRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<RemoveInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveInvitationRequest {
    return new RemoveInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveInvitationRequest {
    return new RemoveInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveInvitationRequest {
    return new RemoveInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveInvitationRequest | PlainMessage<RemoveInvitationRequest> | undefined, b: RemoveInvitationRequest | PlainMessage<RemoveInvitationRequest> | undefined): boolean {
    return proto3.util.equals(RemoveInvitationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveInvitationResponse
 */
export class RemoveInvitationResponse extends Message<RemoveInvitationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<RemoveInvitationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveInvitationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveInvitationResponse {
    return new RemoveInvitationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveInvitationResponse {
    return new RemoveInvitationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveInvitationResponse {
    return new RemoveInvitationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveInvitationResponse | PlainMessage<RemoveInvitationResponse> | undefined, b: RemoveInvitationResponse | PlainMessage<RemoveInvitationResponse> | undefined): boolean {
    return proto3.util.equals(RemoveInvitationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MigrateFromApolloRequest
 */
export class MigrateFromApolloRequest extends Message<MigrateFromApolloRequest> {
  /**
   * @generated from field: string apiKey = 1;
   */
  apiKey = "";

  /**
   * @generated from field: string variantName = 2;
   */
  variantName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<MigrateFromApolloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MigrateFromApolloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variantName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateFromApolloRequest {
    return new MigrateFromApolloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateFromApolloRequest {
    return new MigrateFromApolloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateFromApolloRequest {
    return new MigrateFromApolloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateFromApolloRequest | PlainMessage<MigrateFromApolloRequest> | undefined, b: MigrateFromApolloRequest | PlainMessage<MigrateFromApolloRequest> | undefined): boolean {
    return proto3.util.equals(MigrateFromApolloRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MigrateFromApolloResponse
 */
export class MigrateFromApolloResponse extends Message<MigrateFromApolloResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<MigrateFromApolloResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MigrateFromApolloResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateFromApolloResponse {
    return new MigrateFromApolloResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateFromApolloResponse {
    return new MigrateFromApolloResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateFromApolloResponse {
    return new MigrateFromApolloResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateFromApolloResponse | PlainMessage<MigrateFromApolloResponse> | undefined, b: MigrateFromApolloResponse | PlainMessage<MigrateFromApolloResponse> | undefined): boolean {
    return proto3.util.equals(MigrateFromApolloResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Span
 */
export class Span extends Message<Span> {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: string scopeName = 2;
   */
  scopeName = "";

  /**
   * @generated from field: string traceID = 3;
   */
  traceID = "";

  /**
   * @generated from field: string spanID = 4;
   */
  spanID = "";

  /**
   * @generated from field: string parentSpanID = 5;
   */
  parentSpanID = "";

  /**
   * @generated from field: string spanName = 6;
   */
  spanName = "";

  /**
   * @generated from field: string spanKind = 7;
   */
  spanKind = "";

  /**
   * @generated from field: int64 duration = 8;
   */
  duration = protoInt64.zero;

  /**
   * @generated from field: string serviceName = 9;
   */
  serviceName = "";

  /**
   * @generated from field: string statusCode = 10;
   */
  statusCode = "";

  /**
   * @generated from field: string statusMessage = 11;
   */
  statusMessage = "";

  /**
   * @generated from field: map<string, string> attributes = 12;
   */
  attributes: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Span>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Span";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "scopeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "traceID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "spanID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "parentSpanID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "spanName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "spanKind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "serviceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "statusCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "statusMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Span {
    return new Span().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Span {
    return new Span().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Span {
    return new Span().fromJsonString(jsonString, options);
  }

  static equals(a: Span | PlainMessage<Span> | undefined, b: Span | PlainMessage<Span> | undefined): boolean {
    return proto3.util.equals(Span, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetTraceRequest
 */
export class GetTraceRequest extends Message<GetTraceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTraceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetTraceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTraceRequest {
    return new GetTraceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTraceRequest {
    return new GetTraceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTraceRequest {
    return new GetTraceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTraceRequest | PlainMessage<GetTraceRequest> | undefined, b: GetTraceRequest | PlainMessage<GetTraceRequest> | undefined): boolean {
    return proto3.util.equals(GetTraceRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetTraceResponse
 */
export class GetTraceResponse extends Message<GetTraceResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Span spans = 2;
   */
  spans: Span[] = [];

  constructor(data?: PartialMessage<GetTraceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetTraceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "spans", kind: "message", T: Span, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTraceResponse {
    return new GetTraceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTraceResponse {
    return new GetTraceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTraceResponse {
    return new GetTraceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTraceResponse | PlainMessage<GetTraceResponse> | undefined, b: GetTraceResponse | PlainMessage<GetTraceResponse> | undefined): boolean {
    return proto3.util.equals(GetTraceResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.WhoAmIRequest
 */
export class WhoAmIRequest extends Message<WhoAmIRequest> {
  constructor(data?: PartialMessage<WhoAmIRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.WhoAmIRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhoAmIRequest {
    return new WhoAmIRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhoAmIRequest {
    return new WhoAmIRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhoAmIRequest {
    return new WhoAmIRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WhoAmIRequest | PlainMessage<WhoAmIRequest> | undefined, b: WhoAmIRequest | PlainMessage<WhoAmIRequest> | undefined): boolean {
    return proto3.util.equals(WhoAmIRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.WhoAmIResponse
 */
export class WhoAmIResponse extends Message<WhoAmIResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string organizationName = 2;
   */
  organizationName = "";

  /**
   * @generated from field: optional string userEmail = 3;
   */
  userEmail?: string;

  constructor(data?: PartialMessage<WhoAmIResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.WhoAmIResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "organizationName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "userEmail", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhoAmIResponse {
    return new WhoAmIResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhoAmIResponse {
    return new WhoAmIResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhoAmIResponse {
    return new WhoAmIResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WhoAmIResponse | PlainMessage<WhoAmIResponse> | undefined, b: WhoAmIResponse | PlainMessage<WhoAmIResponse> | undefined): boolean {
    return proto3.util.equals(WhoAmIResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RouterToken
 */
export class RouterToken extends Message<RouterToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string createdAt = 3;
   */
  createdAt = "";

  /**
   * @generated from field: string lastUsedAt = 4;
   */
  lastUsedAt = "";

  /**
   * @generated from field: string creatorEmail = 5;
   */
  creatorEmail = "";

  constructor(data?: PartialMessage<RouterToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RouterToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastUsedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "creatorEmail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouterToken {
    return new RouterToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouterToken {
    return new RouterToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouterToken {
    return new RouterToken().fromJsonString(jsonString, options);
  }

  static equals(a: RouterToken | PlainMessage<RouterToken> | undefined, b: RouterToken | PlainMessage<RouterToken> | undefined): boolean {
    return proto3.util.equals(RouterToken, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GenerateRouterTokenRequest
 */
export class GenerateRouterTokenRequest extends Message<GenerateRouterTokenRequest> {
  /**
   * @generated from field: string fedGraphName = 1;
   */
  fedGraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GenerateRouterTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GenerateRouterTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRouterTokenRequest {
    return new GenerateRouterTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRouterTokenRequest {
    return new GenerateRouterTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRouterTokenRequest {
    return new GenerateRouterTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRouterTokenRequest | PlainMessage<GenerateRouterTokenRequest> | undefined, b: GenerateRouterTokenRequest | PlainMessage<GenerateRouterTokenRequest> | undefined): boolean {
    return proto3.util.equals(GenerateRouterTokenRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GenerateRouterTokenResponse
 */
export class GenerateRouterTokenResponse extends Message<GenerateRouterTokenResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<GenerateRouterTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GenerateRouterTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRouterTokenResponse {
    return new GenerateRouterTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRouterTokenResponse {
    return new GenerateRouterTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRouterTokenResponse {
    return new GenerateRouterTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRouterTokenResponse | PlainMessage<GenerateRouterTokenResponse> | undefined, b: GenerateRouterTokenResponse | PlainMessage<GenerateRouterTokenResponse> | undefined): boolean {
    return proto3.util.equals(GenerateRouterTokenResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetRouterTokensRequest
 */
export class GetRouterTokensRequest extends Message<GetRouterTokensRequest> {
  /**
   * @generated from field: string fedGraphName = 1;
   */
  fedGraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetRouterTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetRouterTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRouterTokensRequest {
    return new GetRouterTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRouterTokensRequest {
    return new GetRouterTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRouterTokensRequest {
    return new GetRouterTokensRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRouterTokensRequest | PlainMessage<GetRouterTokensRequest> | undefined, b: GetRouterTokensRequest | PlainMessage<GetRouterTokensRequest> | undefined): boolean {
    return proto3.util.equals(GetRouterTokensRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetRouterTokensResponse
 */
export class GetRouterTokensResponse extends Message<GetRouterTokensResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.RouterToken tokens = 2;
   */
  tokens: RouterToken[] = [];

  constructor(data?: PartialMessage<GetRouterTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetRouterTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "tokens", kind: "message", T: RouterToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRouterTokensResponse {
    return new GetRouterTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRouterTokensResponse {
    return new GetRouterTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRouterTokensResponse {
    return new GetRouterTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRouterTokensResponse | PlainMessage<GetRouterTokensResponse> | undefined, b: GetRouterTokensResponse | PlainMessage<GetRouterTokensResponse> | undefined): boolean {
    return proto3.util.equals(GetRouterTokensResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteRouterTokenRequest
 */
export class DeleteRouterTokenRequest extends Message<DeleteRouterTokenRequest> {
  /**
   * @generated from field: string tokenName = 1;
   */
  tokenName = "";

  /**
   * @generated from field: string fedGraphName = 2;
   */
  fedGraphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<DeleteRouterTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteRouterTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokenName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRouterTokenRequest {
    return new DeleteRouterTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRouterTokenRequest {
    return new DeleteRouterTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRouterTokenRequest {
    return new DeleteRouterTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRouterTokenRequest | PlainMessage<DeleteRouterTokenRequest> | undefined, b: DeleteRouterTokenRequest | PlainMessage<DeleteRouterTokenRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRouterTokenRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteRouterTokenResponse
 */
export class DeleteRouterTokenResponse extends Message<DeleteRouterTokenResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteRouterTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteRouterTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRouterTokenResponse {
    return new DeleteRouterTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRouterTokenResponse {
    return new DeleteRouterTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRouterTokenResponse {
    return new DeleteRouterTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRouterTokenResponse | PlainMessage<DeleteRouterTokenResponse> | undefined, b: DeleteRouterTokenResponse | PlainMessage<DeleteRouterTokenResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRouterTokenResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PersistedOperation
 */
export class PersistedOperation extends Message<PersistedOperation> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  constructor(data?: PartialMessage<PersistedOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PersistedOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PersistedOperation {
    return new PersistedOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PersistedOperation {
    return new PersistedOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PersistedOperation {
    return new PersistedOperation().fromJsonString(jsonString, options);
  }

  static equals(a: PersistedOperation | PlainMessage<PersistedOperation> | undefined, b: PersistedOperation | PlainMessage<PersistedOperation> | undefined): boolean {
    return proto3.util.equals(PersistedOperation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishPersistedOperationsRequest
 */
export class PublishPersistedOperationsRequest extends Message<PublishPersistedOperationsRequest> {
  /**
   * @generated from field: string fedGraphName = 1;
   */
  fedGraphName = "";

  /**
   * @generated from field: string clientName = 2;
   */
  clientName = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.PersistedOperation operations = 3;
   */
  operations: PersistedOperation[] = [];

  /**
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  constructor(data?: PartialMessage<PublishPersistedOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishPersistedOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clientName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operations", kind: "message", T: PersistedOperation, repeated: true },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishPersistedOperationsRequest {
    return new PublishPersistedOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishPersistedOperationsRequest {
    return new PublishPersistedOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishPersistedOperationsRequest {
    return new PublishPersistedOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishPersistedOperationsRequest | PlainMessage<PublishPersistedOperationsRequest> | undefined, b: PublishPersistedOperationsRequest | PlainMessage<PublishPersistedOperationsRequest> | undefined): boolean {
    return proto3.util.equals(PublishPersistedOperationsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishedOperation
 */
export class PublishedOperation extends Message<PublishedOperation> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * @generated from field: wg.cosmo.platform.v1.PublishedOperationStatus status = 3;
   */
  status = PublishedOperationStatus.UP_TO_DATE;

  /**
   * @generated from field: repeated string operationNames = 4;
   */
  operationNames: string[] = [];

  constructor(data?: PartialMessage<PublishedOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishedOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(PublishedOperationStatus) },
    { no: 4, name: "operationNames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishedOperation {
    return new PublishedOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishedOperation {
    return new PublishedOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishedOperation {
    return new PublishedOperation().fromJsonString(jsonString, options);
  }

  static equals(a: PublishedOperation | PlainMessage<PublishedOperation> | undefined, b: PublishedOperation | PlainMessage<PublishedOperation> | undefined): boolean {
    return proto3.util.equals(PublishedOperation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.PublishPersistedOperationsResponse
 */
export class PublishPersistedOperationsResponse extends Message<PublishPersistedOperationsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.PublishedOperation operations = 2;
   */
  operations: PublishedOperation[] = [];

  constructor(data?: PartialMessage<PublishPersistedOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.PublishPersistedOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "operations", kind: "message", T: PublishedOperation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishPersistedOperationsResponse {
    return new PublishPersistedOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishPersistedOperationsResponse {
    return new PublishPersistedOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishPersistedOperationsResponse {
    return new PublishPersistedOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishPersistedOperationsResponse | PlainMessage<PublishPersistedOperationsResponse> | undefined, b: PublishPersistedOperationsResponse | PlainMessage<PublishPersistedOperationsResponse> | undefined): boolean {
    return proto3.util.equals(PublishPersistedOperationsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetPersistedOperationsRequest
 */
export class GetPersistedOperationsRequest extends Message<GetPersistedOperationsRequest> {
  /**
   * @generated from field: string federated_graph_name = 1;
   */
  federatedGraphName = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetPersistedOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetPersistedOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "federated_graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPersistedOperationsRequest {
    return new GetPersistedOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPersistedOperationsRequest {
    return new GetPersistedOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPersistedOperationsRequest {
    return new GetPersistedOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPersistedOperationsRequest | PlainMessage<GetPersistedOperationsRequest> | undefined, b: GetPersistedOperationsRequest | PlainMessage<GetPersistedOperationsRequest> | undefined): boolean {
    return proto3.util.equals(GetPersistedOperationsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetPersistedOperationsResponse
 */
export class GetPersistedOperationsResponse extends Message<GetPersistedOperationsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetPersistedOperationsResponse.Operation operations = 2;
   */
  operations: GetPersistedOperationsResponse_Operation[] = [];

  constructor(data?: PartialMessage<GetPersistedOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetPersistedOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "operations", kind: "message", T: GetPersistedOperationsResponse_Operation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPersistedOperationsResponse {
    return new GetPersistedOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPersistedOperationsResponse {
    return new GetPersistedOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPersistedOperationsResponse {
    return new GetPersistedOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPersistedOperationsResponse | PlainMessage<GetPersistedOperationsResponse> | undefined, b: GetPersistedOperationsResponse | PlainMessage<GetPersistedOperationsResponse> | undefined): boolean {
    return proto3.util.equals(GetPersistedOperationsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetPersistedOperationsResponse.Operation
 */
export class GetPersistedOperationsResponse_Operation extends Message<GetPersistedOperationsResponse_Operation> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  /**
   * @generated from field: string created_at = 3;
   */
  createdAt = "";

  /**
   * @generated from field: string last_updated_at = 4;
   */
  lastUpdatedAt = "";

  /**
   * @generated from field: repeated string operation_names = 5;
   */
  operationNames: string[] = [];

  constructor(data?: PartialMessage<GetPersistedOperationsResponse_Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetPersistedOperationsResponse.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "operation_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPersistedOperationsResponse_Operation {
    return new GetPersistedOperationsResponse_Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPersistedOperationsResponse_Operation {
    return new GetPersistedOperationsResponse_Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPersistedOperationsResponse_Operation {
    return new GetPersistedOperationsResponse_Operation().fromJsonString(jsonString, options);
  }

  static equals(a: GetPersistedOperationsResponse_Operation | PlainMessage<GetPersistedOperationsResponse_Operation> | undefined, b: GetPersistedOperationsResponse_Operation | PlainMessage<GetPersistedOperationsResponse_Operation> | undefined): boolean {
    return proto3.util.equals(GetPersistedOperationsResponse_Operation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Header
 */
export class Header extends Message<Header> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Header>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Header";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Header {
    return new Header().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Header {
    return new Header().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Header {
    return new Header().fromJsonString(jsonString, options);
  }

  static equals(a: Header | PlainMessage<Header> | undefined, b: Header | PlainMessage<Header> | undefined): boolean {
    return proto3.util.equals(Header, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOrganizationWebhookConfigRequest
 */
export class CreateOrganizationWebhookConfigRequest extends Message<CreateOrganizationWebhookConfigRequest> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: repeated string events = 3;
   */
  events: string[] = [];

  /**
   * @generated from field: repeated wg.cosmo.notifications.EventMeta events_meta = 4;
   */
  eventsMeta: EventMeta[] = [];

  constructor(data?: PartialMessage<CreateOrganizationWebhookConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOrganizationWebhookConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "events_meta", kind: "message", T: EventMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationWebhookConfigRequest {
    return new CreateOrganizationWebhookConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationWebhookConfigRequest {
    return new CreateOrganizationWebhookConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationWebhookConfigRequest {
    return new CreateOrganizationWebhookConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationWebhookConfigRequest | PlainMessage<CreateOrganizationWebhookConfigRequest> | undefined, b: CreateOrganizationWebhookConfigRequest | PlainMessage<CreateOrganizationWebhookConfigRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationWebhookConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOrganizationWebhookConfigResponse
 */
export class CreateOrganizationWebhookConfigResponse extends Message<CreateOrganizationWebhookConfigResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateOrganizationWebhookConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOrganizationWebhookConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationWebhookConfigResponse {
    return new CreateOrganizationWebhookConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationWebhookConfigResponse {
    return new CreateOrganizationWebhookConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationWebhookConfigResponse {
    return new CreateOrganizationWebhookConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationWebhookConfigResponse | PlainMessage<CreateOrganizationWebhookConfigResponse> | undefined, b: CreateOrganizationWebhookConfigResponse | PlainMessage<CreateOrganizationWebhookConfigResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationWebhookConfigResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationWebhookConfigsRequest
 */
export class GetOrganizationWebhookConfigsRequest extends Message<GetOrganizationWebhookConfigsRequest> {
  constructor(data?: PartialMessage<GetOrganizationWebhookConfigsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationWebhookConfigsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationWebhookConfigsRequest {
    return new GetOrganizationWebhookConfigsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationWebhookConfigsRequest {
    return new GetOrganizationWebhookConfigsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationWebhookConfigsRequest {
    return new GetOrganizationWebhookConfigsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationWebhookConfigsRequest | PlainMessage<GetOrganizationWebhookConfigsRequest> | undefined, b: GetOrganizationWebhookConfigsRequest | PlainMessage<GetOrganizationWebhookConfigsRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationWebhookConfigsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationWebhookConfigsResponse
 */
export class GetOrganizationWebhookConfigsResponse extends Message<GetOrganizationWebhookConfigsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetOrganizationWebhookConfigsResponse.Config configs = 2;
   */
  configs: GetOrganizationWebhookConfigsResponse_Config[] = [];

  constructor(data?: PartialMessage<GetOrganizationWebhookConfigsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationWebhookConfigsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "configs", kind: "message", T: GetOrganizationWebhookConfigsResponse_Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationWebhookConfigsResponse {
    return new GetOrganizationWebhookConfigsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationWebhookConfigsResponse {
    return new GetOrganizationWebhookConfigsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationWebhookConfigsResponse {
    return new GetOrganizationWebhookConfigsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationWebhookConfigsResponse | PlainMessage<GetOrganizationWebhookConfigsResponse> | undefined, b: GetOrganizationWebhookConfigsResponse | PlainMessage<GetOrganizationWebhookConfigsResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationWebhookConfigsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationWebhookConfigsResponse.Config
 */
export class GetOrganizationWebhookConfigsResponse_Config extends Message<GetOrganizationWebhookConfigsResponse_Config> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: repeated string events = 3;
   */
  events: string[] = [];

  constructor(data?: PartialMessage<GetOrganizationWebhookConfigsResponse_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationWebhookConfigsResponse.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationWebhookConfigsResponse_Config {
    return new GetOrganizationWebhookConfigsResponse_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationWebhookConfigsResponse_Config {
    return new GetOrganizationWebhookConfigsResponse_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationWebhookConfigsResponse_Config {
    return new GetOrganizationWebhookConfigsResponse_Config().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationWebhookConfigsResponse_Config | PlainMessage<GetOrganizationWebhookConfigsResponse_Config> | undefined, b: GetOrganizationWebhookConfigsResponse_Config | PlainMessage<GetOrganizationWebhookConfigsResponse_Config> | undefined): boolean {
    return proto3.util.equals(GetOrganizationWebhookConfigsResponse_Config, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationWebhookMetaRequest
 */
export class GetOrganizationWebhookMetaRequest extends Message<GetOrganizationWebhookMetaRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrganizationWebhookMetaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationWebhookMetaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationWebhookMetaRequest {
    return new GetOrganizationWebhookMetaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationWebhookMetaRequest {
    return new GetOrganizationWebhookMetaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationWebhookMetaRequest {
    return new GetOrganizationWebhookMetaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationWebhookMetaRequest | PlainMessage<GetOrganizationWebhookMetaRequest> | undefined, b: GetOrganizationWebhookMetaRequest | PlainMessage<GetOrganizationWebhookMetaRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationWebhookMetaRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationWebhookMetaResponse
 */
export class GetOrganizationWebhookMetaResponse extends Message<GetOrganizationWebhookMetaResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.notifications.EventMeta events_meta = 2;
   */
  eventsMeta: EventMeta[] = [];

  constructor(data?: PartialMessage<GetOrganizationWebhookMetaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationWebhookMetaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "events_meta", kind: "message", T: EventMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationWebhookMetaResponse {
    return new GetOrganizationWebhookMetaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationWebhookMetaResponse {
    return new GetOrganizationWebhookMetaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationWebhookMetaResponse {
    return new GetOrganizationWebhookMetaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationWebhookMetaResponse | PlainMessage<GetOrganizationWebhookMetaResponse> | undefined, b: GetOrganizationWebhookMetaResponse | PlainMessage<GetOrganizationWebhookMetaResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationWebhookMetaResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateOrganizationWebhookConfigRequest
 */
export class UpdateOrganizationWebhookConfigRequest extends Message<UpdateOrganizationWebhookConfigRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: repeated string events = 4;
   */
  events: string[] = [];

  /**
   * @generated from field: repeated wg.cosmo.notifications.EventMeta events_meta = 5;
   */
  eventsMeta: EventMeta[] = [];

  /**
   * @generated from field: bool should_update_key = 6;
   */
  shouldUpdateKey = false;

  constructor(data?: PartialMessage<UpdateOrganizationWebhookConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateOrganizationWebhookConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "events_meta", kind: "message", T: EventMeta, repeated: true },
    { no: 6, name: "should_update_key", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationWebhookConfigRequest {
    return new UpdateOrganizationWebhookConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationWebhookConfigRequest {
    return new UpdateOrganizationWebhookConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationWebhookConfigRequest {
    return new UpdateOrganizationWebhookConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationWebhookConfigRequest | PlainMessage<UpdateOrganizationWebhookConfigRequest> | undefined, b: UpdateOrganizationWebhookConfigRequest | PlainMessage<UpdateOrganizationWebhookConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationWebhookConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateOrganizationWebhookConfigResponse
 */
export class UpdateOrganizationWebhookConfigResponse extends Message<UpdateOrganizationWebhookConfigResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateOrganizationWebhookConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateOrganizationWebhookConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationWebhookConfigResponse {
    return new UpdateOrganizationWebhookConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationWebhookConfigResponse {
    return new UpdateOrganizationWebhookConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationWebhookConfigResponse {
    return new UpdateOrganizationWebhookConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationWebhookConfigResponse | PlainMessage<UpdateOrganizationWebhookConfigResponse> | undefined, b: UpdateOrganizationWebhookConfigResponse | PlainMessage<UpdateOrganizationWebhookConfigResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationWebhookConfigResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteOrganizationWebhookConfigRequest
 */
export class DeleteOrganizationWebhookConfigRequest extends Message<DeleteOrganizationWebhookConfigRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteOrganizationWebhookConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteOrganizationWebhookConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationWebhookConfigRequest {
    return new DeleteOrganizationWebhookConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationWebhookConfigRequest {
    return new DeleteOrganizationWebhookConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationWebhookConfigRequest {
    return new DeleteOrganizationWebhookConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationWebhookConfigRequest | PlainMessage<DeleteOrganizationWebhookConfigRequest> | undefined, b: DeleteOrganizationWebhookConfigRequest | PlainMessage<DeleteOrganizationWebhookConfigRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationWebhookConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteOrganizationWebhookConfigResponse
 */
export class DeleteOrganizationWebhookConfigResponse extends Message<DeleteOrganizationWebhookConfigResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteOrganizationWebhookConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteOrganizationWebhookConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationWebhookConfigResponse {
    return new DeleteOrganizationWebhookConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationWebhookConfigResponse {
    return new DeleteOrganizationWebhookConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationWebhookConfigResponse {
    return new DeleteOrganizationWebhookConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationWebhookConfigResponse | PlainMessage<DeleteOrganizationWebhookConfigResponse> | undefined, b: DeleteOrganizationWebhookConfigResponse | PlainMessage<DeleteOrganizationWebhookConfigResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationWebhookConfigResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateIntegrationRequest
 */
export class CreateIntegrationRequest extends Message<CreateIntegrationRequest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: repeated string events = 4;
   */
  events: string[] = [];

  /**
   * @generated from field: repeated wg.cosmo.notifications.EventMeta eventsMeta = 5;
   */
  eventsMeta: EventMeta[] = [];

  constructor(data?: PartialMessage<CreateIntegrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateIntegrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "eventsMeta", kind: "message", T: EventMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIntegrationRequest {
    return new CreateIntegrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIntegrationRequest {
    return new CreateIntegrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIntegrationRequest {
    return new CreateIntegrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIntegrationRequest | PlainMessage<CreateIntegrationRequest> | undefined, b: CreateIntegrationRequest | PlainMessage<CreateIntegrationRequest> | undefined): boolean {
    return proto3.util.equals(CreateIntegrationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateIntegrationResponse
 */
export class CreateIntegrationResponse extends Message<CreateIntegrationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateIntegrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateIntegrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIntegrationResponse {
    return new CreateIntegrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIntegrationResponse {
    return new CreateIntegrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIntegrationResponse {
    return new CreateIntegrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIntegrationResponse | PlainMessage<CreateIntegrationResponse> | undefined, b: CreateIntegrationResponse | PlainMessage<CreateIntegrationResponse> | undefined): boolean {
    return proto3.util.equals(CreateIntegrationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationIntegrationsRequest
 */
export class GetOrganizationIntegrationsRequest extends Message<GetOrganizationIntegrationsRequest> {
  constructor(data?: PartialMessage<GetOrganizationIntegrationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationIntegrationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationIntegrationsRequest {
    return new GetOrganizationIntegrationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationIntegrationsRequest {
    return new GetOrganizationIntegrationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationIntegrationsRequest {
    return new GetOrganizationIntegrationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationIntegrationsRequest | PlainMessage<GetOrganizationIntegrationsRequest> | undefined, b: GetOrganizationIntegrationsRequest | PlainMessage<GetOrganizationIntegrationsRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationIntegrationsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SlackIntegrationConfig
 */
export class SlackIntegrationConfig extends Message<SlackIntegrationConfig> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  constructor(data?: PartialMessage<SlackIntegrationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SlackIntegrationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SlackIntegrationConfig {
    return new SlackIntegrationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SlackIntegrationConfig {
    return new SlackIntegrationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SlackIntegrationConfig {
    return new SlackIntegrationConfig().fromJsonString(jsonString, options);
  }

  static equals(a: SlackIntegrationConfig | PlainMessage<SlackIntegrationConfig> | undefined, b: SlackIntegrationConfig | PlainMessage<SlackIntegrationConfig> | undefined): boolean {
    return proto3.util.equals(SlackIntegrationConfig, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.IntegrationConfig
 */
export class IntegrationConfig extends Message<IntegrationConfig> {
  /**
   * @generated from field: wg.cosmo.platform.v1.IntegrationType type = 1;
   */
  type = IntegrationType.SLACK;

  /**
   * @generated from oneof wg.cosmo.platform.v1.IntegrationConfig.config
   */
  config: {
    /**
     * @generated from field: wg.cosmo.platform.v1.SlackIntegrationConfig slackIntegrationConfig = 2;
     */
    value: SlackIntegrationConfig;
    case: "slackIntegrationConfig";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<IntegrationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.IntegrationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(IntegrationType) },
    { no: 2, name: "slackIntegrationConfig", kind: "message", T: SlackIntegrationConfig, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntegrationConfig {
    return new IntegrationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntegrationConfig {
    return new IntegrationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntegrationConfig {
    return new IntegrationConfig().fromJsonString(jsonString, options);
  }

  static equals(a: IntegrationConfig | PlainMessage<IntegrationConfig> | undefined, b: IntegrationConfig | PlainMessage<IntegrationConfig> | undefined): boolean {
    return proto3.util.equals(IntegrationConfig, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Integration
 */
export class Integration extends Message<Integration> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: repeated string events = 4;
   */
  events: string[] = [];

  /**
   * @generated from field: wg.cosmo.platform.v1.IntegrationConfig integrationConfig = 5;
   */
  integrationConfig?: IntegrationConfig;

  /**
   * @generated from field: repeated wg.cosmo.notifications.EventMeta eventsMeta = 6;
   */
  eventsMeta: EventMeta[] = [];

  constructor(data?: PartialMessage<Integration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Integration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "integrationConfig", kind: "message", T: IntegrationConfig },
    { no: 6, name: "eventsMeta", kind: "message", T: EventMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Integration {
    return new Integration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Integration {
    return new Integration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Integration {
    return new Integration().fromJsonString(jsonString, options);
  }

  static equals(a: Integration | PlainMessage<Integration> | undefined, b: Integration | PlainMessage<Integration> | undefined): boolean {
    return proto3.util.equals(Integration, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationIntegrationsResponse
 */
export class GetOrganizationIntegrationsResponse extends Message<GetOrganizationIntegrationsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Integration integrations = 2;
   */
  integrations: Integration[] = [];

  constructor(data?: PartialMessage<GetOrganizationIntegrationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationIntegrationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "integrations", kind: "message", T: Integration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationIntegrationsResponse {
    return new GetOrganizationIntegrationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationIntegrationsResponse {
    return new GetOrganizationIntegrationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationIntegrationsResponse {
    return new GetOrganizationIntegrationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationIntegrationsResponse | PlainMessage<GetOrganizationIntegrationsResponse> | undefined, b: GetOrganizationIntegrationsResponse | PlainMessage<GetOrganizationIntegrationsResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationIntegrationsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateIntegrationConfigRequest
 */
export class UpdateIntegrationConfigRequest extends Message<UpdateIntegrationConfigRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: repeated string events = 3;
   */
  events: string[] = [];

  /**
   * @generated from field: repeated wg.cosmo.notifications.EventMeta events_meta = 4;
   */
  eventsMeta: EventMeta[] = [];

  constructor(data?: PartialMessage<UpdateIntegrationConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateIntegrationConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "events_meta", kind: "message", T: EventMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIntegrationConfigRequest {
    return new UpdateIntegrationConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIntegrationConfigRequest {
    return new UpdateIntegrationConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIntegrationConfigRequest {
    return new UpdateIntegrationConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIntegrationConfigRequest | PlainMessage<UpdateIntegrationConfigRequest> | undefined, b: UpdateIntegrationConfigRequest | PlainMessage<UpdateIntegrationConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIntegrationConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateIntegrationConfigResponse
 */
export class UpdateIntegrationConfigResponse extends Message<UpdateIntegrationConfigResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateIntegrationConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateIntegrationConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIntegrationConfigResponse {
    return new UpdateIntegrationConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIntegrationConfigResponse {
    return new UpdateIntegrationConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIntegrationConfigResponse {
    return new UpdateIntegrationConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIntegrationConfigResponse | PlainMessage<UpdateIntegrationConfigResponse> | undefined, b: UpdateIntegrationConfigResponse | PlainMessage<UpdateIntegrationConfigResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIntegrationConfigResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteIntegrationRequest
 */
export class DeleteIntegrationRequest extends Message<DeleteIntegrationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteIntegrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteIntegrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIntegrationRequest {
    return new DeleteIntegrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIntegrationRequest {
    return new DeleteIntegrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIntegrationRequest {
    return new DeleteIntegrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIntegrationRequest | PlainMessage<DeleteIntegrationRequest> | undefined, b: DeleteIntegrationRequest | PlainMessage<DeleteIntegrationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIntegrationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteIntegrationResponse
 */
export class DeleteIntegrationResponse extends Message<DeleteIntegrationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteIntegrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteIntegrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIntegrationResponse {
    return new DeleteIntegrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIntegrationResponse {
    return new DeleteIntegrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIntegrationResponse {
    return new DeleteIntegrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIntegrationResponse | PlainMessage<DeleteIntegrationResponse> | undefined, b: DeleteIntegrationResponse | PlainMessage<DeleteIntegrationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteIntegrationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteOrganizationRequest
 */
export class DeleteOrganizationRequest extends Message<DeleteOrganizationRequest> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  constructor(data?: PartialMessage<DeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined, b: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteOrganizationResponse
 */
export class DeleteOrganizationResponse extends Message<DeleteOrganizationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined, b: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.LeaveOrganizationRequest
 */
export class LeaveOrganizationRequest extends Message<LeaveOrganizationRequest> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  constructor(data?: PartialMessage<LeaveOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.LeaveOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveOrganizationRequest | PlainMessage<LeaveOrganizationRequest> | undefined, b: LeaveOrganizationRequest | PlainMessage<LeaveOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(LeaveOrganizationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.LeaveOrganizationResponse
 */
export class LeaveOrganizationResponse extends Message<LeaveOrganizationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<LeaveOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.LeaveOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveOrganizationResponse | PlainMessage<LeaveOrganizationResponse> | undefined, b: LeaveOrganizationResponse | PlainMessage<LeaveOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(LeaveOrganizationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateOrganizationDetailsRequest
 */
export class UpdateOrganizationDetailsRequest extends Message<UpdateOrganizationDetailsRequest> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  /**
   * @generated from field: string organizationName = 2;
   */
  organizationName = "";

  /**
   * @generated from field: string organizationSlug = 3;
   */
  organizationSlug = "";

  constructor(data?: PartialMessage<UpdateOrganizationDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateOrganizationDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organizationName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organizationSlug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationDetailsRequest {
    return new UpdateOrganizationDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationDetailsRequest {
    return new UpdateOrganizationDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationDetailsRequest {
    return new UpdateOrganizationDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationDetailsRequest | PlainMessage<UpdateOrganizationDetailsRequest> | undefined, b: UpdateOrganizationDetailsRequest | PlainMessage<UpdateOrganizationDetailsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationDetailsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateOrganizationDetailsResponse
 */
export class UpdateOrganizationDetailsResponse extends Message<UpdateOrganizationDetailsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateOrganizationDetailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateOrganizationDetailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationDetailsResponse {
    return new UpdateOrganizationDetailsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationDetailsResponse {
    return new UpdateOrganizationDetailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationDetailsResponse {
    return new UpdateOrganizationDetailsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationDetailsResponse | PlainMessage<UpdateOrganizationDetailsResponse> | undefined, b: UpdateOrganizationDetailsResponse | PlainMessage<UpdateOrganizationDetailsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationDetailsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateOrgMemberRoleRequest
 */
export class UpdateOrgMemberRoleRequest extends Message<UpdateOrgMemberRoleRequest> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  /**
   * @generated from field: string orgMemberUserID = 2;
   */
  orgMemberUserID = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<UpdateOrgMemberRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateOrgMemberRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orgMemberUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrgMemberRoleRequest {
    return new UpdateOrgMemberRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrgMemberRoleRequest {
    return new UpdateOrgMemberRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrgMemberRoleRequest {
    return new UpdateOrgMemberRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrgMemberRoleRequest | PlainMessage<UpdateOrgMemberRoleRequest> | undefined, b: UpdateOrgMemberRoleRequest | PlainMessage<UpdateOrgMemberRoleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrgMemberRoleRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateOrgMemberRoleResponse
 */
export class UpdateOrgMemberRoleResponse extends Message<UpdateOrgMemberRoleResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateOrgMemberRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateOrgMemberRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrgMemberRoleResponse {
    return new UpdateOrgMemberRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrgMemberRoleResponse {
    return new UpdateOrgMemberRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrgMemberRoleResponse {
    return new UpdateOrgMemberRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrgMemberRoleResponse | PlainMessage<UpdateOrgMemberRoleResponse> | undefined, b: UpdateOrgMemberRoleResponse | PlainMessage<UpdateOrgMemberRoleResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrgMemberRoleResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  /**
   * @generated from field: string plan = 3;
   */
  plan = "";

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: optional wg.cosmo.platform.v1.Organization organization = 2;
   */
  organization?: Organization;

  /**
   * @generated from field: optional string stripeSessionId = 3;
   */
  stripeSessionId?: string;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "organization", kind: "message", T: Organization, opt: true },
    { no: 3, name: "stripeSessionId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string creatorUserId = 4;
   */
  creatorUserId = "";

  /**
   * @generated from field: string createdAt = 5;
   */
  createdAt = "";

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "creatorUserId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * *
 * Billing
 *
 * @generated from message wg.cosmo.platform.v1.GetBillingPlansRequest
 */
export class GetBillingPlansRequest extends Message<GetBillingPlansRequest> {
  constructor(data?: PartialMessage<GetBillingPlansRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetBillingPlansRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingPlansRequest {
    return new GetBillingPlansRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingPlansRequest {
    return new GetBillingPlansRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingPlansRequest {
    return new GetBillingPlansRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingPlansRequest | PlainMessage<GetBillingPlansRequest> | undefined, b: GetBillingPlansRequest | PlainMessage<GetBillingPlansRequest> | undefined): boolean {
    return proto3.util.equals(GetBillingPlansRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetBillingPlansResponse
 */
export class GetBillingPlansResponse extends Message<GetBillingPlansResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetBillingPlansResponse.BillingPlan plans = 2;
   */
  plans: GetBillingPlansResponse_BillingPlan[] = [];

  constructor(data?: PartialMessage<GetBillingPlansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetBillingPlansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "plans", kind: "message", T: GetBillingPlansResponse_BillingPlan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingPlansResponse {
    return new GetBillingPlansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingPlansResponse {
    return new GetBillingPlansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingPlansResponse {
    return new GetBillingPlansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingPlansResponse | PlainMessage<GetBillingPlansResponse> | undefined, b: GetBillingPlansResponse | PlainMessage<GetBillingPlansResponse> | undefined): boolean {
    return proto3.util.equals(GetBillingPlansResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetBillingPlansResponse.BillingPlanFeature
 */
export class GetBillingPlansResponse_BillingPlanFeature extends Message<GetBillingPlansResponse_BillingPlanFeature> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: optional int32 limit = 4;
   */
  limit?: number;

  constructor(data?: PartialMessage<GetBillingPlansResponse_BillingPlanFeature>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetBillingPlansResponse.BillingPlanFeature";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingPlansResponse_BillingPlanFeature {
    return new GetBillingPlansResponse_BillingPlanFeature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingPlansResponse_BillingPlanFeature {
    return new GetBillingPlansResponse_BillingPlanFeature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingPlansResponse_BillingPlanFeature {
    return new GetBillingPlansResponse_BillingPlanFeature().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingPlansResponse_BillingPlanFeature | PlainMessage<GetBillingPlansResponse_BillingPlanFeature> | undefined, b: GetBillingPlansResponse_BillingPlanFeature | PlainMessage<GetBillingPlansResponse_BillingPlanFeature> | undefined): boolean {
    return proto3.util.equals(GetBillingPlansResponse_BillingPlanFeature, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetBillingPlansResponse.BillingPlan
 */
export class GetBillingPlansResponse_BillingPlan extends Message<GetBillingPlansResponse_BillingPlan> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 price = 3;
   */
  price = 0;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetBillingPlansResponse.BillingPlanFeature features = 4;
   */
  features: GetBillingPlansResponse_BillingPlanFeature[] = [];

  constructor(data?: PartialMessage<GetBillingPlansResponse_BillingPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetBillingPlansResponse.BillingPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "features", kind: "message", T: GetBillingPlansResponse_BillingPlanFeature, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingPlansResponse_BillingPlan {
    return new GetBillingPlansResponse_BillingPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingPlansResponse_BillingPlan {
    return new GetBillingPlansResponse_BillingPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingPlansResponse_BillingPlan {
    return new GetBillingPlansResponse_BillingPlan().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingPlansResponse_BillingPlan | PlainMessage<GetBillingPlansResponse_BillingPlan> | undefined, b: GetBillingPlansResponse_BillingPlan | PlainMessage<GetBillingPlansResponse_BillingPlan> | undefined): boolean {
    return proto3.util.equals(GetBillingPlansResponse_BillingPlan, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateCheckoutSessionRequest
 */
export class CreateCheckoutSessionRequest extends Message<CreateCheckoutSessionRequest> {
  /**
   * @generated from field: string plan = 1;
   */
  plan = "";

  constructor(data?: PartialMessage<CreateCheckoutSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateCheckoutSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCheckoutSessionRequest {
    return new CreateCheckoutSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCheckoutSessionRequest {
    return new CreateCheckoutSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCheckoutSessionRequest {
    return new CreateCheckoutSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCheckoutSessionRequest | PlainMessage<CreateCheckoutSessionRequest> | undefined, b: CreateCheckoutSessionRequest | PlainMessage<CreateCheckoutSessionRequest> | undefined): boolean {
    return proto3.util.equals(CreateCheckoutSessionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateCheckoutSessionResponse
 */
export class CreateCheckoutSessionResponse extends Message<CreateCheckoutSessionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string sessionId = 2;
   */
  sessionId = "";

  constructor(data?: PartialMessage<CreateCheckoutSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateCheckoutSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "sessionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCheckoutSessionResponse {
    return new CreateCheckoutSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCheckoutSessionResponse {
    return new CreateCheckoutSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCheckoutSessionResponse {
    return new CreateCheckoutSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCheckoutSessionResponse | PlainMessage<CreateCheckoutSessionResponse> | undefined, b: CreateCheckoutSessionResponse | PlainMessage<CreateCheckoutSessionResponse> | undefined): boolean {
    return proto3.util.equals(CreateCheckoutSessionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateBillingPortalSessionRequest
 */
export class CreateBillingPortalSessionRequest extends Message<CreateBillingPortalSessionRequest> {
  constructor(data?: PartialMessage<CreateBillingPortalSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateBillingPortalSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBillingPortalSessionRequest {
    return new CreateBillingPortalSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBillingPortalSessionRequest {
    return new CreateBillingPortalSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBillingPortalSessionRequest {
    return new CreateBillingPortalSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBillingPortalSessionRequest | PlainMessage<CreateBillingPortalSessionRequest> | undefined, b: CreateBillingPortalSessionRequest | PlainMessage<CreateBillingPortalSessionRequest> | undefined): boolean {
    return proto3.util.equals(CreateBillingPortalSessionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateBillingPortalSessionResponse
 */
export class CreateBillingPortalSessionResponse extends Message<CreateBillingPortalSessionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string sessionId = 2;
   */
  sessionId = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<CreateBillingPortalSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateBillingPortalSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "sessionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBillingPortalSessionResponse {
    return new CreateBillingPortalSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBillingPortalSessionResponse {
    return new CreateBillingPortalSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBillingPortalSessionResponse {
    return new CreateBillingPortalSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBillingPortalSessionResponse | PlainMessage<CreateBillingPortalSessionResponse> | undefined, b: CreateBillingPortalSessionResponse | PlainMessage<CreateBillingPortalSessionResponse> | undefined): boolean {
    return proto3.util.equals(CreateBillingPortalSessionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpgradePlanRequest
 */
export class UpgradePlanRequest extends Message<UpgradePlanRequest> {
  /**
   * @generated from field: string plan = 1;
   */
  plan = "";

  constructor(data?: PartialMessage<UpgradePlanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpgradePlanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradePlanRequest {
    return new UpgradePlanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradePlanRequest {
    return new UpgradePlanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradePlanRequest {
    return new UpgradePlanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradePlanRequest | PlainMessage<UpgradePlanRequest> | undefined, b: UpgradePlanRequest | PlainMessage<UpgradePlanRequest> | undefined): boolean {
    return proto3.util.equals(UpgradePlanRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpgradePlanResponse
 */
export class UpgradePlanResponse extends Message<UpgradePlanResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpgradePlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpgradePlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradePlanResponse {
    return new UpgradePlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradePlanResponse {
    return new UpgradePlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradePlanResponse {
    return new UpgradePlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradePlanResponse | PlainMessage<UpgradePlanResponse> | undefined, b: UpgradePlanResponse | PlainMessage<UpgradePlanResponse> | undefined): boolean {
    return proto3.util.equals(UpgradePlanResponse, a, b);
  }
}

/**
 * *
 * MetricsDashboard
 *
 * @generated from message wg.cosmo.platform.v1.GetGraphMetricsRequest
 */
export class GetGraphMetricsRequest extends Message<GetGraphMetricsRequest> {
  /**
   * @generated from field: string federatedGraphName = 1;
   */
  federatedGraphName = "";

  /**
   * @generated from field: int32 range = 2;
   */
  range = 0;

  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 3;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsFilter filters = 4;
   */
  filters: AnalyticsFilter[] = [];

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetGraphMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetGraphMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "federatedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "dateRange", kind: "message", T: DateRange },
    { no: 4, name: "filters", kind: "message", T: AnalyticsFilter, repeated: true },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphMetricsRequest {
    return new GetGraphMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphMetricsRequest {
    return new GetGraphMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphMetricsRequest {
    return new GetGraphMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphMetricsRequest | PlainMessage<GetGraphMetricsRequest> | undefined, b: GetGraphMetricsRequest | PlainMessage<GetGraphMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetGraphMetricsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetGraphMetricsResponse
 */
export class GetGraphMetricsResponse extends Message<GetGraphMetricsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.MetricsDashboardMetric requests = 2;
   */
  requests?: MetricsDashboardMetric;

  /**
   * @generated from field: wg.cosmo.platform.v1.MetricsDashboardMetric latency = 3;
   */
  latency?: MetricsDashboardMetric;

  /**
   * @generated from field: wg.cosmo.platform.v1.MetricsDashboardMetric errors = 4;
   */
  errors?: MetricsDashboardMetric;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsViewResultFilter filters = 5;
   */
  filters: AnalyticsViewResultFilter[] = [];

  /**
   * @generated from field: optional string resolution = 6;
   */
  resolution?: string;

  constructor(data?: PartialMessage<GetGraphMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetGraphMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "requests", kind: "message", T: MetricsDashboardMetric },
    { no: 3, name: "latency", kind: "message", T: MetricsDashboardMetric },
    { no: 4, name: "errors", kind: "message", T: MetricsDashboardMetric },
    { no: 5, name: "filters", kind: "message", T: AnalyticsViewResultFilter, repeated: true },
    { no: 6, name: "resolution", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphMetricsResponse {
    return new GetGraphMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphMetricsResponse {
    return new GetGraphMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphMetricsResponse {
    return new GetGraphMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphMetricsResponse | PlainMessage<GetGraphMetricsResponse> | undefined, b: GetGraphMetricsResponse | PlainMessage<GetGraphMetricsResponse> | undefined): boolean {
    return proto3.util.equals(GetGraphMetricsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MetricsDashboardMetric
 */
export class MetricsDashboardMetric extends Message<MetricsDashboardMetric> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * @generated from field: optional string previousValue = 2;
   */
  previousValue?: string;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.MetricsTopItem top = 3;
   */
  top: MetricsTopItem[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.MetricsSeriesItem series = 4;
   */
  series: MetricsSeriesItem[] = [];

  constructor(data?: PartialMessage<MetricsDashboardMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MetricsDashboardMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previousValue", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "top", kind: "message", T: MetricsTopItem, repeated: true },
    { no: 4, name: "series", kind: "message", T: MetricsSeriesItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsDashboardMetric {
    return new MetricsDashboardMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsDashboardMetric {
    return new MetricsDashboardMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsDashboardMetric {
    return new MetricsDashboardMetric().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsDashboardMetric | PlainMessage<MetricsDashboardMetric> | undefined, b: MetricsDashboardMetric | PlainMessage<MetricsDashboardMetric> | undefined): boolean {
    return proto3.util.equals(MetricsDashboardMetric, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MetricsTopItem
 */
export class MetricsTopItem extends Message<MetricsTopItem> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: bool isPersisted = 4;
   */
  isPersisted = false;

  constructor(data?: PartialMessage<MetricsTopItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MetricsTopItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "isPersisted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsTopItem {
    return new MetricsTopItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsTopItem {
    return new MetricsTopItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsTopItem {
    return new MetricsTopItem().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsTopItem | PlainMessage<MetricsTopItem> | undefined, b: MetricsTopItem | PlainMessage<MetricsTopItem> | undefined): boolean {
    return proto3.util.equals(MetricsTopItem, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MetricsSeriesItem
 */
export class MetricsSeriesItem extends Message<MetricsSeriesItem> {
  /**
   * @generated from field: string timestamp = 1;
   */
  timestamp = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: optional string previousValue = 3;
   */
  previousValue?: string;

  constructor(data?: PartialMessage<MetricsSeriesItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MetricsSeriesItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previousValue", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsSeriesItem {
    return new MetricsSeriesItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsSeriesItem {
    return new MetricsSeriesItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsSeriesItem {
    return new MetricsSeriesItem().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsSeriesItem | PlainMessage<MetricsSeriesItem> | undefined, b: MetricsSeriesItem | PlainMessage<MetricsSeriesItem> | undefined): boolean {
    return proto3.util.equals(MetricsSeriesItem, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MetricsDashboard
 */
export class MetricsDashboard extends Message<MetricsDashboard> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: optional wg.cosmo.platform.v1.Unit unit = 4;
   */
  unit?: Unit;

  /**
   * @generated from field: optional bool is_hidden = 5;
   */
  isHidden?: boolean;

  /**
   * @generated from field: optional bool is_cta = 6;
   */
  isCta?: boolean;

  constructor(data?: PartialMessage<MetricsDashboard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MetricsDashboard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unit", kind: "enum", T: proto3.getEnumType(Unit), opt: true },
    { no: 5, name: "is_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "is_cta", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsDashboard {
    return new MetricsDashboard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsDashboard {
    return new MetricsDashboard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsDashboard {
    return new MetricsDashboard().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsDashboard | PlainMessage<MetricsDashboard> | undefined, b: MetricsDashboard | PlainMessage<MetricsDashboard> | undefined): boolean {
    return proto3.util.equals(MetricsDashboard, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetMetricsErrorRateRequest
 */
export class GetMetricsErrorRateRequest extends Message<GetMetricsErrorRateRequest> {
  /**
   * @generated from field: string federatedGraphName = 1;
   */
  federatedGraphName = "";

  /**
   * @generated from field: int32 range = 2;
   */
  range = 0;

  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 3;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsFilter filters = 4;
   */
  filters: AnalyticsFilter[] = [];

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetMetricsErrorRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetMetricsErrorRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "federatedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "dateRange", kind: "message", T: DateRange },
    { no: 4, name: "filters", kind: "message", T: AnalyticsFilter, repeated: true },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetricsErrorRateRequest {
    return new GetMetricsErrorRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetricsErrorRateRequest {
    return new GetMetricsErrorRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetricsErrorRateRequest {
    return new GetMetricsErrorRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMetricsErrorRateRequest | PlainMessage<GetMetricsErrorRateRequest> | undefined, b: GetMetricsErrorRateRequest | PlainMessage<GetMetricsErrorRateRequest> | undefined): boolean {
    return proto3.util.equals(GetMetricsErrorRateRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetMetricsErrorRateResponse
 */
export class GetMetricsErrorRateResponse extends Message<GetMetricsErrorRateResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.MetricsErrorRateSeriesItem series = 2;
   */
  series: MetricsErrorRateSeriesItem[] = [];

  /**
   * @generated from field: optional string resolution = 3;
   */
  resolution?: string;

  constructor(data?: PartialMessage<GetMetricsErrorRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetMetricsErrorRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "series", kind: "message", T: MetricsErrorRateSeriesItem, repeated: true },
    { no: 3, name: "resolution", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetricsErrorRateResponse {
    return new GetMetricsErrorRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetricsErrorRateResponse {
    return new GetMetricsErrorRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetricsErrorRateResponse {
    return new GetMetricsErrorRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMetricsErrorRateResponse | PlainMessage<GetMetricsErrorRateResponse> | undefined, b: GetMetricsErrorRateResponse | PlainMessage<GetMetricsErrorRateResponse> | undefined): boolean {
    return proto3.util.equals(GetMetricsErrorRateResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MetricsErrorRateSeriesItem
 */
export class MetricsErrorRateSeriesItem extends Message<MetricsErrorRateSeriesItem> {
  /**
   * @generated from field: string timestamp = 1;
   */
  timestamp = "";

  /**
   * @generated from field: float requestRate = 2;
   */
  requestRate = 0;

  /**
   * @generated from field: float errorRate = 3;
   */
  errorRate = 0;

  constructor(data?: PartialMessage<MetricsErrorRateSeriesItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MetricsErrorRateSeriesItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requestRate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "errorRate", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsErrorRateSeriesItem {
    return new MetricsErrorRateSeriesItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsErrorRateSeriesItem {
    return new MetricsErrorRateSeriesItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsErrorRateSeriesItem {
    return new MetricsErrorRateSeriesItem().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsErrorRateSeriesItem | PlainMessage<MetricsErrorRateSeriesItem> | undefined, b: MetricsErrorRateSeriesItem | PlainMessage<MetricsErrorRateSeriesItem> | undefined): boolean {
    return proto3.util.equals(MetricsErrorRateSeriesItem, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphMetricsRequest
 */
export class GetSubgraphMetricsRequest extends Message<GetSubgraphMetricsRequest> {
  /**
   * @generated from field: string subgraphName = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: int32 range = 4;
   */
  range = 0;

  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 5;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsFilter filters = 6;
   */
  filters: AnalyticsFilter[] = [];

  constructor(data?: PartialMessage<GetSubgraphMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "dateRange", kind: "message", T: DateRange },
    { no: 6, name: "filters", kind: "message", T: AnalyticsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphMetricsRequest {
    return new GetSubgraphMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphMetricsRequest {
    return new GetSubgraphMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphMetricsRequest {
    return new GetSubgraphMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphMetricsRequest | PlainMessage<GetSubgraphMetricsRequest> | undefined, b: GetSubgraphMetricsRequest | PlainMessage<GetSubgraphMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetSubgraphMetricsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphMetricsResponse
 */
export class GetSubgraphMetricsResponse extends Message<GetSubgraphMetricsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.MetricsDashboardMetric requests = 2;
   */
  requests?: MetricsDashboardMetric;

  /**
   * @generated from field: wg.cosmo.platform.v1.MetricsDashboardMetric latency = 3;
   */
  latency?: MetricsDashboardMetric;

  /**
   * @generated from field: wg.cosmo.platform.v1.MetricsDashboardMetric errors = 4;
   */
  errors?: MetricsDashboardMetric;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsViewResultFilter filters = 5;
   */
  filters: AnalyticsViewResultFilter[] = [];

  /**
   * @generated from field: optional string resolution = 6;
   */
  resolution?: string;

  constructor(data?: PartialMessage<GetSubgraphMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "requests", kind: "message", T: MetricsDashboardMetric },
    { no: 3, name: "latency", kind: "message", T: MetricsDashboardMetric },
    { no: 4, name: "errors", kind: "message", T: MetricsDashboardMetric },
    { no: 5, name: "filters", kind: "message", T: AnalyticsViewResultFilter, repeated: true },
    { no: 6, name: "resolution", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphMetricsResponse {
    return new GetSubgraphMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphMetricsResponse {
    return new GetSubgraphMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphMetricsResponse {
    return new GetSubgraphMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphMetricsResponse | PlainMessage<GetSubgraphMetricsResponse> | undefined, b: GetSubgraphMetricsResponse | PlainMessage<GetSubgraphMetricsResponse> | undefined): boolean {
    return proto3.util.equals(GetSubgraphMetricsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphMetricsErrorRateRequest
 */
export class GetSubgraphMetricsErrorRateRequest extends Message<GetSubgraphMetricsErrorRateRequest> {
  /**
   * @generated from field: string subgraphName = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: int32 range = 4;
   */
  range = 0;

  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 5;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AnalyticsFilter filters = 6;
   */
  filters: AnalyticsFilter[] = [];

  constructor(data?: PartialMessage<GetSubgraphMetricsErrorRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphMetricsErrorRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "dateRange", kind: "message", T: DateRange },
    { no: 6, name: "filters", kind: "message", T: AnalyticsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphMetricsErrorRateRequest {
    return new GetSubgraphMetricsErrorRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphMetricsErrorRateRequest {
    return new GetSubgraphMetricsErrorRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphMetricsErrorRateRequest {
    return new GetSubgraphMetricsErrorRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphMetricsErrorRateRequest | PlainMessage<GetSubgraphMetricsErrorRateRequest> | undefined, b: GetSubgraphMetricsErrorRateRequest | PlainMessage<GetSubgraphMetricsErrorRateRequest> | undefined): boolean {
    return proto3.util.equals(GetSubgraphMetricsErrorRateRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphMetricsErrorRateResponse
 */
export class GetSubgraphMetricsErrorRateResponse extends Message<GetSubgraphMetricsErrorRateResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.MetricsErrorRateSeriesItem series = 2;
   */
  series: MetricsErrorRateSeriesItem[] = [];

  /**
   * @generated from field: optional string resolution = 3;
   */
  resolution?: string;

  constructor(data?: PartialMessage<GetSubgraphMetricsErrorRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphMetricsErrorRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "series", kind: "message", T: MetricsErrorRateSeriesItem, repeated: true },
    { no: 3, name: "resolution", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphMetricsErrorRateResponse {
    return new GetSubgraphMetricsErrorRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphMetricsErrorRateResponse {
    return new GetSubgraphMetricsErrorRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphMetricsErrorRateResponse {
    return new GetSubgraphMetricsErrorRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphMetricsErrorRateResponse | PlainMessage<GetSubgraphMetricsErrorRateResponse> | undefined, b: GetSubgraphMetricsErrorRateResponse | PlainMessage<GetSubgraphMetricsErrorRateResponse> | undefined): boolean {
    return proto3.util.equals(GetSubgraphMetricsErrorRateResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ForceCheckSuccessRequest
 */
export class ForceCheckSuccessRequest extends Message<ForceCheckSuccessRequest> {
  /**
   * @generated from field: string check_id = 1;
   */
  checkId = "";

  /**
   * @generated from field: string graph_name = 2;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<ForceCheckSuccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ForceCheckSuccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForceCheckSuccessRequest {
    return new ForceCheckSuccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForceCheckSuccessRequest {
    return new ForceCheckSuccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForceCheckSuccessRequest {
    return new ForceCheckSuccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ForceCheckSuccessRequest | PlainMessage<ForceCheckSuccessRequest> | undefined, b: ForceCheckSuccessRequest | PlainMessage<ForceCheckSuccessRequest> | undefined): boolean {
    return proto3.util.equals(ForceCheckSuccessRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ForceCheckSuccessResponse
 */
export class ForceCheckSuccessResponse extends Message<ForceCheckSuccessResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<ForceCheckSuccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ForceCheckSuccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForceCheckSuccessResponse {
    return new ForceCheckSuccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForceCheckSuccessResponse {
    return new ForceCheckSuccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForceCheckSuccessResponse {
    return new ForceCheckSuccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ForceCheckSuccessResponse | PlainMessage<ForceCheckSuccessResponse> | undefined, b: ForceCheckSuccessResponse | PlainMessage<ForceCheckSuccessResponse> | undefined): boolean {
    return proto3.util.equals(ForceCheckSuccessResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.OverrideChange
 */
export class OverrideChange extends Message<OverrideChange> {
  /**
   * @generated from field: string changeType = 1;
   */
  changeType = "";

  /**
   * @generated from field: optional string path = 2;
   */
  path?: string;

  constructor(data?: PartialMessage<OverrideChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.OverrideChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverrideChange {
    return new OverrideChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverrideChange {
    return new OverrideChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverrideChange {
    return new OverrideChange().fromJsonString(jsonString, options);
  }

  static equals(a: OverrideChange | PlainMessage<OverrideChange> | undefined, b: OverrideChange | PlainMessage<OverrideChange> | undefined): boolean {
    return proto3.util.equals(OverrideChange, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOperationOverridesRequest
 */
export class CreateOperationOverridesRequest extends Message<CreateOperationOverridesRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string operation_hash = 3;
   */
  operationHash = "";

  /**
   * @generated from field: string operation_name = 4;
   */
  operationName = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.OverrideChange changes = 5;
   */
  changes: OverrideChange[] = [];

  constructor(data?: PartialMessage<CreateOperationOverridesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOperationOverridesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "operation_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "changes", kind: "message", T: OverrideChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOperationOverridesRequest {
    return new CreateOperationOverridesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOperationOverridesRequest {
    return new CreateOperationOverridesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOperationOverridesRequest {
    return new CreateOperationOverridesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOperationOverridesRequest | PlainMessage<CreateOperationOverridesRequest> | undefined, b: CreateOperationOverridesRequest | PlainMessage<CreateOperationOverridesRequest> | undefined): boolean {
    return proto3.util.equals(CreateOperationOverridesRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOperationOverridesResponse
 */
export class CreateOperationOverridesResponse extends Message<CreateOperationOverridesResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateOperationOverridesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOperationOverridesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOperationOverridesResponse {
    return new CreateOperationOverridesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOperationOverridesResponse {
    return new CreateOperationOverridesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOperationOverridesResponse {
    return new CreateOperationOverridesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOperationOverridesResponse | PlainMessage<CreateOperationOverridesResponse> | undefined, b: CreateOperationOverridesResponse | PlainMessage<CreateOperationOverridesResponse> | undefined): boolean {
    return proto3.util.equals(CreateOperationOverridesResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOperationIgnoreAllOverrideRequest
 */
export class CreateOperationIgnoreAllOverrideRequest extends Message<CreateOperationIgnoreAllOverrideRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string operation_hash = 3;
   */
  operationHash = "";

  /**
   * @generated from field: string operation_name = 4;
   */
  operationName = "";

  constructor(data?: PartialMessage<CreateOperationIgnoreAllOverrideRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOperationIgnoreAllOverrideRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "operation_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOperationIgnoreAllOverrideRequest {
    return new CreateOperationIgnoreAllOverrideRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOperationIgnoreAllOverrideRequest {
    return new CreateOperationIgnoreAllOverrideRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOperationIgnoreAllOverrideRequest {
    return new CreateOperationIgnoreAllOverrideRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOperationIgnoreAllOverrideRequest | PlainMessage<CreateOperationIgnoreAllOverrideRequest> | undefined, b: CreateOperationIgnoreAllOverrideRequest | PlainMessage<CreateOperationIgnoreAllOverrideRequest> | undefined): boolean {
    return proto3.util.equals(CreateOperationIgnoreAllOverrideRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOperationIgnoreAllOverrideResponse
 */
export class CreateOperationIgnoreAllOverrideResponse extends Message<CreateOperationIgnoreAllOverrideResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateOperationIgnoreAllOverrideResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOperationIgnoreAllOverrideResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOperationIgnoreAllOverrideResponse {
    return new CreateOperationIgnoreAllOverrideResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOperationIgnoreAllOverrideResponse {
    return new CreateOperationIgnoreAllOverrideResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOperationIgnoreAllOverrideResponse {
    return new CreateOperationIgnoreAllOverrideResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOperationIgnoreAllOverrideResponse | PlainMessage<CreateOperationIgnoreAllOverrideResponse> | undefined, b: CreateOperationIgnoreAllOverrideResponse | PlainMessage<CreateOperationIgnoreAllOverrideResponse> | undefined): boolean {
    return proto3.util.equals(CreateOperationIgnoreAllOverrideResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveOperationOverridesRequest
 */
export class RemoveOperationOverridesRequest extends Message<RemoveOperationOverridesRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string operation_hash = 3;
   */
  operationHash = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.OverrideChange changes = 4;
   */
  changes: OverrideChange[] = [];

  constructor(data?: PartialMessage<RemoveOperationOverridesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveOperationOverridesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "changes", kind: "message", T: OverrideChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOperationOverridesRequest {
    return new RemoveOperationOverridesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOperationOverridesRequest {
    return new RemoveOperationOverridesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOperationOverridesRequest {
    return new RemoveOperationOverridesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOperationOverridesRequest | PlainMessage<RemoveOperationOverridesRequest> | undefined, b: RemoveOperationOverridesRequest | PlainMessage<RemoveOperationOverridesRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOperationOverridesRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveOperationOverridesResponse
 */
export class RemoveOperationOverridesResponse extends Message<RemoveOperationOverridesResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<RemoveOperationOverridesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveOperationOverridesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOperationOverridesResponse {
    return new RemoveOperationOverridesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOperationOverridesResponse {
    return new RemoveOperationOverridesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOperationOverridesResponse {
    return new RemoveOperationOverridesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOperationOverridesResponse | PlainMessage<RemoveOperationOverridesResponse> | undefined, b: RemoveOperationOverridesResponse | PlainMessage<RemoveOperationOverridesResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOperationOverridesResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveOperationIgnoreAllOverrideRequest
 */
export class RemoveOperationIgnoreAllOverrideRequest extends Message<RemoveOperationIgnoreAllOverrideRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string operation_hash = 3;
   */
  operationHash = "";

  constructor(data?: PartialMessage<RemoveOperationIgnoreAllOverrideRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveOperationIgnoreAllOverrideRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOperationIgnoreAllOverrideRequest {
    return new RemoveOperationIgnoreAllOverrideRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOperationIgnoreAllOverrideRequest {
    return new RemoveOperationIgnoreAllOverrideRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOperationIgnoreAllOverrideRequest {
    return new RemoveOperationIgnoreAllOverrideRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOperationIgnoreAllOverrideRequest | PlainMessage<RemoveOperationIgnoreAllOverrideRequest> | undefined, b: RemoveOperationIgnoreAllOverrideRequest | PlainMessage<RemoveOperationIgnoreAllOverrideRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOperationIgnoreAllOverrideRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveOperationIgnoreAllOverrideResponse
 */
export class RemoveOperationIgnoreAllOverrideResponse extends Message<RemoveOperationIgnoreAllOverrideResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<RemoveOperationIgnoreAllOverrideResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveOperationIgnoreAllOverrideResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOperationIgnoreAllOverrideResponse {
    return new RemoveOperationIgnoreAllOverrideResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOperationIgnoreAllOverrideResponse {
    return new RemoveOperationIgnoreAllOverrideResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOperationIgnoreAllOverrideResponse {
    return new RemoveOperationIgnoreAllOverrideResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOperationIgnoreAllOverrideResponse | PlainMessage<RemoveOperationIgnoreAllOverrideResponse> | undefined, b: RemoveOperationIgnoreAllOverrideResponse | PlainMessage<RemoveOperationIgnoreAllOverrideResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOperationIgnoreAllOverrideResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOperationOverridesRequest
 */
export class GetOperationOverridesRequest extends Message<GetOperationOverridesRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string operation_hash = 3;
   */
  operationHash = "";

  constructor(data?: PartialMessage<GetOperationOverridesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOperationOverridesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOperationOverridesRequest {
    return new GetOperationOverridesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOperationOverridesRequest {
    return new GetOperationOverridesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOperationOverridesRequest {
    return new GetOperationOverridesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOperationOverridesRequest | PlainMessage<GetOperationOverridesRequest> | undefined, b: GetOperationOverridesRequest | PlainMessage<GetOperationOverridesRequest> | undefined): boolean {
    return proto3.util.equals(GetOperationOverridesRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOperationOverridesResponse
 */
export class GetOperationOverridesResponse extends Message<GetOperationOverridesResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.OverrideChange changes = 2;
   */
  changes: OverrideChange[] = [];

  /**
   * @generated from field: bool ignore_all = 3;
   */
  ignoreAll = false;

  constructor(data?: PartialMessage<GetOperationOverridesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOperationOverridesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "changes", kind: "message", T: OverrideChange, repeated: true },
    { no: 3, name: "ignore_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOperationOverridesResponse {
    return new GetOperationOverridesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOperationOverridesResponse {
    return new GetOperationOverridesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOperationOverridesResponse {
    return new GetOperationOverridesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOperationOverridesResponse | PlainMessage<GetOperationOverridesResponse> | undefined, b: GetOperationOverridesResponse | PlainMessage<GetOperationOverridesResponse> | undefined): boolean {
    return proto3.util.equals(GetOperationOverridesResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAllOverridesRequest
 */
export class GetAllOverridesRequest extends Message<GetAllOverridesRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetAllOverridesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAllOverridesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllOverridesRequest {
    return new GetAllOverridesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllOverridesRequest {
    return new GetAllOverridesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllOverridesRequest {
    return new GetAllOverridesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllOverridesRequest | PlainMessage<GetAllOverridesRequest> | undefined, b: GetAllOverridesRequest | PlainMessage<GetAllOverridesRequest> | undefined): boolean {
    return proto3.util.equals(GetAllOverridesRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAllOverridesResponse
 */
export class GetAllOverridesResponse extends Message<GetAllOverridesResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetAllOverridesResponse.Override overrides = 2;
   */
  overrides: GetAllOverridesResponse_Override[] = [];

  constructor(data?: PartialMessage<GetAllOverridesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAllOverridesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "overrides", kind: "message", T: GetAllOverridesResponse_Override, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllOverridesResponse {
    return new GetAllOverridesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllOverridesResponse {
    return new GetAllOverridesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllOverridesResponse {
    return new GetAllOverridesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllOverridesResponse | PlainMessage<GetAllOverridesResponse> | undefined, b: GetAllOverridesResponse | PlainMessage<GetAllOverridesResponse> | undefined): boolean {
    return proto3.util.equals(GetAllOverridesResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAllOverridesResponse.Override
 */
export class GetAllOverridesResponse_Override extends Message<GetAllOverridesResponse_Override> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 changesOverrideCount = 3;
   */
  changesOverrideCount = 0;

  /**
   * @generated from field: bool hasIgnoreAllOverride = 4;
   */
  hasIgnoreAllOverride = false;

  /**
   * @generated from field: string updated_at = 5;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<GetAllOverridesResponse_Override>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAllOverridesResponse.Override";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "changesOverrideCount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "hasIgnoreAllOverride", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllOverridesResponse_Override {
    return new GetAllOverridesResponse_Override().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllOverridesResponse_Override {
    return new GetAllOverridesResponse_Override().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllOverridesResponse_Override {
    return new GetAllOverridesResponse_Override().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllOverridesResponse_Override | PlainMessage<GetAllOverridesResponse_Override> | undefined, b: GetAllOverridesResponse_Override | PlainMessage<GetAllOverridesResponse_Override> | undefined): boolean {
    return proto3.util.equals(GetAllOverridesResponse_Override, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.IsGitHubAppInstalledRequest
 */
export class IsGitHubAppInstalledRequest extends Message<IsGitHubAppInstalledRequest> {
  /**
   * @generated from field: wg.cosmo.platform.v1.GitInfo git_info = 1;
   */
  gitInfo?: GitInfo;

  constructor(data?: PartialMessage<IsGitHubAppInstalledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.IsGitHubAppInstalledRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git_info", kind: "message", T: GitInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsGitHubAppInstalledRequest {
    return new IsGitHubAppInstalledRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsGitHubAppInstalledRequest {
    return new IsGitHubAppInstalledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsGitHubAppInstalledRequest {
    return new IsGitHubAppInstalledRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsGitHubAppInstalledRequest | PlainMessage<IsGitHubAppInstalledRequest> | undefined, b: IsGitHubAppInstalledRequest | PlainMessage<IsGitHubAppInstalledRequest> | undefined): boolean {
    return proto3.util.equals(IsGitHubAppInstalledRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.IsGitHubAppInstalledResponse
 */
export class IsGitHubAppInstalledResponse extends Message<IsGitHubAppInstalledResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: bool is_installed = 2;
   */
  isInstalled = false;

  constructor(data?: PartialMessage<IsGitHubAppInstalledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.IsGitHubAppInstalledResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "is_installed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsGitHubAppInstalledResponse {
    return new IsGitHubAppInstalledResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsGitHubAppInstalledResponse {
    return new IsGitHubAppInstalledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsGitHubAppInstalledResponse {
    return new IsGitHubAppInstalledResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsGitHubAppInstalledResponse | PlainMessage<IsGitHubAppInstalledResponse> | undefined, b: IsGitHubAppInstalledResponse | PlainMessage<IsGitHubAppInstalledResponse> | undefined): boolean {
    return proto3.util.equals(IsGitHubAppInstalledResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GroupMapper
 */
export class GroupMapper extends Message<GroupMapper> {
  /**
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * @generated from field: string ssoGroup = 2;
   */
  ssoGroup = "";

  constructor(data?: PartialMessage<GroupMapper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GroupMapper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ssoGroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupMapper {
    return new GroupMapper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupMapper {
    return new GroupMapper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupMapper {
    return new GroupMapper().fromJsonString(jsonString, options);
  }

  static equals(a: GroupMapper | PlainMessage<GroupMapper> | undefined, b: GroupMapper | PlainMessage<GroupMapper> | undefined): boolean {
    return proto3.util.equals(GroupMapper, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOIDCProviderRequest
 */
export class CreateOIDCProviderRequest extends Message<CreateOIDCProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string discoveryEndpoint = 2;
   */
  discoveryEndpoint = "";

  /**
   * @generated from field: string clientID = 3;
   */
  clientID = "";

  /**
   * @generated from field: string clientSecrect = 4;
   */
  clientSecrect = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GroupMapper mappers = 5;
   */
  mappers: GroupMapper[] = [];

  constructor(data?: PartialMessage<CreateOIDCProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOIDCProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "discoveryEndpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "clientID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clientSecrect", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "mappers", kind: "message", T: GroupMapper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOIDCProviderRequest {
    return new CreateOIDCProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOIDCProviderRequest {
    return new CreateOIDCProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOIDCProviderRequest {
    return new CreateOIDCProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOIDCProviderRequest | PlainMessage<CreateOIDCProviderRequest> | undefined, b: CreateOIDCProviderRequest | PlainMessage<CreateOIDCProviderRequest> | undefined): boolean {
    return proto3.util.equals(CreateOIDCProviderRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateOIDCProviderResponse
 */
export class CreateOIDCProviderResponse extends Message<CreateOIDCProviderResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string signInURL = 2;
   */
  signInURL = "";

  /**
   * @generated from field: string signOutURL = 3;
   */
  signOutURL = "";

  /**
   * @generated from field: string loginURL = 4;
   */
  loginURL = "";

  constructor(data?: PartialMessage<CreateOIDCProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateOIDCProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "signInURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signOutURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "loginURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOIDCProviderResponse {
    return new CreateOIDCProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOIDCProviderResponse {
    return new CreateOIDCProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOIDCProviderResponse {
    return new CreateOIDCProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOIDCProviderResponse | PlainMessage<CreateOIDCProviderResponse> | undefined, b: CreateOIDCProviderResponse | PlainMessage<CreateOIDCProviderResponse> | undefined): boolean {
    return proto3.util.equals(CreateOIDCProviderResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOIDCProviderRequest
 */
export class GetOIDCProviderRequest extends Message<GetOIDCProviderRequest> {
  constructor(data?: PartialMessage<GetOIDCProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOIDCProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOIDCProviderRequest {
    return new GetOIDCProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOIDCProviderRequest {
    return new GetOIDCProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOIDCProviderRequest {
    return new GetOIDCProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOIDCProviderRequest | PlainMessage<GetOIDCProviderRequest> | undefined, b: GetOIDCProviderRequest | PlainMessage<GetOIDCProviderRequest> | undefined): boolean {
    return proto3.util.equals(GetOIDCProviderRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOIDCProviderResponse
 */
export class GetOIDCProviderResponse extends Message<GetOIDCProviderResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * @generated from field: string loginURL = 4;
   */
  loginURL = "";

  /**
   * @generated from field: string signInRedirectURL = 5;
   */
  signInRedirectURL = "";

  /**
   * @generated from field: string signOutRedirectURL = 6;
   */
  signOutRedirectURL = "";

  constructor(data?: PartialMessage<GetOIDCProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOIDCProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "loginURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signInRedirectURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "signOutRedirectURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOIDCProviderResponse {
    return new GetOIDCProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOIDCProviderResponse {
    return new GetOIDCProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOIDCProviderResponse {
    return new GetOIDCProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOIDCProviderResponse | PlainMessage<GetOIDCProviderResponse> | undefined, b: GetOIDCProviderResponse | PlainMessage<GetOIDCProviderResponse> | undefined): boolean {
    return proto3.util.equals(GetOIDCProviderResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteOIDCProviderRequest
 */
export class DeleteOIDCProviderRequest extends Message<DeleteOIDCProviderRequest> {
  constructor(data?: PartialMessage<DeleteOIDCProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteOIDCProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOIDCProviderRequest {
    return new DeleteOIDCProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOIDCProviderRequest {
    return new DeleteOIDCProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOIDCProviderRequest {
    return new DeleteOIDCProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOIDCProviderRequest | PlainMessage<DeleteOIDCProviderRequest> | undefined, b: DeleteOIDCProviderRequest | PlainMessage<DeleteOIDCProviderRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOIDCProviderRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteOIDCProviderResponse
 */
export class DeleteOIDCProviderResponse extends Message<DeleteOIDCProviderResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteOIDCProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteOIDCProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOIDCProviderResponse {
    return new DeleteOIDCProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOIDCProviderResponse {
    return new DeleteOIDCProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOIDCProviderResponse {
    return new DeleteOIDCProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOIDCProviderResponse | PlainMessage<DeleteOIDCProviderResponse> | undefined, b: DeleteOIDCProviderResponse | PlainMessage<DeleteOIDCProviderResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOIDCProviderResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationRequestsCountRequest
 */
export class GetOrganizationRequestsCountRequest extends Message<GetOrganizationRequestsCountRequest> {
  constructor(data?: PartialMessage<GetOrganizationRequestsCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationRequestsCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequestsCountRequest {
    return new GetOrganizationRequestsCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequestsCountRequest {
    return new GetOrganizationRequestsCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequestsCountRequest {
    return new GetOrganizationRequestsCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequestsCountRequest | PlainMessage<GetOrganizationRequestsCountRequest> | undefined, b: GetOrganizationRequestsCountRequest | PlainMessage<GetOrganizationRequestsCountRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequestsCountRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetOrganizationRequestsCountResponse
 */
export class GetOrganizationRequestsCountResponse extends Message<GetOrganizationRequestsCountResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetOrganizationRequestsCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetOrganizationRequestsCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequestsCountResponse {
    return new GetOrganizationRequestsCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequestsCountResponse {
    return new GetOrganizationRequestsCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequestsCountResponse {
    return new GetOrganizationRequestsCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequestsCountResponse | PlainMessage<GetOrganizationRequestsCountResponse> | undefined, b: GetOrganizationRequestsCountResponse | PlainMessage<GetOrganizationRequestsCountResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequestsCountResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.OrganizationInvite
 */
export class OrganizationInvite extends Message<OrganizationInvite> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string creatorUserId = 4;
   */
  creatorUserId = "";

  /**
   * @generated from field: string createdAt = 5;
   */
  createdAt = "";

  /**
   * @generated from field: optional string invitedBy = 6;
   */
  invitedBy?: string;

  constructor(data?: PartialMessage<OrganizationInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.OrganizationInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "creatorUserId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "invitedBy", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationInvite {
    return new OrganizationInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationInvite {
    return new OrganizationInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationInvite {
    return new OrganizationInvite().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationInvite | PlainMessage<OrganizationInvite> | undefined, b: OrganizationInvite | PlainMessage<OrganizationInvite> | undefined): boolean {
    return proto3.util.equals(OrganizationInvite, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAuditLogsRequest
 */
export class GetAuditLogsRequest extends Message<GetAuditLogsRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: string startDate = 3;
   */
  startDate = "";

  /**
   * @generated from field: string endDate = 4;
   */
  endDate = "";

  constructor(data?: PartialMessage<GetAuditLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAuditLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "startDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "endDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditLogsRequest {
    return new GetAuditLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditLogsRequest {
    return new GetAuditLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditLogsRequest {
    return new GetAuditLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditLogsRequest | PlainMessage<GetAuditLogsRequest> | undefined, b: GetAuditLogsRequest | PlainMessage<GetAuditLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetAuditLogsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AuditLog
 */
export class AuditLog extends Message<AuditLog> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string actorDisplayName = 2;
   */
  actorDisplayName = "";

  /**
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * @generated from field: string actorType = 4;
   */
  actorType = "";

  /**
   * @generated from field: string auditAction = 5;
   */
  auditAction = "";

  /**
   * @generated from field: string auditableDisplayName = 6;
   */
  auditableDisplayName = "";

  /**
   * @generated from field: string targetDisplayName = 7;
   */
  targetDisplayName = "";

  /**
   * @generated from field: string targetType = 8;
   */
  targetType = "";

  /**
   * @generated from field: string createdAt = 9;
   */
  createdAt = "";

  /**
   * @generated from field: string targetNamespaceId = 10;
   */
  targetNamespaceId = "";

  /**
   * @generated from field: string targetNamespaceDisplayName = 11;
   */
  targetNamespaceDisplayName = "";

  constructor(data?: PartialMessage<AuditLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AuditLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actorDisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "actorType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auditAction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "auditableDisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "targetDisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "targetType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "targetNamespaceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "targetNamespaceDisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLog {
    return new AuditLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLog {
    return new AuditLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLog {
    return new AuditLog().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLog | PlainMessage<AuditLog> | undefined, b: AuditLog | PlainMessage<AuditLog> | undefined): boolean {
    return proto3.util.equals(AuditLog, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAuditLogsResponse
 */
export class GetAuditLogsResponse extends Message<GetAuditLogsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.AuditLog logs = 2;
   */
  logs: AuditLog[] = [];

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  constructor(data?: PartialMessage<GetAuditLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAuditLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "logs", kind: "message", T: AuditLog, repeated: true },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditLogsResponse {
    return new GetAuditLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditLogsResponse {
    return new GetAuditLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditLogsResponse {
    return new GetAuditLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditLogsResponse | PlainMessage<GetAuditLogsResponse> | undefined, b: GetAuditLogsResponse | PlainMessage<GetAuditLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetAuditLogsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetInvitationsRequest
 */
export class GetInvitationsRequest extends Message<GetInvitationsRequest> {
  constructor(data?: PartialMessage<GetInvitationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetInvitationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInvitationsRequest {
    return new GetInvitationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInvitationsRequest {
    return new GetInvitationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInvitationsRequest {
    return new GetInvitationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInvitationsRequest | PlainMessage<GetInvitationsRequest> | undefined, b: GetInvitationsRequest | PlainMessage<GetInvitationsRequest> | undefined): boolean {
    return proto3.util.equals(GetInvitationsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetInvitationsResponse
 */
export class GetInvitationsResponse extends Message<GetInvitationsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.OrganizationInvite invitations = 2;
   */
  invitations: OrganizationInvite[] = [];

  constructor(data?: PartialMessage<GetInvitationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetInvitationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "invitations", kind: "message", T: OrganizationInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInvitationsResponse {
    return new GetInvitationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInvitationsResponse {
    return new GetInvitationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInvitationsResponse {
    return new GetInvitationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInvitationsResponse | PlainMessage<GetInvitationsResponse> | undefined, b: GetInvitationsResponse | PlainMessage<GetInvitationsResponse> | undefined): boolean {
    return proto3.util.equals(GetInvitationsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AcceptOrDeclineInvitationRequest
 */
export class AcceptOrDeclineInvitationRequest extends Message<AcceptOrDeclineInvitationRequest> {
  /**
   * @generated from field: string organizationId = 1;
   */
  organizationId = "";

  /**
   * @generated from field: bool accept = 2;
   */
  accept = false;

  constructor(data?: PartialMessage<AcceptOrDeclineInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AcceptOrDeclineInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizationId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accept", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptOrDeclineInvitationRequest {
    return new AcceptOrDeclineInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptOrDeclineInvitationRequest {
    return new AcceptOrDeclineInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptOrDeclineInvitationRequest {
    return new AcceptOrDeclineInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptOrDeclineInvitationRequest | PlainMessage<AcceptOrDeclineInvitationRequest> | undefined, b: AcceptOrDeclineInvitationRequest | PlainMessage<AcceptOrDeclineInvitationRequest> | undefined): boolean {
    return proto3.util.equals(AcceptOrDeclineInvitationRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AcceptOrDeclineInvitationResponse
 */
export class AcceptOrDeclineInvitationResponse extends Message<AcceptOrDeclineInvitationResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<AcceptOrDeclineInvitationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AcceptOrDeclineInvitationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptOrDeclineInvitationResponse {
    return new AcceptOrDeclineInvitationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptOrDeclineInvitationResponse {
    return new AcceptOrDeclineInvitationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptOrDeclineInvitationResponse {
    return new AcceptOrDeclineInvitationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptOrDeclineInvitationResponse | PlainMessage<AcceptOrDeclineInvitationResponse> | undefined, b: AcceptOrDeclineInvitationResponse | PlainMessage<AcceptOrDeclineInvitationResponse> | undefined): boolean {
    return proto3.util.equals(AcceptOrDeclineInvitationResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GraphComposition
 */
export class GraphComposition extends Message<GraphComposition> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string schemaVersionId = 2;
   */
  schemaVersionId = "";

  /**
   * @generated from field: string createdAt = 3;
   */
  createdAt = "";

  /**
   * @generated from field: bool isComposable = 4;
   */
  isComposable = false;

  /**
   * @generated from field: optional string compositionErrors = 5;
   */
  compositionErrors?: string;

  /**
   * @generated from field: optional string createdBy = 6;
   */
  createdBy?: string;

  /**
   * @generated from field: bool isLatestValid = 7;
   */
  isLatestValid = false;

  /**
   * @generated from field: optional string routerConfigSignature = 8;
   */
  routerConfigSignature?: string;

  /**
   * @generated from field: optional string admissionError = 9;
   */
  admissionError?: string;

  /**
   * @generated from field: optional string deploymentError = 10;
   */
  deploymentError?: string;

  constructor(data?: PartialMessage<GraphComposition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GraphComposition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schemaVersionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "isComposable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "compositionErrors", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "createdBy", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "isLatestValid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "routerConfigSignature", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "admissionError", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "deploymentError", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphComposition {
    return new GraphComposition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphComposition {
    return new GraphComposition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphComposition {
    return new GraphComposition().fromJsonString(jsonString, options);
  }

  static equals(a: GraphComposition | PlainMessage<GraphComposition> | undefined, b: GraphComposition | PlainMessage<GraphComposition> | undefined): boolean {
    return proto3.util.equals(GraphComposition, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GraphCompositionSubgraph
 */
export class GraphCompositionSubgraph extends Message<GraphCompositionSubgraph> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string schemaVersionId = 2;
   */
  schemaVersionId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string target_id = 4;
   */
  targetId = "";

  constructor(data?: PartialMessage<GraphCompositionSubgraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GraphCompositionSubgraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schemaVersionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphCompositionSubgraph {
    return new GraphCompositionSubgraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphCompositionSubgraph {
    return new GraphCompositionSubgraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphCompositionSubgraph {
    return new GraphCompositionSubgraph().fromJsonString(jsonString, options);
  }

  static equals(a: GraphCompositionSubgraph | PlainMessage<GraphCompositionSubgraph> | undefined, b: GraphCompositionSubgraph | PlainMessage<GraphCompositionSubgraph> | undefined): boolean {
    return proto3.util.equals(GraphCompositionSubgraph, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCompositionsRequest
 */
export class GetCompositionsRequest extends Message<GetCompositionsRequest> {
  /**
   * @generated from field: string fedGraphName = 1;
   */
  fedGraphName = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  /**
   * @generated from field: string startDate = 4;
   */
  startDate = "";

  /**
   * @generated from field: string endDate = 5;
   */
  endDate = "";

  /**
   * @generated from field: string namespace = 6;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetCompositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCompositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "startDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "endDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionsRequest {
    return new GetCompositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionsRequest {
    return new GetCompositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionsRequest {
    return new GetCompositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionsRequest | PlainMessage<GetCompositionsRequest> | undefined, b: GetCompositionsRequest | PlainMessage<GetCompositionsRequest> | undefined): boolean {
    return proto3.util.equals(GetCompositionsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCompositionsResponse
 */
export class GetCompositionsResponse extends Message<GetCompositionsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GraphComposition compositions = 2;
   */
  compositions: GraphComposition[] = [];

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  constructor(data?: PartialMessage<GetCompositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCompositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositions", kind: "message", T: GraphComposition, repeated: true },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionsResponse {
    return new GetCompositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionsResponse {
    return new GetCompositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionsResponse {
    return new GetCompositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionsResponse | PlainMessage<GetCompositionsResponse> | undefined, b: GetCompositionsResponse | PlainMessage<GetCompositionsResponse> | undefined): boolean {
    return proto3.util.equals(GetCompositionsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCompositionDetailsRequest
 */
export class GetCompositionDetailsRequest extends Message<GetCompositionDetailsRequest> {
  /**
   * @generated from field: string compositionId = 1;
   */
  compositionId = "";

  constructor(data?: PartialMessage<GetCompositionDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCompositionDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "compositionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionDetailsRequest {
    return new GetCompositionDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionDetailsRequest {
    return new GetCompositionDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionDetailsRequest {
    return new GetCompositionDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionDetailsRequest | PlainMessage<GetCompositionDetailsRequest> | undefined, b: GetCompositionDetailsRequest | PlainMessage<GetCompositionDetailsRequest> | undefined): boolean {
    return proto3.util.equals(GetCompositionDetailsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetCompositionDetailsResponse
 */
export class GetCompositionDetailsResponse extends Message<GetCompositionDetailsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.GraphComposition composition = 2;
   */
  composition?: GraphComposition;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GraphCompositionSubgraph compositionSubgraphs = 3;
   */
  compositionSubgraphs: GraphCompositionSubgraph[] = [];

  /**
   * @generated from field: wg.cosmo.platform.v1.ChangeCounts changeCounts = 4;
   */
  changeCounts?: ChangeCounts;

  constructor(data?: PartialMessage<GetCompositionDetailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetCompositionDetailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "composition", kind: "message", T: GraphComposition },
    { no: 3, name: "compositionSubgraphs", kind: "message", T: GraphCompositionSubgraph, repeated: true },
    { no: 4, name: "changeCounts", kind: "message", T: ChangeCounts },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionDetailsResponse {
    return new GetCompositionDetailsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionDetailsResponse {
    return new GetCompositionDetailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionDetailsResponse {
    return new GetCompositionDetailsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionDetailsResponse | PlainMessage<GetCompositionDetailsResponse> | undefined, b: GetCompositionDetailsResponse | PlainMessage<GetCompositionDetailsResponse> | undefined): boolean {
    return proto3.util.equals(GetCompositionDetailsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSdlBySchemaVersionRequest
 */
export class GetSdlBySchemaVersionRequest extends Message<GetSdlBySchemaVersionRequest> {
  /**
   * @generated from field: string schemaVersionId = 1;
   */
  schemaVersionId = "";

  /**
   * @generated from field: string target_id = 2;
   */
  targetId = "";

  constructor(data?: PartialMessage<GetSdlBySchemaVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSdlBySchemaVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemaVersionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSdlBySchemaVersionRequest {
    return new GetSdlBySchemaVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSdlBySchemaVersionRequest {
    return new GetSdlBySchemaVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSdlBySchemaVersionRequest {
    return new GetSdlBySchemaVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSdlBySchemaVersionRequest | PlainMessage<GetSdlBySchemaVersionRequest> | undefined, b: GetSdlBySchemaVersionRequest | PlainMessage<GetSdlBySchemaVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetSdlBySchemaVersionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSdlBySchemaVersionResponse
 */
export class GetSdlBySchemaVersionResponse extends Message<GetSdlBySchemaVersionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: string sdl = 2;
   */
  sdl = "";

  constructor(data?: PartialMessage<GetSdlBySchemaVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSdlBySchemaVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "sdl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSdlBySchemaVersionResponse {
    return new GetSdlBySchemaVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSdlBySchemaVersionResponse {
    return new GetSdlBySchemaVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSdlBySchemaVersionResponse {
    return new GetSdlBySchemaVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSdlBySchemaVersionResponse | PlainMessage<GetSdlBySchemaVersionResponse> | undefined, b: GetSdlBySchemaVersionResponse | PlainMessage<GetSdlBySchemaVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetSdlBySchemaVersionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetChangelogBySchemaVersionRequest
 */
export class GetChangelogBySchemaVersionRequest extends Message<GetChangelogBySchemaVersionRequest> {
  /**
   * @generated from field: string schemaVersionId = 1;
   */
  schemaVersionId = "";

  constructor(data?: PartialMessage<GetChangelogBySchemaVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetChangelogBySchemaVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemaVersionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangelogBySchemaVersionRequest {
    return new GetChangelogBySchemaVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangelogBySchemaVersionRequest {
    return new GetChangelogBySchemaVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangelogBySchemaVersionRequest {
    return new GetChangelogBySchemaVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangelogBySchemaVersionRequest | PlainMessage<GetChangelogBySchemaVersionRequest> | undefined, b: GetChangelogBySchemaVersionRequest | PlainMessage<GetChangelogBySchemaVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetChangelogBySchemaVersionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetChangelogBySchemaVersionResponse
 */
export class GetChangelogBySchemaVersionResponse extends Message<GetChangelogBySchemaVersionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.FederatedGraphChangelogOutput changelog = 2;
   */
  changelog?: FederatedGraphChangelogOutput;

  constructor(data?: PartialMessage<GetChangelogBySchemaVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetChangelogBySchemaVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "changelog", kind: "message", T: FederatedGraphChangelogOutput },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangelogBySchemaVersionResponse {
    return new GetChangelogBySchemaVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangelogBySchemaVersionResponse {
    return new GetChangelogBySchemaVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangelogBySchemaVersionResponse {
    return new GetChangelogBySchemaVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangelogBySchemaVersionResponse | PlainMessage<GetChangelogBySchemaVersionResponse> | undefined, b: GetChangelogBySchemaVersionResponse | PlainMessage<GetChangelogBySchemaVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetChangelogBySchemaVersionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetUserAccessibleResourcesRequest
 */
export class GetUserAccessibleResourcesRequest extends Message<GetUserAccessibleResourcesRequest> {
  constructor(data?: PartialMessage<GetUserAccessibleResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetUserAccessibleResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccessibleResourcesRequest {
    return new GetUserAccessibleResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccessibleResourcesRequest {
    return new GetUserAccessibleResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccessibleResourcesRequest {
    return new GetUserAccessibleResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccessibleResourcesRequest | PlainMessage<GetUserAccessibleResourcesRequest> | undefined, b: GetUserAccessibleResourcesRequest | PlainMessage<GetUserAccessibleResourcesRequest> | undefined): boolean {
    return proto3.util.equals(GetUserAccessibleResourcesRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetUserAccessibleResourcesResponse
 */
export class GetUserAccessibleResourcesResponse extends Message<GetUserAccessibleResourcesResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetUserAccessibleResourcesResponse.Graph federatedGraphs = 2;
   */
  federatedGraphs: GetUserAccessibleResourcesResponse_Graph[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.GetUserAccessibleResourcesResponse.Graph subgraphs = 3;
   */
  subgraphs: GetUserAccessibleResourcesResponse_Graph[] = [];

  constructor(data?: PartialMessage<GetUserAccessibleResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetUserAccessibleResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "federatedGraphs", kind: "message", T: GetUserAccessibleResourcesResponse_Graph, repeated: true },
    { no: 3, name: "subgraphs", kind: "message", T: GetUserAccessibleResourcesResponse_Graph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccessibleResourcesResponse {
    return new GetUserAccessibleResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccessibleResourcesResponse {
    return new GetUserAccessibleResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccessibleResourcesResponse {
    return new GetUserAccessibleResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccessibleResourcesResponse | PlainMessage<GetUserAccessibleResourcesResponse> | undefined, b: GetUserAccessibleResourcesResponse | PlainMessage<GetUserAccessibleResourcesResponse> | undefined): boolean {
    return proto3.util.equals(GetUserAccessibleResourcesResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetUserAccessibleResourcesResponse.Graph
 */
export class GetUserAccessibleResourcesResponse_Graph extends Message<GetUserAccessibleResourcesResponse_Graph> {
  /**
   * @generated from field: string targetId = 1;
   */
  targetId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetUserAccessibleResourcesResponse_Graph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetUserAccessibleResourcesResponse.Graph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targetId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccessibleResourcesResponse_Graph {
    return new GetUserAccessibleResourcesResponse_Graph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccessibleResourcesResponse_Graph {
    return new GetUserAccessibleResourcesResponse_Graph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccessibleResourcesResponse_Graph {
    return new GetUserAccessibleResourcesResponse_Graph().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccessibleResourcesResponse_Graph | PlainMessage<GetUserAccessibleResourcesResponse_Graph> | undefined, b: GetUserAccessibleResourcesResponse_Graph | PlainMessage<GetUserAccessibleResourcesResponse_Graph> | undefined): boolean {
    return proto3.util.equals(GetUserAccessibleResourcesResponse_Graph, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateFeatureSettingsRequest
 */
export class UpdateFeatureSettingsRequest extends Message<UpdateFeatureSettingsRequest> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  /**
   * @generated from field: wg.cosmo.platform.v1.Feature featureId = 2;
   */
  featureId = Feature.rbac;

  constructor(data?: PartialMessage<UpdateFeatureSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateFeatureSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "featureId", kind: "enum", T: proto3.getEnumType(Feature) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFeatureSettingsRequest {
    return new UpdateFeatureSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFeatureSettingsRequest {
    return new UpdateFeatureSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFeatureSettingsRequest {
    return new UpdateFeatureSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFeatureSettingsRequest | PlainMessage<UpdateFeatureSettingsRequest> | undefined, b: UpdateFeatureSettingsRequest | PlainMessage<UpdateFeatureSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateFeatureSettingsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateFeatureSettingsResponse
 */
export class UpdateFeatureSettingsResponse extends Message<UpdateFeatureSettingsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateFeatureSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateFeatureSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFeatureSettingsResponse {
    return new UpdateFeatureSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFeatureSettingsResponse {
    return new UpdateFeatureSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFeatureSettingsResponse {
    return new UpdateFeatureSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFeatureSettingsResponse | PlainMessage<UpdateFeatureSettingsResponse> | undefined, b: UpdateFeatureSettingsResponse | PlainMessage<UpdateFeatureSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateFeatureSettingsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AddSubgraphMemberRequest
 */
export class AddSubgraphMemberRequest extends Message<AddSubgraphMemberRequest> {
  /**
   * @generated from field: string subgraphName = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string userEmail = 2;
   */
  userEmail = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<AddSubgraphMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AddSubgraphMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userEmail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddSubgraphMemberRequest {
    return new AddSubgraphMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddSubgraphMemberRequest {
    return new AddSubgraphMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddSubgraphMemberRequest {
    return new AddSubgraphMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddSubgraphMemberRequest | PlainMessage<AddSubgraphMemberRequest> | undefined, b: AddSubgraphMemberRequest | PlainMessage<AddSubgraphMemberRequest> | undefined): boolean {
    return proto3.util.equals(AddSubgraphMemberRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AddSubgraphMemberResponse
 */
export class AddSubgraphMemberResponse extends Message<AddSubgraphMemberResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<AddSubgraphMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AddSubgraphMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddSubgraphMemberResponse {
    return new AddSubgraphMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddSubgraphMemberResponse {
    return new AddSubgraphMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddSubgraphMemberResponse {
    return new AddSubgraphMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddSubgraphMemberResponse | PlainMessage<AddSubgraphMemberResponse> | undefined, b: AddSubgraphMemberResponse | PlainMessage<AddSubgraphMemberResponse> | undefined): boolean {
    return proto3.util.equals(AddSubgraphMemberResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveSubgraphMemberRequest
 */
export class RemoveSubgraphMemberRequest extends Message<RemoveSubgraphMemberRequest> {
  /**
   * @generated from field: string subgraphName = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string subgraphMemberId = 2;
   */
  subgraphMemberId = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<RemoveSubgraphMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveSubgraphMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subgraphMemberId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveSubgraphMemberRequest {
    return new RemoveSubgraphMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveSubgraphMemberRequest {
    return new RemoveSubgraphMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveSubgraphMemberRequest {
    return new RemoveSubgraphMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveSubgraphMemberRequest | PlainMessage<RemoveSubgraphMemberRequest> | undefined, b: RemoveSubgraphMemberRequest | PlainMessage<RemoveSubgraphMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveSubgraphMemberRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RemoveSubgraphMemberResponse
 */
export class RemoveSubgraphMemberResponse extends Message<RemoveSubgraphMemberResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<RemoveSubgraphMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RemoveSubgraphMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveSubgraphMemberResponse {
    return new RemoveSubgraphMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveSubgraphMemberResponse {
    return new RemoveSubgraphMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveSubgraphMemberResponse {
    return new RemoveSubgraphMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveSubgraphMemberResponse | PlainMessage<RemoveSubgraphMemberResponse> | undefined, b: RemoveSubgraphMemberResponse | PlainMessage<RemoveSubgraphMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveSubgraphMemberResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphMembersRequest
 */
export class GetSubgraphMembersRequest extends Message<GetSubgraphMembersRequest> {
  /**
   * @generated from field: string subgraphName = 1;
   */
  subgraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetSubgraphMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphMembersRequest {
    return new GetSubgraphMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphMembersRequest {
    return new GetSubgraphMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphMembersRequest {
    return new GetSubgraphMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphMembersRequest | PlainMessage<GetSubgraphMembersRequest> | undefined, b: GetSubgraphMembersRequest | PlainMessage<GetSubgraphMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetSubgraphMembersRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SubgraphMember
 */
export class SubgraphMember extends Message<SubgraphMember> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string subgraphMemberId = 4;
   */
  subgraphMemberId = "";

  constructor(data?: PartialMessage<SubgraphMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SubgraphMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subgraphMemberId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubgraphMember {
    return new SubgraphMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubgraphMember {
    return new SubgraphMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubgraphMember {
    return new SubgraphMember().fromJsonString(jsonString, options);
  }

  static equals(a: SubgraphMember | PlainMessage<SubgraphMember> | undefined, b: SubgraphMember | PlainMessage<SubgraphMember> | undefined): boolean {
    return proto3.util.equals(SubgraphMember, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetSubgraphMembersResponse
 */
export class GetSubgraphMembersResponse extends Message<GetSubgraphMembersResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.SubgraphMember members = 2;
   */
  members: SubgraphMember[] = [];

  constructor(data?: PartialMessage<GetSubgraphMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetSubgraphMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "members", kind: "message", T: SubgraphMember, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubgraphMembersResponse {
    return new GetSubgraphMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubgraphMembersResponse {
    return new GetSubgraphMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubgraphMembersResponse {
    return new GetSubgraphMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubgraphMembersResponse | PlainMessage<GetSubgraphMembersResponse> | undefined, b: GetSubgraphMembersResponse | PlainMessage<GetSubgraphMembersResponse> | undefined): boolean {
    return proto3.util.equals(GetSubgraphMembersResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AddReadmeRequest
 */
export class AddReadmeRequest extends Message<AddReadmeRequest> {
  /**
   * @generated from field: string targetName = 1;
   */
  targetName = "";

  /**
   * @generated from field: string readme = 2;
   */
  readme = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<AddReadmeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AddReadmeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targetName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddReadmeRequest {
    return new AddReadmeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddReadmeRequest {
    return new AddReadmeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddReadmeRequest {
    return new AddReadmeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddReadmeRequest | PlainMessage<AddReadmeRequest> | undefined, b: AddReadmeRequest | PlainMessage<AddReadmeRequest> | undefined): boolean {
    return proto3.util.equals(AddReadmeRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.AddReadmeResponse
 */
export class AddReadmeResponse extends Message<AddReadmeResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<AddReadmeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.AddReadmeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddReadmeResponse {
    return new AddReadmeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddReadmeResponse {
    return new AddReadmeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddReadmeResponse {
    return new AddReadmeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddReadmeResponse | PlainMessage<AddReadmeResponse> | undefined, b: AddReadmeResponse | PlainMessage<AddReadmeResponse> | undefined): boolean {
    return proto3.util.equals(AddReadmeResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Router
 */
export class Router extends Message<Router> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  /**
   * @generated from field: string clusterName = 2;
   */
  clusterName = "";

  /**
   * @generated from field: string serviceName = 3;
   */
  serviceName = "";

  /**
   * @generated from field: string serviceVersion = 4;
   */
  serviceVersion = "";

  /**
   * @generated from field: string serviceInstanceId = 5;
   */
  serviceInstanceId = "";

  /**
   * @generated from field: string uptimeSeconds = 6;
   */
  uptimeSeconds = "";

  /**
   * @generated from field: string serverUptimeSeconds = 7;
   */
  serverUptimeSeconds = "";

  /**
   * @generated from field: string compositionId = 8;
   */
  compositionId = "";

  /**
   * @generated from field: bool onLatestComposition = 9;
   */
  onLatestComposition = false;

  /**
   * @generated from field: string processId = 10;
   */
  processId = "";

  /**
   * @generated from field: float memoryUsageMb = 11;
   */
  memoryUsageMb = 0;

  /**
   * @generated from field: float memoryUsageChangePercent = 12;
   */
  memoryUsageChangePercent = 0;

  /**
   * @generated from field: float cpuUsagePercent = 13;
   */
  cpuUsagePercent = 0;

  /**
   * @generated from field: float cpuUsageChangePercent = 14;
   */
  cpuUsageChangePercent = 0;

  constructor(data?: PartialMessage<Router>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Router";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clusterName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "serviceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "serviceVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "serviceInstanceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "uptimeSeconds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "serverUptimeSeconds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "compositionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "onLatestComposition", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "processId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "memoryUsageMb", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 12, name: "memoryUsageChangePercent", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 13, name: "cpuUsagePercent", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 14, name: "cpuUsageChangePercent", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Router {
    return new Router().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Router {
    return new Router().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Router {
    return new Router().fromJsonString(jsonString, options);
  }

  static equals(a: Router | PlainMessage<Router> | undefined, b: Router | PlainMessage<Router> | undefined): boolean {
    return proto3.util.equals(Router, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetRoutersRequest
 */
export class GetRoutersRequest extends Message<GetRoutersRequest> {
  /**
   * @generated from field: string fedGraphName = 1;
   */
  fedGraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetRoutersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetRoutersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoutersRequest {
    return new GetRoutersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoutersRequest {
    return new GetRoutersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoutersRequest {
    return new GetRoutersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoutersRequest | PlainMessage<GetRoutersRequest> | undefined, b: GetRoutersRequest | PlainMessage<GetRoutersRequest> | undefined): boolean {
    return proto3.util.equals(GetRoutersRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetRoutersResponse
 */
export class GetRoutersResponse extends Message<GetRoutersResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Router routers = 2;
   */
  routers: Router[] = [];

  constructor(data?: PartialMessage<GetRoutersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetRoutersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "routers", kind: "message", T: Router, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoutersResponse {
    return new GetRoutersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoutersResponse {
    return new GetRoutersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoutersResponse {
    return new GetRoutersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoutersResponse | PlainMessage<GetRoutersResponse> | undefined, b: GetRoutersResponse | PlainMessage<GetRoutersResponse> | undefined): boolean {
    return proto3.util.equals(GetRoutersResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ClientInfo
 */
export class ClientInfo extends Message<ClientInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string createdAt = 3;
   */
  createdAt = "";

  /**
   * @generated from field: string lastUpdatedAt = 4;
   */
  lastUpdatedAt = "";

  /**
   * @generated from field: string createdBy = 5;
   */
  createdBy = "";

  /**
   * @generated from field: string lastUpdatedBy = 6;
   */
  lastUpdatedBy = "";

  constructor(data?: PartialMessage<ClientInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ClientInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastUpdatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "createdBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "lastUpdatedBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientInfo {
    return new ClientInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientInfo {
    return new ClientInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientInfo {
    return new ClientInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ClientInfo | PlainMessage<ClientInfo> | undefined, b: ClientInfo | PlainMessage<ClientInfo> | undefined): boolean {
    return proto3.util.equals(ClientInfo, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetClientsRequest
 */
export class GetClientsRequest extends Message<GetClientsRequest> {
  /**
   * @generated from field: string fedGraphName = 1;
   */
  fedGraphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetClientsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetClientsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fedGraphName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClientsRequest {
    return new GetClientsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClientsRequest {
    return new GetClientsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClientsRequest {
    return new GetClientsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClientsRequest | PlainMessage<GetClientsRequest> | undefined, b: GetClientsRequest | PlainMessage<GetClientsRequest> | undefined): boolean {
    return proto3.util.equals(GetClientsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetClientsResponse
 */
export class GetClientsResponse extends Message<GetClientsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.ClientInfo clients = 2;
   */
  clients: ClientInfo[] = [];

  constructor(data?: PartialMessage<GetClientsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetClientsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "clients", kind: "message", T: ClientInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClientsResponse {
    return new GetClientsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClientsResponse {
    return new GetClientsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClientsResponse {
    return new GetClientsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClientsResponse | PlainMessage<GetClientsResponse> | undefined, b: GetClientsResponse | PlainMessage<GetClientsResponse> | undefined): boolean {
    return proto3.util.equals(GetClientsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFieldUsageRequest
 */
export class GetFieldUsageRequest extends Message<GetFieldUsageRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: optional string namedType = 2;
   */
  namedType?: string;

  /**
   * @generated from field: optional string typename = 3;
   */
  typename?: string;

  /**
   * @generated from field: optional string field = 4;
   */
  field?: string;

  /**
   * @generated from field: optional int32 range = 5;
   */
  range?: number;

  /**
   * @generated from field: wg.cosmo.platform.v1.DateRange dateRange = 6;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: string namespace = 7;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetFieldUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFieldUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namedType", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "typename", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "range", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "dateRange", kind: "message", T: DateRange },
    { no: 7, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFieldUsageRequest {
    return new GetFieldUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFieldUsageRequest {
    return new GetFieldUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFieldUsageRequest {
    return new GetFieldUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFieldUsageRequest | PlainMessage<GetFieldUsageRequest> | undefined, b: GetFieldUsageRequest | PlainMessage<GetFieldUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetFieldUsageRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ClientWithOperations
 */
export class ClientWithOperations extends Message<ClientWithOperations> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.ClientWithOperations.Operation operations = 3;
   */
  operations: ClientWithOperations_Operation[] = [];

  constructor(data?: PartialMessage<ClientWithOperations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ClientWithOperations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operations", kind: "message", T: ClientWithOperations_Operation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientWithOperations {
    return new ClientWithOperations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientWithOperations {
    return new ClientWithOperations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientWithOperations {
    return new ClientWithOperations().fromJsonString(jsonString, options);
  }

  static equals(a: ClientWithOperations | PlainMessage<ClientWithOperations> | undefined, b: ClientWithOperations | PlainMessage<ClientWithOperations> | undefined): boolean {
    return proto3.util.equals(ClientWithOperations, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ClientWithOperations.Operation
 */
export class ClientWithOperations_Operation extends Message<ClientWithOperations_Operation> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  constructor(data?: PartialMessage<ClientWithOperations_Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ClientWithOperations.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientWithOperations_Operation {
    return new ClientWithOperations_Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientWithOperations_Operation {
    return new ClientWithOperations_Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientWithOperations_Operation {
    return new ClientWithOperations_Operation().fromJsonString(jsonString, options);
  }

  static equals(a: ClientWithOperations_Operation | PlainMessage<ClientWithOperations_Operation> | undefined, b: ClientWithOperations_Operation | PlainMessage<ClientWithOperations_Operation> | undefined): boolean {
    return proto3.util.equals(ClientWithOperations_Operation, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.FieldUsageMeta
 */
export class FieldUsageMeta extends Message<FieldUsageMeta> {
  /**
   * @generated from field: repeated string subgraph_ids = 1;
   */
  subgraphIds: string[] = [];

  /**
   * @generated from field: string firstSeenTimestamp = 2;
   */
  firstSeenTimestamp = "";

  /**
   * @generated from field: string latestSeenTimestamp = 3;
   */
  latestSeenTimestamp = "";

  constructor(data?: PartialMessage<FieldUsageMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.FieldUsageMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subgraph_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "firstSeenTimestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latestSeenTimestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldUsageMeta {
    return new FieldUsageMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldUsageMeta {
    return new FieldUsageMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldUsageMeta {
    return new FieldUsageMeta().fromJsonString(jsonString, options);
  }

  static equals(a: FieldUsageMeta | PlainMessage<FieldUsageMeta> | undefined, b: FieldUsageMeta | PlainMessage<FieldUsageMeta> | undefined): boolean {
    return proto3.util.equals(FieldUsageMeta, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetFieldUsageResponse
 */
export class GetFieldUsageResponse extends Message<GetFieldUsageResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.RequestSeriesItem request_series = 2;
   */
  requestSeries: RequestSeriesItem[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.ClientWithOperations clients = 3;
   */
  clients: ClientWithOperations[] = [];

  /**
   * @generated from field: wg.cosmo.platform.v1.FieldUsageMeta meta = 4;
   */
  meta?: FieldUsageMeta;

  constructor(data?: PartialMessage<GetFieldUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetFieldUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "request_series", kind: "message", T: RequestSeriesItem, repeated: true },
    { no: 3, name: "clients", kind: "message", T: ClientWithOperations, repeated: true },
    { no: 4, name: "meta", kind: "message", T: FieldUsageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFieldUsageResponse {
    return new GetFieldUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFieldUsageResponse {
    return new GetFieldUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFieldUsageResponse {
    return new GetFieldUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFieldUsageResponse | PlainMessage<GetFieldUsageResponse> | undefined, b: GetFieldUsageResponse | PlainMessage<GetFieldUsageResponse> | undefined): boolean {
    return proto3.util.equals(GetFieldUsageResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateDiscussionRequest
 */
export class CreateDiscussionRequest extends Message<CreateDiscussionRequest> {
  /**
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  /**
   * @generated from field: string content_markdown = 2;
   */
  contentMarkdown = "";

  /**
   * @generated from field: string content_json = 3;
   */
  contentJson = "";

  /**
   * @generated from field: string schema_version_id = 4;
   */
  schemaVersionId = "";

  /**
   * @generated from field: int32 reference_line = 5;
   */
  referenceLine = 0;

  constructor(data?: PartialMessage<CreateDiscussionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateDiscussionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reference_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDiscussionRequest {
    return new CreateDiscussionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDiscussionRequest {
    return new CreateDiscussionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDiscussionRequest {
    return new CreateDiscussionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDiscussionRequest | PlainMessage<CreateDiscussionRequest> | undefined, b: CreateDiscussionRequest | PlainMessage<CreateDiscussionRequest> | undefined): boolean {
    return proto3.util.equals(CreateDiscussionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateDiscussionResponse
 */
export class CreateDiscussionResponse extends Message<CreateDiscussionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateDiscussionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateDiscussionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDiscussionResponse {
    return new CreateDiscussionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDiscussionResponse {
    return new CreateDiscussionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDiscussionResponse {
    return new CreateDiscussionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDiscussionResponse | PlainMessage<CreateDiscussionResponse> | undefined, b: CreateDiscussionResponse | PlainMessage<CreateDiscussionResponse> | undefined): boolean {
    return proto3.util.equals(CreateDiscussionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateDiscussionCommentRequest
 */
export class UpdateDiscussionCommentRequest extends Message<UpdateDiscussionCommentRequest> {
  /**
   * @generated from field: string discussion_id = 1;
   */
  discussionId = "";

  /**
   * @generated from field: string comment_id = 2;
   */
  commentId = "";

  /**
   * @generated from field: string content_markdown = 3;
   */
  contentMarkdown = "";

  /**
   * @generated from field: string content_json = 4;
   */
  contentJson = "";

  constructor(data?: PartialMessage<UpdateDiscussionCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateDiscussionCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discussion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDiscussionCommentRequest {
    return new UpdateDiscussionCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDiscussionCommentRequest {
    return new UpdateDiscussionCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDiscussionCommentRequest {
    return new UpdateDiscussionCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDiscussionCommentRequest | PlainMessage<UpdateDiscussionCommentRequest> | undefined, b: UpdateDiscussionCommentRequest | PlainMessage<UpdateDiscussionCommentRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDiscussionCommentRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.UpdateDiscussionCommentResponse
 */
export class UpdateDiscussionCommentResponse extends Message<UpdateDiscussionCommentResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<UpdateDiscussionCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.UpdateDiscussionCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDiscussionCommentResponse {
    return new UpdateDiscussionCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDiscussionCommentResponse {
    return new UpdateDiscussionCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDiscussionCommentResponse {
    return new UpdateDiscussionCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDiscussionCommentResponse | PlainMessage<UpdateDiscussionCommentResponse> | undefined, b: UpdateDiscussionCommentResponse | PlainMessage<UpdateDiscussionCommentResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDiscussionCommentResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteDiscussionCommentRequest
 */
export class DeleteDiscussionCommentRequest extends Message<DeleteDiscussionCommentRequest> {
  /**
   * @generated from field: string discussion_id = 1;
   */
  discussionId = "";

  /**
   * @generated from field: string comment_id = 2;
   */
  commentId = "";

  constructor(data?: PartialMessage<DeleteDiscussionCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteDiscussionCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discussion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDiscussionCommentRequest {
    return new DeleteDiscussionCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDiscussionCommentRequest {
    return new DeleteDiscussionCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDiscussionCommentRequest {
    return new DeleteDiscussionCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDiscussionCommentRequest | PlainMessage<DeleteDiscussionCommentRequest> | undefined, b: DeleteDiscussionCommentRequest | PlainMessage<DeleteDiscussionCommentRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDiscussionCommentRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteDiscussionCommentResponse
 */
export class DeleteDiscussionCommentResponse extends Message<DeleteDiscussionCommentResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteDiscussionCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteDiscussionCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDiscussionCommentResponse {
    return new DeleteDiscussionCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDiscussionCommentResponse {
    return new DeleteDiscussionCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDiscussionCommentResponse {
    return new DeleteDiscussionCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDiscussionCommentResponse | PlainMessage<DeleteDiscussionCommentResponse> | undefined, b: DeleteDiscussionCommentResponse | PlainMessage<DeleteDiscussionCommentResponse> | undefined): boolean {
    return proto3.util.equals(DeleteDiscussionCommentResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ReplyToDiscussionRequest
 */
export class ReplyToDiscussionRequest extends Message<ReplyToDiscussionRequest> {
  /**
   * @generated from field: string discussion_id = 2;
   */
  discussionId = "";

  /**
   * @generated from field: string content_markdown = 3;
   */
  contentMarkdown = "";

  /**
   * @generated from field: string content_json = 4;
   */
  contentJson = "";

  constructor(data?: PartialMessage<ReplyToDiscussionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ReplyToDiscussionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "discussion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplyToDiscussionRequest {
    return new ReplyToDiscussionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplyToDiscussionRequest {
    return new ReplyToDiscussionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplyToDiscussionRequest {
    return new ReplyToDiscussionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReplyToDiscussionRequest | PlainMessage<ReplyToDiscussionRequest> | undefined, b: ReplyToDiscussionRequest | PlainMessage<ReplyToDiscussionRequest> | undefined): boolean {
    return proto3.util.equals(ReplyToDiscussionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ReplyToDiscussionResponse
 */
export class ReplyToDiscussionResponse extends Message<ReplyToDiscussionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<ReplyToDiscussionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ReplyToDiscussionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplyToDiscussionResponse {
    return new ReplyToDiscussionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplyToDiscussionResponse {
    return new ReplyToDiscussionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplyToDiscussionResponse {
    return new ReplyToDiscussionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReplyToDiscussionResponse | PlainMessage<ReplyToDiscussionResponse> | undefined, b: ReplyToDiscussionResponse | PlainMessage<ReplyToDiscussionResponse> | undefined): boolean {
    return proto3.util.equals(ReplyToDiscussionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAllDiscussionsRequest
 */
export class GetAllDiscussionsRequest extends Message<GetAllDiscussionsRequest> {
  /**
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  /**
   * @generated from field: optional string schema_version_id = 2;
   */
  schemaVersionId?: string;

  constructor(data?: PartialMessage<GetAllDiscussionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAllDiscussionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllDiscussionsRequest {
    return new GetAllDiscussionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllDiscussionsRequest {
    return new GetAllDiscussionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllDiscussionsRequest {
    return new GetAllDiscussionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllDiscussionsRequest | PlainMessage<GetAllDiscussionsRequest> | undefined, b: GetAllDiscussionsRequest | PlainMessage<GetAllDiscussionsRequest> | undefined): boolean {
    return proto3.util.equals(GetAllDiscussionsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Discussion
 */
export class Discussion extends Message<Discussion> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string schema_version_id = 2;
   */
  schemaVersionId = "";

  /**
   * @generated from field: string target_id = 3;
   */
  targetId = "";

  /**
   * @generated from field: int32 reference_line = 4;
   */
  referenceLine = 0;

  /**
   * @generated from field: wg.cosmo.platform.v1.DiscussionComment openingComment = 5;
   */
  openingComment?: DiscussionComment;

  /**
   * @generated from field: bool is_resolved = 6;
   */
  isResolved = false;

  constructor(data?: PartialMessage<Discussion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Discussion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reference_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "openingComment", kind: "message", T: DiscussionComment },
    { no: 6, name: "is_resolved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Discussion {
    return new Discussion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Discussion {
    return new Discussion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Discussion {
    return new Discussion().fromJsonString(jsonString, options);
  }

  static equals(a: Discussion | PlainMessage<Discussion> | undefined, b: Discussion | PlainMessage<Discussion> | undefined): boolean {
    return proto3.util.equals(Discussion, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DiscussionComment
 */
export class DiscussionComment extends Message<DiscussionComment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content_json = 2;
   */
  contentJson = "";

  /**
   * @generated from field: string created_by = 3;
   */
  createdBy = "";

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt = "";

  /**
   * @generated from field: optional string updated_at = 5;
   */
  updatedAt?: string;

  /**
   * @generated from field: bool is_deleted = 6;
   */
  isDeleted = false;

  constructor(data?: PartialMessage<DiscussionComment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DiscussionComment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "is_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscussionComment {
    return new DiscussionComment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscussionComment {
    return new DiscussionComment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscussionComment {
    return new DiscussionComment().fromJsonString(jsonString, options);
  }

  static equals(a: DiscussionComment | PlainMessage<DiscussionComment> | undefined, b: DiscussionComment | PlainMessage<DiscussionComment> | undefined): boolean {
    return proto3.util.equals(DiscussionComment, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetAllDiscussionsResponse
 */
export class GetAllDiscussionsResponse extends Message<GetAllDiscussionsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Discussion discussions = 2;
   */
  discussions: Discussion[] = [];

  constructor(data?: PartialMessage<GetAllDiscussionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetAllDiscussionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "discussions", kind: "message", T: Discussion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllDiscussionsResponse {
    return new GetAllDiscussionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllDiscussionsResponse {
    return new GetAllDiscussionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllDiscussionsResponse {
    return new GetAllDiscussionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllDiscussionsResponse | PlainMessage<GetAllDiscussionsResponse> | undefined, b: GetAllDiscussionsResponse | PlainMessage<GetAllDiscussionsResponse> | undefined): boolean {
    return proto3.util.equals(GetAllDiscussionsResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDiscussionRequest
 */
export class GetDiscussionRequest extends Message<GetDiscussionRequest> {
  /**
   * @generated from field: string discussion_id = 1;
   */
  discussionId = "";

  constructor(data?: PartialMessage<GetDiscussionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDiscussionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discussion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscussionRequest {
    return new GetDiscussionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscussionRequest {
    return new GetDiscussionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscussionRequest {
    return new GetDiscussionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscussionRequest | PlainMessage<GetDiscussionRequest> | undefined, b: GetDiscussionRequest | PlainMessage<GetDiscussionRequest> | undefined): boolean {
    return proto3.util.equals(GetDiscussionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDiscussionResponse
 */
export class GetDiscussionResponse extends Message<GetDiscussionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.Discussion discussion = 2;
   */
  discussion?: Discussion;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DiscussionComment comments = 3;
   */
  comments: DiscussionComment[] = [];

  constructor(data?: PartialMessage<GetDiscussionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDiscussionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "discussion", kind: "message", T: Discussion },
    { no: 3, name: "comments", kind: "message", T: DiscussionComment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscussionResponse {
    return new GetDiscussionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscussionResponse {
    return new GetDiscussionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscussionResponse {
    return new GetDiscussionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscussionResponse | PlainMessage<GetDiscussionResponse> | undefined, b: GetDiscussionResponse | PlainMessage<GetDiscussionResponse> | undefined): boolean {
    return proto3.util.equals(GetDiscussionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDiscussionSchemasRequest
 */
export class GetDiscussionSchemasRequest extends Message<GetDiscussionSchemasRequest> {
  /**
   * @generated from field: string discussion_id = 1;
   */
  discussionId = "";

  constructor(data?: PartialMessage<GetDiscussionSchemasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDiscussionSchemasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discussion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscussionSchemasRequest {
    return new GetDiscussionSchemasRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscussionSchemasRequest {
    return new GetDiscussionSchemasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscussionSchemasRequest {
    return new GetDiscussionSchemasRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscussionSchemasRequest | PlainMessage<GetDiscussionSchemasRequest> | undefined, b: GetDiscussionSchemasRequest | PlainMessage<GetDiscussionSchemasRequest> | undefined): boolean {
    return proto3.util.equals(GetDiscussionSchemasRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDiscussionSchemasResponse
 */
export class GetDiscussionSchemasResponse extends Message<GetDiscussionSchemasResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: wg.cosmo.platform.v1.GetDiscussionSchemasResponse.Schemas schemas = 4;
   */
  schemas?: GetDiscussionSchemasResponse_Schemas;

  constructor(data?: PartialMessage<GetDiscussionSchemasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDiscussionSchemasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 4, name: "schemas", kind: "message", T: GetDiscussionSchemasResponse_Schemas },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscussionSchemasResponse {
    return new GetDiscussionSchemasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscussionSchemasResponse {
    return new GetDiscussionSchemasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscussionSchemasResponse {
    return new GetDiscussionSchemasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscussionSchemasResponse | PlainMessage<GetDiscussionSchemasResponse> | undefined, b: GetDiscussionSchemasResponse | PlainMessage<GetDiscussionSchemasResponse> | undefined): boolean {
    return proto3.util.equals(GetDiscussionSchemasResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetDiscussionSchemasResponse.Schemas
 */
export class GetDiscussionSchemasResponse_Schemas extends Message<GetDiscussionSchemasResponse_Schemas> {
  /**
   * @generated from field: string reference = 1;
   */
  reference = "";

  /**
   * @generated from field: string latest = 2;
   */
  latest = "";

  constructor(data?: PartialMessage<GetDiscussionSchemasResponse_Schemas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetDiscussionSchemasResponse.Schemas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscussionSchemasResponse_Schemas {
    return new GetDiscussionSchemasResponse_Schemas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscussionSchemasResponse_Schemas {
    return new GetDiscussionSchemasResponse_Schemas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscussionSchemasResponse_Schemas {
    return new GetDiscussionSchemasResponse_Schemas().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscussionSchemasResponse_Schemas | PlainMessage<GetDiscussionSchemasResponse_Schemas> | undefined, b: GetDiscussionSchemasResponse_Schemas | PlainMessage<GetDiscussionSchemasResponse_Schemas> | undefined): boolean {
    return proto3.util.equals(GetDiscussionSchemasResponse_Schemas, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SetDiscussionResolutionRequest
 */
export class SetDiscussionResolutionRequest extends Message<SetDiscussionResolutionRequest> {
  /**
   * @generated from field: string discussion_id = 1;
   */
  discussionId = "";

  /**
   * @generated from field: bool is_resolved = 2;
   */
  isResolved = false;

  constructor(data?: PartialMessage<SetDiscussionResolutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SetDiscussionResolutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discussion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_resolved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDiscussionResolutionRequest {
    return new SetDiscussionResolutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDiscussionResolutionRequest {
    return new SetDiscussionResolutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDiscussionResolutionRequest {
    return new SetDiscussionResolutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetDiscussionResolutionRequest | PlainMessage<SetDiscussionResolutionRequest> | undefined, b: SetDiscussionResolutionRequest | PlainMessage<SetDiscussionResolutionRequest> | undefined): boolean {
    return proto3.util.equals(SetDiscussionResolutionRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.SetDiscussionResolutionResponse
 */
export class SetDiscussionResolutionResponse extends Message<SetDiscussionResolutionResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<SetDiscussionResolutionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.SetDiscussionResolutionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDiscussionResolutionResponse {
    return new SetDiscussionResolutionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDiscussionResolutionResponse {
    return new SetDiscussionResolutionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDiscussionResolutionResponse {
    return new SetDiscussionResolutionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetDiscussionResolutionResponse | PlainMessage<SetDiscussionResolutionResponse> | undefined, b: SetDiscussionResolutionResponse | PlainMessage<SetDiscussionResolutionResponse> | undefined): boolean {
    return proto3.util.equals(SetDiscussionResolutionResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetConfigRequest
 */
export class GetConfigRequest extends Message<GetConfigRequest> {
  /**
   * @generated from field: string graph_name = 1;
   */
  graphName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined, b: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateNamespaceRequest
 */
export class CreateNamespaceRequest extends Message<CreateNamespaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined, b: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.CreateNamespaceResponse
 */
export class CreateNamespaceResponse extends Message<CreateNamespaceResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<CreateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.CreateNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined, b: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteNamespaceRequest
 */
export class DeleteNamespaceRequest extends Message<DeleteNamespaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNamespaceRequest | PlainMessage<DeleteNamespaceRequest> | undefined, b: DeleteNamespaceRequest | PlainMessage<DeleteNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteNamespaceRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.DeleteNamespaceResponse
 */
export class DeleteNamespaceResponse extends Message<DeleteNamespaceResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<DeleteNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.DeleteNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNamespaceResponse | PlainMessage<DeleteNamespaceResponse> | undefined, b: DeleteNamespaceResponse | PlainMessage<DeleteNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteNamespaceResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RenameNamespaceRequest
 */
export class RenameNamespaceRequest extends Message<RenameNamespaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string new_name = 2;
   */
  newName = "";

  constructor(data?: PartialMessage<RenameNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RenameNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameNamespaceRequest {
    return new RenameNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameNamespaceRequest {
    return new RenameNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameNamespaceRequest {
    return new RenameNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameNamespaceRequest | PlainMessage<RenameNamespaceRequest> | undefined, b: RenameNamespaceRequest | PlainMessage<RenameNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(RenameNamespaceRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.RenameNamespaceResponse
 */
export class RenameNamespaceResponse extends Message<RenameNamespaceResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<RenameNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.RenameNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameNamespaceResponse {
    return new RenameNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameNamespaceResponse {
    return new RenameNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameNamespaceResponse {
    return new RenameNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameNamespaceResponse | PlainMessage<RenameNamespaceResponse> | undefined, b: RenameNamespaceResponse | PlainMessage<RenameNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(RenameNamespaceResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Namespace
 */
export class Namespace extends Message<Namespace> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Namespace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Namespace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Namespace {
    return new Namespace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Namespace {
    return new Namespace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Namespace {
    return new Namespace().fromJsonString(jsonString, options);
  }

  static equals(a: Namespace | PlainMessage<Namespace> | undefined, b: Namespace | PlainMessage<Namespace> | undefined): boolean {
    return proto3.util.equals(Namespace, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetNamespacesRequest
 */
export class GetNamespacesRequest extends Message<GetNamespacesRequest> {
  constructor(data?: PartialMessage<GetNamespacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetNamespacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespacesRequest {
    return new GetNamespacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespacesRequest {
    return new GetNamespacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespacesRequest {
    return new GetNamespacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespacesRequest | PlainMessage<GetNamespacesRequest> | undefined, b: GetNamespacesRequest | PlainMessage<GetNamespacesRequest> | undefined): boolean {
    return proto3.util.equals(GetNamespacesRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetNamespacesResponse
 */
export class GetNamespacesResponse extends Message<GetNamespacesResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Namespace namespaces = 2;
   */
  namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<GetNamespacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetNamespacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespacesResponse {
    return new GetNamespacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespacesResponse {
    return new GetNamespacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespacesResponse {
    return new GetNamespacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespacesResponse | PlainMessage<GetNamespacesResponse> | undefined, b: GetNamespacesResponse | PlainMessage<GetNamespacesResponse> | undefined): boolean {
    return proto3.util.equals(GetNamespacesResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MoveGraphRequest
 */
export class MoveGraphRequest extends Message<MoveGraphRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string new_namespace = 3;
   */
  newNamespace = "";

  constructor(data?: PartialMessage<MoveGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MoveGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveGraphRequest {
    return new MoveGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveGraphRequest {
    return new MoveGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveGraphRequest {
    return new MoveGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MoveGraphRequest | PlainMessage<MoveGraphRequest> | undefined, b: MoveGraphRequest | PlainMessage<MoveGraphRequest> | undefined): boolean {
    return proto3.util.equals(MoveGraphRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MoveGraphResponse
 */
export class MoveGraphResponse extends Message<MoveGraphResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.CompositionError compositionErrors = 2;
   */
  compositionErrors: CompositionError[] = [];

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.DeploymentError deploymentErrors = 3;
   */
  deploymentErrors: DeploymentError[] = [];

  constructor(data?: PartialMessage<MoveGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MoveGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "compositionErrors", kind: "message", T: CompositionError, repeated: true },
    { no: 3, name: "deploymentErrors", kind: "message", T: DeploymentError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveGraphResponse {
    return new MoveGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveGraphResponse {
    return new MoveGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveGraphResponse {
    return new MoveGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MoveGraphResponse | PlainMessage<MoveGraphResponse> | undefined, b: MoveGraphResponse | PlainMessage<MoveGraphResponse> | undefined): boolean {
    return proto3.util.equals(MoveGraphResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetNamespaceLintConfigRequest
 */
export class GetNamespaceLintConfigRequest extends Message<GetNamespaceLintConfigRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  constructor(data?: PartialMessage<GetNamespaceLintConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetNamespaceLintConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespaceLintConfigRequest {
    return new GetNamespaceLintConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespaceLintConfigRequest {
    return new GetNamespaceLintConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespaceLintConfigRequest {
    return new GetNamespaceLintConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespaceLintConfigRequest | PlainMessage<GetNamespaceLintConfigRequest> | undefined, b: GetNamespaceLintConfigRequest | PlainMessage<GetNamespaceLintConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetNamespaceLintConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetNamespaceLintConfigResponse
 */
export class GetNamespaceLintConfigResponse extends Message<GetNamespaceLintConfigResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: bool linterEnabled = 2;
   */
  linterEnabled = false;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.LintConfig configs = 3;
   */
  configs: LintConfig[] = [];

  constructor(data?: PartialMessage<GetNamespaceLintConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetNamespaceLintConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "linterEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "configs", kind: "message", T: LintConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespaceLintConfigResponse {
    return new GetNamespaceLintConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespaceLintConfigResponse {
    return new GetNamespaceLintConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespaceLintConfigResponse {
    return new GetNamespaceLintConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespaceLintConfigResponse | PlainMessage<GetNamespaceLintConfigResponse> | undefined, b: GetNamespaceLintConfigResponse | PlainMessage<GetNamespaceLintConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetNamespaceLintConfigResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.EnableLintingForTheNamespaceRequest
 */
export class EnableLintingForTheNamespaceRequest extends Message<EnableLintingForTheNamespaceRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: bool enableLinting = 2;
   */
  enableLinting = false;

  constructor(data?: PartialMessage<EnableLintingForTheNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.EnableLintingForTheNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enableLinting", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableLintingForTheNamespaceRequest {
    return new EnableLintingForTheNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableLintingForTheNamespaceRequest {
    return new EnableLintingForTheNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableLintingForTheNamespaceRequest {
    return new EnableLintingForTheNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EnableLintingForTheNamespaceRequest | PlainMessage<EnableLintingForTheNamespaceRequest> | undefined, b: EnableLintingForTheNamespaceRequest | PlainMessage<EnableLintingForTheNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(EnableLintingForTheNamespaceRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.EnableLintingForTheNamespaceResponse
 */
export class EnableLintingForTheNamespaceResponse extends Message<EnableLintingForTheNamespaceResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<EnableLintingForTheNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.EnableLintingForTheNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableLintingForTheNamespaceResponse {
    return new EnableLintingForTheNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableLintingForTheNamespaceResponse {
    return new EnableLintingForTheNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableLintingForTheNamespaceResponse {
    return new EnableLintingForTheNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EnableLintingForTheNamespaceResponse | PlainMessage<EnableLintingForTheNamespaceResponse> | undefined, b: EnableLintingForTheNamespaceResponse | PlainMessage<EnableLintingForTheNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(EnableLintingForTheNamespaceResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.LintConfig
 */
export class LintConfig extends Message<LintConfig> {
  /**
   * @generated from field: string ruleName = 1;
   */
  ruleName = "";

  /**
   * @generated from field: wg.cosmo.platform.v1.LintSeverity severityLevel = 2;
   */
  severityLevel = LintSeverity.warn;

  constructor(data?: PartialMessage<LintConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.LintConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ruleName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "severityLevel", kind: "enum", T: proto3.getEnumType(LintSeverity) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LintConfig {
    return new LintConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LintConfig {
    return new LintConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LintConfig {
    return new LintConfig().fromJsonString(jsonString, options);
  }

  static equals(a: LintConfig | PlainMessage<LintConfig> | undefined, b: LintConfig | PlainMessage<LintConfig> | undefined): boolean {
    return proto3.util.equals(LintConfig, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ConfigureNamespaceLintConfigRequest
 */
export class ConfigureNamespaceLintConfigRequest extends Message<ConfigureNamespaceLintConfigRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.LintConfig configs = 2;
   */
  configs: LintConfig[] = [];

  constructor(data?: PartialMessage<ConfigureNamespaceLintConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ConfigureNamespaceLintConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configs", kind: "message", T: LintConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureNamespaceLintConfigRequest {
    return new ConfigureNamespaceLintConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureNamespaceLintConfigRequest {
    return new ConfigureNamespaceLintConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureNamespaceLintConfigRequest {
    return new ConfigureNamespaceLintConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureNamespaceLintConfigRequest | PlainMessage<ConfigureNamespaceLintConfigRequest> | undefined, b: ConfigureNamespaceLintConfigRequest | PlainMessage<ConfigureNamespaceLintConfigRequest> | undefined): boolean {
    return proto3.util.equals(ConfigureNamespaceLintConfigRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.ConfigureNamespaceLintConfigResponse
 */
export class ConfigureNamespaceLintConfigResponse extends Message<ConfigureNamespaceLintConfigResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<ConfigureNamespaceLintConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.ConfigureNamespaceLintConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureNamespaceLintConfigResponse {
    return new ConfigureNamespaceLintConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureNamespaceLintConfigResponse {
    return new ConfigureNamespaceLintConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureNamespaceLintConfigResponse {
    return new ConfigureNamespaceLintConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureNamespaceLintConfigResponse | PlainMessage<ConfigureNamespaceLintConfigResponse> | undefined, b: ConfigureNamespaceLintConfigResponse | PlainMessage<ConfigureNamespaceLintConfigResponse> | undefined): boolean {
    return proto3.util.equals(ConfigureNamespaceLintConfigResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MigrateMonographRequest
 */
export class MigrateMonographRequest extends Message<MigrateMonographRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<MigrateMonographRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MigrateMonographRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateMonographRequest {
    return new MigrateMonographRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateMonographRequest {
    return new MigrateMonographRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateMonographRequest {
    return new MigrateMonographRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateMonographRequest | PlainMessage<MigrateMonographRequest> | undefined, b: MigrateMonographRequest | PlainMessage<MigrateMonographRequest> | undefined): boolean {
    return proto3.util.equals(MigrateMonographRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.MigrateMonographResponse
 */
export class MigrateMonographResponse extends Message<MigrateMonographResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  constructor(data?: PartialMessage<MigrateMonographResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.MigrateMonographResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateMonographResponse {
    return new MigrateMonographResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateMonographResponse {
    return new MigrateMonographResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateMonographResponse {
    return new MigrateMonographResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateMonographResponse | PlainMessage<MigrateMonographResponse> | undefined, b: MigrateMonographResponse | PlainMessage<MigrateMonographResponse> | undefined): boolean {
    return proto3.util.equals(MigrateMonographResponse, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetUserAccessiblePermissionsRequest
 */
export class GetUserAccessiblePermissionsRequest extends Message<GetUserAccessiblePermissionsRequest> {
  constructor(data?: PartialMessage<GetUserAccessiblePermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetUserAccessiblePermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccessiblePermissionsRequest {
    return new GetUserAccessiblePermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccessiblePermissionsRequest {
    return new GetUserAccessiblePermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccessiblePermissionsRequest {
    return new GetUserAccessiblePermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccessiblePermissionsRequest | PlainMessage<GetUserAccessiblePermissionsRequest> | undefined, b: GetUserAccessiblePermissionsRequest | PlainMessage<GetUserAccessiblePermissionsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserAccessiblePermissionsRequest, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.Permission
 */
export class Permission extends Message<Permission> {
  /**
   * @generated from field: string displayName = 1;
   */
  displayName = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Permission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.Permission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "displayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permission {
    return new Permission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJsonString(jsonString, options);
  }

  static equals(a: Permission | PlainMessage<Permission> | undefined, b: Permission | PlainMessage<Permission> | undefined): boolean {
    return proto3.util.equals(Permission, a, b);
  }
}

/**
 * @generated from message wg.cosmo.platform.v1.GetUserAccessiblePermissionsResponse
 */
export class GetUserAccessiblePermissionsResponse extends Message<GetUserAccessiblePermissionsResponse> {
  /**
   * @generated from field: wg.cosmo.platform.v1.Response response = 1;
   */
  response?: Response;

  /**
   * @generated from field: repeated wg.cosmo.platform.v1.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  constructor(data?: PartialMessage<GetUserAccessiblePermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.platform.v1.GetUserAccessiblePermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Response },
    { no: 2, name: "permissions", kind: "message", T: Permission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccessiblePermissionsResponse {
    return new GetUserAccessiblePermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccessiblePermissionsResponse {
    return new GetUserAccessiblePermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccessiblePermissionsResponse {
    return new GetUserAccessiblePermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccessiblePermissionsResponse | PlainMessage<GetUserAccessiblePermissionsResponse> | undefined, b: GetUserAccessiblePermissionsResponse | PlainMessage<GetUserAccessiblePermissionsResponse> | undefined): boolean {
    return proto3.util.equals(GetUserAccessiblePermissionsResponse, a, b);
  }
}

