# {name} Plugin - Cosmo Router Example

This repository contains a simple Cosmo Router plugin that showcases how to design APIs with GraphQL Federation but implement them using gRPC methods instead of traditional resolvers.

## What is this demo about?

This demo illustrates a key pattern in Cosmo Router plugin development:
- **Design with GraphQL**: Define your API using GraphQL schema
- **Implement with gRPC**: Instead of writing GraphQL resolvers, implement gRPC service methods
- **Bridge the gap**: The Cosmo router connects GraphQL operations to your gRPC implementations
- **Test-Driven Development**: Test your gRPC service implementation with gRPC client and server without external dependencies

The plugin demonstrates:
- How GraphQL types and operations map to gRPC RPC methods
- Simple "Hello World" implementation
- Proper structure for a Cosmo Router plugin
- How to test your gRPC implementation with gRPC client and server without external dependencies

{readmeText}

## üîß Customizing Your Plugin

- Change the GraphQL schema in `src/schema.graphql` and regenerate the code with `make generate`.
- Implement the changes in `src/{mainFile}` and test your implementation with `make test`.
- Compose your supergraph with `make compose` and restart the router with `make start`.

## üìö Learn More

For more information about Cosmo and building router plugins:
- [Cosmo Documentation](https://cosmo-docs.wundergraph.com/)
- [Cosmo Router Plugins Guide](https://cosmo-docs.wundergraph.com/connect/plugins)

---

<p align="center">Made with ‚ù§Ô∏è by <a href="https://wundergraph.com">WunderGraph</a></p>