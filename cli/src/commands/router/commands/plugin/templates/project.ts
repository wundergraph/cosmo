// Project scaffolding templates (templating is done by pupa)
// This file is auto-generated. Do not edit manually.

const gitignore = "# Ignore the binary files\nrelease/\n\n";

const makefile = "";

const readmeMd = "# {name} - Cosmo Router Plugin Project\n\nDesign your API with GraphQL Federation and implement with gRPC using Cosmo Router Plugins\n\n## ✨ Features\n\n- **GraphQL Schema + gRPC Implementation**: Design your API with GraphQL SDL and implement it using gRPC methods\n- **Embedded Subgraphs**: Run subgraphs directly inside the Cosmo Router for improved performance\n- **End-to-End Type Safety**: Auto-generated Go code from your GraphQL schema\n- **Simplified Testing**: Unit test your gRPC implementation with no external dependencies\n\n## 📝 Project Structure\n\nThis project sets up a complete environment for developing and testing Cosmo Router plugins:\n\n```\nproject-root/\n├── plugins/          # Contains all the plugins\n├── graph.yaml        # Supergraph configuration\n├── config.json       # Composed supergraph (generated)\n├── config.yaml       # Router configuration\n├── release/          # Router binary location\n│   └── router        # Router binary\n└── Makefile          # Automation scripts\n```\n\n## 🚀 Getting Started\n\n### Setup\n\n1. Clone this repository\n2. Run the included Makefile commands\n\n### Available Make Commands\n\nThe Makefile automates the entire workflow with these commands:\n\n- `make`: Runs all commands in sequence (download, build, compose, start)\n- `make download`: Downloads the Cosmo Router binary to the `release` directory\n- `make build`: Builds the plugin from your source code with debug symbols enabled\n- `make generate`: Generates Go code from your GraphQL schema without compilation\n- `make test`: Validates your implementation with integration tests\n- `make compose`: Composes your supergraph from the configuration in `graph.yaml`\n- `make start`: Starts the Cosmo Router with your plugin\n\n### Quick Start\n\nTo get everything running with a single command:\n\n```bash\nmake\n```\n\nThis will:\n1. Download the Cosmo Router binary\n2. Build your plugin from source\n3. Compose your supergraph\n4. Start the router on port 3010\n\n## 🧪 Testing Your Plugin\n\nOnce running, open the GraphQL Playground at [http://localhost:3010](http://localhost:3010) and try this query:\n\n```graphql\nquery {\n  hello(name: \"World\") {\n    id\n    name\n  }\n}\n```\n\n## 🔧 Customizing Your Plugin\n\n1. Modify `src/schema.graphql` to define your GraphQL types and operations\n2. Edit `src/main.go` to implement the corresponding gRPC service methods\n3. Run `make generate` to regenerate code from your updated schema\n4. Run `make build` to compile your plugin\n5. Run `make test` to validate your implementation with integration tests\n6. Run `make compose` to update your supergraph\n7. Run `make start` to restart the router with your changes\n\n## 📚 Learn More\n\nFor more information about Cosmo and building router plugins:\n- [Cosmo Documentation](https://cosmo-docs.wundergraph.com/)\n- [Cosmo Router Plugins Guide](https://cosmo-docs.wundergraph.com/connect/plugins)\n\n---\n\n<p align=\"center\">Made with ❤️ by <a href=\"https://wundergraph.com\">WunderGraph</a></p>\n\n";

const configYaml = "# yaml-language-server: $schema=https://raw.githubusercontent.com/wundergraph/cosmo/main/router/pkg/config/config.schema.json\n\nversion: \"1\"\n\nlisten_addr: localhost:3010\n\ndev_mode: true\n\nexecution_config:\n  file:\n    path: config.json\n\nplugins:\n  enabled: true\n  path: plugins\n\n";

const graphYaml = "version: 1\nsubgraphs:\n  # Add your other subgraphs here\n  - plugin:\n      version: 0.0.1\n      path: plugins/{originalPluginName}\n\n";

const graphConfig = "version: 1\nsubgraphs:\n  # Add your other subgraphs here\n  - plugin:\n      version: 0.0.1\n      path: plugins/{originalPluginName}\n\n";

const pluginReadmeMd = "# {name} Plugin - Cosmo Router Example\n\nThis repository contains a simple Cosmo Router plugin that showcases how to design APIs with GraphQL Federation but implement them using gRPC methods instead of traditional resolvers.\n\n## What is this demo about?\n\nThis demo illustrates a key pattern in Cosmo Router plugin development:\n- **Design with GraphQL**: Define your API using GraphQL schema\n- **Implement with gRPC**: Instead of writing GraphQL resolvers, implement gRPC service methods\n- **Bridge the gap**: The Cosmo router connects GraphQL operations to your gRPC implementations\n- **Test-Driven Development**: Test your gRPC service implementation with gRPC client and server without external dependencies\n\nThe plugin demonstrates:\n- How GraphQL types and operations map to gRPC RPC methods\n- Simple \"Hello World\" implementation\n- Proper structure for a Cosmo Router plugin\n- How to test your gRPC implementation with gRPC client and server without external dependencies\n\n## Getting Started\n\nPlugin structure:\n\n   ```\n    plugins/{originalPluginName}/\n    ├── go.mod                # Go module file with dependencies\n    ├── go.sum                # Go checksums file\n    ├── src/\n    │   ├── main.go           # Main plugin implementation\n    │   ├── main_test.go      # Tests for the plugin\n    │   └── schema.graphql    # GraphQL schema defining the API\n    ├── generated/            # Generated code (created during build)\n    └── bin/                  # Compiled binaries (created during build)\n        └── plugin            # The compiled plugin binary\n   ```\n\n## 🔧 Customizing Your Plugin\n\n- Change the GraphQL schema in `src/schema.graphql` and regenerate the code with `make generate`.\n- Implement the changes in `src/main.go` and test your implementation with `make test`.\n- Compose your supergraph with `make compose` and restart the router with `make start`.\n\n## 📚 Learn More\n\nFor more information about Cosmo and building router plugins:\n- [Cosmo Documentation](https://cosmo-docs.wundergraph.com/)\n- [Cosmo Router Plugins Guide](https://cosmo-docs.wundergraph.com/connect/plugins)\n\n---\n\n<p align=\"center\">Made with ❤️ by <a href=\"https://wundergraph.com\">WunderGraph</a></p>\n";

const projectReadme = "# {name} - Cosmo Router Plugin Project\n\nDesign your API with GraphQL Federation and implement with gRPC using Cosmo Router Plugins\n\n## ✨ Features\n\n- **GraphQL Schema + gRPC Implementation**: Design your API with GraphQL SDL and implement it using gRPC methods\n- **Embedded Subgraphs**: Run subgraphs directly inside the Cosmo Router for improved performance\n- **End-to-End Type Safety**: Auto-generated Go code from your GraphQL schema\n- **Simplified Testing**: Unit test your gRPC implementation with no external dependencies\n\n## 📝 Project Structure\n\nThis project sets up a complete environment for developing and testing Cosmo Router plugins:\n\n```\nproject-root/\n├── plugins/          # Contains all the plugins\n├── graph.yaml        # Supergraph configuration\n├── config.json       # Composed supergraph (generated)\n├── config.yaml       # Router configuration\n├── release/          # Router binary location\n│   └── router        # Router binary\n└── Makefile          # Automation scripts\n```\n\n## 🚀 Getting Started\n\n### Setup\n\n1. Clone this repository\n2. Run the included Makefile commands\n\n### Available Make Commands\n\nThe Makefile automates the entire workflow with these commands:\n\n- `make`: Runs all commands in sequence (download, build, compose, start)\n- `make download`: Downloads the Cosmo Router binary to the `release` directory\n- `make build`: Builds the plugin from your source code with debug symbols enabled\n- `make generate`: Generates Go code from your GraphQL schema without compilation\n- `make test`: Validates your implementation with integration tests\n- `make compose`: Composes your supergraph from the configuration in `graph.yaml`\n- `make start`: Starts the Cosmo Router with your plugin\n\n### Quick Start\n\nTo get everything running with a single command:\n\n```bash\nmake\n```\n\nThis will:\n1. Download the Cosmo Router binary\n2. Build your plugin from source\n3. Compose your supergraph\n4. Start the router on port 3010\n\n## 🧪 Testing Your Plugin\n\nOnce running, open the GraphQL Playground at [http://localhost:3010](http://localhost:3010) and try this query:\n\n```graphql\nquery {\n  hello(name: \"World\") {\n    id\n    name\n  }\n}\n```\n\n## 🔧 Customizing Your Plugin\n\n1. Modify `src/schema.graphql` to define your GraphQL types and operations\n2. Edit `src/main.go` to implement the corresponding gRPC service methods\n3. Run `make generate` to regenerate code from your updated schema\n4. Run `make build` to compile your plugin\n5. Run `make test` to validate your implementation with integration tests\n6. Run `make compose` to update your supergraph\n7. Run `make start` to restart the router with your changes\n\n## 📚 Learn More\n\nFor more information about Cosmo and building router plugins:\n- [Cosmo Documentation](https://cosmo-docs.wundergraph.com/)\n- [Cosmo Router Plugins Guide](https://cosmo-docs.wundergraph.com/connect/plugins)\n\n---\n\n<p align=\"center\">Made with ❤️ by <a href=\"https://wundergraph.com\">WunderGraph</a></p>\n\n";

const readme = "# {name} Plugin - Cosmo Router Example\n\nThis repository contains a simple Cosmo Router plugin that showcases how to design APIs with GraphQL Federation but implement them using gRPC methods instead of traditional resolvers.\n\n## What is this demo about?\n\nThis demo illustrates a key pattern in Cosmo Router plugin development:\n- **Design with GraphQL**: Define your API using GraphQL schema\n- **Implement with gRPC**: Instead of writing GraphQL resolvers, implement gRPC service methods\n- **Bridge the gap**: The Cosmo router connects GraphQL operations to your gRPC implementations\n- **Test-Driven Development**: Test your gRPC service implementation with gRPC client and server without external dependencies\n\nThe plugin demonstrates:\n- How GraphQL types and operations map to gRPC RPC methods\n- Simple \"Hello World\" implementation\n- Proper structure for a Cosmo Router plugin\n- How to test your gRPC implementation with gRPC client and server without external dependencies\n\n## Getting Started\n\nPlugin structure:\n\n   ```\n    plugins/{originalPluginName}/\n    ├── go.mod                # Go module file with dependencies\n    ├── go.sum                # Go checksums file\n    ├── src/\n    │   ├── main.go           # Main plugin implementation\n    │   ├── main_test.go      # Tests for the plugin\n    │   └── schema.graphql    # GraphQL schema defining the API\n    ├── generated/            # Generated code (created during build)\n    └── bin/                  # Compiled binaries (created during build)\n        └── plugin            # The compiled plugin binary\n   ```\n\n## 🔧 Customizing Your Plugin\n\n- Change the GraphQL schema in `src/schema.graphql` and regenerate the code with `make generate`.\n- Implement the changes in `src/main.go` and test your implementation with `make test`.\n- Compose your supergraph with `make compose` and restart the router with `make start`.\n\n## 📚 Learn More\n\nFor more information about Cosmo and building router plugins:\n- [Cosmo Documentation](https://cosmo-docs.wundergraph.com/)\n- [Cosmo Router Plugins Guide](https://cosmo-docs.wundergraph.com/connect/plugins)\n\n---\n\n<p align=\"center\">Made with ❤️ by <a href=\"https://wundergraph.com\">WunderGraph</a></p>\n";

const routerConfig = "# yaml-language-server: $schema=https://raw.githubusercontent.com/wundergraph/cosmo/main/router/pkg/config/config.schema.json\n\nversion: \"1\"\n\nlisten_addr: localhost:3010\n\ndev_mode: true\n\nexecution_config:\n  file:\n    path: config.json\n\nplugins:\n  enabled: true\n  path: plugins\n\n";

export default {
  gitignore,
  makefile,
  readmeMd,
  configYaml,
  graphYaml,
  graphConfig,
  pluginReadmeMd,
  projectReadme,
  readme,
  routerConfig,
};
