// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: generated/service.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FooService_QueryUser_FullMethodName              = "/service.FooService/QueryUser"
	FooService_QueryUsersByRole_FullMethodName       = "/service.FooService/QueryUsersByRole"
	FooService_MutationCreateUser_FullMethodName     = "/service.FooService/MutationCreateUser"
	FooService_MutationDeleteUser_FullMethodName     = "/service.FooService/MutationDeleteUser"
	FooService_MutationUpdateUserRole_FullMethodName = "/service.FooService/MutationUpdateUserRole"
)

// FooServiceClient is the client API for FooService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooServiceClient interface {
	QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error)
	QueryUsersByRole(ctx context.Context, in *QueryUsersByRoleRequest, opts ...grpc.CallOption) (*QueryUsersByRoleResponse, error)
	MutationCreateUser(ctx context.Context, in *MutationCreateUserRequest, opts ...grpc.CallOption) (*MutationCreateUserResponse, error)
	MutationDeleteUser(ctx context.Context, in *MutationDeleteUserRequest, opts ...grpc.CallOption) (*MutationDeleteUserResponse, error)
	MutationUpdateUserRole(ctx context.Context, in *MutationUpdateUserRoleRequest, opts ...grpc.CallOption) (*MutationUpdateUserRoleResponse, error)
}

type fooServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooServiceClient(cc grpc.ClientConnInterface) FooServiceClient {
	return &fooServiceClient{cc}
}

func (c *fooServiceClient) QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserResponse)
	err := c.cc.Invoke(ctx, FooService_QueryUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) QueryUsersByRole(ctx context.Context, in *QueryUsersByRoleRequest, opts ...grpc.CallOption) (*QueryUsersByRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUsersByRoleResponse)
	err := c.cc.Invoke(ctx, FooService_QueryUsersByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) MutationCreateUser(ctx context.Context, in *MutationCreateUserRequest, opts ...grpc.CallOption) (*MutationCreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationCreateUserResponse)
	err := c.cc.Invoke(ctx, FooService_MutationCreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) MutationDeleteUser(ctx context.Context, in *MutationDeleteUserRequest, opts ...grpc.CallOption) (*MutationDeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationDeleteUserResponse)
	err := c.cc.Invoke(ctx, FooService_MutationDeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) MutationUpdateUserRole(ctx context.Context, in *MutationUpdateUserRoleRequest, opts ...grpc.CallOption) (*MutationUpdateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationUpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, FooService_MutationUpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooServiceServer is the server API for FooService service.
// All implementations must embed UnimplementedFooServiceServer
// for forward compatibility.
type FooServiceServer interface {
	QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error)
	QueryUsersByRole(context.Context, *QueryUsersByRoleRequest) (*QueryUsersByRoleResponse, error)
	MutationCreateUser(context.Context, *MutationCreateUserRequest) (*MutationCreateUserResponse, error)
	MutationDeleteUser(context.Context, *MutationDeleteUserRequest) (*MutationDeleteUserResponse, error)
	MutationUpdateUserRole(context.Context, *MutationUpdateUserRoleRequest) (*MutationUpdateUserRoleResponse, error)
	mustEmbedUnimplementedFooServiceServer()
}

// UnimplementedFooServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFooServiceServer struct{}

func (UnimplementedFooServiceServer) QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedFooServiceServer) QueryUsersByRole(context.Context, *QueryUsersByRoleRequest) (*QueryUsersByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsersByRole not implemented")
}
func (UnimplementedFooServiceServer) MutationCreateUser(context.Context, *MutationCreateUserRequest) (*MutationCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationCreateUser not implemented")
}
func (UnimplementedFooServiceServer) MutationDeleteUser(context.Context, *MutationDeleteUserRequest) (*MutationDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationDeleteUser not implemented")
}
func (UnimplementedFooServiceServer) MutationUpdateUserRole(context.Context, *MutationUpdateUserRoleRequest) (*MutationUpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationUpdateUserRole not implemented")
}
func (UnimplementedFooServiceServer) mustEmbedUnimplementedFooServiceServer() {}
func (UnimplementedFooServiceServer) testEmbeddedByValue()                    {}

// UnsafeFooServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooServiceServer will
// result in compilation errors.
type UnsafeFooServiceServer interface {
	mustEmbedUnimplementedFooServiceServer()
}

func RegisterFooServiceServer(s grpc.ServiceRegistrar, srv FooServiceServer) {
	// If the following call pancis, it indicates UnimplementedFooServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FooService_ServiceDesc, srv)
}

func _FooService_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooService_QueryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).QueryUser(ctx, req.(*QueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_QueryUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsersByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).QueryUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooService_QueryUsersByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).QueryUsersByRole(ctx, req.(*QueryUsersByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_MutationCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).MutationCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooService_MutationCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).MutationCreateUser(ctx, req.(*MutationCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_MutationDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).MutationDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooService_MutationDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).MutationDeleteUser(ctx, req.(*MutationDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_MutationUpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationUpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).MutationUpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooService_MutationUpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).MutationUpdateUserRole(ctx, req.(*MutationUpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooService_ServiceDesc is the grpc.ServiceDesc for FooService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FooService",
	HandlerType: (*FooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUser",
			Handler:    _FooService_QueryUser_Handler,
		},
		{
			MethodName: "QueryUsersByRole",
			Handler:    _FooService_QueryUsersByRole_Handler,
		},
		{
			MethodName: "MutationCreateUser",
			Handler:    _FooService_MutationCreateUser_Handler,
		},
		{
			MethodName: "MutationDeleteUser",
			Handler:    _FooService_MutationDeleteUser_Handler,
		},
		{
			MethodName: "MutationUpdateUserRole",
			Handler:    _FooService_MutationUpdateUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generated/service.proto",
}
