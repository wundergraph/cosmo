name: 'full-cosmo'
services:
  # Services for the demo

  employees:
    container_name: employees
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    build:
      context: ./demo
      dockerfile: Dockerfile.employees
    profiles:
      - subgraphs
    ports:
      - '4001:4001'
    networks:
      - primary

  family:
    container_name: family
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    build:
      context: ./demo
      dockerfile: Dockerfile.family
    profiles:
      - subgraphs
    ports:
      - '4002:4002'
    networks:
      - primary

  hobbies:
    container_name: hobbies
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    build:
      context: ./demo
      dockerfile: Dockerfile.hobbies
    profiles:
      - subgraphs
    ports:
      - '4003:4003'
    networks:
      - primary

  products:
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    container_name: products
    build:
      context: ./demo
      dockerfile: Dockerfile.products
    profiles:
      - subgraphs
    ports:
      - '4004:4004'
    networks:
      - primary

  availability:
    container_name: availability
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    build:
      context: ./demo
      dockerfile: Dockerfile.availability
    profiles:
      - subgraphs
    ports:
      - '4007:4007'
    networks:
      - primary

  mood:
    container_name: mood
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    build:
      context: ./demo
      dockerfile: Dockerfile.mood
    profiles:
      - subgraphs
    ports:
      - '4008:4008'
    networks:
      - primary

  products_fg:
    container_name: products_fg
    environment:
      OTEL_AUTH_TOKEN: ${OTEL_AUTH_TOKEN}
      OTEL_HTTP_ENDPOINT: ${OTEL_HTTP_ENDPOINT:-otelcollector:4318}
    build:
      context: ./demo
      dockerfile: Dockerfile.products_fg
    profiles:
      - subgraphs
    ports:
      - '4010:4010'
    networks:
      - primary

  # Infrastructure services

  clickhouse:
    image: clickhouse/clickhouse-server:${DC_CLICKHOUSE_VERSION:-24.6}
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DATABASE:-cosmo}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-changeme}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT:-1}
    ports:
      - '8123:8123'
      - '9000:9000'
      - '9440:9440'
    profiles:
      - default
    networks:
      - primary
    volumes:
      - clickhouse:/var/lib/clickhouse
      - ./docker/clickhouse/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

  postgres:
    image: postgres:${DC_POSTGRESQL_VERSION:-15.3}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-controlplane}
      PGDATA: /data/postgres
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres:/data/postgres
    ports:
      - '5432:5432'
    profiles:
      - default
    restart: unless-stopped
    networks:
      - primary

  keycloak:
    image: ghcr.io/wundergraph/cosmo/keycloak:${DC_KEYCLOAK_VERSION:-latest}
    environment:
      KEYCLOAK_EXTRA_ARGS: '--import-realm --optimized'
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: 'true'
      KEYCLOAK_ENABLE_STATISTICS: 'true'
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-changeme}
      KEYCLOAK_DATABASE_PORT: ${POSTGRES_PORT:-5432}
      KEYCLOAK_DATABASE_HOST: ${POSTGRES_HOST:-postgres}
      KEYCLOAK_DATABASE_NAME: ${POSTGRES_DB_NAME:-keycloak}
      KEYCLOAK_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      KEYCLOAK_DATABASE_USER: ${POSTGRES_USER:-postgres}
    ports:
      - '8080:8080'
    volumes:
      - ./docker/keycloak/realm.json:/opt/bitnami/keycloak/data/import/realm.json:ro
    restart: unless-stopped
    networks:
      - primary
    profiles:
      - default
    depends_on:
      - postgres

  minio:
    image: bitnami/minio:${DC_MINIO_VERSION:-2024.7.16-debian-12-r0}
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-changeme}
      - MINIO_DEFAULT_BUCKETS=cosmo
    ports:
      - '10000:9000'
      - '10001:9001'
    volumes:
      - minio:/bitnami/minio/data
    restart: unless-stopped
    networks:
      - primary
    profiles:
      - default

  nats:
    image: nats:${DC_NATS_VERSION:-2.10.6}
    profiles:
      - default
    ports:
      - '4222:4222'
      - '8222:8222'
      - '6222:6222'
    networks:
      - primary

  # Cosmo Platform

  cdn:
    build:
      context: .
      dockerfile: cdn-server/Dockerfile
    environment:
      PORT: 11000
      NODE_ENV: development
      AUTH_JWT_SECRET: fkczyomvdprgvtmvkuhvprxuggkbgwld
      AUTH_ADMISSION_JWT_SECRET: uXDxJLEvrw4aafPfrf3rRotCoBzRfPEW
      S3_STORAGE_URL: ${S3_STORAGE_URL:-http://${MINIO_ROOT_USER:-minio}:${MINIO_ROOT_PASSWORD:-changeme}@minio:9000/cosmo}
      S3_REGION: ${S3_REGION_CDN:-${S3_REGION:-auto}}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-true}
    ports:
      - '11000:11000'
    networks:
      - primary
    profiles:
      - default

  graphqlmetrics:
    image: ghcr.io/wundergraph/cosmo/graphqlmetrics:${DC_GRAPHQLMETRICS_VERSION:-latest}
    environment:
      CLICKHOUSE_DSN: 'clickhouse://${CLICKHOUSE_USER:-default}:${CLICKHOUSE_PASSWORD:-changeme}@clickhouse:9000/${CLICKHOUSE_DATABASE:-cosmo}'
      INGEST_JWT_SECRET: ${INGEST_JWT_SECRET:-fkczyomvdprgvtmvkuhvprxuggkbgwld}
      LISTEN_ADDR: '0.0.0.0:4005'
    ports:
      - '4005:4005'
    restart: unless-stopped
    profiles:
      - default
    depends_on:
      - clickhouse
    networks:
      - primary

  otelcollector:
    image: ghcr.io/wundergraph/cosmo/otelcollector:${DC_OTELCOLLECTOR_VERSION:-latest}
    environment:
      CLICKHOUSE_ENDPOINT: 'clickhouse://${CLICKHOUSE_USER:-default}:${CLICKHOUSE_PASSWORD:-changeme}@clickhouse:9000/${CLICKHOUSE_DATABASE:-cosmo}?dial_timeout=15s&compress=lz4'
      OTEL_INGEST_JWT_SECRET: ${OTEL_INGEST_JWT_SECRET:-fkczyomvdprgvtmvkuhvprxuggkbgwld}
      PROMETHEUS_LISTEN_ADDR: ${PROMETHEUS_LISTEN_ADDR:-127.0.0.1:8088}
      PROMETHEUS_LEVEL: ${PROMETHEUS_LEVEL:-none}
    ports:
      - '4318:4318'
    restart: unless-stopped
    profiles:
      - default
    depends_on:
      - clickhouse
    networks:
      - primary

  controlplane:
    image: ghcr.io/wundergraph/cosmo/controlplane:${DC_CONTROLPLANE_VERSION:-latest}
    environment:
      DB_URL: 'postgresql://postgres:changeme@postgres:5432/controlplane'
      PORT: 3001
      HOST: '0.0.0.0'
      ALLOWED_ORIGINS: 'http://localhost:3000'
      LOG_LEVEL: 'info'
      DEBUG_SQL: 'true'
      CLICKHOUSE_DSN: 'http://default:changeme@clickhouse:8123?database=cosmo'
      AUTH_REDIRECT_URI: 'http://localhost:3001/v1/auth/callback'
      WEB_BASE_URL: 'http://localhost:3000'
      AUTH_JWT_SECRET: 'fkczyomvdprgvtmvkuhvprxuggkbgwld'
      AUTH_ADMISSION_JWT_SECRET: 'uXDxJLEvrw4aafPfrf3rRotCoBzRfPEW'
      KC_CLIENT_ID: 'studio'
      KC_REALM: 'cosmo'
      KC_ADMIN_USER: ${KEYCLOAK_ADMIN:-admin}
      KC_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-changeme}
      KC_API_URL: 'http://keycloak:8080'
      KC_FRONTEND_URL: 'http://localhost:8080'
      PROMETHEUS_API_URL: 'http://admin:test@prometheus:9090/api/v1'
      S3_STORAGE_URL: ${S3_STORAGE_URL:-http://${MINIO_ROOT_USER:-minio}:${MINIO_ROOT_PASSWORD:-changeme}@minio:9000/cosmo}
      S3_REGION: ${S3_REGION_CONTROLPLANE:-${S3_REGION:-auto}}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-true}
      CDN_BASE_URL: 'http://cdn:11000'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: 'test'
    ports:
      - '3001:3001'
    restart: on-failure
    networks:
      - primary
    profiles:
      - default
    depends_on:
      - postgres
      - clickhouse

  redis:
    image: redis:${DC_REDIS_VERSION:-7.2.4}-alpine
    ports:
      - '6379:6379'
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis:/data
    profiles:
      - default
    networks:
      - primary

  router:
    image: ghcr.io/wundergraph/cosmo/router:${DC_ROUTER_VERSION:-latest}
    environment:
      LOG_LEVEL: info
      CORS_ALLOW_CREDENTIALS: true
      LISTEN_ADDR: '0.0.0.0:3002'
      CONTROLPLANE_URL: http://controlplane:3001
      DEFAULT_TELEMETRY_ENDPOINT: http://otelcollector:4318
      GRAPHQL_METRICS_COLLECTOR_ENDPOINT: http://graphqlmetrics:4005
      GRAPH_API_TOKEN: ${ROUTER_TOKEN}
      CDN_URL: http://cdn:11000
      HTTPS_PROXY: ${HTTPS_PROXY}
      HTTP_PROXY: ${HTTP_PROXY}
      NO_PROXY: ${NO_PROXY}
    restart: on-failure
    volumes:
      # Mount the example config from the repo into the working dir of the router binary location
      # In order apply changes to the config, you need to restart the router container
      # docker compose -f docker-compose.full.yml --profile router restart router
      - ./router/config.yaml:/config.yaml
    networks:
      - primary
    profiles:
      - router
    ports:
      - '3002:3002'

  studio:
    image: ghcr.io/wundergraph/cosmo/studio:${DC_STUDIO_VERSION:-latest}
    environment:
      NEXT_PUBLIC_COSMO_CP_URL: http://localhost:3001
      NEXT_PUBLIC_COSMO_STUDIO_URL: http://localhost:3000
      HOSTNAME: '0.0.0.0'
    profiles:
      - default
    ports:
      - '3000:3000'

  # Migrations & Seed

  seed:
    image: ghcr.io/wundergraph/cosmo/controlplane:${DC_CONTROLPLANE_VERSION:-latest}
    command:
      - '/app/dist/bin/seed.js'
    environment:
      KC_REALM: 'cosmo'
      KC_API_URL: 'http://keycloak:8080'
      KC_ADMIN_USER: 'admin'
      KC_ADMIN_PASSWORD: 'changeme'
      KC_CLIENT_ID: 'studio'
      API_KEY: cosmo_669b576aaadc10ee1ae81d9193425705
      DB_URL: 'postgresql://postgres:changeme@postgres:5432/controlplane'
      USER_EMAIL: foo@wundergraph.com
      USER_PASSWORD: wunder@123
      USER_FIRSTNAME: foo
      USER_LASTNAME: bar
      ORGANIZATION_NAME: wundergraph
      ORGANIZATION_SLUG: wundergraph
    restart: on-failure
    networks:
      - primary
    profiles:
      - default
    depends_on:
      - postgres
      - clickhouse
      - keycloak

  clickhouse-migration:
    image: ghcr.io/wundergraph/cosmo/controlplane:${DC_CONTROLPLANE_VERSION:-latest}
    command: node dist/bin/ch-migrate.js
    depends_on:
      - clickhouse
    environment:
      - CLICKHOUSE_DSN=clickhouse://default:changeme@clickhouse:9000/cosmo
    networks:
      - primary
    profiles:
      - default
    restart: on-failure

  database-migration:
    image: ghcr.io/wundergraph/cosmo/controlplane:${DC_CONTROLPLANE_VERSION:-latest}
    command: node dist/bin/db-migrate.js
    depends_on:
      - postgres
    environment:
      - DB_URL=postgresql://postgres:changeme@postgres:5432/controlplane
    networks:
      - primary
    profiles:
      - default
    restart: on-failure

  # Use this to intercept request e.g. from the router by setting the HTTP(S)_PROXY env var to http://mitmproxy:9051.
  # docker compose -f docker-compose.full.yml --profile proxy up -d mitmproxy
  mitmproxy:
    image: mitmproxy/mitmproxy:latest
    command:
      - mitmweb
      - --web-host
      - 0.0.0.0
      - --web-port
      - '8081'
      - --mode
      - regular@8080
    restart: on-failure
    profiles:
      - proxy
    networks:
      - primary
    ports:
      - '9051:8080' # proxy
      - '9050:8081' # web interface

# This network is shared between this file and docker-compose.yml to
# allow the demo subgraphs to communicate with the rest of the infra-networks:
networks:
  primary:
    driver: bridge
    name: primary

volumes:
  postgres:
  clickhouse:
  prometheus:
  minio:
  redis:
