{
  "engineConfig": {
    "defaultFlushInterval": "500",
    "datasourceConfigurations": [
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "employee",
              "employeeAsList",
              "employees",
              "products",
              "teammates",
              "firstEmployee"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateEmployeeTag",
              "singleUpload",
              "singleUploadWithInput",
              "multipleUpload"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "currentTime",
              "countEmp",
              "countEmp2",
              "countFor"
            ]
          },
          {
            "typeName": "Country",
            "fieldNames": [
              "key"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "details",
              "id",
              "tag",
              "role",
              "updatedAt",
              "startDate",
              "derivedMood",
              "rootFieldThrowsError",
              "rootFieldErrorWrapper"
            ],
            "externalFieldNames": [
              "currentMood",
              "isAvailable"
            ]
          },
          {
            "typeName": "Consultancy",
            "fieldNames": [
              "upc",
              "lead",
              "isLeadAvailable"
            ]
          },
          {
            "typeName": "Cosmo",
            "fieldNames": [
              "upc",
              "engineers",
              "lead"
            ]
          },
          {
            "typeName": "SDK",
            "fieldNames": [
              "upc",
              "engineers",
              "owner",
              "unicode"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "RoleType",
            "fieldNames": [
              "departments",
              "title",
              "employees"
            ]
          },
          {
            "typeName": "Identifiable",
            "fieldNames": [
              "id"
            ]
          },
          {
            "typeName": "Engineer",
            "fieldNames": [
              "departments",
              "title",
              "employees",
              "engineerType"
            ]
          },
          {
            "typeName": "Marketer",
            "fieldNames": [
              "departments",
              "title",
              "employees"
            ]
          },
          {
            "typeName": "Operator",
            "fieldNames": [
              "departments",
              "title",
              "employees",
              "operatorType"
            ]
          },
          {
            "typeName": "Details",
            "fieldNames": [
              "forename",
              "location",
              "surname",
              "pastLocations"
            ]
          },
          {
            "typeName": "City",
            "fieldNames": [
              "type",
              "name",
              "country"
            ]
          },
          {
            "typeName": "CountryKey",
            "fieldNames": [
              "name"
            ]
          },
          {
            "typeName": "ErrorWrapper",
            "fieldNames": [
              "okField",
              "errorField"
            ]
          },
          {
            "typeName": "Time",
            "fieldNames": [
              "unixTime",
              "timeStamp"
            ]
          },
          {
            "typeName": "IProduct",
            "fieldNames": [
              "upc",
              "engineers"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4001/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4001/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n  @link(\n    url: \"https://specs.apollo.dev/federation/v2.5\"\n    import: [\n      \"@authenticated\"\n      \"@composeDirective\"\n      \"@external\"\n      \"@extends\"\n      \"@inaccessible\"\n      \"@interfaceObject\"\n      \"@override\"\n      \"@provides\"\n      \"@key\"\n      \"@requires\"\n      \"@requiresScopes\"\n      \"@shareable\"\n      \"@tag\"\n    ]\n  )\n\ndirective @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee! @tag(name: \"internal\")\n}\n\nscalar Upload\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n\n  singleUpload(file: Upload!): Boolean!\n  singleUploadWithInput(arg: FileUpload!): Boolean!\n  multipleUpload(files: [Upload!]!): Boolean!\n}\n\ninput FileUpload {\n  nested: DeeplyNestedFileUpload\n  nestedList: [Upload!]\n}\n\ninput DeeplyNestedFileUpload {\n  file: Upload!\n}\n\ntype Subscription {\n  \"\"\"\n  `currentTime` will return a stream of `Time` objects.\n  \"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countFor(count: Int!): Int!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  surname: String! @shareable\n  pastLocations: [City!]!\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  details: Details! @shareable\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String @shareable\n  updatedAt: String!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  currentMood: Mood! @external\n  derivedMood: Mood! @requires(fields: \"currentMood\")\n  # From the `availability` service. Only defined for use in @requires\n  isAvailable: Boolean! @external\n  rootFieldThrowsError: String @goField(forceResolver: true)\n  rootFieldErrorWrapper: ErrorWrapper @goField(forceResolver: true)\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String @goField(forceResolver: true)\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  lead: Employee!\n  isLeadAvailable: Boolean @requires(fields: \"lead { isAvailable }\")\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n}\n"
          },
          "upstreamSchema": {
            "key": "2ebeba33065ef483f119d0097b7cfab1bfe2e1a7"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "e6bdb30c-60aa-4635-a2ee-cded76dfa9ea",
        "keys": [
          {
            "typeName": "Country",
            "selectionSet": "key { name }",
            "disableEntityResolver": true
          },
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "Consultancy",
            "selectionSet": "upc"
          },
          {
            "typeName": "Cosmo",
            "selectionSet": "upc"
          },
          {
            "typeName": "SDK",
            "selectionSet": "upc"
          }
        ],
        "requires": [
          {
            "typeName": "Employee",
            "fieldName": "derivedMood",
            "selectionSet": "currentMood"
          },
          {
            "typeName": "Consultancy",
            "fieldName": "isLeadAvailable",
            "selectionSet": "lead { isAvailable }"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "findEmployees"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "details"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Animal",
            "fieldNames": [
              "class",
              "gender"
            ]
          },
          {
            "typeName": "Pet",
            "fieldNames": [
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Alligator",
            "fieldNames": [
              "class",
              "dangerous",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Cat",
            "fieldNames": [
              "class",
              "gender",
              "name",
              "type"
            ]
          },
          {
            "typeName": "Dog",
            "fieldNames": [
              "breed",
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Mouse",
            "fieldNames": [
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Pony",
            "fieldNames": [
              "class",
              "gender",
              "name"
            ]
          },
          {
            "typeName": "Details",
            "fieldNames": [
              "forename",
              "middlename",
              "surname",
              "hasChildren",
              "maritalStatus",
              "nationality",
              "pets"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4002/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4002/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ntype Query {\n  \"\"\" This is a GraphQL query that retrieves a list of employees.\"\"\"\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ntype Details {\n  forename: String! @shareable\n  middlename: String @deprecated\n  surname: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  details: Details @shareable\n}\n\n\"\"\" Allows to filter employees by their details. \"\"\"\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n"
          },
          "upstreamSchema": {
            "key": "6618be4cd5102db58a9821e09dfa49eec9262146"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "5baca251-d1d3-497a-ba9b-efd3c6b9f3a7",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Country",
            "fieldNames": [
              "key"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "hobbies"
            ]
          },
          {
            "typeName": "SDK",
            "fieldNames": [
              "upc",
              "clientLanguages"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "countHob"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Exercise",
            "fieldNames": [
              "employees",
              "category"
            ]
          },
          {
            "typeName": "Experience",
            "fieldNames": [
              "yearsOfExperience"
            ]
          },
          {
            "typeName": "Flying",
            "fieldNames": [
              "employees",
              "planeModels",
              "yearsOfExperience"
            ]
          },
          {
            "typeName": "Gaming",
            "fieldNames": [
              "employees",
              "genres",
              "name",
              "yearsOfExperience"
            ]
          },
          {
            "typeName": "Other",
            "fieldNames": [
              "employees",
              "name"
            ]
          },
          {
            "typeName": "Programming",
            "fieldNames": [
              "employees",
              "languages"
            ]
          },
          {
            "typeName": "CountryKey",
            "fieldNames": [
              "name"
            ]
          },
          {
            "typeName": "Travelling",
            "fieldNames": [
              "employees",
              "countriesLived"
            ]
          },
          {
            "typeName": "Hobby",
            "fieldNames": [
              "employees"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4003/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4003/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ndirective @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  category: ExerciseType!\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  countriesLived: [Country!]!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  hobbies: [Hobby!]\n}\n\ntype SDK @key(fields: \"upc\") {\n  upc: ID!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ntype Subscription {\n  countHob(max: Int! intervalMilliseconds: Int!): Int!\n}"
          },
          "upstreamSchema": {
            "key": "68291c651cf7b5b50afb169bd12d2cd1ebf4ded6"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "713b69f6-8346-4bac-b4ab-30bcec5084fc",
        "keys": [
          {
            "typeName": "Country",
            "selectionSet": "key { name }",
            "disableEntityResolver": true
          },
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "SDK",
            "selectionSet": "upc"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "productTypes",
              "topSecretFederationFacts",
              "factTypes",
              "sharedThings"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "addFact"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "products",
              "notes"
            ]
          },
          {
            "typeName": "Consultancy",
            "fieldNames": [
              "upc",
              "name"
            ]
          },
          {
            "typeName": "Cosmo",
            "fieldNames": [
              "upc",
              "name",
              "repositoryURL"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Thing",
            "fieldNames": [
              "a"
            ]
          },
          {
            "typeName": "TopSecretFact",
            "fieldNames": [
              "description",
              "factType"
            ]
          },
          {
            "typeName": "DirectiveFact",
            "fieldNames": [
              "title",
              "description",
              "factType"
            ]
          },
          {
            "typeName": "EntityFact",
            "fieldNames": [
              "title",
              "description",
              "factType"
            ]
          },
          {
            "typeName": "MiscellaneousFact",
            "fieldNames": [
              "title",
              "description",
              "factType"
            ]
          },
          {
            "typeName": "Documentation",
            "fieldNames": [
              "url",
              "urls"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4004/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4004/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\nschema {\n  query: Queries\n  mutation: Mutation\n}\n\ntype Queries {\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n  factTypes: [TopSecretFactType!]\n  sharedThings(numOfA: Int! numOfB: Int!): [Thing!]! @shareable\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\ntype Thing @shareable {\n  a: String!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE,\n  ENTITY,\n  MISCELLANEOUS,\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]){\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  products: [ProductName!]!\n  notes: String @override(from: \"employees\")\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n"
          },
          "upstreamSchema": {
            "key": "c8cc058566134270eaf1cf6638137eec5a7de07e"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "328ddea5-4d13-4174-af17-320dc857f260",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "Consultancy",
            "selectionSet": "upc"
          },
          {
            "typeName": "Cosmo",
            "selectionSet": "upc"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateAvailability"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "isAvailable"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4007/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4007/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ntype Mutation {\n    \"\"\" This mutation updates the availability status of an employee in the system.\"\"\"\n    updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n"
          },
          "upstreamSchema": {
            "key": "0327ed440f0c9e1684722cbb987bc8d3283c5532"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "0919868b-b5ea-47ce-b358-c2d1a186172b",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateMood"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "currentMood"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:4008/graphql"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:4008/graphql"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ntype Mutation {\n    \"\"\" This mutation update the mood of an employee. \"\"\"\n    updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\nenum Mood {\n    APATHETIC @inaccessible\n    HAPPY\n    SAD\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  currentMood: Mood!\n}\n"
          },
          "upstreamSchema": {
            "key": "cb7653f92b2599bd46ae73a84b8d7d5c359fb3b2"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "ef402f01-c421-435c-8bd6-fee4e906ccb6",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id"
          }
        ]
      },
      {
        "kind": "PUBSUB",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "employeeFromEvent",
              "employeeFromEventMyNats"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateEmployeeMyKafka",
              "updateEmployeeMyNats",
              "updateEmployeeMyRedis",
              "updateEmployeeMyRedisOnCustomChannel"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "employeeUpdated",
              "employeeUpdatedMyKafka",
              "employeeUpdatedMyNats",
              "employeeUpdatedNatsStream",
              "employeeUpdatedMyRedis",
              "employeeUpdates",
              "filteredEmployeeUpdated",
              "filteredEmployeeUpdatedMyKafka",
              "filteredEmployeeUpdatedMyKafkaWithListFieldArguments",
              "filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument",
              "filteredEmployeeUpdatedMyRedis"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "edfs__PublishResult",
            "fieldNames": [
              "success"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id"
            ],
            "externalFieldNames": [
              "id"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "requestTimeoutSeconds": "10",
        "id": "d34b3d57-b6d7-49fc-93b6-ca7b6eb2bd0d",
        "keys": [
          {
            "typeName": "Employee",
            "selectionSet": "id",
            "disableEntityResolver": true
          }
        ],
        "customEvents": {
          "nats": [
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "REQUEST",
                "typeName": "Query",
                "fieldName": "employeeFromEvent"
              },
              "subjects": [
                "getEmployee.{{ args.id }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-nats",
                "type": "REQUEST",
                "typeName": "Query",
                "fieldName": "employeeFromEventMyNats"
              },
              "subjects": [
                "getEmployeeMyNats.{{ args.employeeID }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-nats",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyNats"
              },
              "subjects": [
                "employeeUpdatedMyNats.{{ args.id }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdated"
              },
              "subjects": [
                "employeeUpdated.{{ args.employeeID }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-nats",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedMyNats"
              },
              "subjects": [
                "employeeUpdatedMyNats.{{ args.id }}",
                "employeeUpdatedMyNatsTwo.{{ args.id }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedNatsStream"
              },
              "subjects": [
                "employeeUpdated.{{ args.id }}"
              ],
              "streamConfiguration": {
                "consumerName": "consumerName",
                "streamName": "streamName",
                "consumerInactiveThreshold": 30
              }
            },
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdated"
              },
              "subjects": [
                "employeeUpdated.{{ args.id }}"
              ]
            }
          ],
          "kafka": [
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyKafka"
              },
              "topics": [
                "employeeUpdated"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedMyKafka"
              },
              "topics": [
                "employeeUpdated",
                "employeeUpdatedTwo"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyKafka"
              },
              "topics": [
                "employeeUpdated",
                "employeeUpdatedTwo"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyKafkaWithListFieldArguments"
              },
              "topics": [
                "employeeUpdated",
                "employeeUpdatedTwo"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument"
              },
              "topics": [
                "employeeUpdated",
                "employeeUpdatedTwo"
              ]
            }
          ],
          "redis": [
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyRedis"
              },
              "channels": [
                "employeeUpdatedMyRedis"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyRedisOnCustomChannel"
              },
              "channels": [
                "employeeUpdatedMyRedis.{{ args.id }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedMyRedis"
              },
              "channels": [
                "employeeUpdatedMyRedis.{{ args.id }}"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdates"
              },
              "channels": [
                "employeeUpdatedMyRedis"
              ]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyRedis"
              },
              "channels": [
                "employeeUpdatedMyRedis"
              ]
            }
          ]
        }
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "projects",
              "project",
              "projectStatuses",
              "projectsByStatus",
              "projectResources",
              "searchProjects",
              "milestones",
              "tasks",
              "projectActivities",
              "killService",
              "panic"
            ]
          },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "addProject",
              "addMilestone",
              "addTask",
              "updateProjectStatus"
            ]
          },
          {
            "typeName": "Project",
            "fieldNames": [
              "id",
              "name",
              "description",
              "startDate",
              "endDate",
              "status",
              "teamMembers",
              "relatedProducts",
              "milestoneIds",
              "milestones",
              "tasks",
              "progress"
            ]
          },
          {
            "typeName": "Milestone",
            "fieldNames": [
              "id",
              "projectId",
              "name",
              "description",
              "startDate",
              "endDate",
              "status",
              "completionPercentage"
            ]
          },
          {
            "typeName": "Task",
            "fieldNames": [
              "id",
              "projectId",
              "milestoneId",
              "assigneeId",
              "name",
              "description",
              "priority",
              "status",
              "estimatedHours",
              "actualHours",
              "createdAt",
              "completedAt"
            ]
          },
          {
            "typeName": "Employee",
            "fieldNames": [
              "id",
              "projects",
              "assignedTasks",
              "completedTasks"
            ]
          },
          {
            "typeName": "Product",
            "fieldNames": [
              "upc",
              "projects"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "Node",
            "fieldNames": [
              "id"
            ]
          },
          {
            "typeName": "Timestamped",
            "fieldNames": [
              "startDate",
              "endDate"
            ]
          },
          {
            "typeName": "Assignable",
            "fieldNames": [
              "assigneeId"
            ]
          },
          {
            "typeName": "ProjectUpdate",
            "fieldNames": [
              "id",
              "projectId",
              "updatedById",
              "updateType",
              "description",
              "timestamp",
              "metadata"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {},
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  projects: [Project!]!\n  project(id: ID!): Project\n  projectStatuses: [ProjectStatus!]!\n  projectsByStatus(status: ProjectStatus!): [Project!]!\n  projectResources(projectId: ID!): [ProjectResource!]!\n  searchProjects(query: String!): [ProjectSearchResult!]!\n  milestones(projectId: ID!): [Milestone!]!\n  tasks(projectId: ID!): [Task!]!\n  projectActivities(projectId: ID!): [ProjectActivity!]!\n\n  # query to simulate that the service goes down\n  killService: Boolean!\n  panic: Boolean!\n}\n\ntype Mutation {\n  addProject(project: ProjectInput!): Project!\n  addMilestone(milestone: MilestoneInput!): Milestone!\n  addTask(task: TaskInput!): Task!\n  updateProjectStatus(projectId: ID!, status: ProjectStatus!): ProjectUpdate!\n}\n\ninput ProjectInput {\n  name: String!\n  description: String\n  startDate: String   # ISO date\n  endDate: String     # ISO date\n  status: ProjectStatus!\n}\n\ninput MilestoneInput {\n  projectId: ID!\n  name: String!\n  description: String\n  dueDate: String     # ISO date\n  status: MilestoneStatus!\n}\n\ninput TaskInput {\n  projectId: ID!\n  assigneeId: Int\n  name: String!\n  description: String\n  priority: TaskPriority!\n  status: TaskStatus!\n  estimatedHours: Float\n}\n\n# Interfaces\ninterface Node {\n  id: ID!\n}\n\ninterface Timestamped {\n  startDate: String\n  endDate: String\n}\n\ninterface Assignable {\n  assigneeId: Int\n}\n\n# Updated Project type implementing interfaces\ntype Project implements Node & Timestamped @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  description: String\n  startDate: String   # ISO date\n  endDate: String     # ISO date\n  status: ProjectStatus!\n  # Federated references:\n  teamMembers: [Employee!]! \n  relatedProducts: [Product!]!  # from products subgraph\n  # Project milestones or checkpoints\n  milestoneIds: [String!]  # Array of milestone identifiers\n  \n  # New fields for extended functionality\n  milestones: [Milestone!]!\n  tasks: [Task!]!\n  progress: Float  # Completion percentage\n}\n\n# New types - simplified with ID references only\ntype Milestone implements Node & Timestamped @key(fields: \"id\") {\n  id: ID!\n  projectId: ID!\n  name: String!\n  description: String\n  startDate: String   # ISO date (when milestone work starts)\n  endDate: String     # ISO date (milestone due date)\n  status: MilestoneStatus!\n  completionPercentage: Float\n}\n\ntype Task implements Node & Assignable @key(fields: \"id\") {\n  id: ID!\n  projectId: ID!\n  milestoneId: ID\n  assigneeId: Int\n  name: String!\n  description: String\n  priority: TaskPriority!\n  status: TaskStatus!\n  estimatedHours: Float\n  actualHours: Float\n  createdAt: String   # ISO date\n  completedAt: String # ISO date\n}\n\ntype ProjectUpdate implements Node {\n  id: ID!\n  projectId: ID!\n  updatedById: Int!\n  updateType: ProjectUpdateType!\n  description: String!\n  timestamp: String!  # ISO date\n  metadata: String    # JSON metadata\n}\n\n# Enums\nenum ProjectStatus {\n  PLANNING\n  ACTIVE\n  COMPLETED\n  ON_HOLD\n}\n\nenum MilestoneStatus {\n  PENDING\n  IN_PROGRESS\n  COMPLETED\n  DELAYED\n}\n\nenum TaskStatus {\n  TODO\n  IN_PROGRESS\n  REVIEW\n  COMPLETED\n  BLOCKED\n}\n\nenum TaskPriority {\n  LOW\n  MEDIUM\n  HIGH\n  URGENT\n}\n\nenum ProjectUpdateType {\n  STATUS_CHANGE\n  MILESTONE_ADDED\n  TASK_ASSIGNED\n  PROGRESS_UPDATE\n  TEAM_CHANGE\n}\n\n# Unions\nunion ProjectResource = Employee | Product | Milestone | Task\n\nunion ProjectSearchResult = Project | Milestone | Task\n\nunion ProjectActivity = ProjectUpdate | Milestone | Task\n\n# Federated types (unchanged)\ntype Employee @key(fields: \"id\") {\n  id: Int! \n  # New field resolved by this subgraph:\n  projects: [Project!]\n  # New fields for extended functionality\n  assignedTasks: [Task!]!\n  completedTasks: [Task!]!\n}\n\ntype Product @key(fields: \"upc\") {\n  upc: String! \n  # Projects contributing to this product:\n  projects: [Project!]\n}\n\n"
          },
          "upstreamSchema": {
            "key": "434c81d2641719cf37fd8fd0ba948743e847ff21"
          },
          "grpc": {
            "mapping": {
              "version": 1,
              "service": "ProjectsService",
              "operationMappings": [
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "projects",
                  "mapped": "QueryProjects",
                  "request": "QueryProjectsRequest",
                  "response": "QueryProjectsResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "project",
                  "mapped": "QueryProject",
                  "request": "QueryProjectRequest",
                  "response": "QueryProjectResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "projectStatuses",
                  "mapped": "QueryProjectStatuses",
                  "request": "QueryProjectStatusesRequest",
                  "response": "QueryProjectStatusesResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "projectsByStatus",
                  "mapped": "QueryProjectsByStatus",
                  "request": "QueryProjectsByStatusRequest",
                  "response": "QueryProjectsByStatusResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "projectResources",
                  "mapped": "QueryProjectResources",
                  "request": "QueryProjectResourcesRequest",
                  "response": "QueryProjectResourcesResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "searchProjects",
                  "mapped": "QuerySearchProjects",
                  "request": "QuerySearchProjectsRequest",
                  "response": "QuerySearchProjectsResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "milestones",
                  "mapped": "QueryMilestones",
                  "request": "QueryMilestonesRequest",
                  "response": "QueryMilestonesResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "tasks",
                  "mapped": "QueryTasks",
                  "request": "QueryTasksRequest",
                  "response": "QueryTasksResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "projectActivities",
                  "mapped": "QueryProjectActivities",
                  "request": "QueryProjectActivitiesRequest",
                  "response": "QueryProjectActivitiesResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "killService",
                  "mapped": "QueryKillService",
                  "request": "QueryKillServiceRequest",
                  "response": "QueryKillServiceResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "panic",
                  "mapped": "QueryPanic",
                  "request": "QueryPanicRequest",
                  "response": "QueryPanicResponse"
                },
                {
                  "type": "OPERATION_TYPE_MUTATION",
                  "original": "addProject",
                  "mapped": "MutationAddProject",
                  "request": "MutationAddProjectRequest",
                  "response": "MutationAddProjectResponse"
                },
                {
                  "type": "OPERATION_TYPE_MUTATION",
                  "original": "addMilestone",
                  "mapped": "MutationAddMilestone",
                  "request": "MutationAddMilestoneRequest",
                  "response": "MutationAddMilestoneResponse"
                },
                {
                  "type": "OPERATION_TYPE_MUTATION",
                  "original": "addTask",
                  "mapped": "MutationAddTask",
                  "request": "MutationAddTaskRequest",
                  "response": "MutationAddTaskResponse"
                },
                {
                  "type": "OPERATION_TYPE_MUTATION",
                  "original": "updateProjectStatus",
                  "mapped": "MutationUpdateProjectStatus",
                  "request": "MutationUpdateProjectStatusRequest",
                  "response": "MutationUpdateProjectStatusResponse"
                }
              ],
              "entityMappings": [
                {
                  "typeName": "Project",
                  "kind": "entity",
                  "key": "id",
                  "rpc": "LookupProjectById",
                  "request": "LookupProjectByIdRequest",
                  "response": "LookupProjectByIdResponse"
                },
                {
                  "typeName": "Milestone",
                  "kind": "entity",
                  "key": "id",
                  "rpc": "LookupMilestoneById",
                  "request": "LookupMilestoneByIdRequest",
                  "response": "LookupMilestoneByIdResponse"
                },
                {
                  "typeName": "Task",
                  "kind": "entity",
                  "key": "id",
                  "rpc": "LookupTaskById",
                  "request": "LookupTaskByIdRequest",
                  "response": "LookupTaskByIdResponse"
                },
                {
                  "typeName": "Employee",
                  "kind": "entity",
                  "key": "id",
                  "rpc": "LookupEmployeeById",
                  "request": "LookupEmployeeByIdRequest",
                  "response": "LookupEmployeeByIdResponse"
                },
                {
                  "typeName": "Product",
                  "kind": "entity",
                  "key": "upc",
                  "rpc": "LookupProductByUpc",
                  "request": "LookupProductByUpcRequest",
                  "response": "LookupProductByUpcResponse"
                }
              ],
              "typeFieldMappings": [
                {
                  "type": "Query",
                  "fieldMappings": [
                    {
                      "original": "projects",
                      "mapped": "projects"
                    },
                    {
                      "original": "project",
                      "mapped": "project",
                      "argumentMappings": [
                        {
                          "original": "id",
                          "mapped": "id"
                        }
                      ]
                    },
                    {
                      "original": "projectStatuses",
                      "mapped": "project_statuses"
                    },
                    {
                      "original": "projectsByStatus",
                      "mapped": "projects_by_status",
                      "argumentMappings": [
                        {
                          "original": "status",
                          "mapped": "status"
                        }
                      ]
                    },
                    {
                      "original": "projectResources",
                      "mapped": "project_resources",
                      "argumentMappings": [
                        {
                          "original": "projectId",
                          "mapped": "project_id"
                        }
                      ]
                    },
                    {
                      "original": "searchProjects",
                      "mapped": "search_projects",
                      "argumentMappings": [
                        {
                          "original": "query",
                          "mapped": "query"
                        }
                      ]
                    },
                    {
                      "original": "milestones",
                      "mapped": "milestones",
                      "argumentMappings": [
                        {
                          "original": "projectId",
                          "mapped": "project_id"
                        }
                      ]
                    },
                    {
                      "original": "tasks",
                      "mapped": "tasks",
                      "argumentMappings": [
                        {
                          "original": "projectId",
                          "mapped": "project_id"
                        }
                      ]
                    },
                    {
                      "original": "projectActivities",
                      "mapped": "project_activities",
                      "argumentMappings": [
                        {
                          "original": "projectId",
                          "mapped": "project_id"
                        }
                      ]
                    },
                    {
                      "original": "killService",
                      "mapped": "kill_service"
                    },
                    {
                      "original": "panic",
                      "mapped": "panic"
                    }
                  ]
                },
                {
                  "type": "Mutation",
                  "fieldMappings": [
                    {
                      "original": "addProject",
                      "mapped": "add_project",
                      "argumentMappings": [
                        {
                          "original": "project",
                          "mapped": "project"
                        }
                      ]
                    },
                    {
                      "original": "addMilestone",
                      "mapped": "add_milestone",
                      "argumentMappings": [
                        {
                          "original": "milestone",
                          "mapped": "milestone"
                        }
                      ]
                    },
                    {
                      "original": "addTask",
                      "mapped": "add_task",
                      "argumentMappings": [
                        {
                          "original": "task",
                          "mapped": "task"
                        }
                      ]
                    },
                    {
                      "original": "updateProjectStatus",
                      "mapped": "update_project_status",
                      "argumentMappings": [
                        {
                          "original": "projectId",
                          "mapped": "project_id"
                        },
                        {
                          "original": "status",
                          "mapped": "status"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ProjectInput",
                  "fieldMappings": [
                    {
                      "original": "name",
                      "mapped": "name"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "startDate",
                      "mapped": "start_date"
                    },
                    {
                      "original": "endDate",
                      "mapped": "end_date"
                    },
                    {
                      "original": "status",
                      "mapped": "status"
                    }
                  ]
                },
                {
                  "type": "MilestoneInput",
                  "fieldMappings": [
                    {
                      "original": "projectId",
                      "mapped": "project_id"
                    },
                    {
                      "original": "name",
                      "mapped": "name"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "dueDate",
                      "mapped": "due_date"
                    },
                    {
                      "original": "status",
                      "mapped": "status"
                    }
                  ]
                },
                {
                  "type": "TaskInput",
                  "fieldMappings": [
                    {
                      "original": "projectId",
                      "mapped": "project_id"
                    },
                    {
                      "original": "assigneeId",
                      "mapped": "assignee_id"
                    },
                    {
                      "original": "name",
                      "mapped": "name"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "priority",
                      "mapped": "priority"
                    },
                    {
                      "original": "status",
                      "mapped": "status"
                    },
                    {
                      "original": "estimatedHours",
                      "mapped": "estimated_hours"
                    }
                  ]
                },
                {
                  "type": "Project",
                  "fieldMappings": [
                    {
                      "original": "id",
                      "mapped": "id"
                    },
                    {
                      "original": "name",
                      "mapped": "name"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "startDate",
                      "mapped": "start_date"
                    },
                    {
                      "original": "endDate",
                      "mapped": "end_date"
                    },
                    {
                      "original": "status",
                      "mapped": "status"
                    },
                    {
                      "original": "teamMembers",
                      "mapped": "team_members"
                    },
                    {
                      "original": "relatedProducts",
                      "mapped": "related_products"
                    },
                    {
                      "original": "milestoneIds",
                      "mapped": "milestone_ids"
                    },
                    {
                      "original": "milestones",
                      "mapped": "milestones"
                    },
                    {
                      "original": "tasks",
                      "mapped": "tasks"
                    },
                    {
                      "original": "progress",
                      "mapped": "progress"
                    }
                  ]
                },
                {
                  "type": "Milestone",
                  "fieldMappings": [
                    {
                      "original": "id",
                      "mapped": "id"
                    },
                    {
                      "original": "projectId",
                      "mapped": "project_id"
                    },
                    {
                      "original": "name",
                      "mapped": "name"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "startDate",
                      "mapped": "start_date"
                    },
                    {
                      "original": "endDate",
                      "mapped": "end_date"
                    },
                    {
                      "original": "status",
                      "mapped": "status"
                    },
                    {
                      "original": "completionPercentage",
                      "mapped": "completion_percentage"
                    }
                  ]
                },
                {
                  "type": "Task",
                  "fieldMappings": [
                    {
                      "original": "id",
                      "mapped": "id"
                    },
                    {
                      "original": "projectId",
                      "mapped": "project_id"
                    },
                    {
                      "original": "milestoneId",
                      "mapped": "milestone_id"
                    },
                    {
                      "original": "assigneeId",
                      "mapped": "assignee_id"
                    },
                    {
                      "original": "name",
                      "mapped": "name"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "priority",
                      "mapped": "priority"
                    },
                    {
                      "original": "status",
                      "mapped": "status"
                    },
                    {
                      "original": "estimatedHours",
                      "mapped": "estimated_hours"
                    },
                    {
                      "original": "actualHours",
                      "mapped": "actual_hours"
                    },
                    {
                      "original": "createdAt",
                      "mapped": "created_at"
                    },
                    {
                      "original": "completedAt",
                      "mapped": "completed_at"
                    }
                  ]
                },
                {
                  "type": "ProjectUpdate",
                  "fieldMappings": [
                    {
                      "original": "id",
                      "mapped": "id"
                    },
                    {
                      "original": "projectId",
                      "mapped": "project_id"
                    },
                    {
                      "original": "updatedById",
                      "mapped": "updated_by_id"
                    },
                    {
                      "original": "updateType",
                      "mapped": "update_type"
                    },
                    {
                      "original": "description",
                      "mapped": "description"
                    },
                    {
                      "original": "timestamp",
                      "mapped": "timestamp"
                    },
                    {
                      "original": "metadata",
                      "mapped": "metadata"
                    }
                  ]
                },
                {
                  "type": "Employee",
                  "fieldMappings": [
                    {
                      "original": "id",
                      "mapped": "id"
                    },
                    {
                      "original": "projects",
                      "mapped": "projects"
                    },
                    {
                      "original": "assignedTasks",
                      "mapped": "assigned_tasks"
                    },
                    {
                      "original": "completedTasks",
                      "mapped": "completed_tasks"
                    }
                  ]
                },
                {
                  "type": "Product",
                  "fieldMappings": [
                    {
                      "original": "upc",
                      "mapped": "upc"
                    },
                    {
                      "original": "projects",
                      "mapped": "projects"
                    }
                  ]
                }
              ],
              "enumMappings": [
                {
                  "type": "ProjectStatus",
                  "values": [
                    {
                      "original": "PLANNING",
                      "mapped": "PROJECT_STATUS_PLANNING"
                    },
                    {
                      "original": "ACTIVE",
                      "mapped": "PROJECT_STATUS_ACTIVE"
                    },
                    {
                      "original": "COMPLETED",
                      "mapped": "PROJECT_STATUS_COMPLETED"
                    },
                    {
                      "original": "ON_HOLD",
                      "mapped": "PROJECT_STATUS_ON_HOLD"
                    }
                  ]
                },
                {
                  "type": "MilestoneStatus",
                  "values": [
                    {
                      "original": "PENDING",
                      "mapped": "MILESTONE_STATUS_PENDING"
                    },
                    {
                      "original": "IN_PROGRESS",
                      "mapped": "MILESTONE_STATUS_IN_PROGRESS"
                    },
                    {
                      "original": "COMPLETED",
                      "mapped": "MILESTONE_STATUS_COMPLETED"
                    },
                    {
                      "original": "DELAYED",
                      "mapped": "MILESTONE_STATUS_DELAYED"
                    }
                  ]
                },
                {
                  "type": "TaskStatus",
                  "values": [
                    {
                      "original": "TODO",
                      "mapped": "TASK_STATUS_TODO"
                    },
                    {
                      "original": "IN_PROGRESS",
                      "mapped": "TASK_STATUS_IN_PROGRESS"
                    },
                    {
                      "original": "REVIEW",
                      "mapped": "TASK_STATUS_REVIEW"
                    },
                    {
                      "original": "COMPLETED",
                      "mapped": "TASK_STATUS_COMPLETED"
                    },
                    {
                      "original": "BLOCKED",
                      "mapped": "TASK_STATUS_BLOCKED"
                    }
                  ]
                },
                {
                  "type": "TaskPriority",
                  "values": [
                    {
                      "original": "LOW",
                      "mapped": "TASK_PRIORITY_LOW"
                    },
                    {
                      "original": "MEDIUM",
                      "mapped": "TASK_PRIORITY_MEDIUM"
                    },
                    {
                      "original": "HIGH",
                      "mapped": "TASK_PRIORITY_HIGH"
                    },
                    {
                      "original": "URGENT",
                      "mapped": "TASK_PRIORITY_URGENT"
                    }
                  ]
                },
                {
                  "type": "ProjectUpdateType",
                  "values": [
                    {
                      "original": "STATUS_CHANGE",
                      "mapped": "PROJECT_UPDATE_TYPE_STATUS_CHANGE"
                    },
                    {
                      "original": "MILESTONE_ADDED",
                      "mapped": "PROJECT_UPDATE_TYPE_MILESTONE_ADDED"
                    },
                    {
                      "original": "TASK_ASSIGNED",
                      "mapped": "PROJECT_UPDATE_TYPE_TASK_ASSIGNED"
                    },
                    {
                      "original": "PROGRESS_UPDATE",
                      "mapped": "PROJECT_UPDATE_TYPE_PROGRESS_UPDATE"
                    },
                    {
                      "original": "TEAM_CHANGE",
                      "mapped": "PROJECT_UPDATE_TYPE_TEAM_CHANGE"
                    }
                  ]
                }
              ]
            },
            "protoSchema": "syntax = \"proto3\";\npackage service;\n\noption go_package = \"github.com/wundergraph/cosmo/demo/pkg/subgraphs/projects\";\n\nimport \"google/protobuf/wrappers.proto\";\n\n// Service definition for ProjectsService\nservice ProjectsService {\n  // Lookup Employee entity by id\n  rpc LookupEmployeeById(LookupEmployeeByIdRequest) returns (LookupEmployeeByIdResponse) {}\n  // Lookup Milestone entity by id\n  rpc LookupMilestoneById(LookupMilestoneByIdRequest) returns (LookupMilestoneByIdResponse) {}\n  // Lookup Product entity by upc\n  rpc LookupProductByUpc(LookupProductByUpcRequest) returns (LookupProductByUpcResponse) {}\n  // Lookup Project entity by id\n  rpc LookupProjectById(LookupProjectByIdRequest) returns (LookupProjectByIdResponse) {}\n  // Lookup Task entity by id\n  rpc LookupTaskById(LookupTaskByIdRequest) returns (LookupTaskByIdResponse) {}\n  rpc MutationAddMilestone(MutationAddMilestoneRequest) returns (MutationAddMilestoneResponse) {}\n  rpc MutationAddProject(MutationAddProjectRequest) returns (MutationAddProjectResponse) {}\n  rpc MutationAddTask(MutationAddTaskRequest) returns (MutationAddTaskResponse) {}\n  rpc MutationUpdateProjectStatus(MutationUpdateProjectStatusRequest) returns (MutationUpdateProjectStatusResponse) {}\n  rpc QueryKillService(QueryKillServiceRequest) returns (QueryKillServiceResponse) {}\n  rpc QueryMilestones(QueryMilestonesRequest) returns (QueryMilestonesResponse) {}\n  rpc QueryPanic(QueryPanicRequest) returns (QueryPanicResponse) {}\n  rpc QueryProject(QueryProjectRequest) returns (QueryProjectResponse) {}\n  rpc QueryProjectActivities(QueryProjectActivitiesRequest) returns (QueryProjectActivitiesResponse) {}\n  rpc QueryProjectResources(QueryProjectResourcesRequest) returns (QueryProjectResourcesResponse) {}\n  rpc QueryProjectStatuses(QueryProjectStatusesRequest) returns (QueryProjectStatusesResponse) {}\n  rpc QueryProjects(QueryProjectsRequest) returns (QueryProjectsResponse) {}\n  rpc QueryProjectsByStatus(QueryProjectsByStatusRequest) returns (QueryProjectsByStatusResponse) {}\n  rpc QuerySearchProjects(QuerySearchProjectsRequest) returns (QuerySearchProjectsResponse) {}\n  rpc QueryTasks(QueryTasksRequest) returns (QueryTasksResponse) {}\n}\n\n// Wrapper message for a list of Project.\nmessage ListOfProject {\n  repeated Project items = 1;\n}\n\n// Wrapper message for a list of String.\nmessage ListOfString {\n  repeated string items = 1;\n}\n\n// Key message for Project entity lookup\nmessage LookupProjectByIdRequestKey {\n  // Key field for Project entity lookup.\n  string id = 1;\n}\n\n// Request message for Project entity lookup.\nmessage LookupProjectByIdRequest {\n  /*\n   * List of keys to look up Project entities.\n   * Order matters - each key maps to one entity in LookupProjectByIdResponse.\n   */\n  repeated LookupProjectByIdRequestKey keys = 1;\n}\n\n// Response message for Project entity lookup.\nmessage LookupProjectByIdResponse {\n  /*\n   * List of Project entities in the same order as the keys in LookupProjectByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Project result = 1;\n}\n\n// Key message for Milestone entity lookup\nmessage LookupMilestoneByIdRequestKey {\n  // Key field for Milestone entity lookup.\n  string id = 1;\n}\n\n// Request message for Milestone entity lookup.\nmessage LookupMilestoneByIdRequest {\n  /*\n   * List of keys to look up Milestone entities.\n   * Order matters - each key maps to one entity in LookupMilestoneByIdResponse.\n   */\n  repeated LookupMilestoneByIdRequestKey keys = 1;\n}\n\n// Response message for Milestone entity lookup.\nmessage LookupMilestoneByIdResponse {\n  /*\n   * List of Milestone entities in the same order as the keys in LookupMilestoneByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Milestone result = 1;\n}\n\n// Key message for Task entity lookup\nmessage LookupTaskByIdRequestKey {\n  // Key field for Task entity lookup.\n  string id = 1;\n}\n\n// Request message for Task entity lookup.\nmessage LookupTaskByIdRequest {\n  /*\n   * List of keys to look up Task entities.\n   * Order matters - each key maps to one entity in LookupTaskByIdResponse.\n   */\n  repeated LookupTaskByIdRequestKey keys = 1;\n}\n\n// Response message for Task entity lookup.\nmessage LookupTaskByIdResponse {\n  /*\n   * List of Task entities in the same order as the keys in LookupTaskByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Task result = 1;\n}\n\n// Key message for Employee entity lookup\nmessage LookupEmployeeByIdRequestKey {\n  // Key field for Employee entity lookup.\n  string id = 1;\n}\n\n// Request message for Employee entity lookup.\nmessage LookupEmployeeByIdRequest {\n  /*\n   * List of keys to look up Employee entities.\n   * Order matters - each key maps to one entity in LookupEmployeeByIdResponse.\n   */\n  repeated LookupEmployeeByIdRequestKey keys = 1;\n}\n\n// Response message for Employee entity lookup.\nmessage LookupEmployeeByIdResponse {\n  /*\n   * List of Employee entities in the same order as the keys in LookupEmployeeByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Employee result = 1;\n}\n\n// Key message for Product entity lookup\nmessage LookupProductByUpcRequestKey {\n  // Key field for Product entity lookup.\n  string upc = 1;\n}\n\n// Request message for Product entity lookup.\nmessage LookupProductByUpcRequest {\n  /*\n   * List of keys to look up Product entities.\n   * Order matters - each key maps to one entity in LookupProductByUpcResponse.\n   */\n  repeated LookupProductByUpcRequestKey keys = 1;\n}\n\n// Response message for Product entity lookup.\nmessage LookupProductByUpcResponse {\n  /*\n   * List of Product entities in the same order as the keys in LookupProductByUpcRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Product result = 1;\n}\n\n// Request message for projects operation.\nmessage QueryProjectsRequest {\n}\n// Response message for projects operation.\nmessage QueryProjectsResponse {\n  repeated Project projects = 1;\n}\n// Request message for project operation.\nmessage QueryProjectRequest {\n  string id = 1;\n}\n// Response message for project operation.\nmessage QueryProjectResponse {\n  Project project = 1;\n}\n// Request message for projectStatuses operation.\nmessage QueryProjectStatusesRequest {\n}\n// Response message for projectStatuses operation.\nmessage QueryProjectStatusesResponse {\n  repeated ProjectStatus project_statuses = 1;\n}\n// Request message for projectsByStatus operation.\nmessage QueryProjectsByStatusRequest {\n  ProjectStatus status = 1;\n}\n// Response message for projectsByStatus operation.\nmessage QueryProjectsByStatusResponse {\n  repeated Project projects_by_status = 1;\n}\n// Request message for projectResources operation.\nmessage QueryProjectResourcesRequest {\n  string project_id = 1;\n}\n// Response message for projectResources operation.\nmessage QueryProjectResourcesResponse {\n  repeated ProjectResource project_resources = 1;\n}\n// Request message for searchProjects operation.\nmessage QuerySearchProjectsRequest {\n  string query = 1;\n}\n// Response message for searchProjects operation.\nmessage QuerySearchProjectsResponse {\n  repeated ProjectSearchResult search_projects = 1;\n}\n// Request message for milestones operation.\nmessage QueryMilestonesRequest {\n  string project_id = 1;\n}\n// Response message for milestones operation.\nmessage QueryMilestonesResponse {\n  repeated Milestone milestones = 1;\n}\n// Request message for tasks operation.\nmessage QueryTasksRequest {\n  string project_id = 1;\n}\n// Response message for tasks operation.\nmessage QueryTasksResponse {\n  repeated Task tasks = 1;\n}\n// Request message for projectActivities operation.\nmessage QueryProjectActivitiesRequest {\n  string project_id = 1;\n}\n// Response message for projectActivities operation.\nmessage QueryProjectActivitiesResponse {\n  repeated ProjectActivity project_activities = 1;\n}\n// Request message for killService operation.\nmessage QueryKillServiceRequest {\n}\n// Response message for killService operation.\nmessage QueryKillServiceResponse {\n  bool kill_service = 1;\n}\n// Request message for panic operation.\nmessage QueryPanicRequest {\n}\n// Response message for panic operation.\nmessage QueryPanicResponse {\n  bool panic = 1;\n}\n// Request message for addProject operation.\nmessage MutationAddProjectRequest {\n  ProjectInput project = 1;\n}\n// Response message for addProject operation.\nmessage MutationAddProjectResponse {\n  Project add_project = 1;\n}\n// Request message for addMilestone operation.\nmessage MutationAddMilestoneRequest {\n  MilestoneInput milestone = 1;\n}\n// Response message for addMilestone operation.\nmessage MutationAddMilestoneResponse {\n  Milestone add_milestone = 1;\n}\n// Request message for addTask operation.\nmessage MutationAddTaskRequest {\n  TaskInput task = 1;\n}\n// Response message for addTask operation.\nmessage MutationAddTaskResponse {\n  Task add_task = 1;\n}\n// Request message for updateProjectStatus operation.\nmessage MutationUpdateProjectStatusRequest {\n  string project_id = 1;\n  ProjectStatus status = 2;\n}\n// Response message for updateProjectStatus operation.\nmessage MutationUpdateProjectStatusResponse {\n  ProjectUpdate update_project_status = 1;\n}\n\nmessage Project {\n  string id = 1;\n  string name = 2;\n  google.protobuf.StringValue description = 3;\n  google.protobuf.StringValue start_date = 4;\n  google.protobuf.StringValue end_date = 5;\n  ProjectStatus status = 6;\n  repeated Employee team_members = 7;\n  repeated Product related_products = 8;\n  ListOfString milestone_ids = 9;\n  repeated Milestone milestones = 10;\n  repeated Task tasks = 11;\n  google.protobuf.DoubleValue progress = 12;\n}\n\nmessage Milestone {\n  string id = 1;\n  string project_id = 2;\n  string name = 3;\n  google.protobuf.StringValue description = 4;\n  google.protobuf.StringValue start_date = 5;\n  google.protobuf.StringValue end_date = 6;\n  MilestoneStatus status = 7;\n  google.protobuf.DoubleValue completion_percentage = 8;\n}\n\nmessage Task {\n  string id = 1;\n  string project_id = 2;\n  google.protobuf.StringValue milestone_id = 3;\n  google.protobuf.Int32Value assignee_id = 4;\n  string name = 5;\n  google.protobuf.StringValue description = 6;\n  TaskPriority priority = 7;\n  TaskStatus status = 8;\n  google.protobuf.DoubleValue estimated_hours = 9;\n  google.protobuf.DoubleValue actual_hours = 10;\n  google.protobuf.StringValue created_at = 11;\n  google.protobuf.StringValue completed_at = 12;\n}\n\nmessage Employee {\n  int32 id = 1;\n  ListOfProject projects = 2;\n  repeated Task assigned_tasks = 3;\n  repeated Task completed_tasks = 4;\n}\n\nmessage Product {\n  string upc = 1;\n  ListOfProject projects = 2;\n}\n\nenum ProjectStatus {\n  PROJECT_STATUS_UNSPECIFIED = 0;\n  PROJECT_STATUS_PLANNING = 1;\n  PROJECT_STATUS_ACTIVE = 2;\n  PROJECT_STATUS_COMPLETED = 3;\n  PROJECT_STATUS_ON_HOLD = 4;\n}\n\nmessage ProjectResource {\n  oneof value {\n  Employee employee = 1;\n  Product product = 2;\n  Milestone milestone = 3;\n  Task task = 4;\n  }\n}\n\nmessage ProjectSearchResult {\n  oneof value {\n  Project project = 1;\n  Milestone milestone = 2;\n  Task task = 3;\n  }\n}\n\nmessage ProjectActivity {\n  oneof value {\n  ProjectUpdate project_update = 1;\n  Milestone milestone = 2;\n  Task task = 3;\n  }\n}\n\nmessage ProjectInput {\n  string name = 1;\n  google.protobuf.StringValue description = 2;\n  google.protobuf.StringValue start_date = 3;\n  google.protobuf.StringValue end_date = 4;\n  ProjectStatus status = 5;\n}\n\nmessage MilestoneInput {\n  string project_id = 1;\n  string name = 2;\n  google.protobuf.StringValue description = 3;\n  google.protobuf.StringValue due_date = 4;\n  MilestoneStatus status = 5;\n}\n\nmessage TaskInput {\n  string project_id = 1;\n  google.protobuf.Int32Value assignee_id = 2;\n  string name = 3;\n  google.protobuf.StringValue description = 4;\n  TaskPriority priority = 5;\n  TaskStatus status = 6;\n  google.protobuf.DoubleValue estimated_hours = 7;\n}\n\nmessage ProjectUpdate {\n  string id = 1;\n  string project_id = 2;\n  int32 updated_by_id = 3;\n  ProjectUpdateType update_type = 4;\n  string description = 5;\n  string timestamp = 6;\n  google.protobuf.StringValue metadata = 7;\n}\n\nmessage Node {\n  oneof instance {\n  Project project = 1;\n  Milestone milestone = 2;\n  Task task = 3;\n  ProjectUpdate project_update = 4;\n  }\n}\n\nmessage Timestamped {\n  oneof instance {\n  Project project = 1;\n  Milestone milestone = 2;\n  }\n}\n\nmessage Assignable {\n  oneof instance {\n  Task task = 1;\n  }\n}\n\nenum MilestoneStatus {\n  MILESTONE_STATUS_UNSPECIFIED = 0;\n  MILESTONE_STATUS_PENDING = 1;\n  MILESTONE_STATUS_IN_PROGRESS = 2;\n  MILESTONE_STATUS_COMPLETED = 3;\n  MILESTONE_STATUS_DELAYED = 4;\n}\n\nenum TaskStatus {\n  TASK_STATUS_UNSPECIFIED = 0;\n  TASK_STATUS_TODO = 1;\n  TASK_STATUS_IN_PROGRESS = 2;\n  TASK_STATUS_REVIEW = 3;\n  TASK_STATUS_COMPLETED = 4;\n  TASK_STATUS_BLOCKED = 5;\n}\n\nenum TaskPriority {\n  TASK_PRIORITY_UNSPECIFIED = 0;\n  TASK_PRIORITY_LOW = 1;\n  TASK_PRIORITY_MEDIUM = 2;\n  TASK_PRIORITY_HIGH = 3;\n  TASK_PRIORITY_URGENT = 4;\n}\n\nenum ProjectUpdateType {\n  PROJECT_UPDATE_TYPE_UNSPECIFIED = 0;\n  PROJECT_UPDATE_TYPE_STATUS_CHANGE = 1;\n  PROJECT_UPDATE_TYPE_MILESTONE_ADDED = 2;\n  PROJECT_UPDATE_TYPE_TASK_ASSIGNED = 3;\n  PROJECT_UPDATE_TYPE_PROGRESS_UPDATE = 4;\n  PROJECT_UPDATE_TYPE_TEAM_CHANGE = 5;\n}",
            "plugin": {
              "name": "projects",
              "version": "v3",
              "imageReference": {
                "repository": "afca35e7-3696-44a9-85b4-3c4a98c39381/image",
                "reference": "v1"
              }
            }
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "411d98b0-1d75-4657-90eb-d020a72d8e7d",
        "keys": [
          {
            "typeName": "Project",
            "selectionSet": "id"
          },
          {
            "typeName": "Milestone",
            "selectionSet": "id"
          },
          {
            "typeName": "Task",
            "selectionSet": "id"
          },
          {
            "typeName": "Employee",
            "selectionSet": "id"
          },
          {
            "typeName": "Product",
            "selectionSet": "upc"
          }
        ]
      }
    ],
    "fieldConfigurations": [
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdated",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "subscriptionFilterCondition": {
          "not": {
            "in": {
              "fieldPath": [
                "id"
              ],
              "json": "[2,6,9,10,12]"
            }
          }
        }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyKafka",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "subscriptionFilterCondition": {
          "in": {
            "fieldPath": [
              "id"
            ],
            "json": "[1,3,4,7,11]"
          }
        }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyKafkaWithListFieldArguments",
        "argumentsConfiguration": [
          {
            "name": "firstIds",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "secondIds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "subscriptionFilterCondition": {
          "in": {
            "fieldPath": [
              "id"
            ],
            "json": "[\"{{ args.firstIds }}\",\"{{ args.secondIds }}\"]"
          }
        }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument",
        "argumentsConfiguration": [
          {
            "name": "input",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "subscriptionFilterCondition": {
          "or": [
            {
              "in": {
                "fieldPath": [
                  "id"
                ],
                "json": "[\"{{ args.input.ids }}\"]"
              }
            },
            {
              "in": {
                "fieldPath": [
                  "id"
                ],
                "json": "[\"1\"]"
              }
            }
          ]
        }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyRedis",
        "argumentsConfiguration": [
          {
            "name": "ids",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "subscriptionFilterCondition": {
          "in": {
            "fieldPath": [
              "id"
            ],
            "json": "[\"{{ args.ids }}\"]"
          }
        }
      },
      {
        "typeName": "Query",
        "fieldName": "employee",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeAsList",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "teammates",
        "argumentsConfiguration": [
          {
            "name": "team",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "findEmployees",
        "argumentsConfiguration": [
          {
            "name": "criteria",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "sharedThings",
        "argumentsConfiguration": [
          {
            "name": "numOfA",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "numOfB",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeFromEvent",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeFromEventMyNats",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "project",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "projectsByStatus",
        "argumentsConfiguration": [
          {
            "name": "status",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "projectResources",
        "argumentsConfiguration": [
          {
            "name": "projectId",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "searchProjects",
        "argumentsConfiguration": [
          {
            "name": "query",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "milestones",
        "argumentsConfiguration": [
          {
            "name": "projectId",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "tasks",
        "argumentsConfiguration": [
          {
            "name": "projectId",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Query",
        "fieldName": "projectActivities",
        "argumentsConfiguration": [
          {
            "name": "projectId",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeTag",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "tag",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "singleUpload",
        "argumentsConfiguration": [
          {
            "name": "file",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "singleUploadWithInput",
        "argumentsConfiguration": [
          {
            "name": "arg",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "multipleUpload",
        "argumentsConfiguration": [
          {
            "name": "files",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "addFact",
        "argumentsConfiguration": [
          {
            "name": "fact",
            "sourceType": "FIELD_ARGUMENT"
          }
        ],
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "write:fact"
              ]
            },
            {
              "requiredAndScopes": [
                "write:all"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "write:fact"
              ]
            },
            {
              "requiredAndScopes": [
                "write:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateAvailability",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "isAvailable",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateMood",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "mood",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyKafka",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "update",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyNats",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "update",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyRedis",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "update",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyRedisOnCustomChannel",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "update",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "addProject",
        "argumentsConfiguration": [
          {
            "name": "project",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "addMilestone",
        "argumentsConfiguration": [
          {
            "name": "milestone",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "addTask",
        "argumentsConfiguration": [
          {
            "name": "task",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateProjectStatus",
        "argumentsConfiguration": [
          {
            "name": "projectId",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "status",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countEmp",
        "argumentsConfiguration": [
          {
            "name": "max",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "intervalMilliseconds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countEmp2",
        "argumentsConfiguration": [
          {
            "name": "max",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "intervalMilliseconds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countFor",
        "argumentsConfiguration": [
          {
            "name": "count",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countHob",
        "argumentsConfiguration": [
          {
            "name": "max",
            "sourceType": "FIELD_ARGUMENT"
          },
          {
            "name": "intervalMilliseconds",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdated",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyKafka",
        "argumentsConfiguration": [
          {
            "name": "employeeID",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyNats",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedNatsStream",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyRedis",
        "argumentsConfiguration": [
          {
            "name": "id",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Documentation",
        "fieldName": "url",
        "argumentsConfiguration": [
          {
            "name": "product",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Documentation",
        "fieldName": "urls",
        "argumentsConfiguration": [
          {
            "name": "products",
            "sourceType": "FIELD_ARGUMENT"
          }
        ]
      },
      {
        "typeName": "Employee",
        "fieldName": "startDate",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:employee",
                "read:private"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "read:employee",
                "read:private"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "Query",
        "fieldName": "topSecretFederationFacts",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:fact"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "read:fact"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "Query",
        "fieldName": "factTypes",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "TopSecretFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "TopSecretFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "read:scalar"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all"
              ]
            }
          ]
        }
      },
      {
        "typeName": "MiscellaneousFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            {
              "requiredAndScopes": [
                "read:scalar",
                "read:miscellaneous"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all",
                "read:miscellaneous"
              ]
            }
          ],
          "requiredOrScopesByOr": [
            {
              "requiredAndScopes": [
                "read:scalar",
                "read:miscellaneous"
              ]
            },
            {
              "requiredAndScopes": [
                "read:all",
                "read:miscellaneous"
              ]
            }
          ]
        }
      },
      {
        "typeName": "MiscellaneousFact",
        "fieldName": "factType",
        "authorizationConfiguration": {
          "requiresAuthentication": true
        }
      }
    ],
    "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee! @tag(name: \"internal\")\n  \"\"\" This is a GraphQL query that retrieves a list of employees.\"\"\"\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n  factTypes: [TopSecretFactType!]\n  sharedThings(numOfA: Int!, numOfB: Int!): [Thing!]!\n  employeeFromEvent(id: Int!): Employee!\n  employeeFromEventMyNats(employeeID: Int!): Employee!\n  projects: [Project!]!\n  project(id: ID!): Project\n  projectStatuses: [ProjectStatus!]!\n  projectsByStatus(status: ProjectStatus!): [Project!]!\n  projectResources(projectId: ID!): [ProjectResource!]!\n  searchProjects(query: String!): [ProjectSearchResult!]!\n  milestones(projectId: ID!): [Milestone!]!\n  tasks(projectId: ID!): [Task!]!\n  projectActivities(projectId: ID!): [ProjectActivity!]!\n  killService: Boolean!\n  panic: Boolean!\n}\n\nscalar Upload\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  singleUpload(file: Upload!): Boolean!\n  singleUploadWithInput(arg: FileUpload!): Boolean!\n  multipleUpload(files: [Upload!]!): Boolean!\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n  \"\"\" This mutation updates the availability status of an employee in the system.\n  \"\"\"\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n  \"\"\" This mutation update the mood of an employee. \"\"\"\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n  updateEmployeeMyKafka(employeeID: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyNats(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedis(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedisOnCustomChannel(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  addProject(project: ProjectInput!): Project!\n  addMilestone(milestone: MilestoneInput!): Milestone!\n  addTask(task: TaskInput!): Task!\n  updateProjectStatus(projectId: ID!, status: ProjectStatus!): ProjectUpdate!\n}\n\ninput FileUpload {\n  nested: DeeplyNestedFileUpload\n  nestedList: [Upload!]\n}\n\ninput DeeplyNestedFileUpload {\n  file: Upload!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countFor(count: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n  employeeUpdated(employeeID: Int!): Employee!\n  employeeUpdatedMyKafka(employeeID: Int!): Employee!\n  employeeUpdatedMyNats(id: Int!): Employee!\n  employeeUpdatedNatsStream(id: Int!): Employee!\n  employeeUpdatedMyRedis(id: Int!): Employee!\n  employeeUpdates: Employee!\n  filteredEmployeeUpdated(id: Int!): Employee!\n  filteredEmployeeUpdatedMyKafka(employeeID: ID!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithListFieldArguments(firstIds: [ID!]!, secondIds: [ID!]!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument(input: KafkaInput!): Employee!\n  filteredEmployeeUpdatedMyRedis(ids: [ID!]!): Employee!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated(reason: \"No longer supported\")\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n  APATHETIC @inaccessible\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  isLeadAvailable: Boolean\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\n\"\"\" Allows to filter employees by their details. \"\"\"\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ntype Thing {\n  a: String!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nscalar openfed__SubscriptionFilterValue\n\ninput openfed__SubscriptionFieldCondition {\n  fieldPath: String!\n  values: [openfed__SubscriptionFilterValue]!\n}\n\ninput openfed__SubscriptionFilterCondition {\n  AND: [openfed__SubscriptionFilterCondition!]\n  IN: openfed__SubscriptionFieldCondition\n  NOT: openfed__SubscriptionFilterCondition\n  OR: [openfed__SubscriptionFilterCondition!]\n}\n\ninput UpdateEmployeeInput {\n  name: String\n  email: String\n}\n\ninput KafkaInput {\n  ids: [Int!]!\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\ninput ProjectInput {\n  name: String!\n  description: String\n  startDate: String\n  endDate: String\n  status: ProjectStatus!\n}\n\ninput MilestoneInput {\n  projectId: ID!\n  name: String!\n  description: String\n  dueDate: String\n  status: MilestoneStatus!\n}\n\ninput TaskInput {\n  projectId: ID!\n  assigneeId: Int\n  name: String!\n  description: String\n  priority: TaskPriority!\n  status: TaskStatus!\n  estimatedHours: Float\n}\n\ninterface Node {\n  id: ID!\n}\n\ninterface Timestamped {\n  startDate: String\n  endDate: String\n}\n\ninterface Assignable {\n  assigneeId: Int\n}\n\nenum ProjectStatus {\n  PLANNING\n  ACTIVE\n  COMPLETED\n  ON_HOLD\n}\n\nenum MilestoneStatus {\n  PENDING\n  IN_PROGRESS\n  COMPLETED\n  DELAYED\n}\n\nenum TaskStatus {\n  TODO\n  IN_PROGRESS\n  REVIEW\n  COMPLETED\n  BLOCKED\n}\n\nenum TaskPriority {\n  LOW\n  MEDIUM\n  HIGH\n  URGENT\n}\n\nenum ProjectUpdateType {\n  STATUS_CHANGE\n  MILESTONE_ADDED\n  TASK_ASSIGNED\n  PROGRESS_UPDATE\n  TEAM_CHANGE\n}\n\nunion ProjectResource = Employee | Product | Milestone | Task\n\nunion ProjectSearchResult = Project | Milestone | Task\n\nunion ProjectActivity = ProjectUpdate | Milestone | Task\n\ntype Product {\n  upc: String!\n  projects: [Project!]\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  currentMood: Mood!\n  derivedMood: Mood!\n  isAvailable: Boolean!\n  rootFieldThrowsError: String\n  rootFieldErrorWrapper: ErrorWrapper\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n  projects: [Project!]\n  assignedTasks: [Task!]!\n  completedTasks: [Task!]!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]) {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n}\n\ntype Project implements Node & Timestamped {\n  id: ID!\n  name: String!\n  description: String\n  startDate: String\n  endDate: String\n  status: ProjectStatus!\n  teamMembers: [Employee!]!\n  relatedProducts: [Product!]!\n  milestoneIds: [String!]\n  milestones: [Milestone!]!\n  tasks: [Task!]!\n  progress: Float\n}\n\ntype Milestone implements Node & Timestamped {\n  id: ID!\n  projectId: ID!\n  name: String!\n  description: String\n  startDate: String\n  endDate: String\n  status: MilestoneStatus!\n  completionPercentage: Float\n}\n\ntype Task implements Node & Assignable {\n  id: ID!\n  projectId: ID!\n  milestoneId: ID\n  assigneeId: Int\n  name: String!\n  description: String\n  priority: TaskPriority!\n  status: TaskStatus!\n  estimatedHours: Float\n  actualHours: Float\n  createdAt: String\n  completedAt: String\n}\n\ntype ProjectUpdate implements Node {\n  id: ID!\n  projectId: ID!\n  updatedById: Int!\n  updateType: ProjectUpdateType!\n  description: String!\n  timestamp: String!\n  metadata: String\n}",
    "stringStorage": {
      "2ebeba33065ef483f119d0097b7cfab1bfe2e1a7": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype City {\n  country: Country\n  name: String!\n  type: String!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  isLeadAvailable: Boolean @requires(fields: \"lead { isAvailable }\")\n  lead: Employee!\n  upc: ID!\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  lead: Employee!\n  upc: ID!\n}\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ninput DeeplyNestedFileUpload {\n  file: Upload!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  pastLocations: [City!]!\n  surname: String! @shareable\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  currentMood: Mood! @external\n  derivedMood: Mood! @requires(fields: \"currentMood\")\n  details: Details! @shareable\n  id: Int!\n  isAvailable: Boolean! @external\n  notes: String @shareable\n  role: RoleType!\n  rootFieldErrorWrapper: ErrorWrapper @goField(forceResolver: true)\n  rootFieldThrowsError: String @goField(forceResolver: true)\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  tag: String!\n  updatedAt: String!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n  title: [String!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ntype ErrorWrapper {\n  errorField: String @goField(forceResolver: true)\n  okField: String\n}\n\ninput FileUpload {\n  nested: DeeplyNestedFileUpload\n  nestedList: [Upload!]\n}\n\ninterface IProduct {\n  engineers: [Employee!]!\n  upc: ID!\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Mutation {\n  multipleUpload(files: [Upload!]!): Boolean!\n  singleUpload(file: Upload!): Boolean!\n  singleUploadWithInput(arg: FileUpload!): Boolean!\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n  title: [String!]!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  firstEmployee: Employee! @tag(name: \"internal\")\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n  upc: ID!\n}\n\ntype Subscription {\n  countEmp(intervalMilliseconds: Int!, max: Int!): Int!\n  countEmp2(intervalMilliseconds: Int!, max: Int!): Int!\n  countFor(count: Int!): Int!\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n}\n\ntype Time {\n  timeStamp: String!\n  unixTime: Int!\n}\n\nscalar Upload\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "6618be4cd5102db58a9821e09dfa49eec9262146": "schema {\n  query: Query\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Alligator implements Animal & Pet {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ntype Cat implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\ntype Details {\n  forename: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  middlename: String @deprecated\n  nationality: Nationality!\n  pets: [Pet]\n  surname: String! @shareable\n}\n\ntype Dog implements Animal & Pet {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Employee @key(fields: \"id\") {\n  details: Details @shareable\n  id: Int!\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\ntype Mouse implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput NestedSearchInput {\n  hasChildren: Boolean\n  maritalStatus: MaritalStatus\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Query {\n  \"\"\" This is a GraphQL query that retrieves a list of employees.\"\"\"\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\n\"\"\" Allows to filter employees by their details. \"\"\"\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "68291c651cf7b5b50afb169bd12d2cd1ebf4ded6": "schema {\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Employee @key(fields: \"id\") {\n  hobbies: [Hobby!]\n  id: Int!\n}\n\ntype Exercise implements Hobby {\n  category: ExerciseType!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  CARD\n  FPS\n  ROGUELITE\n  RPG\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype SDK @key(fields: \"upc\") {\n  clientLanguages: [ProgrammingLanguage!]!\n  upc: ID!\n}\n\ntype Subscription {\n  countHob(intervalMilliseconds: Int!, max: Int!): Int!\n}\n\ntype Travelling implements Hobby {\n  countriesLived: [Country!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "c8cc058566134270eaf1cf6638137eec5a7de07e": "schema @link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"]) {\n  query: Queries\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Consultancy @key(fields: \"upc\") {\n  name: ProductName!\n  upc: ID!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  name: ProductName!\n  repositoryURL: String!\n  upc: ID!\n}\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n  title: String!\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  notes: String @override(from: \"employees\")\n  products: [ProductName!]!\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]) {\n  description: FactContent!\n  factType: TopSecretFactType\n  title: String!\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\ntype MiscellaneousFact implements TopSecretFact {\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n  title: String!\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Queries {\n  factTypes: [TopSecretFactType!]\n  productTypes: [Products!]!\n  sharedThings(numOfA: Int!, numOfB: Int!): [Thing!]! @shareable\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n}\n\ntype Thing {\n  a: String! @shareable\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ninput TopSecretFactInput {\n  description: FactContent!\n  factType: TopSecretFactType!\n  title: String!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "0327ed440f0c9e1684722cbb987bc8d3283c5532": "schema {\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n\ntype Mutation {\n  \"\"\" This mutation updates the availability status of an employee in the system.\n  \"\"\"\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "cb7653f92b2599bd46ae73a84b8d7d5c359fb3b2": "schema {\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  currentMood: Mood!\n  id: Int!\n}\n\nenum Mood {\n  APATHETIC @inaccessible\n  HAPPY\n  SAD\n}\n\ntype Mutation {\n  \"\"\" This mutation update the mood of an employee. \"\"\"\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "435637e5d9d211db9a6310f4ee87b34b6ad76f50": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @edfs__kafkaPublish(providerId: String! = \"default\", topic: String!) on FIELD_DEFINITION\n\ndirective @edfs__kafkaSubscribe(providerId: String! = \"default\", topics: [String!]!) on FIELD_DEFINITION\n\ndirective @edfs__natsPublish(providerId: String! = \"default\", subject: String!) on FIELD_DEFINITION\n\ndirective @edfs__natsRequest(providerId: String! = \"default\", subject: String!) on FIELD_DEFINITION\n\ndirective @edfs__natsSubscribe(providerId: String! = \"default\", streamConfiguration: edfs__NatsStreamConfiguration, subjects: [String!]!) on FIELD_DEFINITION\n\ndirective @edfs__redisPublish(channel: String!, providerId: String! = \"default\") on FIELD_DEFINITION\n\ndirective @edfs__redisSubscribe(channels: [String!]!, providerId: String! = \"default\") on FIELD_DEFINITION\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @openfed__subscriptionFilter(condition: openfed__SubscriptionFilterCondition!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\", resolvable: false) {\n  id: Int! @external\n}\n\ninput KafkaInput {\n  ids: [Int!]!\n}\n\ntype Mutation {\n  updateEmployeeMyKafka(employeeID: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__kafkaPublish(topic: \"employeeUpdated\", providerId: \"my-kafka\")\n  updateEmployeeMyNats(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__natsPublish(subject: \"employeeUpdatedMyNats.{{ args.id }}\", providerId: \"my-nats\")\n  updateEmployeeMyRedis(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__redisPublish(channel: \"employeeUpdatedMyRedis\", providerId: \"my-redis\")\n  updateEmployeeMyRedisOnCustomChannel(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__redisPublish(channel: \"employeeUpdatedMyRedis.{{ args.id }}\", providerId: \"my-redis\")\n}\n\ntype Query {\n  employeeFromEvent(id: Int!): Employee! @edfs__natsRequest(subject: \"getEmployee.{{ args.id }}\")\n  employeeFromEventMyNats(employeeID: Int!): Employee! @edfs__natsRequest(subject: \"getEmployeeMyNats.{{ args.employeeID }}\", providerId: \"my-nats\")\n}\n\ntype Subscription {\n  employeeUpdated(employeeID: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdated.{{ args.employeeID }}\"])\n  employeeUpdatedMyKafka(employeeID: Int!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\")\n  employeeUpdatedMyNats(id: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdatedMyNats.{{ args.id }}\", \"employeeUpdatedMyNatsTwo.{{ args.id }}\"], providerId: \"my-nats\")\n  employeeUpdatedMyRedis(id: Int!): Employee! @edfs__redisSubscribe(channels: [\"employeeUpdatedMyRedis.{{ args.id }}\"], providerId: \"my-redis\")\n  employeeUpdatedNatsStream(id: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdated.{{ args.id }}\"], streamConfiguration: {consumerName: \"consumerName\", streamName: \"streamName\"})\n  employeeUpdates: Employee! @edfs__redisSubscribe(channels: [\"employeeUpdatedMyRedis\"], providerId: \"my-redis\")\n  filteredEmployeeUpdated(id: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdated.{{ args.id }}\"]) @openfed__subscriptionFilter(condition: {NOT: {IN: {fieldPath: \"id\", values: [2, 6, 9, 10, 12]}}})\n  filteredEmployeeUpdatedMyKafka(employeeID: ID!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\") @openfed__subscriptionFilter(condition: {IN: {fieldPath: \"id\", values: [1, 3, 4, 7, 11]}})\n  filteredEmployeeUpdatedMyKafkaWithListFieldArguments(firstIds: [ID!]!, secondIds: [ID!]!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\") @openfed__subscriptionFilter(condition: {IN: {fieldPath: \"id\", values: [\"{{ args.firstIds }}\", \"{{ args.secondIds }}\"]}})\n  filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument(input: KafkaInput!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\") @openfed__subscriptionFilter(condition: {OR: [{IN: {fieldPath: \"id\", values: [\"{{ args.input.ids }}\"]}}, {IN: {fieldPath: \"id\", values: [\"1\"]}}]})\n  filteredEmployeeUpdatedMyRedis(ids: [ID!]!): Employee! @edfs__redisSubscribe(channels: [\"employeeUpdatedMyRedis\"], providerId: \"my-redis\") @openfed__subscriptionFilter(condition: {IN: {fieldPath: \"id\", values: [\"{{ args.ids }}\"]}})\n}\n\ninput UpdateEmployeeInput {\n  email: String\n  name: String\n}\n\ninput edfs__NatsStreamConfiguration {\n  consumerInactiveThreshold: Int! = 30\n  consumerName: String!\n  streamName: String!\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\nscalar openfed__FieldSet\n\ninput openfed__SubscriptionFieldCondition {\n  fieldPath: String!\n  values: [openfed__SubscriptionFilterValue]!\n}\n\ninput openfed__SubscriptionFilterCondition {\n  AND: [openfed__SubscriptionFilterCondition!]\n  IN: openfed__SubscriptionFieldCondition\n  NOT: openfed__SubscriptionFilterCondition\n  OR: [openfed__SubscriptionFilterCondition!]\n}\n\nscalar openfed__SubscriptionFilterValue",
      "434c81d2641719cf37fd8fd0ba948743e847ff21": "schema @link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"]) {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ninterface Assignable {\n  assigneeId: Int\n}\n\ntype Employee @key(fields: \"id\") {\n  assignedTasks: [Task!]!\n  completedTasks: [Task!]!\n  id: Int!\n  projects: [Project!]\n}\n\ntype Milestone implements Node & Timestamped @key(fields: \"id\") {\n  completionPercentage: Float\n  description: String\n  endDate: String\n  id: ID!\n  name: String!\n  projectId: ID!\n  startDate: String\n  status: MilestoneStatus!\n}\n\ninput MilestoneInput {\n  description: String\n  dueDate: String\n  name: String!\n  projectId: ID!\n  status: MilestoneStatus!\n}\n\nenum MilestoneStatus {\n  COMPLETED\n  DELAYED\n  IN_PROGRESS\n  PENDING\n}\n\ntype Mutation {\n  addMilestone(milestone: MilestoneInput!): Milestone!\n  addProject(project: ProjectInput!): Project!\n  addTask(task: TaskInput!): Task!\n  updateProjectStatus(projectId: ID!, status: ProjectStatus!): ProjectUpdate!\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype Product @key(fields: \"upc\") {\n  projects: [Project!]\n  upc: String!\n}\n\ntype Project implements Node & Timestamped @key(fields: \"id\") {\n  description: String\n  endDate: String\n  id: ID!\n  milestoneIds: [String!]\n  milestones: [Milestone!]!\n  name: String!\n  progress: Float\n  relatedProducts: [Product!]!\n  startDate: String\n  status: ProjectStatus!\n  tasks: [Task!]!\n  teamMembers: [Employee!]!\n}\n\nunion ProjectActivity = Milestone | ProjectUpdate | Task\n\ninput ProjectInput {\n  description: String\n  endDate: String\n  name: String!\n  startDate: String\n  status: ProjectStatus!\n}\n\nunion ProjectResource = Employee | Milestone | Product | Task\n\nunion ProjectSearchResult = Milestone | Project | Task\n\nenum ProjectStatus {\n  ACTIVE\n  COMPLETED\n  ON_HOLD\n  PLANNING\n}\n\ntype ProjectUpdate implements Node {\n  description: String!\n  id: ID!\n  metadata: String\n  projectId: ID!\n  timestamp: String!\n  updateType: ProjectUpdateType!\n  updatedById: Int!\n}\n\nenum ProjectUpdateType {\n  MILESTONE_ADDED\n  PROGRESS_UPDATE\n  STATUS_CHANGE\n  TASK_ASSIGNED\n  TEAM_CHANGE\n}\n\ntype Query {\n  killService: Boolean!\n  milestones(projectId: ID!): [Milestone!]!\n  panic: Boolean!\n  project(id: ID!): Project\n  projectActivities(projectId: ID!): [ProjectActivity!]!\n  projectResources(projectId: ID!): [ProjectResource!]!\n  projectStatuses: [ProjectStatus!]!\n  projects: [Project!]!\n  projectsByStatus(status: ProjectStatus!): [Project!]!\n  searchProjects(query: String!): [ProjectSearchResult!]!\n  tasks(projectId: ID!): [Task!]!\n}\n\ntype Task implements Assignable & Node @key(fields: \"id\") {\n  actualHours: Float\n  assigneeId: Int\n  completedAt: String\n  createdAt: String\n  description: String\n  estimatedHours: Float\n  id: ID!\n  milestoneId: ID\n  name: String!\n  priority: TaskPriority!\n  projectId: ID!\n  status: TaskStatus!\n}\n\ninput TaskInput {\n  assigneeId: Int\n  description: String\n  estimatedHours: Float\n  name: String!\n  priority: TaskPriority!\n  projectId: ID!\n  status: TaskStatus!\n}\n\nenum TaskPriority {\n  HIGH\n  LOW\n  MEDIUM\n  URGENT\n}\n\nenum TaskStatus {\n  BLOCKED\n  COMPLETED\n  IN_PROGRESS\n  REVIEW\n  TODO\n}\n\ninterface Timestamped {\n  endDate: String\n  startDate: String\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope"
    },
    "graphqlClientSchema": "type Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee!\n\n  \"\"\" This is a GraphQL query that retrieves a list of employees.\"\"\"\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n  factTypes: [TopSecretFactType!]\n  sharedThings(numOfA: Int!, numOfB: Int!): [Thing!]!\n  employeeFromEvent(id: Int!): Employee!\n  employeeFromEventMyNats(employeeID: Int!): Employee!\n  projects: [Project!]!\n  project(id: ID!): Project\n  projectStatuses: [ProjectStatus!]!\n  projectsByStatus(status: ProjectStatus!): [Project!]!\n  projectResources(projectId: ID!): [ProjectResource!]!\n  searchProjects(query: String!): [ProjectSearchResult!]!\n  milestones(projectId: ID!): [Milestone!]!\n  tasks(projectId: ID!): [Task!]!\n  projectActivities(projectId: ID!): [ProjectActivity!]!\n  killService: Boolean!\n  panic: Boolean!\n}\n\nscalar Upload\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  singleUpload(file: Upload!): Boolean!\n  singleUploadWithInput(arg: FileUpload!): Boolean!\n  multipleUpload(files: [Upload!]!): Boolean!\n  addFact(fact: TopSecretFactInput!): TopSecretFact!\n\n  \"\"\" This mutation updates the availability status of an employee in the system.\n  \"\"\"\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n\n  \"\"\" This mutation update the mood of an employee. \"\"\"\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n  updateEmployeeMyKafka(employeeID: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyNats(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedis(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedisOnCustomChannel(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  addProject(project: ProjectInput!): Project!\n  addMilestone(milestone: MilestoneInput!): Milestone!\n  addTask(task: TaskInput!): Task!\n  updateProjectStatus(projectId: ID!, status: ProjectStatus!): ProjectUpdate!\n}\n\ninput FileUpload {\n  nested: DeeplyNestedFileUpload\n  nestedList: [Upload!]\n}\n\ninput DeeplyNestedFileUpload {\n  file: Upload!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countFor(count: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n  employeeUpdated(employeeID: Int!): Employee!\n  employeeUpdatedMyKafka(employeeID: Int!): Employee!\n  employeeUpdatedMyNats(id: Int!): Employee!\n  employeeUpdatedNatsStream(id: Int!): Employee!\n  employeeUpdatedMyRedis(id: Int!): Employee!\n  employeeUpdates: Employee!\n  filteredEmployeeUpdated(id: Int!): Employee!\n  filteredEmployeeUpdatedMyKafka(employeeID: ID!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithListFieldArguments(firstIds: [ID!]!, secondIds: [ID!]!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument(input: KafkaInput!): Employee!\n  filteredEmployeeUpdatedMyRedis(ids: [ID!]!): Employee!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  isLeadAvailable: Boolean\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\n\"\"\" Allows to filter employees by their details. \"\"\"\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ntype Thing {\n  a: String!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nscalar openfed__SubscriptionFilterValue\n\ninput openfed__SubscriptionFieldCondition {\n  fieldPath: String!\n  values: [openfed__SubscriptionFilterValue]!\n}\n\ninput openfed__SubscriptionFilterCondition {\n  AND: [openfed__SubscriptionFilterCondition!]\n  IN: openfed__SubscriptionFieldCondition\n  NOT: openfed__SubscriptionFilterCondition\n  OR: [openfed__SubscriptionFilterCondition!]\n}\n\ninput UpdateEmployeeInput {\n  name: String\n  email: String\n}\n\ninput KafkaInput {\n  ids: [Int!]!\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\ninput ProjectInput {\n  name: String!\n  description: String\n  startDate: String\n  endDate: String\n  status: ProjectStatus!\n}\n\ninput MilestoneInput {\n  projectId: ID!\n  name: String!\n  description: String\n  dueDate: String\n  status: MilestoneStatus!\n}\n\ninput TaskInput {\n  projectId: ID!\n  assigneeId: Int\n  name: String!\n  description: String\n  priority: TaskPriority!\n  status: TaskStatus!\n  estimatedHours: Float\n}\n\ninterface Node {\n  id: ID!\n}\n\ninterface Timestamped {\n  startDate: String\n  endDate: String\n}\n\ninterface Assignable {\n  assigneeId: Int\n}\n\nenum ProjectStatus {\n  PLANNING\n  ACTIVE\n  COMPLETED\n  ON_HOLD\n}\n\nenum MilestoneStatus {\n  PENDING\n  IN_PROGRESS\n  COMPLETED\n  DELAYED\n}\n\nenum TaskStatus {\n  TODO\n  IN_PROGRESS\n  REVIEW\n  COMPLETED\n  BLOCKED\n}\n\nenum TaskPriority {\n  LOW\n  MEDIUM\n  HIGH\n  URGENT\n}\n\nenum ProjectUpdateType {\n  STATUS_CHANGE\n  MILESTONE_ADDED\n  TASK_ASSIGNED\n  PROGRESS_UPDATE\n  TEAM_CHANGE\n}\n\nunion ProjectResource = Employee | Product | Milestone | Task\n\nunion ProjectSearchResult = Project | Milestone | Task\n\nunion ProjectActivity = ProjectUpdate | Milestone | Task\n\ntype Product {\n  upc: String!\n  projects: [Project!]\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String!\n  currentMood: Mood!\n  derivedMood: Mood!\n  isAvailable: Boolean!\n  rootFieldThrowsError: String\n  rootFieldErrorWrapper: ErrorWrapper\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n  projects: [Project!]\n  assignedTasks: [Task!]!\n  completedTasks: [Task!]!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype Project implements Node & Timestamped {\n  id: ID!\n  name: String!\n  description: String\n  startDate: String\n  endDate: String\n  status: ProjectStatus!\n  teamMembers: [Employee!]!\n  relatedProducts: [Product!]!\n  milestoneIds: [String!]\n  milestones: [Milestone!]!\n  tasks: [Task!]!\n  progress: Float\n}\n\ntype Milestone implements Node & Timestamped {\n  id: ID!\n  projectId: ID!\n  name: String!\n  description: String\n  startDate: String\n  endDate: String\n  status: MilestoneStatus!\n  completionPercentage: Float\n}\n\ntype Task implements Node & Assignable {\n  id: ID!\n  projectId: ID!\n  milestoneId: ID\n  assigneeId: Int\n  name: String!\n  description: String\n  priority: TaskPriority!\n  status: TaskStatus!\n  estimatedHours: Float\n  actualHours: Float\n  createdAt: String\n  completedAt: String\n}\n\ntype ProjectUpdate implements Node {\n  id: ID!\n  projectId: ID!\n  updatedById: Int!\n  updateType: ProjectUpdateType!\n  description: String!\n  timestamp: String!\n  metadata: String\n}"
  },
  "version": "40e1d970-ab6e-4d55-a9f0-d56b49c0ac23",
  "subgraphs": [
    {
      "id": "e6bdb30c-60aa-4635-a2ee-cded76dfa9ea",
      "name": "employees",
      "routingUrl": "http://localhost:4001/graphql"
    },
    {
      "id": "5baca251-d1d3-497a-ba9b-efd3c6b9f3a7",
      "name": "family",
      "routingUrl": "http://localhost:4002/graphql"
    },
    {
      "id": "713b69f6-8346-4bac-b4ab-30bcec5084fc",
      "name": "hobbies",
      "routingUrl": "http://localhost:4003/graphql"
    },
    {
      "id": "328ddea5-4d13-4174-af17-320dc857f260",
      "name": "products",
      "routingUrl": "http://localhost:4004/graphql"
    },
    {
      "id": "0919868b-b5ea-47ce-b358-c2d1a186172b",
      "name": "availability",
      "routingUrl": "http://localhost:4007/graphql"
    },
    {
      "id": "ef402f01-c421-435c-8bd6-fee4e906ccb6",
      "name": "mood",
      "routingUrl": "http://localhost:4008/graphql"
    },
    {
      "id": "d34b3d57-b6d7-49fc-93b6-ca7b6eb2bd0d",
      "name": "employeeupdated"
    },
    {
      "id": "411d98b0-1d75-4657-90eb-d020a72d8e7d",
      "name": "projects"
    }
  ],
  "compatibilityVersion": "1:{{$COMPOSITION__VERSION}}"
}