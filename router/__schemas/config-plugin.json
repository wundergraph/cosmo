{
  "engineConfig": {
    "defaultFlushInterval": "500",
    "datasourceConfigurations": [
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": ["employee", "employeeAsList", "employees", "products", "teammates", "firstEmployee"]
          },
          { "typeName": "Mutation", "fieldNames": ["updateEmployeeTag", "singleUpload", "multipleUpload"] },
          { "typeName": "Subscription", "fieldNames": ["currentTime", "countEmp", "countEmp2", "countFor"] },
          { "typeName": "Country", "fieldNames": ["key"] },
          {
            "typeName": "Employee",
            "fieldNames": [
              "details",
              "id",
              "tag",
              "role",
              "updatedAt",
              "startDate",
              "derivedMood",
              "rootFieldThrowsError",
              "rootFieldErrorWrapper"
            ],
            "externalFieldNames": ["currentMood", "isAvailable"]
          },
          { "typeName": "Consultancy", "fieldNames": ["upc", "lead", "isLeadAvailable"] },
          { "typeName": "Cosmo", "fieldNames": ["upc", "engineers", "lead"] },
          { "typeName": "SDK", "fieldNames": ["upc", "engineers", "owner", "unicode"] }
        ],
        "childNodes": [
          { "typeName": "RoleType", "fieldNames": ["departments", "title", "employees"] },
          { "typeName": "Identifiable", "fieldNames": ["id"] },
          { "typeName": "Engineer", "fieldNames": ["departments", "title", "employees", "engineerType"] },
          { "typeName": "Marketer", "fieldNames": ["departments", "title", "employees"] },
          { "typeName": "Operator", "fieldNames": ["departments", "title", "employees", "operatorType"] },
          { "typeName": "Details", "fieldNames": ["forename", "location", "surname", "pastLocations"] },
          { "typeName": "City", "fieldNames": ["type", "name", "country"] },
          { "typeName": "CountryKey", "fieldNames": ["name"] },
          { "typeName": "ErrorWrapper", "fieldNames": ["okField", "errorField"] },
          { "typeName": "Time", "fieldNames": ["unixTime", "timeStamp"] },
          { "typeName": "IProduct", "fieldNames": ["upc", "engineers"] }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:4001/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:4001/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n  @link(\n    url: \"https://specs.apollo.dev/federation/v2.5\"\n    import: [\n      \"@authenticated\"\n      \"@composeDirective\"\n      \"@external\"\n      \"@extends\"\n      \"@inaccessible\"\n      \"@interfaceObject\"\n      \"@override\"\n      \"@provides\"\n      \"@key\"\n      \"@requires\"\n      \"@requiresScopes\"\n      \"@shareable\"\n      \"@tag\"\n    ]\n  )\n\ndirective @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee! @tag(name: \"internal\")\n}\n\nscalar Upload\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n\n  singleUpload(file: Upload!): Boolean!\n  multipleUpload(files: [Upload!]!): Boolean!\n}\n\ntype Subscription {\n  \"\"\"\n  `currentTime` will return a stream of `Time` objects.\n  \"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countFor(count: Int!): Int!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType !\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  surname: String! @shareable\n  pastLocations: [City!]!\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  details: Details! @shareable\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String @shareable\n  updatedAt: String!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  currentMood: Mood! @external\n  derivedMood: Mood! @requires(fields: \"currentMood\")\n  # From the `availability` service. Only defined for use in @requires\n  isAvailable: Boolean! @external\n  rootFieldThrowsError: String @goField(forceResolver: true)\n  rootFieldErrorWrapper: ErrorWrapper @goField(forceResolver: true)\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String @goField(forceResolver: true)\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  lead: Employee!\n  isLeadAvailable: Boolean @requires(fields: \"lead { isAvailable }\")\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n}\n"
          },
          "upstreamSchema": { "key": "e1ac6b7a5ce1c20f9494aa60b27c3a717a36bb96" }
        },
        "requestTimeoutSeconds": "10",
        "id": "0",
        "keys": [
          { "typeName": "Country", "selectionSet": "key { name }", "disableEntityResolver": true },
          { "typeName": "Employee", "selectionSet": "id" },
          { "typeName": "Consultancy", "selectionSet": "upc" },
          { "typeName": "Cosmo", "selectionSet": "upc" },
          { "typeName": "SDK", "selectionSet": "upc" }
        ],
        "requires": [
          { "typeName": "Employee", "fieldName": "derivedMood", "selectionSet": "currentMood" },
          { "typeName": "Consultancy", "fieldName": "isLeadAvailable", "selectionSet": "lead { isAvailable }" }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          { "typeName": "Query", "fieldNames": ["findEmployees"] },
          { "typeName": "Employee", "fieldNames": ["id", "details"] }
        ],
        "childNodes": [
          { "typeName": "Animal", "fieldNames": ["class", "gender"] },
          { "typeName": "Pet", "fieldNames": ["class", "gender", "name"] },
          { "typeName": "Alligator", "fieldNames": ["class", "dangerous", "gender", "name"] },
          { "typeName": "Cat", "fieldNames": ["class", "gender", "name", "type"] },
          { "typeName": "Dog", "fieldNames": ["breed", "class", "gender", "name"] },
          { "typeName": "Mouse", "fieldNames": ["class", "gender", "name"] },
          { "typeName": "Pony", "fieldNames": ["class", "gender", "name"] },
          {
            "typeName": "Details",
            "fieldNames": ["forename", "middlename", "surname", "hasChildren", "maritalStatus", "nationality", "pets"]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:4002/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:4002/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ntype Query {\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ntype Details {\n  forename: String! @shareable\n  middlename: String @deprecated\n  surname: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  details: Details @shareable\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n"
          },
          "upstreamSchema": { "key": "8b670d149ca98da92ba108a2d16dea9eaab2d698" }
        },
        "requestTimeoutSeconds": "10",
        "id": "1",
        "keys": [{ "typeName": "Employee", "selectionSet": "id" }]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          { "typeName": "Country", "fieldNames": ["key"] },
          { "typeName": "Employee", "fieldNames": ["id", "hobbies"] },
          { "typeName": "SDK", "fieldNames": ["upc", "clientLanguages"] },
          { "typeName": "Subscription", "fieldNames": ["countHob"] }
        ],
        "childNodes": [
          { "typeName": "Exercise", "fieldNames": ["employees", "category"] },
          { "typeName": "Experience", "fieldNames": ["yearsOfExperience"] },
          { "typeName": "Flying", "fieldNames": ["employees", "planeModels", "yearsOfExperience"] },
          { "typeName": "Gaming", "fieldNames": ["employees", "genres", "name", "yearsOfExperience"] },
          { "typeName": "Other", "fieldNames": ["employees", "name"] },
          { "typeName": "Programming", "fieldNames": ["employees", "languages"] },
          { "typeName": "CountryKey", "fieldNames": ["name"] },
          { "typeName": "Travelling", "fieldNames": ["employees", "countriesLived"] },
          { "typeName": "Hobby", "fieldNames": ["employees"] }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:4003/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:4003/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ndirective @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  category: ExerciseType!\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  countriesLived: [Country!]!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  hobbies: [Hobby!]\n}\n\ntype SDK @key(fields: \"upc\") {\n  upc: ID!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ntype Subscription {\n  countHob(max: Int! intervalMilliseconds: Int!): Int!\n}"
          },
          "upstreamSchema": { "key": "68291c651cf7b5b50afb169bd12d2cd1ebf4ded6" }
        },
        "requestTimeoutSeconds": "10",
        "id": "2",
        "keys": [
          { "typeName": "Country", "selectionSet": "key { name }", "disableEntityResolver": true },
          { "typeName": "Employee", "selectionSet": "id" },
          { "typeName": "SDK", "selectionSet": "upc" }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          { "typeName": "Query", "fieldNames": ["productTypes", "topSecretFederationFacts", "factTypes"] },
          { "typeName": "Mutation", "fieldNames": ["addFact"] },
          { "typeName": "Employee", "fieldNames": ["id", "products", "notes"] },
          { "typeName": "Consultancy", "fieldNames": ["upc", "name"] },
          { "typeName": "Cosmo", "fieldNames": ["upc", "name", "repositoryURL"] }
        ],
        "childNodes": [
          { "typeName": "TopSecretFact", "fieldNames": ["description", "factType"] },
          { "typeName": "DirectiveFact", "fieldNames": ["title", "description", "factType"] },
          { "typeName": "EntityFact", "fieldNames": ["title", "description", "factType"] },
          { "typeName": "MiscellaneousFact", "fieldNames": ["title", "description", "factType"] },
          { "typeName": "Documentation", "fieldNames": ["url", "urls"] }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:4004/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:4004/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\nschema {\n  query: Queries\n  mutation: Mutation\n}\n\ntype Queries {\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n  factTypes: [TopSecretFactType!]\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE,\n  ENTITY,\n  MISCELLANEOUS,\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]){\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  products: [ProductName!]!\n  notes: String @override(from: \"employees\")\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n"
          },
          "upstreamSchema": { "key": "6fc48e020384e7f515722cc94acce1cb0e7ff7c7" }
        },
        "requestTimeoutSeconds": "10",
        "id": "3",
        "keys": [
          { "typeName": "Employee", "selectionSet": "id" },
          { "typeName": "Consultancy", "selectionSet": "upc" },
          { "typeName": "Cosmo", "selectionSet": "upc" }
        ]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          { "typeName": "Mutation", "fieldNames": ["updateAvailability"] },
          { "typeName": "Employee", "fieldNames": ["id", "isAvailable"] }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:4007/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:4007/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ntype Mutation {\n    updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n"
          },
          "upstreamSchema": { "key": "2bbb1465f4a049cf0cc0c380753d9e661fdaaccd" }
        },
        "requestTimeoutSeconds": "10",
        "id": "4",
        "keys": [{ "typeName": "Employee", "selectionSet": "id" }]
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          { "typeName": "Mutation", "fieldNames": ["updateMood"] },
          { "typeName": "Employee", "fieldNames": ["id", "currentMood"] }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:4008/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:4008/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "extend schema\n@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"])\n\ntype Mutation {\n    updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\nenum Mood {\n    HAPPY\n    SAD\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  currentMood: Mood!\n}\n"
          },
          "upstreamSchema": { "key": "67da479a811e98db1680b3e318bbb46ba2616bda" }
        },
        "requestTimeoutSeconds": "10",
        "id": "5",
        "keys": [{ "typeName": "Employee", "selectionSet": "id" }]
      },
      {
        "kind": "PUBSUB",
        "rootNodes": [
          { "typeName": "Query", "fieldNames": ["employeeFromEvent", "employeeFromEventMyNats"] },
          {
            "typeName": "Mutation",
            "fieldNames": [
              "updateEmployeeMyKafka",
              "updateEmployeeMyNats",
              "updateEmployeeMyRedis",
              "updateEmployeeMyRedisOnCustomChannel"
            ]
          },
          {
            "typeName": "Subscription",
            "fieldNames": [
              "employeeUpdated",
              "employeeUpdatedMyKafka",
              "employeeUpdatedMyNats",
              "employeeUpdatedNatsStream",
              "employeeUpdatedMyRedis",
              "employeeUpdates",
              "filteredEmployeeUpdated",
              "filteredEmployeeUpdatedMyKafka",
              "filteredEmployeeUpdatedMyKafkaWithListFieldArguments",
              "filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument",
              "filteredEmployeeUpdatedMyRedis"
            ]
          }
        ],
        "childNodes": [
          { "typeName": "edfs__PublishResult", "fieldNames": ["success"] },
          { "typeName": "Employee", "fieldNames": ["id"], "externalFieldNames": ["id"] }
        ],
        "overrideFieldPathFromAlias": true,
        "requestTimeoutSeconds": "10",
        "id": "6",
        "keys": [{ "typeName": "Employee", "selectionSet": "id", "disableEntityResolver": true }],
        "customEvents": {
          "nats": [
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "REQUEST",
                "typeName": "Query",
                "fieldName": "employeeFromEvent"
              },
              "subjects": ["getEmployee.{{ args.id }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-nats",
                "type": "REQUEST",
                "typeName": "Query",
                "fieldName": "employeeFromEventMyNats"
              },
              "subjects": ["getEmployeeMyNats.{{ args.employeeID }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-nats",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyNats"
              },
              "subjects": ["employeeUpdatedMyNats.{{ args.id }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdated"
              },
              "subjects": ["employeeUpdated.{{ args.employeeID }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-nats",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedMyNats"
              },
              "subjects": ["employeeUpdatedMyNats.{{ args.id }}", "employeeUpdatedMyNatsTwo.{{ args.id }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedNatsStream"
              },
              "subjects": ["employeeUpdated.{{ args.id }}"],
              "streamConfiguration": {
                "consumerName": "consumerName",
                "streamName": "streamName",
                "consumerInactiveThreshold": 30
              }
            },
            {
              "engineEventConfiguration": {
                "providerId": "default",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdated"
              },
              "subjects": ["employeeUpdated.{{ args.id }}"]
            }
          ],
          "kafka": [
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyKafka"
              },
              "topics": ["employeeUpdated"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedMyKafka"
              },
              "topics": ["employeeUpdated", "employeeUpdatedTwo"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyKafka"
              },
              "topics": ["employeeUpdated", "employeeUpdatedTwo"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyKafkaWithListFieldArguments"
              },
              "topics": ["employeeUpdated", "employeeUpdatedTwo"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-kafka",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument"
              },
              "topics": ["employeeUpdated", "employeeUpdatedTwo"]
            }
          ],
          "redis": [
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyRedis"
              },
              "channels": ["employeeUpdatedMyRedis"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "typeName": "Mutation",
                "fieldName": "updateEmployeeMyRedisOnCustomChannel"
              },
              "channels": ["employeeUpdatedMyRedis.{{ args.id }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdatedMyRedis"
              },
              "channels": ["employeeUpdatedMyRedis.{{ args.id }}"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "employeeUpdates"
              },
              "channels": ["employeeUpdatedMyRedis"]
            },
            {
              "engineEventConfiguration": {
                "providerId": "my-redis",
                "type": "SUBSCRIBE",
                "typeName": "Subscription",
                "fieldName": "filteredEmployeeUpdatedMyRedis"
              },
              "channels": ["employeeUpdatedMyRedis"]
            }
          ]
        }
      },
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          { "typeName": "Query", "fieldNames": ["searchDragons", "getTrainingSessions"] },
          { "typeName": "Mutation", "fieldNames": ["registerDragon", "completeTrainingSession"] }
        ],
        "childNodes": [
          {
            "typeName": "Dragon",
            "fieldNames": [
              "id",
              "name",
              "type",
              "age",
              "skillLevel",
              "riderId",
              "rider",
              "wingspan",
              "temperament",
              "specialAbilities",
              "isAvailableForBonding"
            ]
          },
          {
            "typeName": "Rider",
            "fieldNames": [
              "id",
              "name",
              "skillLevel",
              "dragonId",
              "dragon",
              "completedTrainingSessions",
              "currentMission",
              "academyRank"
            ]
          },
          {
            "typeName": "TrainingSession",
            "fieldNames": [
              "id",
              "type",
              "difficulty",
              "riderId",
              "rider",
              "dragonId",
              "dragon",
              "duration",
              "completed",
              "score",
              "notes"
            ]
          },
          {
            "typeName": "Mission",
            "fieldNames": [
              "id",
              "title",
              "description",
              "requiredSkillLevel",
              "status",
              "assignedRiderId",
              "assignedRider",
              "rewardPoints",
              "dangerLevel"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "dns:///localhost:4011" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": { "enabled": true },
          "federation": {
            "enabled": true,
            "serviceSdl": "# Dragon Rider Academy GraphQL Schema\n# A magical academy where brave souls bond with dragons and master the ancient arts of dragon riding\n\n# Enums\nenum DragonType {\n  FIRE\n  ICE\n  STORM\n  EARTH\n  SHADOW\n  CELESTIAL\n}\n\nenum SkillLevel {\n  NOVICE\n  APPRENTICE\n  ADEPT\n  MASTER\n  LEGENDARY\n}\n\nenum TrainingType {\n  FLIGHT_BASICS\n  COMBAT_MANEUVERS\n  ELEMENTAL_MASTERY\n  BONDING_RITUAL\n  AERIAL_ACROBATICS\n}\n\nenum MissionStatus {\n  AVAILABLE\n  IN_PROGRESS\n  COMPLETED\n  FAILED\n}\n\n# Types\ntype Dragon {\n  id: ID!\n  name: String!\n  type: DragonType!\n  age: Int!\n  skillLevel: SkillLevel!\n  riderId: ID\n  rider: Rider\n  wingspan: Float!\n  temperament: String!\n  specialAbilities: [String!]!\n  isAvailableForBonding: Boolean!\n}\n\ntype Rider {\n  id: ID!\n  name: String!\n  skillLevel: SkillLevel!\n  dragonId: ID\n  dragon: Dragon\n  completedTrainingSessions: Int!\n  currentMission: Mission\n  academyRank: String!\n}\n\ntype TrainingSession {\n  id: ID!\n  type: TrainingType!\n  difficulty: SkillLevel!\n  riderId: ID!\n  rider: Rider!\n  dragonId: ID!\n  dragon: Dragon!\n  duration: Int! # in minutes\n  completed: Boolean!\n  score: Int # 0-100\n  notes: String\n}\n\ntype Mission {\n  id: ID!\n  title: String!\n  description: String!\n  requiredSkillLevel: SkillLevel!\n  status: MissionStatus!\n  assignedRiderId: ID\n  assignedRider: Rider\n  rewardPoints: Int!\n  dangerLevel: Int! # 1-10\n}\n\n# Input Types\ninput RegisterDragonInput {\n  name: String!\n  type: DragonType!\n  age: Int!\n  wingspan: Float!\n  temperament: String!\n  specialAbilities: [String!]!\n}\n\ninput CreateTrainingSessionInput {\n  type: TrainingType!\n  riderId: ID!\n  dragonId: ID!\n  duration: Int!\n  notes: String\n}\n\ninput DragonSearchFilters {\n  type: DragonType\n  minAge: Int\n  maxAge: Int\n  skillLevel: SkillLevel\n  availableForBonding: Boolean\n  minWingspan: Float\n}\n\ninput TrainingSessionFilters {\n  riderId: ID\n  dragonId: ID\n  type: TrainingType\n  completed: Boolean\n  minScore: Int\n}\n\n# Queries\ntype Query {\n  # Search for dragons in the academy with optional filters\n  searchDragons(filters: DragonSearchFilters): [Dragon!]!\n  \n  # Get training sessions with filters - used by instructors to track progress\n  getTrainingSessions(filters: TrainingSessionFilters!): [TrainingSession!]!\n}\n\n# Mutations  \ntype Mutation {\n  # Register a new dragon that has arrived at the academy\n  registerDragon(input: RegisterDragonInput!): Dragon!\n  \n  # Create and complete a training session between a rider and dragon\n  completeTrainingSession(input: CreateTrainingSessionInput!, score: Int!): TrainingSession!\n}\n\n# Schema\nschema {\n  query: Query\n  mutation: Mutation\n}"
          },
          "upstreamSchema": { "key": "4be0385319a346e0c0232485a5c8908ce60c48f6" },
          "grpc": {
            "mapping": {
              "version": 1,
              "service": "CustomConfigPluginService",
              "operationMappings": [
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "searchDragons",
                  "mapped": "QuerySearchDragons",
                  "request": "QuerySearchDragonsRequest",
                  "response": "QuerySearchDragonsResponse"
                },
                {
                  "type": "OPERATION_TYPE_QUERY",
                  "original": "getTrainingSessions",
                  "mapped": "QueryGetTrainingSessions",
                  "request": "QueryGetTrainingSessionsRequest",
                  "response": "QueryGetTrainingSessionsResponse"
                },
                {
                  "type": "OPERATION_TYPE_MUTATION",
                  "original": "registerDragon",
                  "mapped": "MutationRegisterDragon",
                  "request": "MutationRegisterDragonRequest",
                  "response": "MutationRegisterDragonResponse"
                },
                {
                  "type": "OPERATION_TYPE_MUTATION",
                  "original": "completeTrainingSession",
                  "mapped": "MutationCompleteTrainingSession",
                  "request": "MutationCompleteTrainingSessionRequest",
                  "response": "MutationCompleteTrainingSessionResponse"
                }
              ],
              "typeFieldMappings": [
                {
                  "type": "Query",
                  "fieldMappings": [
                    {
                      "original": "searchDragons",
                      "mapped": "search_dragons",
                      "argumentMappings": [{ "original": "filters", "mapped": "filters" }]
                    },
                    {
                      "original": "getTrainingSessions",
                      "mapped": "get_training_sessions",
                      "argumentMappings": [{ "original": "filters", "mapped": "filters" }]
                    }
                  ]
                },
                {
                  "type": "Mutation",
                  "fieldMappings": [
                    {
                      "original": "registerDragon",
                      "mapped": "register_dragon",
                      "argumentMappings": [{ "original": "input", "mapped": "input" }]
                    },
                    {
                      "original": "completeTrainingSession",
                      "mapped": "complete_training_session",
                      "argumentMappings": [
                        { "original": "input", "mapped": "input" },
                        { "original": "score", "mapped": "score" }
                      ]
                    }
                  ]
                },
                {
                  "type": "Dragon",
                  "fieldMappings": [
                    { "original": "id", "mapped": "id" },
                    { "original": "name", "mapped": "name" },
                    { "original": "type", "mapped": "type" },
                    { "original": "age", "mapped": "age" },
                    { "original": "skillLevel", "mapped": "skill_level" },
                    { "original": "riderId", "mapped": "rider_id" },
                    { "original": "rider", "mapped": "rider" },
                    { "original": "wingspan", "mapped": "wingspan" },
                    { "original": "temperament", "mapped": "temperament" },
                    { "original": "specialAbilities", "mapped": "special_abilities" },
                    { "original": "isAvailableForBonding", "mapped": "is_available_for_bonding" }
                  ]
                },
                {
                  "type": "Rider",
                  "fieldMappings": [
                    { "original": "id", "mapped": "id" },
                    { "original": "name", "mapped": "name" },
                    { "original": "skillLevel", "mapped": "skill_level" },
                    { "original": "dragonId", "mapped": "dragon_id" },
                    { "original": "dragon", "mapped": "dragon" },
                    { "original": "completedTrainingSessions", "mapped": "completed_training_sessions" },
                    { "original": "currentMission", "mapped": "current_mission" },
                    { "original": "academyRank", "mapped": "academy_rank" }
                  ]
                },
                {
                  "type": "TrainingSession",
                  "fieldMappings": [
                    { "original": "id", "mapped": "id" },
                    { "original": "type", "mapped": "type" },
                    { "original": "difficulty", "mapped": "difficulty" },
                    { "original": "riderId", "mapped": "rider_id" },
                    { "original": "rider", "mapped": "rider" },
                    { "original": "dragonId", "mapped": "dragon_id" },
                    { "original": "dragon", "mapped": "dragon" },
                    { "original": "duration", "mapped": "duration" },
                    { "original": "completed", "mapped": "completed" },
                    { "original": "score", "mapped": "score" },
                    { "original": "notes", "mapped": "notes" }
                  ]
                },
                {
                  "type": "Mission",
                  "fieldMappings": [
                    { "original": "id", "mapped": "id" },
                    { "original": "title", "mapped": "title" },
                    { "original": "description", "mapped": "description" },
                    { "original": "requiredSkillLevel", "mapped": "required_skill_level" },
                    { "original": "status", "mapped": "status" },
                    { "original": "assignedRiderId", "mapped": "assigned_rider_id" },
                    { "original": "assignedRider", "mapped": "assigned_rider" },
                    { "original": "rewardPoints", "mapped": "reward_points" },
                    { "original": "dangerLevel", "mapped": "danger_level" }
                  ]
                },
                {
                  "type": "RegisterDragonInput",
                  "fieldMappings": [
                    { "original": "name", "mapped": "name" },
                    { "original": "type", "mapped": "type" },
                    { "original": "age", "mapped": "age" },
                    { "original": "wingspan", "mapped": "wingspan" },
                    { "original": "temperament", "mapped": "temperament" },
                    { "original": "specialAbilities", "mapped": "special_abilities" }
                  ]
                },
                {
                  "type": "CreateTrainingSessionInput",
                  "fieldMappings": [
                    { "original": "type", "mapped": "type" },
                    { "original": "riderId", "mapped": "rider_id" },
                    { "original": "dragonId", "mapped": "dragon_id" },
                    { "original": "duration", "mapped": "duration" },
                    { "original": "notes", "mapped": "notes" }
                  ]
                },
                {
                  "type": "DragonSearchFilters",
                  "fieldMappings": [
                    { "original": "type", "mapped": "type" },
                    { "original": "minAge", "mapped": "min_age" },
                    { "original": "maxAge", "mapped": "max_age" },
                    { "original": "skillLevel", "mapped": "skill_level" },
                    { "original": "availableForBonding", "mapped": "available_for_bonding" },
                    { "original": "minWingspan", "mapped": "min_wingspan" }
                  ]
                },
                {
                  "type": "TrainingSessionFilters",
                  "fieldMappings": [
                    { "original": "riderId", "mapped": "rider_id" },
                    { "original": "dragonId", "mapped": "dragon_id" },
                    { "original": "type", "mapped": "type" },
                    { "original": "completed", "mapped": "completed" },
                    { "original": "minScore", "mapped": "min_score" }
                  ]
                }
              ],
              "enumMappings": [
                {
                  "type": "DragonType",
                  "values": [
                    { "original": "FIRE", "mapped": "DRAGON_TYPE_FIRE" },
                    { "original": "ICE", "mapped": "DRAGON_TYPE_ICE" },
                    { "original": "STORM", "mapped": "DRAGON_TYPE_STORM" },
                    { "original": "EARTH", "mapped": "DRAGON_TYPE_EARTH" },
                    { "original": "SHADOW", "mapped": "DRAGON_TYPE_SHADOW" },
                    { "original": "CELESTIAL", "mapped": "DRAGON_TYPE_CELESTIAL" }
                  ]
                },
                {
                  "type": "SkillLevel",
                  "values": [
                    { "original": "NOVICE", "mapped": "SKILL_LEVEL_NOVICE" },
                    { "original": "APPRENTICE", "mapped": "SKILL_LEVEL_APPRENTICE" },
                    { "original": "ADEPT", "mapped": "SKILL_LEVEL_ADEPT" },
                    { "original": "MASTER", "mapped": "SKILL_LEVEL_MASTER" },
                    { "original": "LEGENDARY", "mapped": "SKILL_LEVEL_LEGENDARY" }
                  ]
                },
                {
                  "type": "TrainingType",
                  "values": [
                    { "original": "FLIGHT_BASICS", "mapped": "TRAINING_TYPE_FLIGHT_BASICS" },
                    { "original": "COMBAT_MANEUVERS", "mapped": "TRAINING_TYPE_COMBAT_MANEUVERS" },
                    { "original": "ELEMENTAL_MASTERY", "mapped": "TRAINING_TYPE_ELEMENTAL_MASTERY" },
                    { "original": "BONDING_RITUAL", "mapped": "TRAINING_TYPE_BONDING_RITUAL" },
                    { "original": "AERIAL_ACROBATICS", "mapped": "TRAINING_TYPE_AERIAL_ACROBATICS" }
                  ]
                },
                {
                  "type": "MissionStatus",
                  "values": [
                    { "original": "AVAILABLE", "mapped": "MISSION_STATUS_AVAILABLE" },
                    { "original": "IN_PROGRESS", "mapped": "MISSION_STATUS_IN_PROGRESS" },
                    { "original": "COMPLETED", "mapped": "MISSION_STATUS_COMPLETED" },
                    { "original": "FAILED", "mapped": "MISSION_STATUS_FAILED" }
                  ]
                }
              ]
            },
            "protoSchema": "syntax = \"proto3\";\npackage service;\n\noption go_package = \"github.com/wundergraph/cosmo/plugin\";\n\nimport \"google/protobuf/wrappers.proto\";\n\n// Service definition for CustomConfigPluginService\nservice CustomConfigPluginService {\n  rpc MutationCompleteTrainingSession(MutationCompleteTrainingSessionRequest) returns (MutationCompleteTrainingSessionResponse) {}\n  rpc MutationRegisterDragon(MutationRegisterDragonRequest) returns (MutationRegisterDragonResponse) {}\n  rpc QueryGetTrainingSessions(QueryGetTrainingSessionsRequest) returns (QueryGetTrainingSessionsResponse) {}\n  rpc QuerySearchDragons(QuerySearchDragonsRequest) returns (QuerySearchDragonsResponse) {}\n}\n\n// Request message for searchDragons operation.\nmessage QuerySearchDragonsRequest {\n  DragonSearchFilters filters = 1;\n}\n// Response message for searchDragons operation.\nmessage QuerySearchDragonsResponse {\n  repeated Dragon search_dragons = 1;\n}\n// Request message for getTrainingSessions operation.\nmessage QueryGetTrainingSessionsRequest {\n  TrainingSessionFilters filters = 1;\n}\n// Response message for getTrainingSessions operation.\nmessage QueryGetTrainingSessionsResponse {\n  repeated TrainingSession get_training_sessions = 1;\n}\n// Request message for registerDragon operation.\nmessage MutationRegisterDragonRequest {\n  RegisterDragonInput input = 1;\n}\n// Response message for registerDragon operation.\nmessage MutationRegisterDragonResponse {\n  Dragon register_dragon = 1;\n}\n// Request message for completeTrainingSession operation.\nmessage MutationCompleteTrainingSessionRequest {\n  CreateTrainingSessionInput input = 1;\n  int32 score = 2;\n}\n// Response message for completeTrainingSession operation.\nmessage MutationCompleteTrainingSessionResponse {\n  TrainingSession complete_training_session = 1;\n}\n\nmessage DragonSearchFilters {\n  DragonType type = 1;\n  google.protobuf.Int32Value min_age = 2;\n  google.protobuf.Int32Value max_age = 3;\n  SkillLevel skill_level = 4;\n  google.protobuf.BoolValue available_for_bonding = 5;\n  google.protobuf.DoubleValue min_wingspan = 6;\n}\n\nmessage Dragon {\n  string id = 1;\n  string name = 2;\n  DragonType type = 3;\n  int32 age = 4;\n  SkillLevel skill_level = 5;\n  google.protobuf.StringValue rider_id = 6;\n  Rider rider = 7;\n  double wingspan = 8;\n  string temperament = 9;\n  repeated string special_abilities = 10;\n  bool is_available_for_bonding = 11;\n}\n\nmessage TrainingSessionFilters {\n  google.protobuf.StringValue rider_id = 1;\n  google.protobuf.StringValue dragon_id = 2;\n  TrainingType type = 3;\n  google.protobuf.BoolValue completed = 4;\n  google.protobuf.Int32Value min_score = 5;\n}\n\nmessage TrainingSession {\n  string id = 1;\n  TrainingType type = 2;\n  SkillLevel difficulty = 3;\n  string rider_id = 4;\n  Rider rider = 5;\n  string dragon_id = 6;\n  Dragon dragon = 7;\n  int32 duration = 8;\n  bool completed = 9;\n  google.protobuf.Int32Value score = 10;\n  google.protobuf.StringValue notes = 11;\n}\n\nmessage RegisterDragonInput {\n  string name = 1;\n  DragonType type = 2;\n  int32 age = 3;\n  double wingspan = 4;\n  string temperament = 5;\n  repeated string special_abilities = 6;\n}\n\nmessage CreateTrainingSessionInput {\n  TrainingType type = 1;\n  string rider_id = 2;\n  string dragon_id = 3;\n  int32 duration = 4;\n  google.protobuf.StringValue notes = 5;\n}\n\nenum DragonType {\n  DRAGON_TYPE_UNSPECIFIED = 0;\n  DRAGON_TYPE_FIRE = 1;\n  DRAGON_TYPE_ICE = 2;\n  DRAGON_TYPE_STORM = 3;\n  DRAGON_TYPE_EARTH = 4;\n  DRAGON_TYPE_SHADOW = 5;\n  DRAGON_TYPE_CELESTIAL = 6;\n}\n\nenum SkillLevel {\n  SKILL_LEVEL_UNSPECIFIED = 0;\n  SKILL_LEVEL_NOVICE = 1;\n  SKILL_LEVEL_APPRENTICE = 2;\n  SKILL_LEVEL_ADEPT = 3;\n  SKILL_LEVEL_MASTER = 4;\n  SKILL_LEVEL_LEGENDARY = 5;\n}\n\nenum TrainingType {\n  TRAINING_TYPE_UNSPECIFIED = 0;\n  TRAINING_TYPE_FLIGHT_BASICS = 1;\n  TRAINING_TYPE_COMBAT_MANEUVERS = 2;\n  TRAINING_TYPE_ELEMENTAL_MASTERY = 3;\n  TRAINING_TYPE_BONDING_RITUAL = 4;\n  TRAINING_TYPE_AERIAL_ACROBATICS = 5;\n}\n\nenum MissionStatus {\n  MISSION_STATUS_UNSPECIFIED = 0;\n  MISSION_STATUS_AVAILABLE = 1;\n  MISSION_STATUS_IN_PROGRESS = 2;\n  MISSION_STATUS_COMPLETED = 3;\n  MISSION_STATUS_FAILED = 4;\n}\n\nmessage Rider {\n  string id = 1;\n  string name = 2;\n  SkillLevel skill_level = 3;\n  google.protobuf.StringValue dragon_id = 4;\n  Dragon dragon = 5;\n  int32 completed_training_sessions = 6;\n  Mission current_mission = 7;\n  string academy_rank = 8;\n}\n\nmessage Mission {\n  string id = 1;\n  string title = 2;\n  string description = 3;\n  SkillLevel required_skill_level = 4;\n  MissionStatus status = 5;\n  google.protobuf.StringValue assigned_rider_id = 6;\n  Rider assigned_rider = 7;\n  int32 reward_points = 8;\n  int32 danger_level = 9;\n}"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "7"
      }
    ],
    "fieldConfigurations": [
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdated",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }],
        "subscriptionFilterCondition": { "not": { "in": { "fieldPath": ["id"], "json": "[2,6,9,10,12]" } } }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyKafka",
        "argumentsConfiguration": [{ "name": "employeeID", "sourceType": "FIELD_ARGUMENT" }],
        "subscriptionFilterCondition": { "in": { "fieldPath": ["id"], "json": "[1,3,4,7,11]" } }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyKafkaWithListFieldArguments",
        "argumentsConfiguration": [
          { "name": "firstIds", "sourceType": "FIELD_ARGUMENT" },
          { "name": "secondIds", "sourceType": "FIELD_ARGUMENT" }
        ],
        "subscriptionFilterCondition": {
          "in": { "fieldPath": ["id"], "json": "[\"{{ args.firstIds }}\",\"{{ args.secondIds }}\"]" }
        }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument",
        "argumentsConfiguration": [{ "name": "input", "sourceType": "FIELD_ARGUMENT" }],
        "subscriptionFilterCondition": {
          "or": [
            { "in": { "fieldPath": ["id"], "json": "[\"{{ args.input.ids }}\"]" } },
            { "in": { "fieldPath": ["id"], "json": "[\"1\"]" } }
          ]
        }
      },
      {
        "typeName": "Subscription",
        "fieldName": "filteredEmployeeUpdatedMyRedis",
        "argumentsConfiguration": [{ "name": "ids", "sourceType": "FIELD_ARGUMENT" }],
        "subscriptionFilterCondition": { "in": { "fieldPath": ["id"], "json": "[\"{{ args.ids }}\"]" } }
      },
      {
        "typeName": "Query",
        "fieldName": "employee",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeAsList",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "teammates",
        "argumentsConfiguration": [{ "name": "team", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "findEmployees",
        "argumentsConfiguration": [{ "name": "criteria", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeFromEvent",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "employeeFromEventMyNats",
        "argumentsConfiguration": [{ "name": "employeeID", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "searchDragons",
        "argumentsConfiguration": [{ "name": "filters", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Query",
        "fieldName": "getTrainingSessions",
        "argumentsConfiguration": [{ "name": "filters", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeTag",
        "argumentsConfiguration": [
          { "name": "id", "sourceType": "FIELD_ARGUMENT" },
          { "name": "tag", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "singleUpload",
        "argumentsConfiguration": [{ "name": "file", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Mutation",
        "fieldName": "multipleUpload",
        "argumentsConfiguration": [{ "name": "files", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Mutation",
        "fieldName": "addFact",
        "argumentsConfiguration": [{ "name": "fact", "sourceType": "FIELD_ARGUMENT" }],
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [{ "requiredAndScopes": ["write:fact"] }, { "requiredAndScopes": ["write:all"] }],
          "requiredOrScopesByOr": [{ "requiredAndScopes": ["write:fact"] }, { "requiredAndScopes": ["write:all"] }]
        }
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateAvailability",
        "argumentsConfiguration": [
          { "name": "employeeID", "sourceType": "FIELD_ARGUMENT" },
          { "name": "isAvailable", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateMood",
        "argumentsConfiguration": [
          { "name": "employeeID", "sourceType": "FIELD_ARGUMENT" },
          { "name": "mood", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyKafka",
        "argumentsConfiguration": [
          { "name": "employeeID", "sourceType": "FIELD_ARGUMENT" },
          { "name": "update", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyNats",
        "argumentsConfiguration": [
          { "name": "id", "sourceType": "FIELD_ARGUMENT" },
          { "name": "update", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyRedis",
        "argumentsConfiguration": [
          { "name": "id", "sourceType": "FIELD_ARGUMENT" },
          { "name": "update", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "updateEmployeeMyRedisOnCustomChannel",
        "argumentsConfiguration": [
          { "name": "id", "sourceType": "FIELD_ARGUMENT" },
          { "name": "update", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Mutation",
        "fieldName": "registerDragon",
        "argumentsConfiguration": [{ "name": "input", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Mutation",
        "fieldName": "completeTrainingSession",
        "argumentsConfiguration": [
          { "name": "input", "sourceType": "FIELD_ARGUMENT" },
          { "name": "score", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countEmp",
        "argumentsConfiguration": [
          { "name": "max", "sourceType": "FIELD_ARGUMENT" },
          { "name": "intervalMilliseconds", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countEmp2",
        "argumentsConfiguration": [
          { "name": "max", "sourceType": "FIELD_ARGUMENT" },
          { "name": "intervalMilliseconds", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countFor",
        "argumentsConfiguration": [{ "name": "count", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Subscription",
        "fieldName": "countHob",
        "argumentsConfiguration": [
          { "name": "max", "sourceType": "FIELD_ARGUMENT" },
          { "name": "intervalMilliseconds", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdated",
        "argumentsConfiguration": [{ "name": "employeeID", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyKafka",
        "argumentsConfiguration": [{ "name": "employeeID", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyNats",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedNatsStream",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Subscription",
        "fieldName": "employeeUpdatedMyRedis",
        "argumentsConfiguration": [{ "name": "id", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Documentation",
        "fieldName": "url",
        "argumentsConfiguration": [{ "name": "product", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Documentation",
        "fieldName": "urls",
        "argumentsConfiguration": [{ "name": "products", "sourceType": "FIELD_ARGUMENT" }]
      },
      {
        "typeName": "Employee",
        "fieldName": "startDate",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            { "requiredAndScopes": ["read:employee", "read:private"] },
            { "requiredAndScopes": ["read:all"] }
          ],
          "requiredOrScopesByOr": [
            { "requiredAndScopes": ["read:employee", "read:private"] },
            { "requiredAndScopes": ["read:all"] }
          ]
        }
      },
      {
        "typeName": "Query",
        "fieldName": "topSecretFederationFacts",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [{ "requiredAndScopes": ["read:fact"] }, { "requiredAndScopes": ["read:all"] }],
          "requiredOrScopesByOr": [{ "requiredAndScopes": ["read:fact"] }, { "requiredAndScopes": ["read:all"] }]
        }
      },
      {
        "typeName": "Query",
        "fieldName": "factTypes",
        "authorizationConfiguration": { "requiresAuthentication": true }
      },
      {
        "typeName": "TopSecretFact",
        "fieldName": "factType",
        "authorizationConfiguration": { "requiresAuthentication": true }
      },
      {
        "typeName": "TopSecretFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [{ "requiredAndScopes": ["read:scalar"] }, { "requiredAndScopes": ["read:all"] }],
          "requiredOrScopesByOr": [{ "requiredAndScopes": ["read:scalar"] }, { "requiredAndScopes": ["read:all"] }]
        }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "factType",
        "authorizationConfiguration": { "requiresAuthentication": true }
      },
      {
        "typeName": "DirectiveFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [{ "requiredAndScopes": ["read:scalar"] }, { "requiredAndScopes": ["read:all"] }],
          "requiredOrScopesByOr": [{ "requiredAndScopes": ["read:scalar"] }, { "requiredAndScopes": ["read:all"] }]
        }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "factType",
        "authorizationConfiguration": { "requiresAuthentication": true }
      },
      {
        "typeName": "EntityFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [{ "requiredAndScopes": ["read:scalar"] }, { "requiredAndScopes": ["read:all"] }],
          "requiredOrScopesByOr": [{ "requiredAndScopes": ["read:scalar"] }, { "requiredAndScopes": ["read:all"] }]
        }
      },
      {
        "typeName": "MiscellaneousFact",
        "fieldName": "description",
        "authorizationConfiguration": {
          "requiresAuthentication": true,
          "requiredOrScopes": [
            { "requiredAndScopes": ["read:scalar", "read:miscellaneous"] },
            { "requiredAndScopes": ["read:all", "read:miscellaneous"] }
          ],
          "requiredOrScopesByOr": [
            { "requiredAndScopes": ["read:scalar", "read:miscellaneous"] },
            { "requiredAndScopes": ["read:all", "read:miscellaneous"] }
          ]
        }
      },
      {
        "typeName": "MiscellaneousFact",
        "fieldName": "factType",
        "authorizationConfiguration": { "requiresAuthentication": true }
      }
    ],
    "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee! @tag(name: \"internal\")\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n  factTypes: [TopSecretFactType!]\n  employeeFromEvent(id: Int!): Employee!\n  employeeFromEventMyNats(employeeID: Int!): Employee!\n  searchDragons(filters: DragonSearchFilters): [Dragon!]!\n  getTrainingSessions(filters: TrainingSessionFilters!): [TrainingSession!]!\n}\n\nscalar Upload\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  singleUpload(file: Upload!): Boolean!\n  multipleUpload(files: [Upload!]!): Boolean!\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n  updateEmployeeMyKafka(employeeID: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyNats(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedis(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedisOnCustomChannel(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  registerDragon(input: RegisterDragonInput!): Dragon!\n  completeTrainingSession(input: CreateTrainingSessionInput!, score: Int!): TrainingSession!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countFor(count: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n  employeeUpdated(employeeID: Int!): Employee!\n  employeeUpdatedMyKafka(employeeID: Int!): Employee!\n  employeeUpdatedMyNats(id: Int!): Employee!\n  employeeUpdatedNatsStream(id: Int!): Employee!\n  employeeUpdatedMyRedis(id: Int!): Employee!\n  employeeUpdates: Employee!\n  filteredEmployeeUpdated(id: Int!): Employee!\n  filteredEmployeeUpdatedMyKafka(employeeID: ID!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithListFieldArguments(firstIds: [ID!]!, secondIds: [ID!]!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument(input: KafkaInput!): Employee!\n  filteredEmployeeUpdatedMyRedis(ids: [ID!]!): Employee!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated(reason: \"No longer supported\")\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  isLeadAvailable: Boolean\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nscalar openfed__SubscriptionFilterValue\n\ninput openfed__SubscriptionFieldCondition {\n  fieldPath: String!\n  values: [openfed__SubscriptionFilterValue]!\n}\n\ninput openfed__SubscriptionFilterCondition {\n  AND: [openfed__SubscriptionFilterCondition!]\n  IN: openfed__SubscriptionFieldCondition\n  NOT: openfed__SubscriptionFilterCondition\n  OR: [openfed__SubscriptionFilterCondition!]\n}\n\ninput UpdateEmployeeInput {\n  name: String\n  email: String\n}\n\ninput KafkaInput {\n  ids: [Int!]!\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\nenum DragonType {\n  FIRE\n  ICE\n  STORM\n  EARTH\n  SHADOW\n  CELESTIAL\n}\n\nenum SkillLevel {\n  NOVICE\n  APPRENTICE\n  ADEPT\n  MASTER\n  LEGENDARY\n}\n\nenum TrainingType {\n  FLIGHT_BASICS\n  COMBAT_MANEUVERS\n  ELEMENTAL_MASTERY\n  BONDING_RITUAL\n  AERIAL_ACROBATICS\n}\n\nenum MissionStatus {\n  AVAILABLE\n  IN_PROGRESS\n  COMPLETED\n  FAILED\n}\n\ntype Dragon {\n  id: ID!\n  name: String!\n  type: DragonType!\n  age: Int!\n  skillLevel: SkillLevel!\n  riderId: ID\n  rider: Rider\n  wingspan: Float!\n  temperament: String!\n  specialAbilities: [String!]!\n  isAvailableForBonding: Boolean!\n}\n\ntype Rider {\n  id: ID!\n  name: String!\n  skillLevel: SkillLevel!\n  dragonId: ID\n  dragon: Dragon\n  completedTrainingSessions: Int!\n  currentMission: Mission\n  academyRank: String!\n}\n\ntype TrainingSession {\n  id: ID!\n  type: TrainingType!\n  difficulty: SkillLevel!\n  riderId: ID!\n  rider: Rider!\n  dragonId: ID!\n  dragon: Dragon!\n  duration: Int!\n  completed: Boolean!\n  score: Int\n  notes: String\n}\n\ntype Mission {\n  id: ID!\n  title: String!\n  description: String!\n  requiredSkillLevel: SkillLevel!\n  status: MissionStatus!\n  assignedRiderId: ID\n  assignedRider: Rider\n  rewardPoints: Int!\n  dangerLevel: Int!\n}\n\ninput RegisterDragonInput {\n  name: String!\n  type: DragonType!\n  age: Int!\n  wingspan: Float!\n  temperament: String!\n  specialAbilities: [String!]!\n}\n\ninput CreateTrainingSessionInput {\n  type: TrainingType!\n  riderId: ID!\n  dragonId: ID!\n  duration: Int!\n  notes: String\n}\n\ninput DragonSearchFilters {\n  type: DragonType\n  minAge: Int\n  maxAge: Int\n  skillLevel: SkillLevel\n  availableForBonding: Boolean\n  minWingspan: Float\n}\n\ninput TrainingSessionFilters {\n  riderId: ID\n  dragonId: ID\n  type: TrainingType\n  completed: Boolean\n  minScore: Int\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  currentMood: Mood!\n  derivedMood: Mood!\n  isAvailable: Boolean!\n  rootFieldThrowsError: String\n  rootFieldErrorWrapper: ErrorWrapper\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]) {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n}",
    "stringStorage": {
      "e1ac6b7a5ce1c20f9494aa60b27c3a717a36bb96": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype City {\n  country: Country\n  name: String!\n  type: String!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  isLeadAvailable: Boolean @requires(fields: \"lead { isAvailable }\")\n  lead: Employee!\n  upc: ID!\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  lead: Employee!\n  upc: ID!\n}\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  pastLocations: [City!]!\n  surname: String! @shareable\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  currentMood: Mood! @external\n  derivedMood: Mood! @requires(fields: \"currentMood\")\n  details: Details! @shareable\n  id: Int!\n  isAvailable: Boolean! @external\n  notes: String @shareable\n  role: RoleType!\n  rootFieldErrorWrapper: ErrorWrapper @goField(forceResolver: true)\n  rootFieldThrowsError: String @goField(forceResolver: true)\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  tag: String!\n  updatedAt: String!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n  title: [String!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ntype ErrorWrapper {\n  errorField: String @goField(forceResolver: true)\n  okField: String\n}\n\ninterface IProduct {\n  engineers: [Employee!]!\n  upc: ID!\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Mutation {\n  multipleUpload(files: [Upload!]!): Boolean!\n  singleUpload(file: Upload!): Boolean!\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n  title: [String!]!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  firstEmployee: Employee! @tag(name: \"internal\")\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n  upc: ID!\n}\n\ntype Subscription {\n  countEmp(intervalMilliseconds: Int!, max: Int!): Int!\n  countEmp2(intervalMilliseconds: Int!, max: Int!): Int!\n  countFor(count: Int!): Int!\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n}\n\ntype Time {\n  timeStamp: String!\n  unixTime: Int!\n}\n\nscalar Upload\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "8b670d149ca98da92ba108a2d16dea9eaab2d698": "schema {\n  query: Query\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Alligator implements Animal & Pet {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ntype Cat implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\ntype Details {\n  forename: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  middlename: String @deprecated\n  nationality: Nationality!\n  pets: [Pet]\n  surname: String! @shareable\n}\n\ntype Dog implements Animal & Pet {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Employee @key(fields: \"id\") {\n  details: Details @shareable\n  id: Int!\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\ntype Mouse implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput NestedSearchInput {\n  hasChildren: Boolean\n  maritalStatus: MaritalStatus\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Query {\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "68291c651cf7b5b50afb169bd12d2cd1ebf4ded6": "schema {\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Employee @key(fields: \"id\") {\n  hobbies: [Hobby!]\n  id: Int!\n}\n\ntype Exercise implements Hobby {\n  category: ExerciseType!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  CARD\n  FPS\n  ROGUELITE\n  RPG\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype SDK @key(fields: \"upc\") {\n  clientLanguages: [ProgrammingLanguage!]!\n  upc: ID!\n}\n\ntype Subscription {\n  countHob(intervalMilliseconds: Int!, max: Int!): Int!\n}\n\ntype Travelling implements Hobby {\n  countriesLived: [Country!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "6fc48e020384e7f515722cc94acce1cb0e7ff7c7": "schema @link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@authenticated\", \"@composeDirective\", \"@external\", \"@extends\", \"@inaccessible\", \"@interfaceObject\", \"@override\", \"@provides\", \"@key\", \"@requires\", \"@requiresScopes\", \"@shareable\", \"@tag\"]) {\n  query: Queries\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Consultancy @key(fields: \"upc\") {\n  name: ProductName!\n  upc: ID!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  name: ProductName!\n  repositoryURL: String!\n  upc: ID!\n}\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n  title: String!\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  notes: String @override(from: \"employees\")\n  products: [ProductName!]!\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]) {\n  description: FactContent!\n  factType: TopSecretFactType\n  title: String!\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\ntype MiscellaneousFact implements TopSecretFact {\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n  title: String!\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Queries {\n  factTypes: [TopSecretFactType!]\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ninput TopSecretFactInput {\n  description: FactContent!\n  factType: TopSecretFactType!\n  title: String!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "2bbb1465f4a049cf0cc0c380753d9e661fdaaccd": "schema {\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n\ntype Mutation {\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "67da479a811e98db1680b3e318bbb46ba2616bda": "schema {\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  currentMood: Mood!\n  id: Int!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Mutation {\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
      "435637e5d9d211db9a6310f4ee87b34b6ad76f50": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @edfs__kafkaPublish(providerId: String! = \"default\", topic: String!) on FIELD_DEFINITION\n\ndirective @edfs__kafkaSubscribe(providerId: String! = \"default\", topics: [String!]!) on FIELD_DEFINITION\n\ndirective @edfs__natsPublish(providerId: String! = \"default\", subject: String!) on FIELD_DEFINITION\n\ndirective @edfs__natsRequest(providerId: String! = \"default\", subject: String!) on FIELD_DEFINITION\n\ndirective @edfs__natsSubscribe(providerId: String! = \"default\", streamConfiguration: edfs__NatsStreamConfiguration, subjects: [String!]!) on FIELD_DEFINITION\n\ndirective @edfs__redisPublish(channel: String!, providerId: String! = \"default\") on FIELD_DEFINITION\n\ndirective @edfs__redisSubscribe(channels: [String!]!, providerId: String! = \"default\") on FIELD_DEFINITION\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @openfed__subscriptionFilter(condition: openfed__SubscriptionFilterCondition!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\", resolvable: false) {\n  id: Int! @external\n}\n\ninput KafkaInput {\n  ids: [Int!]!\n}\n\ntype Mutation {\n  updateEmployeeMyKafka(employeeID: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__kafkaPublish(topic: \"employeeUpdated\", providerId: \"my-kafka\")\n  updateEmployeeMyNats(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__natsPublish(subject: \"employeeUpdatedMyNats.{{ args.id }}\", providerId: \"my-nats\")\n  updateEmployeeMyRedis(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__redisPublish(channel: \"employeeUpdatedMyRedis\", providerId: \"my-redis\")\n  updateEmployeeMyRedisOnCustomChannel(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult! @edfs__redisPublish(channel: \"employeeUpdatedMyRedis.{{ args.id }}\", providerId: \"my-redis\")\n}\n\ntype Query {\n  employeeFromEvent(id: Int!): Employee! @edfs__natsRequest(subject: \"getEmployee.{{ args.id }}\")\n  employeeFromEventMyNats(employeeID: Int!): Employee! @edfs__natsRequest(subject: \"getEmployeeMyNats.{{ args.employeeID }}\", providerId: \"my-nats\")\n}\n\ntype Subscription {\n  employeeUpdated(employeeID: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdated.{{ args.employeeID }}\"])\n  employeeUpdatedMyKafka(employeeID: Int!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\")\n  employeeUpdatedMyNats(id: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdatedMyNats.{{ args.id }}\", \"employeeUpdatedMyNatsTwo.{{ args.id }}\"], providerId: \"my-nats\")\n  employeeUpdatedMyRedis(id: Int!): Employee! @edfs__redisSubscribe(channels: [\"employeeUpdatedMyRedis.{{ args.id }}\"], providerId: \"my-redis\")\n  employeeUpdatedNatsStream(id: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdated.{{ args.id }}\"], streamConfiguration: {consumerName: \"consumerName\", streamName: \"streamName\"})\n  employeeUpdates: Employee! @edfs__redisSubscribe(channels: [\"employeeUpdatedMyRedis\"], providerId: \"my-redis\")\n  filteredEmployeeUpdated(id: Int!): Employee! @edfs__natsSubscribe(subjects: [\"employeeUpdated.{{ args.id }}\"]) @openfed__subscriptionFilter(condition: {NOT: {IN: {fieldPath: \"id\", values: [2, 6, 9, 10, 12]}}})\n  filteredEmployeeUpdatedMyKafka(employeeID: ID!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\") @openfed__subscriptionFilter(condition: {IN: {fieldPath: \"id\", values: [1, 3, 4, 7, 11]}})\n  filteredEmployeeUpdatedMyKafkaWithListFieldArguments(firstIds: [ID!]!, secondIds: [ID!]!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\") @openfed__subscriptionFilter(condition: {IN: {fieldPath: \"id\", values: [\"{{ args.firstIds }}\", \"{{ args.secondIds }}\"]}})\n  filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument(input: KafkaInput!): Employee! @edfs__kafkaSubscribe(topics: [\"employeeUpdated\", \"employeeUpdatedTwo\"], providerId: \"my-kafka\") @openfed__subscriptionFilter(condition: {OR: [{IN: {fieldPath: \"id\", values: [\"{{ args.input.ids }}\"]}}, {IN: {fieldPath: \"id\", values: [\"1\"]}}]})\n  filteredEmployeeUpdatedMyRedis(ids: [ID!]!): Employee! @edfs__redisSubscribe(channels: [\"employeeUpdatedMyRedis\"], providerId: \"my-redis\") @openfed__subscriptionFilter(condition: {IN: {fieldPath: \"id\", values: [\"{{ args.ids }}\"]}})\n}\n\ninput UpdateEmployeeInput {\n  email: String\n  name: String\n}\n\ninput edfs__NatsStreamConfiguration {\n  consumerInactiveThreshold: Int! = 30\n  consumerName: String!\n  streamName: String!\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\nscalar openfed__FieldSet\n\ninput openfed__SubscriptionFieldCondition {\n  fieldPath: String!\n  values: [openfed__SubscriptionFilterValue]!\n}\n\ninput openfed__SubscriptionFilterCondition {\n  AND: [openfed__SubscriptionFilterCondition!]\n  IN: openfed__SubscriptionFieldCondition\n  NOT: openfed__SubscriptionFilterCondition\n  OR: [openfed__SubscriptionFilterCondition!]\n}\n\nscalar openfed__SubscriptionFilterValue",
      "4be0385319a346e0c0232485a5c8908ce60c48f6": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ninput CreateTrainingSessionInput {\n  dragonId: ID!\n  duration: Int!\n  notes: String\n  riderId: ID!\n  type: TrainingType!\n}\n\ntype Dragon {\n  age: Int!\n  id: ID!\n  isAvailableForBonding: Boolean!\n  name: String!\n  rider: Rider\n  riderId: ID\n  skillLevel: SkillLevel!\n  specialAbilities: [String!]!\n  temperament: String!\n  type: DragonType!\n  wingspan: Float!\n}\n\ninput DragonSearchFilters {\n  availableForBonding: Boolean\n  maxAge: Int\n  minAge: Int\n  minWingspan: Float\n  skillLevel: SkillLevel\n  type: DragonType\n}\n\nenum DragonType {\n  CELESTIAL\n  EARTH\n  FIRE\n  ICE\n  SHADOW\n  STORM\n}\n\ntype Mission {\n  assignedRider: Rider\n  assignedRiderId: ID\n  dangerLevel: Int!\n  description: String!\n  id: ID!\n  requiredSkillLevel: SkillLevel!\n  rewardPoints: Int!\n  status: MissionStatus!\n  title: String!\n}\n\nenum MissionStatus {\n  AVAILABLE\n  COMPLETED\n  FAILED\n  IN_PROGRESS\n}\n\ntype Mutation {\n  completeTrainingSession(input: CreateTrainingSessionInput!, score: Int!): TrainingSession!\n  registerDragon(input: RegisterDragonInput!): Dragon!\n}\n\ntype Query {\n  getTrainingSessions(filters: TrainingSessionFilters!): [TrainingSession!]!\n  searchDragons(filters: DragonSearchFilters): [Dragon!]!\n}\n\ninput RegisterDragonInput {\n  age: Int!\n  name: String!\n  specialAbilities: [String!]!\n  temperament: String!\n  type: DragonType!\n  wingspan: Float!\n}\n\ntype Rider {\n  academyRank: String!\n  completedTrainingSessions: Int!\n  currentMission: Mission\n  dragon: Dragon\n  dragonId: ID\n  id: ID!\n  name: String!\n  skillLevel: SkillLevel!\n}\n\nenum SkillLevel {\n  ADEPT\n  APPRENTICE\n  LEGENDARY\n  MASTER\n  NOVICE\n}\n\ntype TrainingSession {\n  completed: Boolean!\n  difficulty: SkillLevel!\n  dragon: Dragon!\n  dragonId: ID!\n  duration: Int!\n  id: ID!\n  notes: String\n  rider: Rider!\n  riderId: ID!\n  score: Int\n  type: TrainingType!\n}\n\ninput TrainingSessionFilters {\n  completed: Boolean\n  dragonId: ID\n  minScore: Int\n  riderId: ID\n  type: TrainingType\n}\n\nenum TrainingType {\n  AERIAL_ACROBATICS\n  BONDING_RITUAL\n  COMBAT_MANEUVERS\n  ELEMENTAL_MASTERY\n  FLIGHT_BASICS\n}\n\nscalar openfed__FieldSet"
    },
    "graphqlClientSchema": "type Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee!\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n  factTypes: [TopSecretFactType!]\n  employeeFromEvent(id: Int!): Employee!\n  employeeFromEventMyNats(employeeID: Int!): Employee!\n  searchDragons(filters: DragonSearchFilters): [Dragon!]!\n  getTrainingSessions(filters: TrainingSessionFilters!): [TrainingSession!]!\n}\n\nscalar Upload\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  singleUpload(file: Upload!): Boolean!\n  multipleUpload(files: [Upload!]!): Boolean!\n  addFact(fact: TopSecretFactInput!): TopSecretFact!\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n  updateEmployeeMyKafka(employeeID: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyNats(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedis(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  updateEmployeeMyRedisOnCustomChannel(id: Int!, update: UpdateEmployeeInput!): edfs__PublishResult!\n  registerDragon(input: RegisterDragonInput!): Dragon!\n  completeTrainingSession(input: CreateTrainingSessionInput!, score: Int!): TrainingSession!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countFor(count: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n  employeeUpdated(employeeID: Int!): Employee!\n  employeeUpdatedMyKafka(employeeID: Int!): Employee!\n  employeeUpdatedMyNats(id: Int!): Employee!\n  employeeUpdatedNatsStream(id: Int!): Employee!\n  employeeUpdatedMyRedis(id: Int!): Employee!\n  employeeUpdates: Employee!\n  filteredEmployeeUpdated(id: Int!): Employee!\n  filteredEmployeeUpdatedMyKafka(employeeID: ID!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithListFieldArguments(firstIds: [ID!]!, secondIds: [ID!]!): Employee!\n  filteredEmployeeUpdatedMyKafkaWithNestedListFieldArgument(input: KafkaInput!): Employee!\n  filteredEmployeeUpdatedMyRedis(ids: [ID!]!): Employee!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  isLeadAvailable: Boolean\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nscalar openfed__SubscriptionFilterValue\n\ninput openfed__SubscriptionFieldCondition {\n  fieldPath: String!\n  values: [openfed__SubscriptionFilterValue]!\n}\n\ninput openfed__SubscriptionFilterCondition {\n  AND: [openfed__SubscriptionFilterCondition!]\n  IN: openfed__SubscriptionFieldCondition\n  NOT: openfed__SubscriptionFilterCondition\n  OR: [openfed__SubscriptionFilterCondition!]\n}\n\ninput UpdateEmployeeInput {\n  name: String\n  email: String\n}\n\ninput KafkaInput {\n  ids: [Int!]!\n}\n\ntype edfs__PublishResult {\n  success: Boolean!\n}\n\nenum DragonType {\n  FIRE\n  ICE\n  STORM\n  EARTH\n  SHADOW\n  CELESTIAL\n}\n\nenum SkillLevel {\n  NOVICE\n  APPRENTICE\n  ADEPT\n  MASTER\n  LEGENDARY\n}\n\nenum TrainingType {\n  FLIGHT_BASICS\n  COMBAT_MANEUVERS\n  ELEMENTAL_MASTERY\n  BONDING_RITUAL\n  AERIAL_ACROBATICS\n}\n\nenum MissionStatus {\n  AVAILABLE\n  IN_PROGRESS\n  COMPLETED\n  FAILED\n}\n\ntype Dragon {\n  id: ID!\n  name: String!\n  type: DragonType!\n  age: Int!\n  skillLevel: SkillLevel!\n  riderId: ID\n  rider: Rider\n  wingspan: Float!\n  temperament: String!\n  specialAbilities: [String!]!\n  isAvailableForBonding: Boolean!\n}\n\ntype Rider {\n  id: ID!\n  name: String!\n  skillLevel: SkillLevel!\n  dragonId: ID\n  dragon: Dragon\n  completedTrainingSessions: Int!\n  currentMission: Mission\n  academyRank: String!\n}\n\ntype TrainingSession {\n  id: ID!\n  type: TrainingType!\n  difficulty: SkillLevel!\n  riderId: ID!\n  rider: Rider!\n  dragonId: ID!\n  dragon: Dragon!\n  duration: Int!\n  completed: Boolean!\n  score: Int\n  notes: String\n}\n\ntype Mission {\n  id: ID!\n  title: String!\n  description: String!\n  requiredSkillLevel: SkillLevel!\n  status: MissionStatus!\n  assignedRiderId: ID\n  assignedRider: Rider\n  rewardPoints: Int!\n  dangerLevel: Int!\n}\n\ninput RegisterDragonInput {\n  name: String!\n  type: DragonType!\n  age: Int!\n  wingspan: Float!\n  temperament: String!\n  specialAbilities: [String!]!\n}\n\ninput CreateTrainingSessionInput {\n  type: TrainingType!\n  riderId: ID!\n  dragonId: ID!\n  duration: Int!\n  notes: String\n}\n\ninput DragonSearchFilters {\n  type: DragonType\n  minAge: Int\n  maxAge: Int\n  skillLevel: SkillLevel\n  availableForBonding: Boolean\n  minWingspan: Float\n}\n\ninput TrainingSessionFilters {\n  riderId: ID\n  dragonId: ID\n  type: TrainingType\n  completed: Boolean\n  minScore: Int\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String!\n  currentMood: Mood!\n  derivedMood: Mood!\n  isAvailable: Boolean!\n  rootFieldThrowsError: String\n  rootFieldErrorWrapper: ErrorWrapper\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  unicode: String!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}"
  },
  "version": "6484784d-9b47-4c78-a1a5-b8c120db4fc3",
  "subgraphs": [
    { "id": "0", "name": "employees", "routingUrl": "http://localhost:4001/graphql" },
    { "id": "1", "name": "family", "routingUrl": "http://localhost:4002/graphql" },
    { "id": "2", "name": "hobbies", "routingUrl": "http://localhost:4003/graphql" },
    { "id": "3", "name": "products", "routingUrl": "http://localhost:4004/graphql" },
    { "id": "4", "name": "availability", "routingUrl": "http://localhost:4007/graphql" },
    { "id": "5", "name": "mood", "routingUrl": "http://localhost:4008/graphql" },
    { "id": "6", "name": "employeeUpdates" },
    { "id": "7", "name": "customConfigPlugin", "routingUrl": "dns:///localhost:4011" }
  ],
  "compatibilityVersion": "1:{{$COMPOSITION__VERSION}}"
}
