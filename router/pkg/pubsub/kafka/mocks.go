// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kafka

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wundergraph/graphql-go-tools/v2/pkg/engine/resolve"
)

// NewMockAdapterInterface creates a new instance of MockAdapterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapterInterface {
	mock := &MockAdapterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAdapterInterface is an autogenerated mock type for the AdapterInterface type
type MockAdapterInterface struct {
	mock.Mock
}

type MockAdapterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapterInterface) EXPECT() *MockAdapterInterface_Expecter {
	return &MockAdapterInterface_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockAdapterInterface
func (_mock *MockAdapterInterface) Publish(ctx context.Context, event PublishEventConfiguration) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PublishEventConfiguration) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAdapterInterface_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockAdapterInterface_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - event PublishEventConfiguration
func (_e *MockAdapterInterface_Expecter) Publish(ctx interface{}, event interface{}) *MockAdapterInterface_Publish_Call {
	return &MockAdapterInterface_Publish_Call{Call: _e.mock.On("Publish", ctx, event)}
}

func (_c *MockAdapterInterface_Publish_Call) Run(run func(ctx context.Context, event PublishEventConfiguration)) *MockAdapterInterface_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 PublishEventConfiguration
		if args[1] != nil {
			arg1 = args[1].(PublishEventConfiguration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAdapterInterface_Publish_Call) Return(err error) *MockAdapterInterface_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAdapterInterface_Publish_Call) RunAndReturn(run func(ctx context.Context, event PublishEventConfiguration) error) *MockAdapterInterface_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockAdapterInterface
func (_mock *MockAdapterInterface) Shutdown(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAdapterInterface_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockAdapterInterface_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAdapterInterface_Expecter) Shutdown(ctx interface{}) *MockAdapterInterface_Shutdown_Call {
	return &MockAdapterInterface_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockAdapterInterface_Shutdown_Call) Run(run func(ctx context.Context)) *MockAdapterInterface_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdapterInterface_Shutdown_Call) Return(err error) *MockAdapterInterface_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAdapterInterface_Shutdown_Call) RunAndReturn(run func(ctx context.Context) error) *MockAdapterInterface_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Startup provides a mock function for the type MockAdapterInterface
func (_mock *MockAdapterInterface) Startup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAdapterInterface_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockAdapterInterface_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAdapterInterface_Expecter) Startup(ctx interface{}) *MockAdapterInterface_Startup_Call {
	return &MockAdapterInterface_Startup_Call{Call: _e.mock.On("Startup", ctx)}
}

func (_c *MockAdapterInterface_Startup_Call) Run(run func(ctx context.Context)) *MockAdapterInterface_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdapterInterface_Startup_Call) Return(err error) *MockAdapterInterface_Startup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAdapterInterface_Startup_Call) RunAndReturn(run func(ctx context.Context) error) *MockAdapterInterface_Startup_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockAdapterInterface
func (_mock *MockAdapterInterface) Subscribe(ctx context.Context, event SubscriptionEventConfiguration, updater resolve.SubscriptionUpdater) error {
	ret := _mock.Called(ctx, event, updater)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, SubscriptionEventConfiguration, resolve.SubscriptionUpdater) error); ok {
		r0 = returnFunc(ctx, event, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAdapterInterface_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockAdapterInterface_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - event SubscriptionEventConfiguration
//   - updater resolve.SubscriptionUpdater
func (_e *MockAdapterInterface_Expecter) Subscribe(ctx interface{}, event interface{}, updater interface{}) *MockAdapterInterface_Subscribe_Call {
	return &MockAdapterInterface_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, event, updater)}
}

func (_c *MockAdapterInterface_Subscribe_Call) Run(run func(ctx context.Context, event SubscriptionEventConfiguration, updater resolve.SubscriptionUpdater)) *MockAdapterInterface_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 SubscriptionEventConfiguration
		if args[1] != nil {
			arg1 = args[1].(SubscriptionEventConfiguration)
		}
		var arg2 resolve.SubscriptionUpdater
		if args[2] != nil {
			arg2 = args[2].(resolve.SubscriptionUpdater)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAdapterInterface_Subscribe_Call) Return(err error) *MockAdapterInterface_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAdapterInterface_Subscribe_Call) RunAndReturn(run func(ctx context.Context, event SubscriptionEventConfiguration, updater resolve.SubscriptionUpdater) error) *MockAdapterInterface_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
