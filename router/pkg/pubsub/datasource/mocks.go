// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datasource

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wundergraph/graphql-go-tools/v2/pkg/engine/resolve"
)

// NewMockEngineDataSourceFactory creates a new instance of MockEngineDataSourceFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineDataSourceFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineDataSourceFactory {
	mock := &MockEngineDataSourceFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEngineDataSourceFactory is an autogenerated mock type for the EngineDataSourceFactory type
type MockEngineDataSourceFactory struct {
	mock.Mock
}

type MockEngineDataSourceFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngineDataSourceFactory) EXPECT() *MockEngineDataSourceFactory_Expecter {
	return &MockEngineDataSourceFactory_Expecter{mock: &_m.Mock}
}

// GetFieldName provides a mock function for the type MockEngineDataSourceFactory
func (_mock *MockEngineDataSourceFactory) GetFieldName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFieldName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEngineDataSourceFactory_GetFieldName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldName'
type MockEngineDataSourceFactory_GetFieldName_Call struct {
	*mock.Call
}

// GetFieldName is a helper method to define mock.On call
func (_e *MockEngineDataSourceFactory_Expecter) GetFieldName() *MockEngineDataSourceFactory_GetFieldName_Call {
	return &MockEngineDataSourceFactory_GetFieldName_Call{Call: _e.mock.On("GetFieldName")}
}

func (_c *MockEngineDataSourceFactory_GetFieldName_Call) Run(run func()) *MockEngineDataSourceFactory_GetFieldName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngineDataSourceFactory_GetFieldName_Call) Return(s string) *MockEngineDataSourceFactory_GetFieldName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEngineDataSourceFactory_GetFieldName_Call) RunAndReturn(run func() string) *MockEngineDataSourceFactory_GetFieldName_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSource provides a mock function for the type MockEngineDataSourceFactory
func (_mock *MockEngineDataSourceFactory) ResolveDataSource() (resolve.DataSource, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSource")
	}

	var r0 resolve.DataSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (resolve.DataSource, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() resolve.DataSource); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolve.DataSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineDataSourceFactory_ResolveDataSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSource'
type MockEngineDataSourceFactory_ResolveDataSource_Call struct {
	*mock.Call
}

// ResolveDataSource is a helper method to define mock.On call
func (_e *MockEngineDataSourceFactory_Expecter) ResolveDataSource() *MockEngineDataSourceFactory_ResolveDataSource_Call {
	return &MockEngineDataSourceFactory_ResolveDataSource_Call{Call: _e.mock.On("ResolveDataSource")}
}

func (_c *MockEngineDataSourceFactory_ResolveDataSource_Call) Run(run func()) *MockEngineDataSourceFactory_ResolveDataSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSource_Call) Return(dataSource resolve.DataSource, err error) *MockEngineDataSourceFactory_ResolveDataSource_Call {
	_c.Call.Return(dataSource, err)
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSource_Call) RunAndReturn(run func() (resolve.DataSource, error)) *MockEngineDataSourceFactory_ResolveDataSource_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSourceInput provides a mock function for the type MockEngineDataSourceFactory
func (_mock *MockEngineDataSourceFactory) ResolveDataSourceInput(event []byte) (string, error) {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSourceInput")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (string, error)); ok {
		return returnFunc(event)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(event)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineDataSourceFactory_ResolveDataSourceInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSourceInput'
type MockEngineDataSourceFactory_ResolveDataSourceInput_Call struct {
	*mock.Call
}

// ResolveDataSourceInput is a helper method to define mock.On call
//   - event []byte
func (_e *MockEngineDataSourceFactory_Expecter) ResolveDataSourceInput(event interface{}) *MockEngineDataSourceFactory_ResolveDataSourceInput_Call {
	return &MockEngineDataSourceFactory_ResolveDataSourceInput_Call{Call: _e.mock.On("ResolveDataSourceInput", event)}
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceInput_Call) Run(run func(event []byte)) *MockEngineDataSourceFactory_ResolveDataSourceInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceInput_Call) Return(s string, err error) *MockEngineDataSourceFactory_ResolveDataSourceInput_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceInput_Call) RunAndReturn(run func(event []byte) (string, error)) *MockEngineDataSourceFactory_ResolveDataSourceInput_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSourceSubscription provides a mock function for the type MockEngineDataSourceFactory
func (_mock *MockEngineDataSourceFactory) ResolveDataSourceSubscription() (resolve.SubscriptionDataSource, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSourceSubscription")
	}

	var r0 resolve.SubscriptionDataSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (resolve.SubscriptionDataSource, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() resolve.SubscriptionDataSource); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolve.SubscriptionDataSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSourceSubscription'
type MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call struct {
	*mock.Call
}

// ResolveDataSourceSubscription is a helper method to define mock.On call
func (_e *MockEngineDataSourceFactory_Expecter) ResolveDataSourceSubscription() *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call {
	return &MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call{Call: _e.mock.On("ResolveDataSourceSubscription")}
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call) Run(run func()) *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call) Return(subscriptionDataSource resolve.SubscriptionDataSource, err error) *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call {
	_c.Call.Return(subscriptionDataSource, err)
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call) RunAndReturn(run func() (resolve.SubscriptionDataSource, error)) *MockEngineDataSourceFactory_ResolveDataSourceSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSourceSubscriptionInput provides a mock function for the type MockEngineDataSourceFactory
func (_mock *MockEngineDataSourceFactory) ResolveDataSourceSubscriptionInput() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSourceSubscriptionInput")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSourceSubscriptionInput'
type MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call struct {
	*mock.Call
}

// ResolveDataSourceSubscriptionInput is a helper method to define mock.On call
func (_e *MockEngineDataSourceFactory_Expecter) ResolveDataSourceSubscriptionInput() *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call {
	return &MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call{Call: _e.mock.On("ResolveDataSourceSubscriptionInput")}
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call) Run(run func()) *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call) Return(s string, err error) *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call) RunAndReturn(run func() (string, error)) *MockEngineDataSourceFactory_ResolveDataSourceSubscriptionInput_Call {
	_c.Call.Return(run)
	return _c
}

// TransformEventData provides a mock function for the type MockEngineDataSourceFactory
func (_mock *MockEngineDataSourceFactory) TransformEventData(extractFn ArgumentTemplateCallback) error {
	ret := _mock.Called(extractFn)

	if len(ret) == 0 {
		panic("no return value specified for TransformEventData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(ArgumentTemplateCallback) error); ok {
		r0 = returnFunc(extractFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEngineDataSourceFactory_TransformEventData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformEventData'
type MockEngineDataSourceFactory_TransformEventData_Call struct {
	*mock.Call
}

// TransformEventData is a helper method to define mock.On call
//   - extractFn ArgumentTemplateCallback
func (_e *MockEngineDataSourceFactory_Expecter) TransformEventData(extractFn interface{}) *MockEngineDataSourceFactory_TransformEventData_Call {
	return &MockEngineDataSourceFactory_TransformEventData_Call{Call: _e.mock.On("TransformEventData", extractFn)}
}

func (_c *MockEngineDataSourceFactory_TransformEventData_Call) Run(run func(extractFn ArgumentTemplateCallback)) *MockEngineDataSourceFactory_TransformEventData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ArgumentTemplateCallback
		if args[0] != nil {
			arg0 = args[0].(ArgumentTemplateCallback)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEngineDataSourceFactory_TransformEventData_Call) Return(err error) *MockEngineDataSourceFactory_TransformEventData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEngineDataSourceFactory_TransformEventData_Call) RunAndReturn(run func(extractFn ArgumentTemplateCallback) error) *MockEngineDataSourceFactory_TransformEventData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderLifecycle creates a new instance of MockProviderLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderLifecycle {
	mock := &MockProviderLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProviderLifecycle is an autogenerated mock type for the ProviderLifecycle type
type MockProviderLifecycle struct {
	mock.Mock
}

type MockProviderLifecycle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderLifecycle) EXPECT() *MockProviderLifecycle_Expecter {
	return &MockProviderLifecycle_Expecter{mock: &_m.Mock}
}

// Shutdown provides a mock function for the type MockProviderLifecycle
func (_mock *MockProviderLifecycle) Shutdown(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProviderLifecycle_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockProviderLifecycle_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderLifecycle_Expecter) Shutdown(ctx interface{}) *MockProviderLifecycle_Shutdown_Call {
	return &MockProviderLifecycle_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockProviderLifecycle_Shutdown_Call) Run(run func(ctx context.Context)) *MockProviderLifecycle_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProviderLifecycle_Shutdown_Call) Return(err error) *MockProviderLifecycle_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProviderLifecycle_Shutdown_Call) RunAndReturn(run func(ctx context.Context) error) *MockProviderLifecycle_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Startup provides a mock function for the type MockProviderLifecycle
func (_mock *MockProviderLifecycle) Startup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProviderLifecycle_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockProviderLifecycle_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderLifecycle_Expecter) Startup(ctx interface{}) *MockProviderLifecycle_Startup_Call {
	return &MockProviderLifecycle_Startup_Call{Call: _e.mock.On("Startup", ctx)}
}

func (_c *MockProviderLifecycle_Startup_Call) Run(run func(ctx context.Context)) *MockProviderLifecycle_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProviderLifecycle_Startup_Call) Return(err error) *MockProviderLifecycle_Startup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProviderLifecycle_Startup_Call) RunAndReturn(run func(ctx context.Context) error) *MockProviderLifecycle_Startup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type MockProvider
func (_mock *MockProvider) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProvider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockProvider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockProvider_Expecter) ID() *MockProvider_ID_Call {
	return &MockProvider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockProvider_ID_Call) Run(run func()) *MockProvider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_ID_Call) Return(s string) *MockProvider_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProvider_ID_Call) RunAndReturn(run func() string) *MockProvider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockProvider
func (_mock *MockProvider) Shutdown(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProvider_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockProvider_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) Shutdown(ctx interface{}) *MockProvider_Shutdown_Call {
	return &MockProvider_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockProvider_Shutdown_Call) Run(run func(ctx context.Context)) *MockProvider_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_Shutdown_Call) Return(err error) *MockProvider_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_Shutdown_Call) RunAndReturn(run func(ctx context.Context) error) *MockProvider_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Startup provides a mock function for the type MockProvider
func (_mock *MockProvider) Startup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProvider_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockProvider_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) Startup(ctx interface{}) *MockProvider_Startup_Call {
	return &MockProvider_Startup_Call{Call: _e.mock.On("Startup", ctx)}
}

func (_c *MockProvider_Startup_Call) Run(run func(ctx context.Context)) *MockProvider_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_Startup_Call) Return(err error) *MockProvider_Startup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_Startup_Call) RunAndReturn(run func(ctx context.Context) error) *MockProvider_Startup_Call {
	_c.Call.Return(run)
	return _c
}

// TypeID provides a mock function for the type MockProvider
func (_mock *MockProvider) TypeID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProvider_TypeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeID'
type MockProvider_TypeID_Call struct {
	*mock.Call
}

// TypeID is a helper method to define mock.On call
func (_e *MockProvider_Expecter) TypeID() *MockProvider_TypeID_Call {
	return &MockProvider_TypeID_Call{Call: _e.mock.On("TypeID")}
}

func (_c *MockProvider_TypeID_Call) Run(run func()) *MockProvider_TypeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_TypeID_Call) Return(s string) *MockProvider_TypeID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProvider_TypeID_Call) RunAndReturn(run func() string) *MockProvider_TypeID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderBuilder creates a new instance of MockProviderBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderBuilder[P any, E any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderBuilder[P, E] {
	mock := &MockProviderBuilder[P, E]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProviderBuilder is an autogenerated mock type for the ProviderBuilder type
type MockProviderBuilder[P any, E any] struct {
	mock.Mock
}

type MockProviderBuilder_Expecter[P any, E any] struct {
	mock *mock.Mock
}

func (_m *MockProviderBuilder[P, E]) EXPECT() *MockProviderBuilder_Expecter[P, E] {
	return &MockProviderBuilder_Expecter[P, E]{mock: &_m.Mock}
}

// BuildEngineDataSourceFactory provides a mock function for the type MockProviderBuilder
func (_mock *MockProviderBuilder[P, E]) BuildEngineDataSourceFactory(data E) (EngineDataSourceFactory, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BuildEngineDataSourceFactory")
	}

	var r0 EngineDataSourceFactory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(E) (EngineDataSourceFactory, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(E) EngineDataSourceFactory); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EngineDataSourceFactory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(E) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderBuilder_BuildEngineDataSourceFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildEngineDataSourceFactory'
type MockProviderBuilder_BuildEngineDataSourceFactory_Call[P any, E any] struct {
	*mock.Call
}

// BuildEngineDataSourceFactory is a helper method to define mock.On call
//   - data E
func (_e *MockProviderBuilder_Expecter[P, E]) BuildEngineDataSourceFactory(data interface{}) *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E] {
	return &MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E]{Call: _e.mock.On("BuildEngineDataSourceFactory", data)}
}

func (_c *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E]) Run(run func(data E)) *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 E
		if args[0] != nil {
			arg0 = args[0].(E)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E]) Return(engineDataSourceFactory EngineDataSourceFactory, err error) *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E] {
	_c.Call.Return(engineDataSourceFactory, err)
	return _c
}

func (_c *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E]) RunAndReturn(run func(data E) (EngineDataSourceFactory, error)) *MockProviderBuilder_BuildEngineDataSourceFactory_Call[P, E] {
	_c.Call.Return(run)
	return _c
}

// BuildProvider provides a mock function for the type MockProviderBuilder
func (_mock *MockProviderBuilder[P, E]) BuildProvider(options P) (Provider, error) {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for BuildProvider")
	}

	var r0 Provider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(P) (Provider, error)); ok {
		return returnFunc(options)
	}
	if returnFunc, ok := ret.Get(0).(func(P) Provider); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(P) error); ok {
		r1 = returnFunc(options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderBuilder_BuildProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildProvider'
type MockProviderBuilder_BuildProvider_Call[P any, E any] struct {
	*mock.Call
}

// BuildProvider is a helper method to define mock.On call
//   - options P
func (_e *MockProviderBuilder_Expecter[P, E]) BuildProvider(options interface{}) *MockProviderBuilder_BuildProvider_Call[P, E] {
	return &MockProviderBuilder_BuildProvider_Call[P, E]{Call: _e.mock.On("BuildProvider", options)}
}

func (_c *MockProviderBuilder_BuildProvider_Call[P, E]) Run(run func(options P)) *MockProviderBuilder_BuildProvider_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 P
		if args[0] != nil {
			arg0 = args[0].(P)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProviderBuilder_BuildProvider_Call[P, E]) Return(provider Provider, err error) *MockProviderBuilder_BuildProvider_Call[P, E] {
	_c.Call.Return(provider, err)
	return _c
}

func (_c *MockProviderBuilder_BuildProvider_Call[P, E]) RunAndReturn(run func(options P) (Provider, error)) *MockProviderBuilder_BuildProvider_Call[P, E] {
	_c.Call.Return(run)
	return _c
}

// TypeID provides a mock function for the type MockProviderBuilder
func (_mock *MockProviderBuilder[P, E]) TypeID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProviderBuilder_TypeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeID'
type MockProviderBuilder_TypeID_Call[P any, E any] struct {
	*mock.Call
}

// TypeID is a helper method to define mock.On call
func (_e *MockProviderBuilder_Expecter[P, E]) TypeID() *MockProviderBuilder_TypeID_Call[P, E] {
	return &MockProviderBuilder_TypeID_Call[P, E]{Call: _e.mock.On("TypeID")}
}

func (_c *MockProviderBuilder_TypeID_Call[P, E]) Run(run func()) *MockProviderBuilder_TypeID_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderBuilder_TypeID_Call[P, E]) Return(s string) *MockProviderBuilder_TypeID_Call[P, E] {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProviderBuilder_TypeID_Call[P, E]) RunAndReturn(run func() string) *MockProviderBuilder_TypeID_Call[P, E] {
	_c.Call.Return(run)
	return _c
}
