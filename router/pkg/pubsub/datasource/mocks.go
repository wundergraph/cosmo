// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datasource

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLifecycle creates a new instance of MockLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLifecycle {
	mock := &MockLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLifecycle is an autogenerated mock type for the Lifecycle type
type MockLifecycle struct {
	mock.Mock
}

type MockLifecycle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLifecycle) EXPECT() *MockLifecycle_Expecter {
	return &MockLifecycle_Expecter{mock: &_m.Mock}
}

// Shutdown provides a mock function for the type MockLifecycle
func (_mock *MockLifecycle) Shutdown(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLifecycle_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockLifecycle_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLifecycle_Expecter) Shutdown(ctx interface{}) *MockLifecycle_Shutdown_Call {
	return &MockLifecycle_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockLifecycle_Shutdown_Call) Run(run func(ctx context.Context)) *MockLifecycle_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLifecycle_Shutdown_Call) Return(err error) *MockLifecycle_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLifecycle_Shutdown_Call) RunAndReturn(run func(ctx context.Context) error) *MockLifecycle_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Startup provides a mock function for the type MockLifecycle
func (_mock *MockLifecycle) Startup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLifecycle_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockLifecycle_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLifecycle_Expecter) Startup(ctx interface{}) *MockLifecycle_Startup_Call {
	return &MockLifecycle_Startup_Call{Call: _e.mock.On("Startup", ctx)}
}

func (_c *MockLifecycle_Startup_Call) Run(run func(ctx context.Context)) *MockLifecycle_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLifecycle_Startup_Call) Return(err error) *MockLifecycle_Startup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLifecycle_Startup_Call) RunAndReturn(run func(ctx context.Context) error) *MockLifecycle_Startup_Call {
	_c.Call.Return(run)
	return _c
}
