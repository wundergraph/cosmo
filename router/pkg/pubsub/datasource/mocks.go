// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datasource

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wundergraph/graphql-go-tools/v2/pkg/engine/resolve"
)

// NewMockPubSubDataSource creates a new instance of MockPubSubDataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubDataSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubDataSource {
	mock := &MockPubSubDataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPubSubDataSource is an autogenerated mock type for the PubSubDataSource type
type MockPubSubDataSource struct {
	mock.Mock
}

type MockPubSubDataSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubDataSource) EXPECT() *MockPubSubDataSource_Expecter {
	return &MockPubSubDataSource_Expecter{mock: &_m.Mock}
}

// GetFieldName provides a mock function for the type MockPubSubDataSource
func (_mock *MockPubSubDataSource) GetFieldName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFieldName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPubSubDataSource_GetFieldName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldName'
type MockPubSubDataSource_GetFieldName_Call struct {
	*mock.Call
}

// GetFieldName is a helper method to define mock.On call
func (_e *MockPubSubDataSource_Expecter) GetFieldName() *MockPubSubDataSource_GetFieldName_Call {
	return &MockPubSubDataSource_GetFieldName_Call{Call: _e.mock.On("GetFieldName")}
}

func (_c *MockPubSubDataSource_GetFieldName_Call) Run(run func()) *MockPubSubDataSource_GetFieldName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubDataSource_GetFieldName_Call) Return(s string) *MockPubSubDataSource_GetFieldName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPubSubDataSource_GetFieldName_Call) RunAndReturn(run func() string) *MockPubSubDataSource_GetFieldName_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSource provides a mock function for the type MockPubSubDataSource
func (_mock *MockPubSubDataSource) ResolveDataSource() (resolve.DataSource, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSource")
	}

	var r0 resolve.DataSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (resolve.DataSource, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() resolve.DataSource); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolve.DataSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPubSubDataSource_ResolveDataSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSource'
type MockPubSubDataSource_ResolveDataSource_Call struct {
	*mock.Call
}

// ResolveDataSource is a helper method to define mock.On call
func (_e *MockPubSubDataSource_Expecter) ResolveDataSource() *MockPubSubDataSource_ResolveDataSource_Call {
	return &MockPubSubDataSource_ResolveDataSource_Call{Call: _e.mock.On("ResolveDataSource")}
}

func (_c *MockPubSubDataSource_ResolveDataSource_Call) Run(run func()) *MockPubSubDataSource_ResolveDataSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSource_Call) Return(dataSource resolve.DataSource, err error) *MockPubSubDataSource_ResolveDataSource_Call {
	_c.Call.Return(dataSource, err)
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSource_Call) RunAndReturn(run func() (resolve.DataSource, error)) *MockPubSubDataSource_ResolveDataSource_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSourceInput provides a mock function for the type MockPubSubDataSource
func (_mock *MockPubSubDataSource) ResolveDataSourceInput(event []byte) (string, error) {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSourceInput")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (string, error)); ok {
		return returnFunc(event)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(event)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPubSubDataSource_ResolveDataSourceInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSourceInput'
type MockPubSubDataSource_ResolveDataSourceInput_Call struct {
	*mock.Call
}

// ResolveDataSourceInput is a helper method to define mock.On call
//   - event []byte
func (_e *MockPubSubDataSource_Expecter) ResolveDataSourceInput(event interface{}) *MockPubSubDataSource_ResolveDataSourceInput_Call {
	return &MockPubSubDataSource_ResolveDataSourceInput_Call{Call: _e.mock.On("ResolveDataSourceInput", event)}
}

func (_c *MockPubSubDataSource_ResolveDataSourceInput_Call) Run(run func(event []byte)) *MockPubSubDataSource_ResolveDataSourceInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSourceInput_Call) Return(s string, err error) *MockPubSubDataSource_ResolveDataSourceInput_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSourceInput_Call) RunAndReturn(run func(event []byte) (string, error)) *MockPubSubDataSource_ResolveDataSourceInput_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSourceSubscription provides a mock function for the type MockPubSubDataSource
func (_mock *MockPubSubDataSource) ResolveDataSourceSubscription() (resolve.SubscriptionDataSource, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSourceSubscription")
	}

	var r0 resolve.SubscriptionDataSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (resolve.SubscriptionDataSource, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() resolve.SubscriptionDataSource); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resolve.SubscriptionDataSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPubSubDataSource_ResolveDataSourceSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSourceSubscription'
type MockPubSubDataSource_ResolveDataSourceSubscription_Call struct {
	*mock.Call
}

// ResolveDataSourceSubscription is a helper method to define mock.On call
func (_e *MockPubSubDataSource_Expecter) ResolveDataSourceSubscription() *MockPubSubDataSource_ResolveDataSourceSubscription_Call {
	return &MockPubSubDataSource_ResolveDataSourceSubscription_Call{Call: _e.mock.On("ResolveDataSourceSubscription")}
}

func (_c *MockPubSubDataSource_ResolveDataSourceSubscription_Call) Run(run func()) *MockPubSubDataSource_ResolveDataSourceSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSourceSubscription_Call) Return(subscriptionDataSource resolve.SubscriptionDataSource, err error) *MockPubSubDataSource_ResolveDataSourceSubscription_Call {
	_c.Call.Return(subscriptionDataSource, err)
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSourceSubscription_Call) RunAndReturn(run func() (resolve.SubscriptionDataSource, error)) *MockPubSubDataSource_ResolveDataSourceSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDataSourceSubscriptionInput provides a mock function for the type MockPubSubDataSource
func (_mock *MockPubSubDataSource) ResolveDataSourceSubscriptionInput() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveDataSourceSubscriptionInput")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDataSourceSubscriptionInput'
type MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call struct {
	*mock.Call
}

// ResolveDataSourceSubscriptionInput is a helper method to define mock.On call
func (_e *MockPubSubDataSource_Expecter) ResolveDataSourceSubscriptionInput() *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call {
	return &MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call{Call: _e.mock.On("ResolveDataSourceSubscriptionInput")}
}

func (_c *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call) Run(run func()) *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call) Return(s string, err error) *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call) RunAndReturn(run func() (string, error)) *MockPubSubDataSource_ResolveDataSourceSubscriptionInput_Call {
	_c.Call.Return(run)
	return _c
}

// TransformEventData provides a mock function for the type MockPubSubDataSource
func (_mock *MockPubSubDataSource) TransformEventData(extractFn ArgumentTemplateCallback) error {
	ret := _mock.Called(extractFn)

	if len(ret) == 0 {
		panic("no return value specified for TransformEventData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(ArgumentTemplateCallback) error); ok {
		r0 = returnFunc(extractFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPubSubDataSource_TransformEventData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformEventData'
type MockPubSubDataSource_TransformEventData_Call struct {
	*mock.Call
}

// TransformEventData is a helper method to define mock.On call
//   - extractFn ArgumentTemplateCallback
func (_e *MockPubSubDataSource_Expecter) TransformEventData(extractFn interface{}) *MockPubSubDataSource_TransformEventData_Call {
	return &MockPubSubDataSource_TransformEventData_Call{Call: _e.mock.On("TransformEventData", extractFn)}
}

func (_c *MockPubSubDataSource_TransformEventData_Call) Run(run func(extractFn ArgumentTemplateCallback)) *MockPubSubDataSource_TransformEventData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ArgumentTemplateCallback
		if args[0] != nil {
			arg0 = args[0].(ArgumentTemplateCallback)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubDataSource_TransformEventData_Call) Return(err error) *MockPubSubDataSource_TransformEventData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPubSubDataSource_TransformEventData_Call) RunAndReturn(run func(extractFn ArgumentTemplateCallback) error) *MockPubSubDataSource_TransformEventData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLifecycle creates a new instance of MockLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLifecycle {
	mock := &MockLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLifecycle is an autogenerated mock type for the Lifecycle type
type MockLifecycle struct {
	mock.Mock
}

type MockLifecycle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLifecycle) EXPECT() *MockLifecycle_Expecter {
	return &MockLifecycle_Expecter{mock: &_m.Mock}
}

// Shutdown provides a mock function for the type MockLifecycle
func (_mock *MockLifecycle) Shutdown(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLifecycle_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockLifecycle_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLifecycle_Expecter) Shutdown(ctx interface{}) *MockLifecycle_Shutdown_Call {
	return &MockLifecycle_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockLifecycle_Shutdown_Call) Run(run func(ctx context.Context)) *MockLifecycle_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLifecycle_Shutdown_Call) Return(err error) *MockLifecycle_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLifecycle_Shutdown_Call) RunAndReturn(run func(ctx context.Context) error) *MockLifecycle_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Startup provides a mock function for the type MockLifecycle
func (_mock *MockLifecycle) Startup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLifecycle_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockLifecycle_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLifecycle_Expecter) Startup(ctx interface{}) *MockLifecycle_Startup_Call {
	return &MockLifecycle_Startup_Call{Call: _e.mock.On("Startup", ctx)}
}

func (_c *MockLifecycle_Startup_Call) Run(run func(ctx context.Context)) *MockLifecycle_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLifecycle_Startup_Call) Return(err error) *MockLifecycle_Startup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLifecycle_Startup_Call) RunAndReturn(run func(ctx context.Context) error) *MockLifecycle_Startup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSubProvider creates a new instance of MockPubSubProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubProvider {
	mock := &MockPubSubProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPubSubProvider is an autogenerated mock type for the PubSubProvider type
type MockPubSubProvider struct {
	mock.Mock
}

type MockPubSubProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubProvider) EXPECT() *MockPubSubProvider_Expecter {
	return &MockPubSubProvider_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type MockPubSubProvider
func (_mock *MockPubSubProvider) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPubSubProvider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockPubSubProvider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockPubSubProvider_Expecter) ID() *MockPubSubProvider_ID_Call {
	return &MockPubSubProvider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockPubSubProvider_ID_Call) Run(run func()) *MockPubSubProvider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubProvider_ID_Call) Return(s string) *MockPubSubProvider_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPubSubProvider_ID_Call) RunAndReturn(run func() string) *MockPubSubProvider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockPubSubProvider
func (_mock *MockPubSubProvider) Shutdown(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPubSubProvider_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockPubSubProvider_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPubSubProvider_Expecter) Shutdown(ctx interface{}) *MockPubSubProvider_Shutdown_Call {
	return &MockPubSubProvider_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockPubSubProvider_Shutdown_Call) Run(run func(ctx context.Context)) *MockPubSubProvider_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubProvider_Shutdown_Call) Return(err error) *MockPubSubProvider_Shutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPubSubProvider_Shutdown_Call) RunAndReturn(run func(ctx context.Context) error) *MockPubSubProvider_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Startup provides a mock function for the type MockPubSubProvider
func (_mock *MockPubSubProvider) Startup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPubSubProvider_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockPubSubProvider_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPubSubProvider_Expecter) Startup(ctx interface{}) *MockPubSubProvider_Startup_Call {
	return &MockPubSubProvider_Startup_Call{Call: _e.mock.On("Startup", ctx)}
}

func (_c *MockPubSubProvider_Startup_Call) Run(run func(ctx context.Context)) *MockPubSubProvider_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubProvider_Startup_Call) Return(err error) *MockPubSubProvider_Startup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPubSubProvider_Startup_Call) RunAndReturn(run func(ctx context.Context) error) *MockPubSubProvider_Startup_Call {
	_c.Call.Return(run)
	return _c
}

// TypeID provides a mock function for the type MockPubSubProvider
func (_mock *MockPubSubProvider) TypeID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPubSubProvider_TypeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeID'
type MockPubSubProvider_TypeID_Call struct {
	*mock.Call
}

// TypeID is a helper method to define mock.On call
func (_e *MockPubSubProvider_Expecter) TypeID() *MockPubSubProvider_TypeID_Call {
	return &MockPubSubProvider_TypeID_Call{Call: _e.mock.On("TypeID")}
}

func (_c *MockPubSubProvider_TypeID_Call) Run(run func()) *MockPubSubProvider_TypeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubProvider_TypeID_Call) Return(s string) *MockPubSubProvider_TypeID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPubSubProvider_TypeID_Call) RunAndReturn(run func() string) *MockPubSubProvider_TypeID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSubProviderBuilder creates a new instance of MockPubSubProviderBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubProviderBuilder[P any, E any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubProviderBuilder[P, E] {
	mock := &MockPubSubProviderBuilder[P, E]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPubSubProviderBuilder is an autogenerated mock type for the PubSubProviderBuilder type
type MockPubSubProviderBuilder[P any, E any] struct {
	mock.Mock
}

type MockPubSubProviderBuilder_Expecter[P any, E any] struct {
	mock *mock.Mock
}

func (_m *MockPubSubProviderBuilder[P, E]) EXPECT() *MockPubSubProviderBuilder_Expecter[P, E] {
	return &MockPubSubProviderBuilder_Expecter[P, E]{mock: &_m.Mock}
}

// BuildDataSource provides a mock function for the type MockPubSubProviderBuilder
func (_mock *MockPubSubProviderBuilder[P, E]) BuildDataSource(data E) (PubSubDataSource, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BuildDataSource")
	}

	var r0 PubSubDataSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(E) (PubSubDataSource, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(E) PubSubDataSource); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PubSubDataSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(E) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPubSubProviderBuilder_BuildDataSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDataSource'
type MockPubSubProviderBuilder_BuildDataSource_Call[P any, E any] struct {
	*mock.Call
}

// BuildDataSource is a helper method to define mock.On call
//   - data E
func (_e *MockPubSubProviderBuilder_Expecter[P, E]) BuildDataSource(data interface{}) *MockPubSubProviderBuilder_BuildDataSource_Call[P, E] {
	return &MockPubSubProviderBuilder_BuildDataSource_Call[P, E]{Call: _e.mock.On("BuildDataSource", data)}
}

func (_c *MockPubSubProviderBuilder_BuildDataSource_Call[P, E]) Run(run func(data E)) *MockPubSubProviderBuilder_BuildDataSource_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 E
		if args[0] != nil {
			arg0 = args[0].(E)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubProviderBuilder_BuildDataSource_Call[P, E]) Return(pubSubDataSource PubSubDataSource, err error) *MockPubSubProviderBuilder_BuildDataSource_Call[P, E] {
	_c.Call.Return(pubSubDataSource, err)
	return _c
}

func (_c *MockPubSubProviderBuilder_BuildDataSource_Call[P, E]) RunAndReturn(run func(data E) (PubSubDataSource, error)) *MockPubSubProviderBuilder_BuildDataSource_Call[P, E] {
	_c.Call.Return(run)
	return _c
}

// BuildDataSourceFactory provides a mock function for the type MockPubSubProviderBuilder
func (_mock *MockPubSubProviderBuilder[P, E]) BuildDataSourceFactory(data E) *PubSubDataSourceFactory[P, E] {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BuildDataSourceFactory")
	}

	var r0 *PubSubDataSourceFactory[P, E]
	if returnFunc, ok := ret.Get(0).(func(E) *PubSubDataSourceFactory[P, E]); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PubSubDataSourceFactory[P, E])
		}
	}
	return r0
}

// MockPubSubProviderBuilder_BuildDataSourceFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDataSourceFactory'
type MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P any, E any] struct {
	*mock.Call
}

// BuildDataSourceFactory is a helper method to define mock.On call
//   - data E
func (_e *MockPubSubProviderBuilder_Expecter[P, E]) BuildDataSourceFactory(data interface{}) *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E] {
	return &MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E]{Call: _e.mock.On("BuildDataSourceFactory", data)}
}

func (_c *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E]) Run(run func(data E)) *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 E
		if args[0] != nil {
			arg0 = args[0].(E)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E]) Return(pubSubDataSourceFactory *PubSubDataSourceFactory[P, E]) *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E] {
	_c.Call.Return(pubSubDataSourceFactory)
	return _c
}

func (_c *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E]) RunAndReturn(run func(data E) *PubSubDataSourceFactory[P, E]) *MockPubSubProviderBuilder_BuildDataSourceFactory_Call[P, E] {
	_c.Call.Return(run)
	return _c
}

// BuildProvider provides a mock function for the type MockPubSubProviderBuilder
func (_mock *MockPubSubProviderBuilder[P, E]) BuildProvider(options P) (PubSubProvider, error) {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for BuildProvider")
	}

	var r0 PubSubProvider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(P) (PubSubProvider, error)); ok {
		return returnFunc(options)
	}
	if returnFunc, ok := ret.Get(0).(func(P) PubSubProvider); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PubSubProvider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(P) error); ok {
		r1 = returnFunc(options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPubSubProviderBuilder_BuildProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildProvider'
type MockPubSubProviderBuilder_BuildProvider_Call[P any, E any] struct {
	*mock.Call
}

// BuildProvider is a helper method to define mock.On call
//   - options P
func (_e *MockPubSubProviderBuilder_Expecter[P, E]) BuildProvider(options interface{}) *MockPubSubProviderBuilder_BuildProvider_Call[P, E] {
	return &MockPubSubProviderBuilder_BuildProvider_Call[P, E]{Call: _e.mock.On("BuildProvider", options)}
}

func (_c *MockPubSubProviderBuilder_BuildProvider_Call[P, E]) Run(run func(options P)) *MockPubSubProviderBuilder_BuildProvider_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 P
		if args[0] != nil {
			arg0 = args[0].(P)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPubSubProviderBuilder_BuildProvider_Call[P, E]) Return(pubSubProvider PubSubProvider, err error) *MockPubSubProviderBuilder_BuildProvider_Call[P, E] {
	_c.Call.Return(pubSubProvider, err)
	return _c
}

func (_c *MockPubSubProviderBuilder_BuildProvider_Call[P, E]) RunAndReturn(run func(options P) (PubSubProvider, error)) *MockPubSubProviderBuilder_BuildProvider_Call[P, E] {
	_c.Call.Return(run)
	return _c
}

// TypeID provides a mock function for the type MockPubSubProviderBuilder
func (_mock *MockPubSubProviderBuilder[P, E]) TypeID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPubSubProviderBuilder_TypeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeID'
type MockPubSubProviderBuilder_TypeID_Call[P any, E any] struct {
	*mock.Call
}

// TypeID is a helper method to define mock.On call
func (_e *MockPubSubProviderBuilder_Expecter[P, E]) TypeID() *MockPubSubProviderBuilder_TypeID_Call[P, E] {
	return &MockPubSubProviderBuilder_TypeID_Call[P, E]{Call: _e.mock.On("TypeID")}
}

func (_c *MockPubSubProviderBuilder_TypeID_Call[P, E]) Run(run func()) *MockPubSubProviderBuilder_TypeID_Call[P, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubProviderBuilder_TypeID_Call[P, E]) Return(s string) *MockPubSubProviderBuilder_TypeID_Call[P, E] {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPubSubProviderBuilder_TypeID_Call[P, E]) RunAndReturn(run func() string) *MockPubSubProviderBuilder_TypeID_Call[P, E] {
	_c.Call.Return(run)
	return _c
}
