// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datasource

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wundergraph/graphql-go-tools/v2/pkg/engine/resolve"
)

// NewMockSubscriptionUpdater creates a new instance of MockSubscriptionUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionUpdater {
	mock := &MockSubscriptionUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionUpdater is an autogenerated mock type for the SubscriptionUpdater type
type MockSubscriptionUpdater struct {
	mock.Mock
}

type MockSubscriptionUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionUpdater) EXPECT() *MockSubscriptionUpdater_Expecter {
	return &MockSubscriptionUpdater_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockSubscriptionUpdater
func (_mock *MockSubscriptionUpdater) Close(kind resolve.SubscriptionCloseKind) {
	_mock.Called(kind)
	return
}

// MockSubscriptionUpdater_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubscriptionUpdater_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - kind resolve.SubscriptionCloseKind
func (_e *MockSubscriptionUpdater_Expecter) Close(kind interface{}) *MockSubscriptionUpdater_Close_Call {
	return &MockSubscriptionUpdater_Close_Call{Call: _e.mock.On("Close", kind)}
}

func (_c *MockSubscriptionUpdater_Close_Call) Run(run func(kind resolve.SubscriptionCloseKind)) *MockSubscriptionUpdater_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 resolve.SubscriptionCloseKind
		if args[0] != nil {
			arg0 = args[0].(resolve.SubscriptionCloseKind)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionUpdater_Close_Call) Return() *MockSubscriptionUpdater_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriptionUpdater_Close_Call) RunAndReturn(run func(kind resolve.SubscriptionCloseKind)) *MockSubscriptionUpdater_Close_Call {
	_c.Run(run)
	return _c
}

// Complete provides a mock function for the type MockSubscriptionUpdater
func (_mock *MockSubscriptionUpdater) Complete() {
	_mock.Called()
	return
}

// MockSubscriptionUpdater_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type MockSubscriptionUpdater_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
func (_e *MockSubscriptionUpdater_Expecter) Complete() *MockSubscriptionUpdater_Complete_Call {
	return &MockSubscriptionUpdater_Complete_Call{Call: _e.mock.On("Complete")}
}

func (_c *MockSubscriptionUpdater_Complete_Call) Run(run func()) *MockSubscriptionUpdater_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionUpdater_Complete_Call) Return() *MockSubscriptionUpdater_Complete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriptionUpdater_Complete_Call) RunAndReturn(run func()) *MockSubscriptionUpdater_Complete_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function for the type MockSubscriptionUpdater
func (_mock *MockSubscriptionUpdater) Update(data []byte) {
	_mock.Called(data)
	return
}

// MockSubscriptionUpdater_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSubscriptionUpdater_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - data []byte
func (_e *MockSubscriptionUpdater_Expecter) Update(data interface{}) *MockSubscriptionUpdater_Update_Call {
	return &MockSubscriptionUpdater_Update_Call{Call: _e.mock.On("Update", data)}
}

func (_c *MockSubscriptionUpdater_Update_Call) Run(run func(data []byte)) *MockSubscriptionUpdater_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionUpdater_Update_Call) Return() *MockSubscriptionUpdater_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriptionUpdater_Update_Call) RunAndReturn(run func(data []byte)) *MockSubscriptionUpdater_Update_Call {
	_c.Run(run)
	return _c
}
