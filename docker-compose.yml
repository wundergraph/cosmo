name: cosmo-dev
services:
  postgres:
    image: postgres:${DC_POSTGRESQL_VERSION:-15.3}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-controlplane}
      PGDATA: /data/postgres
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres:/data/postgres
    ports:
      - '5432:5432'
    restart: unless-stopped
    networks:
      - primary
    profiles:
      - dev

  keycloak:
    image: ghcr.io/wundergraph/cosmo/keycloak:${DC_KEYCLOAK_VERSION:-latest}
    build:
      context: keycloak
      dockerfile: Dockerfile
    environment:
      KEYCLOAK_EXTRA_ARGS: '--import-realm --optimized'
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: 'true'
      KEYCLOAK_ENABLE_STATISTICS: 'true'
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-changeme}
      KEYCLOAK_DATABASE_PORT: ${POSTGRES_PORT:-5432}
      KEYCLOAK_DATABASE_HOST: ${POSTGRES_HOST:-postgres}
      KEYCLOAK_DATABASE_NAME: ${POSTGRES_DB_NAME:-keycloak}
      KEYCLOAK_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      KEYCLOAK_DATABASE_USER: ${POSTGRES_USER:-postgres}
    ports:
      - '8080:8080'
    volumes:
      - ./docker/keycloak/realm.json:/opt/bitnami/keycloak/data/import/realm.json:ro
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - primary
    profiles:
      - dev

  # Only to test OTEL Instrumentation
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686'
      - '14268:14268'
      - '4319:4318'
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - primary
    profiles:
      - debug

  # Only to test prometheus integration
  prometheus:
    image: prom/prometheus:v2.53.1
    command:
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.config.file=/etc/prometheus/web.yml
    networks:
      - primary
    volumes:
      - prometheus:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/web.yml:/etc/prometheus/web.yml
    extra_hosts:
      # https://medium.com/@TimvanBaarsen/how-to-connect-to-the-docker-host-from-inside-a-docker-container-112b4c71bc66
      - 'host.docker.internal:host-gateway'
    ports:
      - '9090:9090'
    profiles:
      - debug

  graphqlmetrics:
    image: ghcr.io/wundergraph/cosmo/graphqlmetrics:${DC_GRAPHQLMETRICS_VERSION:-latest}
    build:
      context: graphqlmetrics
      dockerfile: Dockerfile
    environment:
      CLICKHOUSE_DSN: 'clickhouse://${CLICKHOUSE_USER:-default}:${CLICKHOUSE_PASSWORD:-changeme}@clickhouse:9000/${CLICKHOUSE_DATABASE:-cosmo}'
      INGEST_JWT_SECRET: ${INGEST_JWT_SECRET:-fkczyomvdprgvtmvkuhvprxuggkbgwld}
      LISTEN_ADDR: '0.0.0.0:4005'
    ports:
      - '4005:4005'
    restart: unless-stopped
    depends_on:
      - clickhouse
    networks:
      - primary
    profiles:
      - dev

  otelcollector:
    image: ghcr.io/wundergraph/cosmo/otelcollector:${DC_OTELCOLLECTOR_VERSION:-latest}
    build:
      context: otelcollector
      dockerfile: Dockerfile
    environment:
      CLICKHOUSE_ENDPOINT: 'clickhouse://${CLICKHOUSE_USER:-default}:${CLICKHOUSE_PASSWORD:-changeme}@clickhouse:9000/${CLICKHOUSE_DATABASE:-cosmo}?dial_timeout=15s&compress=lz4'
      OTEL_INGEST_JWT_SECRET: ${OTEL_INGEST_JWT_SECRET:-fkczyomvdprgvtmvkuhvprxuggkbgwld}
      PROMETHEUS_LISTEN_ADDR: ${PROMETHEUS_LISTEN_ADDR:-127.0.0.1:8088}
      PROMETHEUS_LEVEL: ${PROMETHEUS_LEVEL:-none}
    ports:
      - '4317:4317' # otlpgrpc
      - '4318:4318' # otlphttp
      - '8089:8088' # prometheus metrics
    restart: unless-stopped
    depends_on:
      - clickhouse
    networks:
      - primary
    profiles:
      - dev

  clickhouse:
    image: clickhouse/clickhouse-server:${DC_CLICKHOUSE_VERSION:-24.6}
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DATABASE:-cosmo}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-changeme}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT:-1}
    ports:
      - '8123:8123'
      - '9000:9000'
      - '9440:9440'
    volumes:
      - clickhouse:/var/lib/clickhouse
      - ./docker/clickhouse/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - primary
    profiles:
      - dev

  minio:
    image: bitnami/minio:${DC_MINIO_VERSION:-2024.7.16-debian-12-r0}
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-changeme}
      - MINIO_DEFAULT_BUCKETS=cosmo
    ports:
      - '10000:9000'
      - '10001:9001'
    volumes:
      - minio:/bitnami/minio/data
    networks:
      - primary
    profiles:
      - dev

  cdn:
    image: ghcr.io/wundergraph/cosmo/cdn:${DC_CDN_VERSION:-latest}
    build:
      context: .
      dockerfile: cdn-server/Dockerfile
    environment:
      PORT: 11000
      NODE_ENV: development
      AUTH_JWT_SECRET: fkczyomvdprgvtmvkuhvprxuggkbgwld
      AUTH_ADMISSION_JWT_SECRET: uXDxJLEvrw4aafPfrf3rRotCoBzRfPEW
      S3_STORAGE_URL: ${S3_STORAGE_URL:-http://${MINIO_ROOT_USER:-minio}:${MINIO_ROOT_PASSWORD:-changeme}@minio:9000/cosmo}
      S3_REGION: ${S3_REGION_CDN:-${S3_REGION:-auto}}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-true}
    ports:
      - '11000:11000'
    networks:
      - primary
    profiles:
      - dev

  nats:
    image: nats:${DC_NATS_VERSION:-2.10.6}
    ports:
      - '4222:4222'
      - '8222:8222'
      - '6222:6222'
    command:
      - '--js'
    networks:
      - primary
    profiles:
      - edfs

  redis:
    image: redis:${DC_REDIS_VERSION:-7.2.4}-alpine
    ports:
      - '6379:6379'
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis:/data
    networks:
      - primary
    profiles:
      - dev

  redis-slave:
    image: redis:${DC_REDIS_VERSION:-7.2.4}-alpine
    ports:
      - '6380:6379'
    command: redis-server /usr/local/etc/redis/redis.conf
    depends_on:
      - redis
    volumes:
      - ./docker/redis/redis-slave.conf:/usr/local/etc/redis/redis.conf
      - redis-slave:/data
    networks:
      - primary
    profiles:
      - dev

  kafka:
    image: bitnami/kafka:3.7.0
    ports:
      - '9092:9092'
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CFG_TRANSACTION_PARTITION_VERIFICATION_ENABLE: false
      # Set this to "PLAINTEXT://127.0.0.1:9092" if you want to run this container on localhost via Docker
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_NODE_ID: 1
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_KRAFT_CLUSTER_ID: XkpGZQ27R3eTl3OdTm2LYA # 16 byte base64-encoded UUID
    profiles:
      - edfs

# This network is shared between this file and docker-compose.full.yml to
# allow the demo subgraphs to communicate with the rest of the infra
networks:
  primary:
    driver: bridge
    name: primary

volumes:
  postgres:
  clickhouse:
  prometheus:
  minio:
  redis:
  redis-slave:
