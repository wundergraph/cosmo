name: 'CLI Build'
description: 'Build and upload CLI binary'

inputs:
  target:
    description: 'Target platform for the build (e.g., bun-linux-x64, bun-darwin-arm64)'
    required: true
  github-sha:
    description: 'GitHub SHA for versioning'
    required: true

outputs:
  artifact-url:
    description: 'URL of the uploaded artifact'
    value: ${{ steps.artifact-upload-url.outputs.artifact-url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: '1.2.19'

    - name: Setup Node
      uses: ./.github/actions/node

    - name: Generate outfile name
      id: outfile
      shell: bash
      run: echo "name=wgc-experimental-${{ inputs.github-sha }}-${{ inputs.target }}${{contains(inputs.target, 'windows') && '.exe' || ''}}" >> $GITHUB_OUTPUT

    - name: Install dependencies
      shell: bash
      run: pnpm --filter ./cli --filter ./connect --filter ./shared --filter ./composition --filter ./protographic install --frozen-lockfile

    - name: Build
      shell: bash
      run: pnpm --filter ./cli --filter ./connect --filter ./shared --filter ./composition --filter ./protographic run build

    - name: 'Build wgc binary'
      shell: bash
      run: bun build --compile --minify --sourcemap --target ${{ inputs.target }} src/index.ts --outfile out/${{ steps.outfile.outputs.name }}
      working-directory: cli

    - name: Chmod the build artifact
      shell: bash
      run: chmod +rwX out/${{ steps.outfile.outputs.name }}
      working-directory: cli

    - name: 'Upload builds as artifacts'
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: '${{ steps.outfile.outputs.name }}'
        path: 'cli/out/${{ steps.outfile.outputs.name }}'
        if-no-files-found: error

    - name: Output artifact URL
      id: artifact-upload-url
      shell: bash
      run: echo "artifact-url=${{ steps.upload.outputs.artifact-url }}" >> $GITHUB_OUTPUT
