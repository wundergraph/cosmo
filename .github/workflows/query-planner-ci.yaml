name: Query Planner CI
on:
  pull_request:
    paths:
      # This workflow should run every time router-ci and cli-ci runs
      - 'cli/**/*'
      - 'connect/**/*'
      - '.github/workflows/cli-ci.yaml'
      - 'composition-go/**/*'
      - 'demo/**/*'
      - 'router/**/*'
      - 'router-tests/**/*'
      - 'connect/**/*'
      - '.github/workflows/router-ci.yaml'
permissions:
  pull-requests: write
  contents: read
  packages: write
concurrency:
  group: ${{github.workflow}}-${{github.head_ref}}
  cancel-in-progress: true
jobs:
  filter-changes:
    runs-on: ubuntu-latest
    outputs:
      router_changed: ${{ steps.filter.outputs.router }}
      cli_changed: ${{ steps.filter.outputs.cli }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Filter Changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            router:
              - 'demo/**/*'
              - 'router/**/*'
              - 'router-tests/**/*'
              - 'connect/**/*'
              - '.github/workflows/router-ci.yaml'
            cli:
              - 'cli/**/*'
              - 'connect/**/*'
              - '.github/workflows/cli-ci.yaml'
  build-router:
    needs: filter-changes
    # This is a limitation of GitHub. Only organization members can push to GitHub Container Registry
    # For now, we will disable the push to the GitHub Container Registry for external contributor
    if: ${{ needs.filter-changes.outputs.router_changed == 'true' && github.event.pull_request.head.repo.full_name == github.repository}}
    runs-on: ubuntu-latest
    outputs:
      image_ref: ${{ steps.build_push_image.outputs.image_ref }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-push-image
        id: build_push_image
        with:
          docker_username: ${{secrets.DOCKER_USERNAME}}
          docker_password: ${{secrets.DOCKER_PASSWORD}}
          docker_context: router
          dockerfile: router/Dockerfile
          token: ${{secrets.GITHUB_TOKEN}}
          image_name: router-qp
          image_description: 'Cosmo Router Query Planner'
  build-cli:
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.cli_changed == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      wgc: ${{ steps.cli-build.outputs.artifact-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/cli-build
        id: cli-build
        with:
          github-sha: ${{ github.sha }}
          target: bun-linux-x64
  cli-release-url:
    runs-on: ubuntu-latest
    if: ${{ needs.filter-changes.outputs.cli_changed != 'true' }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - id: release-url
        run: |
          url=`gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/wundergraph/cosmo/releases --jq '.[] | select(.name | startswith("wgc@")) | .assets[] | select(.name | endswith("-bun-linux-x64.gz")) | .browser_download_url' | head -n 1`
          echo "wgc=$url" >> $GITHUB_OUTPUT
    outputs:
      wgc: ${{ steps.release-url.outputs.wgc }}
  build_test: # This job is use to lock the merge of the PR if anything fails in the query planner
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ build-router, build-cli, cli-release-url ]
    outputs:
      workflow_url: ${{ steps.trigger_workflow.outputs.workflow_url }}
    steps:
      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        id: trigger_workflow
        name: Trigger Query Planner CI
        with:
          owner: wundergraph
          repo: cosmo-celestial
          ref: master
          github_token: ${{ secrets.GITHUB_TOKEN }}
          propagate_failure: true
          workflow_file_name: 'query-planner-tester.yaml'
          client_payload: >-
            {
              "router": "${{ needs.build-router.outputs.image_ref || 'ghcr.io/wundergraph/router:latest' }}",
              "wgc": "${{ needs.build-cli.outputs.wgc || needs.cli-release-url.outputs.wgc }}",
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
  comment_on_failure:
    needs: build_test
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR on failure
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowUrl = '${{ needs.build_test.outputs.workflow_url }}';
            let message = `❌ Query Planner CI checks failed in the celestial repository.\nSee the failed run here: ${workflowUrl}`;
            if (workflowUrl === '') {
              message = `❌ Query Planner CI failed to run.`;
            }
            
            // Note: GitHub treats PRs as issues in the API, so we use the issue endpoints
            // context.issue.number will contain the PR number when running from a PR
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,  // Works for both issues and PRs
              body: message
            });