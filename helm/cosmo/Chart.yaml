apiVersion: v2
name: cosmo
description: This is the official Helm Chart for WunderGraph Cosmo - The Full
  Lifecycle GraphQL API Management Solution.

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: '0.12.2'

home: https://github.com/wundergraph/cosmo

# See https://artifacthub.io/docs/topics/annotations/helm/
annotations:
  artifacthub.io/changes: |
    - kind: changed
      description: "Pin dependencies to the latest stable version"
  artifacthub.io/links: |
    - name: source
      url: https://github.com/wundergraph/cosmo/helm/cosmo
    - name: support
      url: https://github.com/wundergraph/cosmo/issues

keywords:
  - wundergraph
  - cosmo
  - graphql
  - graphql federation
  - graphql router
  - api gateway

maintainers:
  - name: Dustin Deus
    email: dustin@wundergraph.com
    url: https://github.com/StarpTech

dependencies:
  - name: controlplane
    version: '^0'
    condition: global.controlplane.enabled
  - name: router
    version: '^0'
    condition: global.router.enabled
  - name: studio
    version: '^0'
    condition: global.studio.enabled
  - name: otelcollector
    version: '^0'
    condition: global.otelcollector.enabled
  - name: graphqlmetrics
    version: '^0'
    condition: global.graphqlmetrics.enabled
  - name: cdn
    version: '^0'
    condition: global.cdn.enabled
    # Only designed for development. For production use a managed Postgres / Keycloak / ClickHouse instance
  - name: postgresql
    version: '12.12.10'
    condition: global.postgresql.enabled
    repository: 'https://charts.bitnami.com/bitnami'
  - name: keycloak
    version: '22.0.0'
    repository: 'https://charts.bitnami.com/bitnami'
    condition: global.keycloak.enabled
  - name: clickhouse
    version: '6.2.14'
    condition: global.clickhouse.enabled
    repository: 'https://charts.bitnami.com/bitnami'
  - name: minio
    version: '14.6.25'
    condition: global.minio.enabled
    repository: 'https://charts.bitnami.com/bitnami'
  - name: redis
    version: '19.3.3'
    condition: global.redis.enabled
    repository: 'https://charts.bitnami.com/bitnami'
