# Please, note that this will override the parameters, including dependencies, configured to use the global value
global:
  helmTests:
    enabled: false

  # Enable this once to seed a new organization
  seed:
    enabled: true
    apiKey: "cosmo_669b576aaadc10ee1ae81d9193425705"
    userEmail: "foo@wundergraph.com"
    userPassword: "bar"
    firstName: "Foo"
    lastName: "Bar"
    organizationName: "WunderGraph"
    organizationSlug: "wundergraph"

  studio:
    enabled: true
    port: 3000
    webUrl: "http://studio.wundergraph.local"

  router:
    # Disabled because we don't have a token yet
    enabled: false
    webUrl: "http://router.wundergraph.local"
    port: 3002

  clickhouse:
    enabled: true

  postgresql:
    enabled: true

  controlplane:
    enabled: true
    port: 3001
    webUrl: "http://controlplane.wundergraph.local"
    # The following secret is used to sign cookie and JWT tokens
    jwtSecret: "1YQ4YR18WWNEWCLUIUKN5WVQ31HWDHEM"

  otelcollector:
    enabled: true
    port: 4318
    webUrl: "http://otelcollector.wundergraph.local"

  keycloak:
    enabled: true
    # Shared configuration e.g. seed, controlplane
    realm: "cosmo"
    loginRealm: "master"
    webUrl: "http://keycloak.wundergraph.local"
    apiUrl: "http://keycloak.wundergraph.local"
    clientId: "studio"
    adminUser: "admin"
    adminPassword: "changeme"
    # Needed when running keycloak
    port: 8080
    database: "keycloak"
    databaseSchema: "public"
    databaseUsername: "postgres"
    databasePassword: "changeme"

  prometheus:
    enabled: true
    port: 9090
    # Might contain basic auth credentials
    apiUrl: "http://admin:test@prometheus.wundergraph.local/api/v1"
    webUrl: "http://prometheus.wundergraph.local"

# Overall Ingress for the Cosmo Platform
ingress:
  enabled: true
  annotations: {}
  # className: ""
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Cosmo Controlplane
controlplane:
  configuration:
    logLevel: "info"
    allowedOrigins:
      - "http://studio.wundergraph.local"
    debugSQL: false
    authRedirectUri: "http://controlplane.wundergraph.local/v1/auth/callback"
    databaseUrl: "postgres://postgres:changeme@cosmo-postgresql:5432/controlplane"
    clickhouseDsn: "http://default:changeme@cosmo-clickhouse:8123?database=cosmo"
    # Migration tool doesn't support HTTP clickhouse protocol yet
    clickhouseMigrationDsn: "clickhouse://default:changeme@cosmo-clickhouse:9000?database=cosmo"
    postgres:
      database: "controlplane"

# Cosmo Router
router:
  terminationGracePeriodSeconds: 60
  deploymentStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  configuration:
    federatedGraphName: "production"
    # You need to run `wgc federated-graph create-token production` to generate a token
    graphApiToken: ""
    logLevel: "debug"

# Cosmo Open Telemetry Collector
otelcollector:
  configuration:
    promUsername: "admin"
    promPassword: "test"
    promWriteEndpoint: "http://prometheus.wundergraph.local/api/v1/write"
    clickhouseDsn: "http://default:changeme@cosmo-clickhouse:8123?database=cosmo&dial_timeout=15s&compress=lz4"

# The following configuration enables the stateful services of the Cosmo Platform
# The charts aren't production ready and are intended for development and testing purposes
# It is highly recommended to use a managed service in production environments
# For more information, please refer to the README.md

keycloak:
  service:
    http: 8080

clickhouse:
  configuration:
    database: "cosmo"
    auth:
      username: "default"
      password: "changeme"

prometheus:
  configmapReload:
    prometheus:
      enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-pushgateway:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  serverFiles:
    web.config.yml:
      basic_auth_users:
        admin: '$2b$12$hNf2lSsxfm0.i4a.1kVpSOVyBCfIB51VRjgBUyv6kdnyTlgWj81Ay' # "test"
  server:
    extraArgs:
      web.config.file: /etc/config/web.config.yml
      enable-feature: remote-write-receiver,native-histograms
    probeHeaders:
      - name: Authorization
        value: "Basic YWRtaW46dGVzdA==" # "admin:test"
    service:
      servicePort: 9090
    persistentVolume:
      size: 2Gi
  alertmanager:
    enabled: false

# Postgres for the Cosmo Controlplane
# https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  commonAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: "cosmo.apps.postgresql.wundergraph.com/deployment"
  service:
    ports:
      postgres: 5432
  auth:
    # Primary database, automatically created by the chart
    database: "controlplane"
    username: "postgres"
    password: "changeme"
  primary:
    persistence:
      size: 2Gi
      annotations:
        # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
        kapp.k14s.io/owned-for-deletion: ""
    initdb:
      # Credentials of the database user.
      user: "postgres"
      password: "changeme"
      scripts:
        01_init_keycloak.sql: |
          -- Create the database for Keycloak
          CREATE DATABASE "keycloak";