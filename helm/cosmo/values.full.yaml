# Please, note that this will override the parameters, including dependencies, configured to use the global value
global:
  helmTests:
    enabled: false

  # Enable this once to seed a new organization
  seed:
    enabled: true
    apiKey: "cosmo_669b576aaadc10ee1ae81d9193425705"
    userEmail: "foo@wundergraph.com"
    userPassword: "bar"
    firstName: "Foo"
    lastName: "Bar"
    organizationName: "WunderGraph"
    organizationSlug: "wundergraph"

  studio:
    enabled: true
    port: 3000
    webUrl: "http://studio.wundergraph.local"

  router:
    # Disabled because we don't have a token yet
    enabled: false
    webUrl: "http://router.wundergraph.local"
    port: 3002

  clickhouse:
    enabled: true

  postgresql:
    enabled: true

  controlplane:
    enabled: true
    port: 3001
    webUrl: "http://controlplane.wundergraph.local"
    # The following secret is used to sign cookie and JWT tokens
    jwtSecret: "1YQ4YR18WWNEWCLUIUKN5WVQ31HWDHEM"

  otelcollector:
    enabled: true
    port: 4318
    webUrl: "http://otelcollector.wundergraph.local"

  graphqlmetrics:
    enabled: true
    port: 4005
    webUrl: "http://graphqlmetrics.wundergraph.local"

  keycloak:
    enabled: true
    # Shared configuration e.g. seed, controlplane
    realm: "cosmo"
    loginRealm: "master"
    webUrl: "http://keycloak.wundergraph.local"
    # Use internal DNS name to access Keycloak
    apiUrl: "http://cosmo-keycloak:8080"
    clientId: "studio"
    adminUser: "admin"
    adminPassword: "changeme"
    # Needed when running keycloak
    port: 8080
    database: "keycloak"
    databaseSchema: "public"
    databaseUsername: "postgres"
    databasePassword: "changeme"

  minio:
    enabled: true

  cdn:
    enabled: true

# Overall Ingress for the Cosmo Platform
ingress:
  enabled: true
  annotations: {}
  # className: ""
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Cosmo CDN
cdn:
  configuration:
    # This must match the value used in controlplane.configuration.s3StorageUrl
    s3StorageUrl: "http://minio:changeme@cosmo-minio:9000/cosmo"

# Cosmo Controlplane
controlplane:
  configuration:
    logLevel: "info"
    allowedOrigins:
      - "http://studio.wundergraph.local"
    debugSQL: false
    authRedirectUri: "http://controlplane.wundergraph.local/v1/auth/callback"
    # Use internal DNS name to access postgres
    databaseUrl: "postgres://postgres:changeme@cosmo-postgresql:5432/controlplane"
    clickhouseDsn: "http://default:changeme@cosmo-clickhouse:8123/?database=cosmo"
    # Migration tool doesn't support HTTP clickhouse protocol yet
    clickhouseMigrationDsn: "clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&max_execution_time=60"
    postgres:
      database: "controlplane"
    webhookUrl: ""
    webhookSecret: ""
    githubAppClientId: ""
    githubAppClientSecret: ""
    githubAppId: ""
    githubAppPrivateKey: ""
    githubAppWebhookSecret: ""
    slackAppClientId: ""
    slackAppClientSecret: ""
    s3StorageUrl: "http://minio:changeme@cosmo-minio:9000/cosmo"
    smtpUsername: ""
    smtpPassword: ""

# Cosmo Router
router:
  terminationGracePeriodSeconds: 60
  deploymentStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  configuration:
    federatedGraphName: "production"
    # You need to run `wgc federated-graph create-token production` to generate a token
    graphApiToken: ""
    logLevel: "debug"

# Cosmo Open Telemetry Collector
otelcollector:
  configuration:
    # Use internal DNS name to access clickhouse
    clickhouseDsn: "clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&compress=lz4"

# Cosmo GraphQL Metrics Collector
graphqlmetrics:
  configuration:
    # Use internal DNS name to access clickhouse
    clickhouseDsn: "clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&compress=lz4"

# The following configuration enables the stateful services of the Cosmo Platform
# The charts aren't production ready and are intended for development and testing purposes
# It is highly recommended to use a managed service in production environments
# For more information, please refer to the README.md

keycloak:
  # Production requires TLS
  production: false
  image:
    repository: wundergraph/cosmo/keycloak
    registry: ghcr.io
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    ports:
      http: 8080
  replicaCount: 1
  podAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: "cosmo.apps.keycloak.wundergraph.com/deployment"
    # Support for k14s.io. This annotation will wait for the postgresql deployments to be ready before deploying.
    kapp.k14s.io/change-rule.postgresql: "upsert after upserting cosmo.apps.postgresql.wundergraph.com/deployment"
  auth:
    adminUser: "admin"
    adminPassword: "changeme"
  startupProbe:
    enabled: true
  cache:
    enabled: false
  postgresql:
    enabled: false
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm --health-enabled=true"
    - name: KEYCLOAK_DATABASE_PASSWORD
      value: "changeme"
  extraVolumeMounts:
    - mountPath: /opt/bitnami/keycloak/data/import/realm.json
      name: realm-config-volume
      readOnly: true
      subPath: realm.json
  extraVolumes:
    - name: realm-config-volume
      configMap:
        name: keycloak-realm
  externalDatabase:
    host: "cosmo-postgresql"
    port: 5432
    user: "postgres"
    database: keycloak

clickhouse:
  image:
    tag: "23.8.3"
  shards: 1
  # 1 replica for development
  replicaCount: 1
  # 1 replica for development
  zookeeper:
    enabled: false
  persistence:
   # 2Gi for development
   size: 2Gi
   annotations:
     # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
     kapp.k14s.io/owned-for-deletion: ""
  commonAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: "cosmo.apps.clickhouse.wundergraph.com/deployment"
  auth:
    username: "default"
    password: "changeme"
  initdbScripts:
    db-init.sql: |
      CREATE DATABASE cosmo;

# Postgres for the Cosmo Controlplane
# https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  commonAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: "cosmo.apps.postgresql.wundergraph.com/deployment"
  service:
    ports:
      postgres: 5432
  auth:
    # Primary database, automatically created by the chart
    database: "controlplane"
    username: "postgres"
    password: "changeme"
  primary:
    persistence:
      size: 1Gi
      annotations:
        # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
        kapp.k14s.io/owned-for-deletion: ""
    initdb:
      # Credentials of the database user.
      user: "postgres"
      password: "changeme"
      scripts:
        01_init_keycloak.sql: |
          -- Create the database for Keycloak
          CREATE DATABASE "keycloak";

# Minio for the Cosmo Controlplane
# https://artifacthub.io/packages/helm/bitnami/minio
minio:
  persistence:
    annotations:
      # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
      kapp.k14s.io/owned-for-deletion: ""
  commonAnnotations:
    # Support for Kapp. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: "cosmo.apps.minio.wundergraph.com/deployment"
  service:
    ports:
      minio: 9000
      minio_admin: 9001
  auth:
    rootUser: minio
    rootPassword: changeme
  defaultBuckets: cosmo
