# Please, note that this will override the parameters, including dependencies, configured to use the global value
global:
  helmTests:
    enabled: false

  # -- Enable this once to seed a new organization
  seed:
    enabled: true
    # -- Important: Remove this once the organization has been seeded and create a new secret
    apiKey: 'cosmo_669b576aaadc10ee1ae81d9193425705'
    userEmail: 'foo@wundergraph.com'
    userPassword: 'wunder@123'
    firstName: 'Foo'
    lastName: 'Bar'
    organizationName: 'WunderGraph'
    organizationSlug: 'wundergraph'

  studio:
    enabled: true
    port: 3000
    webUrl: 'http://studio.wundergraph.local'

  router:
    # -- Disabled by default because we don't have a token yet
    enabled: false
    webUrl: 'http://router.wundergraph.local'
    port: 3002

  clickhouse:
    enabled: true

  redis:
    enabled: true

  postgresql:
    enabled: true

  controlplane:
    enabled: true
    port: 3001
    webUrl: 'http://controlplane.wundergraph.local'
    # The following secret is used to sign cookie and JWT tokens
    jwtSecret: '1YQ4YR18WWNEWCLUIUKN5WVQ31HWDHEM'
    # The following secret is used to sign short-lived JWT tokens to provide access to router configs in the webhooks
    admissionJwtSecret: 'uXDxJLEvrw4aafPfrf3rRotCoBzRfPEW'

  otelcollector:
    enabled: true
    port: 4318
    webUrl: 'http://otelcollector.wundergraph.local'

  graphqlmetrics:
    enabled: true
    port: 4005
    webUrl: 'http://graphqlmetrics.wundergraph.local'

  keycloak:
    enabled: true
    # Shared configuration e.g. seed, controlplane
    realm: 'cosmo'
    loginRealm: 'master'
    webUrl: 'http://keycloak.wundergraph.local'
    # Use internal DNS name to access Keycloak
    apiUrl: 'http://cosmo-keycloak:8080'
    clientId: 'studio'
    adminUser: 'admin'
    adminPassword: 'changeme'
    # Needed when running keycloak
    port: 8080
    database: 'keycloak'
    databaseSchema: 'public'
    databaseUsername: 'postgres'
    databasePassword: 'changeme'

  minio:
    enabled: true

  cdn:
    enabled: true
    webUrl: 'http://cdn.wundergraph.local'
    port: 8787

# Overall Ingress for the Cosmo Platform
ingress:
  enabled: true
  annotations: {}
  # className: ""
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Cosmo CDN. For more options, please refer to the README.md
cdn:
  configuration:
    # This must match the value used in controlplane.configuration.s3StorageUrl
    s3StorageUrl: 'http://minio:changeme@cosmo-minio:9000/cosmo'

# Cosmo Controlplane. For more options, please refer to the README.md
controlplane:
  configuration:
    logLevel: 'debug'
    allowedOrigins:
      - 'http://studio.wundergraph.local'
    debugSQL: false
    authRedirectUri: 'http://controlplane.wundergraph.local/v1/auth/callback'
    # Use internal DNS name to access postgres
    databaseUrl: 'postgres://postgres:changeme@cosmo-postgresql:5432/controlplane'
    clickhouseDsn: 'http://default:changeme@cosmo-clickhouse:8123/?database=cosmo'
    # Migration tool doesn't support HTTP clickhouse protocol yet
    clickhouseMigrationDsn: 'clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&max_execution_time=60'
    redisHost: 'cosmo-redis-master'
    redisPort: 6379
    s3StorageUrl: 'http://minio:changeme@cosmo-minio:9000/cosmo'
    cdnBaseUrl: 'http://cosmo-cdn:8787'

# Cosmo Router. For more options, please refer to the CHART.md
router:
  terminationGracePeriodSeconds: 60
  deploymentStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  configuration:
    # You need to run `wgc router token create mygraph-token -g mygraph -n default` to generate a token
    graphApiToken: ''
    # -- Log level of the router
    logLevel: 'info'
    # -- The URL of the Cosmo Controlplane. Should be internal to the cluster.
    controlplaneUrl: 'http://cosmo-controlplane:3001'
    # -- The URL of the Cosmo GraphQL OTEL Collector. Should be internal to the cluster.
    otelCollectorUrl: 'http://cosmo-otelcollector:4318'
    # -- The URL of the Cosmo GraphQL Metrics Collector. Should be internal to the cluster.
    graphqlMetricsCollectorUrl: 'http://cosmo-graphqlmetrics:4005'
    # -- The URL of the Cosmo CDN. Should be internal to the cluster.
    cdnUrl: 'http://cosmo-cdn:8787'
    
  # Use this section to disable/enable and configure prometheus metrics on the Cosmo Router.
  prometheus:
    # -- Enables prometheus metrics support. Default is true.
    enabled: true
    # -- The port where metrics are exposed. Default is port 8088.
    port: 8088
    # -- The HTTP path where metrics are exposed. Default is "/metrics".
    path: "/metrics"

# Cosmo Open Telemetry Collector. For more options, please refer to the CHART.md
otelcollector:
  configuration:
    # Use internal DNS name to access clickhouse
    clickhouseDsn: 'clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&compress=lz4'

# Cosmo GraphQL Metrics Collector. For more options, please refer to the CHART.md
graphqlmetrics:
  configuration:
    # Use internal DNS name to access clickhouse
    clickhouseDsn: 'clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&compress=lz4'

# The following configuration enables the stateful services of the Cosmo Platform
# The charts aren't production ready and are intended for development and testing purposes
# As part of an enterprise subscription, we provide exclusive documentation on how to effectively operate and
# run WunderGraph Cosmo on all common container platforms such as EKS, GKE, AKS, Fargate, and Google Cloud Run.
# This includes migration support and configuration guidance. Don't spend time tinkering with its internals; let us do the heavy lifting for you.
# It is highly recommended to use a managed service in production environments or use our cloud offering https://cosmo.wundergraph.com

# Keycloak for the Cosmo Controlplane & Studio
# https://artifacthub.io/packages/helm/bitnami/keycloak
keycloak:
  # Production requires TLS
  production: false
  image:
    repository: wundergraph/cosmo/keycloak
    registry: ghcr.io
    pullPolicy: IfNotPresent
    tag: 'latest'
  service:
    ports:
      http: 8080
  replicaCount: 1
  podAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: 'cosmo.apps.keycloak.wundergraph.com/deployment'
    # Support for k14s.io. This annotation will wait for the postgresql deployments to be ready before deploying.
    kapp.k14s.io/change-rule.postgresql: 'upsert after upserting cosmo.apps.postgresql.wundergraph.com/deployment'
  auth:
    adminUser: 'admin'
    adminPassword: 'changeme'
  startupProbe:
    enabled: true
  cache:
    enabled: false
  postgresql:
    enabled: false
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: '--import-realm --health-enabled=true'
    - name: KEYCLOAK_DATABASE_PASSWORD
      value: 'changeme'
  extraVolumeMounts:
    - mountPath: /opt/bitnami/keycloak/data/import/realm.json
      name: realm-config-volume
      readOnly: true
      subPath: realm.json
  extraVolumes:
    - name: realm-config-volume
      configMap:
        name: keycloak-realm
  externalDatabase:
    host: 'cosmo-postgresql'
    port: 5432
    user: 'postgres'
    database: keycloak

# ClickHouse for the Cosmo Controlplane & Collectors
# https://artifacthub.io/packages/helm/bitnami/clickhouse
clickhouse:
  image:
    tag: '23.8.3'
  shards: 1
  # 1 replica for development
  replicaCount: 1
  # 1 replica for development
  zookeeper:
    enabled: false
  persistence:
    # 2Gi for development
    size: 2Gi
    annotations:
      # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
      kapp.k14s.io/owned-for-deletion: ''
  commonAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: 'cosmo.apps.clickhouse.wundergraph.com/deployment'
  auth:
    username: 'default'
    password: 'changeme'
  initdbScripts:
    db-init.sh: |
      #!/bin/bash
      set -e
      clickhouse-client --user $CLICKHOUSE_ADMIN_USER --password $CLICKHOUSE_ADMIN_PASSWORD -n <<-EOSQL
        CREATE DATABASE IF NOT EXISTS cosmo;
      EOSQL

# Postgres for the Cosmo Controlplane
# https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  commonAnnotations:
    # Support for k14s.io. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: 'cosmo.apps.postgresql.wundergraph.com/deployment'
  service:
    ports:
      postgres: 5432
  auth:
    # Primary database, automatically created by the chart
    database: 'controlplane'
    username: 'postgres'
    password: 'changeme'
  primary:
    persistence:
      size: 1Gi
      annotations:
        # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
        kapp.k14s.io/owned-for-deletion: ''
    initdb:
      # Credentials of the database user.
      user: 'postgres'
      password: 'changeme'
      scripts:
        01_init_keycloak.sql: |
          -- Create the database for Keycloak
          CREATE DATABASE "keycloak";

# Minio for the Cosmo Controlplane
# https://artifacthub.io/packages/helm/bitnami/minio
minio:
  persistence:
    size: 1Gi
    annotations:
      # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
      kapp.k14s.io/owned-for-deletion: ''
  commonAnnotations:
    # Support for Kapp. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: 'cosmo.apps.minio.wundergraph.com/deployment'
  service:
    ports:
      minio: 9000
      minio_admin: 9001
  auth:
    rootUser: minio
    rootPassword: changeme
  defaultBuckets: cosmo

# Redis for the Cosmo Controlplane
# https://artifacthub.io/packages/helm/bitnami/redis

redis:
  auth:
    enabled: false
  replica:
    replicaCount: 0
  master:
    persistence:
      enabled: true
      size: 1Gi
      annotations:
        # Support for k14s.io. This annotation will allow kapp to delete the PVCs.
        kapp.k14s.io/owned-for-deletion: ''
  commonAnnotations:
    # Support for Kapp. This annotation will form a group to coordinate deployments with kapp.
    kapp.k14s.io/change-group: 'cosmo.apps.redis.wundergraph.com/deployment'
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Enable RDB persistence (backup every 24h)
    save "86400 1"
    # Disable maxmemory-policy https://redis.io/topics/lru-cache#eviction-policies
    maxmemory-policy noeviction
    # Set maxmemory to 100mb
    maxmemory 100mb
