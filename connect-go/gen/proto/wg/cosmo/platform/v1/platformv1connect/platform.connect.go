// https://protobuf.dev/programming-guides/style/

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wg/cosmo/platform/v1/platform.proto

package platformv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wundergraph/cosmo/connect-go/gen/proto/wg/cosmo/platform/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlatformServiceName is the fully-qualified name of the PlatformService service.
	PlatformServiceName = "wg.cosmo.platform.v1.PlatformService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlatformServiceCreateNamespaceProcedure is the fully-qualified name of the PlatformService's
	// CreateNamespace RPC.
	PlatformServiceCreateNamespaceProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateNamespace"
	// PlatformServiceDeleteNamespaceProcedure is the fully-qualified name of the PlatformService's
	// DeleteNamespace RPC.
	PlatformServiceDeleteNamespaceProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteNamespace"
	// PlatformServiceRenameNamespaceProcedure is the fully-qualified name of the PlatformService's
	// RenameNamespace RPC.
	PlatformServiceRenameNamespaceProcedure = "/wg.cosmo.platform.v1.PlatformService/RenameNamespace"
	// PlatformServiceGetNamespacesProcedure is the fully-qualified name of the PlatformService's
	// GetNamespaces RPC.
	PlatformServiceGetNamespacesProcedure = "/wg.cosmo.platform.v1.PlatformService/GetNamespaces"
	// PlatformServiceCreateContractProcedure is the fully-qualified name of the PlatformService's
	// CreateContract RPC.
	PlatformServiceCreateContractProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateContract"
	// PlatformServiceUpdateContractProcedure is the fully-qualified name of the PlatformService's
	// UpdateContract RPC.
	PlatformServiceUpdateContractProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateContract"
	// PlatformServiceMoveFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// MoveFederatedGraph RPC.
	PlatformServiceMoveFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/MoveFederatedGraph"
	// PlatformServiceMoveSubgraphProcedure is the fully-qualified name of the PlatformService's
	// MoveSubgraph RPC.
	PlatformServiceMoveSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/MoveSubgraph"
	// PlatformServiceMoveMonographProcedure is the fully-qualified name of the PlatformService's
	// MoveMonograph RPC.
	PlatformServiceMoveMonographProcedure = "/wg.cosmo.platform.v1.PlatformService/MoveMonograph"
	// PlatformServiceCreateMonographProcedure is the fully-qualified name of the PlatformService's
	// CreateMonograph RPC.
	PlatformServiceCreateMonographProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateMonograph"
	// PlatformServicePublishMonographProcedure is the fully-qualified name of the PlatformService's
	// PublishMonograph RPC.
	PlatformServicePublishMonographProcedure = "/wg.cosmo.platform.v1.PlatformService/PublishMonograph"
	// PlatformServiceDeleteMonographProcedure is the fully-qualified name of the PlatformService's
	// DeleteMonograph RPC.
	PlatformServiceDeleteMonographProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteMonograph"
	// PlatformServiceUpdateMonographProcedure is the fully-qualified name of the PlatformService's
	// UpdateMonograph RPC.
	PlatformServiceUpdateMonographProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateMonograph"
	// PlatformServiceMigrateMonographProcedure is the fully-qualified name of the PlatformService's
	// MigrateMonograph RPC.
	PlatformServiceMigrateMonographProcedure = "/wg.cosmo.platform.v1.PlatformService/MigrateMonograph"
	// PlatformServiceCreateFederatedSubgraphProcedure is the fully-qualified name of the
	// PlatformService's CreateFederatedSubgraph RPC.
	PlatformServiceCreateFederatedSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFederatedSubgraph"
	// PlatformServicePublishFederatedSubgraphProcedure is the fully-qualified name of the
	// PlatformService's PublishFederatedSubgraph RPC.
	PlatformServicePublishFederatedSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/PublishFederatedSubgraph"
	// PlatformServiceCreateFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// CreateFederatedGraph RPC.
	PlatformServiceCreateFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFederatedGraph"
	// PlatformServiceDeleteFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// DeleteFederatedGraph RPC.
	PlatformServiceDeleteFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteFederatedGraph"
	// PlatformServiceDeleteFederatedSubgraphProcedure is the fully-qualified name of the
	// PlatformService's DeleteFederatedSubgraph RPC.
	PlatformServiceDeleteFederatedSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteFederatedSubgraph"
	// PlatformServiceCheckSubgraphSchemaProcedure is the fully-qualified name of the PlatformService's
	// CheckSubgraphSchema RPC.
	PlatformServiceCheckSubgraphSchemaProcedure = "/wg.cosmo.platform.v1.PlatformService/CheckSubgraphSchema"
	// PlatformServiceFixSubgraphSchemaProcedure is the fully-qualified name of the PlatformService's
	// FixSubgraphSchema RPC.
	PlatformServiceFixSubgraphSchemaProcedure = "/wg.cosmo.platform.v1.PlatformService/FixSubgraphSchema"
	// PlatformServiceUpdateFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// UpdateFederatedGraph RPC.
	PlatformServiceUpdateFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateFederatedGraph"
	// PlatformServiceUpdateSubgraphProcedure is the fully-qualified name of the PlatformService's
	// UpdateSubgraph RPC.
	PlatformServiceUpdateSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateSubgraph"
	// PlatformServiceCheckFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// CheckFederatedGraph RPC.
	PlatformServiceCheckFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/CheckFederatedGraph"
	// PlatformServiceWhoAmIProcedure is the fully-qualified name of the PlatformService's WhoAmI RPC.
	PlatformServiceWhoAmIProcedure = "/wg.cosmo.platform.v1.PlatformService/WhoAmI"
	// PlatformServiceGenerateRouterTokenProcedure is the fully-qualified name of the PlatformService's
	// GenerateRouterToken RPC.
	PlatformServiceGenerateRouterTokenProcedure = "/wg.cosmo.platform.v1.PlatformService/GenerateRouterToken"
	// PlatformServiceGetRouterTokensProcedure is the fully-qualified name of the PlatformService's
	// GetRouterTokens RPC.
	PlatformServiceGetRouterTokensProcedure = "/wg.cosmo.platform.v1.PlatformService/GetRouterTokens"
	// PlatformServiceDeleteRouterTokenProcedure is the fully-qualified name of the PlatformService's
	// DeleteRouterToken RPC.
	PlatformServiceDeleteRouterTokenProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteRouterToken"
	// PlatformServicePublishPersistedOperationsProcedure is the fully-qualified name of the
	// PlatformService's PublishPersistedOperations RPC.
	PlatformServicePublishPersistedOperationsProcedure = "/wg.cosmo.platform.v1.PlatformService/PublishPersistedOperations"
	// PlatformServiceGetPersistedOperationsProcedure is the fully-qualified name of the
	// PlatformService's GetPersistedOperations RPC.
	PlatformServiceGetPersistedOperationsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetPersistedOperations"
	// PlatformServiceGetAuditLogsProcedure is the fully-qualified name of the PlatformService's
	// GetAuditLogs RPC.
	PlatformServiceGetAuditLogsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAuditLogs"
	// PlatformServiceGetFederatedGraphsProcedure is the fully-qualified name of the PlatformService's
	// GetFederatedGraphs RPC.
	PlatformServiceGetFederatedGraphsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphs"
	// PlatformServiceGetFederatedGraphsBySubgraphLabelsProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphsBySubgraphLabels RPC.
	PlatformServiceGetFederatedGraphsBySubgraphLabelsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphsBySubgraphLabels"
	// PlatformServiceGetFederatedGraphByNameProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphByName RPC.
	PlatformServiceGetFederatedGraphByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphByName"
	// PlatformServiceGetFederatedGraphSDLByNameProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphSDLByName RPC.
	PlatformServiceGetFederatedGraphSDLByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphSDLByName"
	// PlatformServiceGetSubgraphsProcedure is the fully-qualified name of the PlatformService's
	// GetSubgraphs RPC.
	PlatformServiceGetSubgraphsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphs"
	// PlatformServiceGetSubgraphByNameProcedure is the fully-qualified name of the PlatformService's
	// GetSubgraphByName RPC.
	PlatformServiceGetSubgraphByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphByName"
	// PlatformServiceGetSubgraphSDLFromLatestCompositionProcedure is the fully-qualified name of the
	// PlatformService's GetSubgraphSDLFromLatestComposition RPC.
	PlatformServiceGetSubgraphSDLFromLatestCompositionProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphSDLFromLatestComposition"
	// PlatformServiceGetLatestSubgraphSDLProcedure is the fully-qualified name of the PlatformService's
	// GetLatestSubgraphSDL RPC.
	PlatformServiceGetLatestSubgraphSDLProcedure = "/wg.cosmo.platform.v1.PlatformService/GetLatestSubgraphSDL"
	// PlatformServiceGetChecksByFederatedGraphNameProcedure is the fully-qualified name of the
	// PlatformService's GetChecksByFederatedGraphName RPC.
	PlatformServiceGetChecksByFederatedGraphNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetChecksByFederatedGraphName"
	// PlatformServiceGetCheckSummaryProcedure is the fully-qualified name of the PlatformService's
	// GetCheckSummary RPC.
	PlatformServiceGetCheckSummaryProcedure = "/wg.cosmo.platform.v1.PlatformService/GetCheckSummary"
	// PlatformServiceGetCheckOperationsProcedure is the fully-qualified name of the PlatformService's
	// GetCheckOperations RPC.
	PlatformServiceGetCheckOperationsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetCheckOperations"
	// PlatformServiceForceCheckSuccessProcedure is the fully-qualified name of the PlatformService's
	// ForceCheckSuccess RPC.
	PlatformServiceForceCheckSuccessProcedure = "/wg.cosmo.platform.v1.PlatformService/ForceCheckSuccess"
	// PlatformServiceCreateOperationOverridesProcedure is the fully-qualified name of the
	// PlatformService's CreateOperationOverrides RPC.
	PlatformServiceCreateOperationOverridesProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateOperationOverrides"
	// PlatformServiceRemoveOperationOverridesProcedure is the fully-qualified name of the
	// PlatformService's RemoveOperationOverrides RPC.
	PlatformServiceRemoveOperationOverridesProcedure = "/wg.cosmo.platform.v1.PlatformService/RemoveOperationOverrides"
	// PlatformServiceCreateOperationIgnoreAllOverrideProcedure is the fully-qualified name of the
	// PlatformService's CreateOperationIgnoreAllOverride RPC.
	PlatformServiceCreateOperationIgnoreAllOverrideProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateOperationIgnoreAllOverride"
	// PlatformServiceRemoveOperationIgnoreAllOverrideProcedure is the fully-qualified name of the
	// PlatformService's RemoveOperationIgnoreAllOverride RPC.
	PlatformServiceRemoveOperationIgnoreAllOverrideProcedure = "/wg.cosmo.platform.v1.PlatformService/RemoveOperationIgnoreAllOverride"
	// PlatformServiceGetOperationOverridesProcedure is the fully-qualified name of the
	// PlatformService's GetOperationOverrides RPC.
	PlatformServiceGetOperationOverridesProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOperationOverrides"
	// PlatformServiceGetAllOverridesProcedure is the fully-qualified name of the PlatformService's
	// GetAllOverrides RPC.
	PlatformServiceGetAllOverridesProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAllOverrides"
	// PlatformServiceToggleChangeOverridesForAllOperationsProcedure is the fully-qualified name of the
	// PlatformService's ToggleChangeOverridesForAllOperations RPC.
	PlatformServiceToggleChangeOverridesForAllOperationsProcedure = "/wg.cosmo.platform.v1.PlatformService/ToggleChangeOverridesForAllOperations"
	// PlatformServiceCreateIgnoreOverridesForAllOperationsProcedure is the fully-qualified name of the
	// PlatformService's CreateIgnoreOverridesForAllOperations RPC.
	PlatformServiceCreateIgnoreOverridesForAllOperationsProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateIgnoreOverridesForAllOperations"
	// PlatformServiceGetOperationContentProcedure is the fully-qualified name of the PlatformService's
	// GetOperationContent RPC.
	PlatformServiceGetOperationContentProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOperationContent"
	// PlatformServiceGetFederatedGraphChangelogProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphChangelog RPC.
	PlatformServiceGetFederatedGraphChangelogProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphChangelog"
	// PlatformServiceCreateFederatedGraphTokenProcedure is the fully-qualified name of the
	// PlatformService's CreateFederatedGraphToken RPC.
	PlatformServiceCreateFederatedGraphTokenProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFederatedGraphToken"
	// PlatformServiceGetOrganizationMembersProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationMembers RPC.
	PlatformServiceGetOrganizationMembersProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationMembers"
	// PlatformServiceGetPendingOrganizationMembersProcedure is the fully-qualified name of the
	// PlatformService's GetPendingOrganizationMembers RPC.
	PlatformServiceGetPendingOrganizationMembersProcedure = "/wg.cosmo.platform.v1.PlatformService/GetPendingOrganizationMembers"
	// PlatformServiceIsMemberLimitReachedProcedure is the fully-qualified name of the PlatformService's
	// IsMemberLimitReached RPC.
	PlatformServiceIsMemberLimitReachedProcedure = "/wg.cosmo.platform.v1.PlatformService/IsMemberLimitReached"
	// PlatformServiceInviteUserProcedure is the fully-qualified name of the PlatformService's
	// InviteUser RPC.
	PlatformServiceInviteUserProcedure = "/wg.cosmo.platform.v1.PlatformService/InviteUser"
	// PlatformServiceGetAPIKeysProcedure is the fully-qualified name of the PlatformService's
	// GetAPIKeys RPC.
	PlatformServiceGetAPIKeysProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAPIKeys"
	// PlatformServiceCreateAPIKeyProcedure is the fully-qualified name of the PlatformService's
	// CreateAPIKey RPC.
	PlatformServiceCreateAPIKeyProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateAPIKey"
	// PlatformServiceDeleteAPIKeyProcedure is the fully-qualified name of the PlatformService's
	// DeleteAPIKey RPC.
	PlatformServiceDeleteAPIKeyProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteAPIKey"
	// PlatformServiceRemoveOrganizationMemberProcedure is the fully-qualified name of the
	// PlatformService's RemoveOrganizationMember RPC.
	PlatformServiceRemoveOrganizationMemberProcedure = "/wg.cosmo.platform.v1.PlatformService/RemoveOrganizationMember"
	// PlatformServiceRemoveInvitationProcedure is the fully-qualified name of the PlatformService's
	// RemoveInvitation RPC.
	PlatformServiceRemoveInvitationProcedure = "/wg.cosmo.platform.v1.PlatformService/RemoveInvitation"
	// PlatformServiceMigrateFromApolloProcedure is the fully-qualified name of the PlatformService's
	// MigrateFromApollo RPC.
	PlatformServiceMigrateFromApolloProcedure = "/wg.cosmo.platform.v1.PlatformService/MigrateFromApollo"
	// PlatformServiceCreateOrganizationWebhookConfigProcedure is the fully-qualified name of the
	// PlatformService's CreateOrganizationWebhookConfig RPC.
	PlatformServiceCreateOrganizationWebhookConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateOrganizationWebhookConfig"
	// PlatformServiceGetOrganizationWebhookConfigsProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationWebhookConfigs RPC.
	PlatformServiceGetOrganizationWebhookConfigsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationWebhookConfigs"
	// PlatformServiceGetOrganizationWebhookMetaProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationWebhookMeta RPC.
	PlatformServiceGetOrganizationWebhookMetaProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationWebhookMeta"
	// PlatformServiceUpdateOrganizationWebhookConfigProcedure is the fully-qualified name of the
	// PlatformService's UpdateOrganizationWebhookConfig RPC.
	PlatformServiceUpdateOrganizationWebhookConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateOrganizationWebhookConfig"
	// PlatformServiceDeleteOrganizationWebhookConfigProcedure is the fully-qualified name of the
	// PlatformService's DeleteOrganizationWebhookConfig RPC.
	PlatformServiceDeleteOrganizationWebhookConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteOrganizationWebhookConfig"
	// PlatformServiceGetOrganizationWebhookHistoryProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationWebhookHistory RPC.
	PlatformServiceGetOrganizationWebhookHistoryProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationWebhookHistory"
	// PlatformServiceGetWebhookDeliveryDetailsProcedure is the fully-qualified name of the
	// PlatformService's GetWebhookDeliveryDetails RPC.
	PlatformServiceGetWebhookDeliveryDetailsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetWebhookDeliveryDetails"
	// PlatformServiceRedeliverWebhookProcedure is the fully-qualified name of the PlatformService's
	// RedeliverWebhook RPC.
	PlatformServiceRedeliverWebhookProcedure = "/wg.cosmo.platform.v1.PlatformService/RedeliverWebhook"
	// PlatformServiceCreateIntegrationProcedure is the fully-qualified name of the PlatformService's
	// CreateIntegration RPC.
	PlatformServiceCreateIntegrationProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateIntegration"
	// PlatformServiceGetOrganizationIntegrationsProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationIntegrations RPC.
	PlatformServiceGetOrganizationIntegrationsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationIntegrations"
	// PlatformServiceUpdateIntegrationConfigProcedure is the fully-qualified name of the
	// PlatformService's UpdateIntegrationConfig RPC.
	PlatformServiceUpdateIntegrationConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateIntegrationConfig"
	// PlatformServiceDeleteIntegrationProcedure is the fully-qualified name of the PlatformService's
	// DeleteIntegration RPC.
	PlatformServiceDeleteIntegrationProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteIntegration"
	// PlatformServiceDeleteUserProcedure is the fully-qualified name of the PlatformService's
	// DeleteUser RPC.
	PlatformServiceDeleteUserProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteUser"
	// PlatformServiceDeleteOrganizationProcedure is the fully-qualified name of the PlatformService's
	// DeleteOrganization RPC.
	PlatformServiceDeleteOrganizationProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteOrganization"
	// PlatformServiceLeaveOrganizationProcedure is the fully-qualified name of the PlatformService's
	// LeaveOrganization RPC.
	PlatformServiceLeaveOrganizationProcedure = "/wg.cosmo.platform.v1.PlatformService/LeaveOrganization"
	// PlatformServiceUpdateOrganizationDetailsProcedure is the fully-qualified name of the
	// PlatformService's UpdateOrganizationDetails RPC.
	PlatformServiceUpdateOrganizationDetailsProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateOrganizationDetails"
	// PlatformServiceUpdateOrgMemberRoleProcedure is the fully-qualified name of the PlatformService's
	// UpdateOrgMemberRole RPC.
	PlatformServiceUpdateOrgMemberRoleProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateOrgMemberRole"
	// PlatformServiceIsGitHubAppInstalledProcedure is the fully-qualified name of the PlatformService's
	// IsGitHubAppInstalled RPC.
	PlatformServiceIsGitHubAppInstalledProcedure = "/wg.cosmo.platform.v1.PlatformService/IsGitHubAppInstalled"
	// PlatformServiceCreateOIDCProviderProcedure is the fully-qualified name of the PlatformService's
	// CreateOIDCProvider RPC.
	PlatformServiceCreateOIDCProviderProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateOIDCProvider"
	// PlatformServiceGetOIDCProviderProcedure is the fully-qualified name of the PlatformService's
	// GetOIDCProvider RPC.
	PlatformServiceGetOIDCProviderProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOIDCProvider"
	// PlatformServiceDeleteOIDCProviderProcedure is the fully-qualified name of the PlatformService's
	// DeleteOIDCProvider RPC.
	PlatformServiceDeleteOIDCProviderProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteOIDCProvider"
	// PlatformServiceUpdateIDPMappersProcedure is the fully-qualified name of the PlatformService's
	// UpdateIDPMappers RPC.
	PlatformServiceUpdateIDPMappersProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateIDPMappers"
	// PlatformServiceGetClientsProcedure is the fully-qualified name of the PlatformService's
	// GetClients RPC.
	PlatformServiceGetClientsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetClients"
	// PlatformServiceGetRoutersProcedure is the fully-qualified name of the PlatformService's
	// GetRouters RPC.
	PlatformServiceGetRoutersProcedure = "/wg.cosmo.platform.v1.PlatformService/GetRouters"
	// PlatformServiceGetInvitationsProcedure is the fully-qualified name of the PlatformService's
	// GetInvitations RPC.
	PlatformServiceGetInvitationsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetInvitations"
	// PlatformServiceAcceptOrDeclineInvitationProcedure is the fully-qualified name of the
	// PlatformService's AcceptOrDeclineInvitation RPC.
	PlatformServiceAcceptOrDeclineInvitationProcedure = "/wg.cosmo.platform.v1.PlatformService/AcceptOrDeclineInvitation"
	// PlatformServiceGetCompositionsProcedure is the fully-qualified name of the PlatformService's
	// GetCompositions RPC.
	PlatformServiceGetCompositionsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetCompositions"
	// PlatformServiceGetCompositionDetailsProcedure is the fully-qualified name of the
	// PlatformService's GetCompositionDetails RPC.
	PlatformServiceGetCompositionDetailsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetCompositionDetails"
	// PlatformServiceGetSdlBySchemaVersionProcedure is the fully-qualified name of the
	// PlatformService's GetSdlBySchemaVersion RPC.
	PlatformServiceGetSdlBySchemaVersionProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSdlBySchemaVersion"
	// PlatformServiceGetChangelogBySchemaVersionProcedure is the fully-qualified name of the
	// PlatformService's GetChangelogBySchemaVersion RPC.
	PlatformServiceGetChangelogBySchemaVersionProcedure = "/wg.cosmo.platform.v1.PlatformService/GetChangelogBySchemaVersion"
	// PlatformServiceGetUserAccessibleResourcesProcedure is the fully-qualified name of the
	// PlatformService's GetUserAccessibleResources RPC.
	PlatformServiceGetUserAccessibleResourcesProcedure = "/wg.cosmo.platform.v1.PlatformService/GetUserAccessibleResources"
	// PlatformServiceUpdateFeatureSettingsProcedure is the fully-qualified name of the
	// PlatformService's UpdateFeatureSettings RPC.
	PlatformServiceUpdateFeatureSettingsProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateFeatureSettings"
	// PlatformServiceAddSubgraphMemberProcedure is the fully-qualified name of the PlatformService's
	// AddSubgraphMember RPC.
	PlatformServiceAddSubgraphMemberProcedure = "/wg.cosmo.platform.v1.PlatformService/AddSubgraphMember"
	// PlatformServiceRemoveSubgraphMemberProcedure is the fully-qualified name of the PlatformService's
	// RemoveSubgraphMember RPC.
	PlatformServiceRemoveSubgraphMemberProcedure = "/wg.cosmo.platform.v1.PlatformService/RemoveSubgraphMember"
	// PlatformServiceGetSubgraphMembersProcedure is the fully-qualified name of the PlatformService's
	// GetSubgraphMembers RPC.
	PlatformServiceGetSubgraphMembersProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphMembers"
	// PlatformServiceCreateDiscussionProcedure is the fully-qualified name of the PlatformService's
	// CreateDiscussion RPC.
	PlatformServiceCreateDiscussionProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateDiscussion"
	// PlatformServiceReplyToDiscussionProcedure is the fully-qualified name of the PlatformService's
	// ReplyToDiscussion RPC.
	PlatformServiceReplyToDiscussionProcedure = "/wg.cosmo.platform.v1.PlatformService/ReplyToDiscussion"
	// PlatformServiceGetAllDiscussionsProcedure is the fully-qualified name of the PlatformService's
	// GetAllDiscussions RPC.
	PlatformServiceGetAllDiscussionsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAllDiscussions"
	// PlatformServiceUpdateDiscussionCommentProcedure is the fully-qualified name of the
	// PlatformService's UpdateDiscussionComment RPC.
	PlatformServiceUpdateDiscussionCommentProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateDiscussionComment"
	// PlatformServiceDeleteDiscussionCommentProcedure is the fully-qualified name of the
	// PlatformService's DeleteDiscussionComment RPC.
	PlatformServiceDeleteDiscussionCommentProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteDiscussionComment"
	// PlatformServiceGetDiscussionProcedure is the fully-qualified name of the PlatformService's
	// GetDiscussion RPC.
	PlatformServiceGetDiscussionProcedure = "/wg.cosmo.platform.v1.PlatformService/GetDiscussion"
	// PlatformServiceGetDiscussionSchemasProcedure is the fully-qualified name of the PlatformService's
	// GetDiscussionSchemas RPC.
	PlatformServiceGetDiscussionSchemasProcedure = "/wg.cosmo.platform.v1.PlatformService/GetDiscussionSchemas"
	// PlatformServiceSetDiscussionResolutionProcedure is the fully-qualified name of the
	// PlatformService's SetDiscussionResolution RPC.
	PlatformServiceSetDiscussionResolutionProcedure = "/wg.cosmo.platform.v1.PlatformService/SetDiscussionResolution"
	// PlatformServiceAddReadmeProcedure is the fully-qualified name of the PlatformService's AddReadme
	// RPC.
	PlatformServiceAddReadmeProcedure = "/wg.cosmo.platform.v1.PlatformService/AddReadme"
	// PlatformServiceGetUserAccessiblePermissionsProcedure is the fully-qualified name of the
	// PlatformService's GetUserAccessiblePermissions RPC.
	PlatformServiceGetUserAccessiblePermissionsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetUserAccessiblePermissions"
	// PlatformServiceCreateFeatureFlagProcedure is the fully-qualified name of the PlatformService's
	// CreateFeatureFlag RPC.
	PlatformServiceCreateFeatureFlagProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFeatureFlag"
	// PlatformServiceDeleteFeatureFlagProcedure is the fully-qualified name of the PlatformService's
	// DeleteFeatureFlag RPC.
	PlatformServiceDeleteFeatureFlagProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteFeatureFlag"
	// PlatformServiceUpdateFeatureFlagProcedure is the fully-qualified name of the PlatformService's
	// UpdateFeatureFlag RPC.
	PlatformServiceUpdateFeatureFlagProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateFeatureFlag"
	// PlatformServiceEnableFeatureFlagProcedure is the fully-qualified name of the PlatformService's
	// EnableFeatureFlag RPC.
	PlatformServiceEnableFeatureFlagProcedure = "/wg.cosmo.platform.v1.PlatformService/EnableFeatureFlag"
	// PlatformServiceGetAnalyticsViewProcedure is the fully-qualified name of the PlatformService's
	// GetAnalyticsView RPC.
	PlatformServiceGetAnalyticsViewProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAnalyticsView"
	// PlatformServiceGetDashboardAnalyticsViewProcedure is the fully-qualified name of the
	// PlatformService's GetDashboardAnalyticsView RPC.
	PlatformServiceGetDashboardAnalyticsViewProcedure = "/wg.cosmo.platform.v1.PlatformService/GetDashboardAnalyticsView"
	// PlatformServiceGetTraceProcedure is the fully-qualified name of the PlatformService's GetTrace
	// RPC.
	PlatformServiceGetTraceProcedure = "/wg.cosmo.platform.v1.PlatformService/GetTrace"
	// PlatformServiceGetGraphMetricsProcedure is the fully-qualified name of the PlatformService's
	// GetGraphMetrics RPC.
	PlatformServiceGetGraphMetricsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetGraphMetrics"
	// PlatformServiceGetMetricsErrorRateProcedure is the fully-qualified name of the PlatformService's
	// GetMetricsErrorRate RPC.
	PlatformServiceGetMetricsErrorRateProcedure = "/wg.cosmo.platform.v1.PlatformService/GetMetricsErrorRate"
	// PlatformServiceGetSubgraphMetricsProcedure is the fully-qualified name of the PlatformService's
	// GetSubgraphMetrics RPC.
	PlatformServiceGetSubgraphMetricsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphMetrics"
	// PlatformServiceGetSubgraphMetricsErrorRateProcedure is the fully-qualified name of the
	// PlatformService's GetSubgraphMetricsErrorRate RPC.
	PlatformServiceGetSubgraphMetricsErrorRateProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphMetricsErrorRate"
	// PlatformServiceGetFieldUsageProcedure is the fully-qualified name of the PlatformService's
	// GetFieldUsage RPC.
	PlatformServiceGetFieldUsageProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFieldUsage"
	// PlatformServiceGetOrganizationRequestsCountProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationRequestsCount RPC.
	PlatformServiceGetOrganizationRequestsCountProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationRequestsCount"
	// PlatformServiceCreateOrganizationProcedure is the fully-qualified name of the PlatformService's
	// CreateOrganization RPC.
	PlatformServiceCreateOrganizationProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateOrganization"
	// PlatformServiceEnableLintingForTheNamespaceProcedure is the fully-qualified name of the
	// PlatformService's EnableLintingForTheNamespace RPC.
	PlatformServiceEnableLintingForTheNamespaceProcedure = "/wg.cosmo.platform.v1.PlatformService/EnableLintingForTheNamespace"
	// PlatformServiceConfigureNamespaceLintConfigProcedure is the fully-qualified name of the
	// PlatformService's ConfigureNamespaceLintConfig RPC.
	PlatformServiceConfigureNamespaceLintConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/ConfigureNamespaceLintConfig"
	// PlatformServiceGetNamespaceLintConfigProcedure is the fully-qualified name of the
	// PlatformService's GetNamespaceLintConfig RPC.
	PlatformServiceGetNamespaceLintConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/GetNamespaceLintConfig"
	// PlatformServiceEnableGraphPruningProcedure is the fully-qualified name of the PlatformService's
	// EnableGraphPruning RPC.
	PlatformServiceEnableGraphPruningProcedure = "/wg.cosmo.platform.v1.PlatformService/EnableGraphPruning"
	// PlatformServiceConfigureNamespaceGraphPruningConfigProcedure is the fully-qualified name of the
	// PlatformService's ConfigureNamespaceGraphPruningConfig RPC.
	PlatformServiceConfigureNamespaceGraphPruningConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/ConfigureNamespaceGraphPruningConfig"
	// PlatformServiceGetNamespaceGraphPruningConfigProcedure is the fully-qualified name of the
	// PlatformService's GetNamespaceGraphPruningConfig RPC.
	PlatformServiceGetNamespaceGraphPruningConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/GetNamespaceGraphPruningConfig"
	// PlatformServiceGetFeatureFlagsProcedure is the fully-qualified name of the PlatformService's
	// GetFeatureFlags RPC.
	PlatformServiceGetFeatureFlagsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFeatureFlags"
	// PlatformServiceGetFeatureFlagByNameProcedure is the fully-qualified name of the PlatformService's
	// GetFeatureFlagByName RPC.
	PlatformServiceGetFeatureFlagByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFeatureFlagByName"
	// PlatformServiceGetFeatureSubgraphsByFeatureFlagProcedure is the fully-qualified name of the
	// PlatformService's GetFeatureSubgraphsByFeatureFlag RPC.
	PlatformServiceGetFeatureSubgraphsByFeatureFlagProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFeatureSubgraphsByFeatureFlag"
	// PlatformServiceGetFeatureSubgraphsProcedure is the fully-qualified name of the PlatformService's
	// GetFeatureSubgraphs RPC.
	PlatformServiceGetFeatureSubgraphsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFeatureSubgraphs"
	// PlatformServiceGetFeatureFlagsByFederatedGraphProcedure is the fully-qualified name of the
	// PlatformService's GetFeatureFlagsByFederatedGraph RPC.
	PlatformServiceGetFeatureFlagsByFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFeatureFlagsByFederatedGraph"
	// PlatformServiceGetBillingPlansProcedure is the fully-qualified name of the PlatformService's
	// GetBillingPlans RPC.
	PlatformServiceGetBillingPlansProcedure = "/wg.cosmo.platform.v1.PlatformService/GetBillingPlans"
	// PlatformServiceCreateCheckoutSessionProcedure is the fully-qualified name of the
	// PlatformService's CreateCheckoutSession RPC.
	PlatformServiceCreateCheckoutSessionProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateCheckoutSession"
	// PlatformServiceCreateBillingPortalSessionProcedure is the fully-qualified name of the
	// PlatformService's CreateBillingPortalSession RPC.
	PlatformServiceCreateBillingPortalSessionProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateBillingPortalSession"
	// PlatformServiceUpgradePlanProcedure is the fully-qualified name of the PlatformService's
	// UpgradePlan RPC.
	PlatformServiceUpgradePlanProcedure = "/wg.cosmo.platform.v1.PlatformService/UpgradePlan"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	platformServiceServiceDescriptor                                     = v1.File_wg_cosmo_platform_v1_platform_proto.Services().ByName("PlatformService")
	platformServiceCreateNamespaceMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("CreateNamespace")
	platformServiceDeleteNamespaceMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("DeleteNamespace")
	platformServiceRenameNamespaceMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("RenameNamespace")
	platformServiceGetNamespacesMethodDescriptor                         = platformServiceServiceDescriptor.Methods().ByName("GetNamespaces")
	platformServiceCreateContractMethodDescriptor                        = platformServiceServiceDescriptor.Methods().ByName("CreateContract")
	platformServiceUpdateContractMethodDescriptor                        = platformServiceServiceDescriptor.Methods().ByName("UpdateContract")
	platformServiceMoveFederatedGraphMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("MoveFederatedGraph")
	platformServiceMoveSubgraphMethodDescriptor                          = platformServiceServiceDescriptor.Methods().ByName("MoveSubgraph")
	platformServiceMoveMonographMethodDescriptor                         = platformServiceServiceDescriptor.Methods().ByName("MoveMonograph")
	platformServiceCreateMonographMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("CreateMonograph")
	platformServicePublishMonographMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("PublishMonograph")
	platformServiceDeleteMonographMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("DeleteMonograph")
	platformServiceUpdateMonographMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("UpdateMonograph")
	platformServiceMigrateMonographMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("MigrateMonograph")
	platformServiceCreateFederatedSubgraphMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("CreateFederatedSubgraph")
	platformServicePublishFederatedSubgraphMethodDescriptor              = platformServiceServiceDescriptor.Methods().ByName("PublishFederatedSubgraph")
	platformServiceCreateFederatedGraphMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("CreateFederatedGraph")
	platformServiceDeleteFederatedGraphMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("DeleteFederatedGraph")
	platformServiceDeleteFederatedSubgraphMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("DeleteFederatedSubgraph")
	platformServiceCheckSubgraphSchemaMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("CheckSubgraphSchema")
	platformServiceFixSubgraphSchemaMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("FixSubgraphSchema")
	platformServiceUpdateFederatedGraphMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("UpdateFederatedGraph")
	platformServiceUpdateSubgraphMethodDescriptor                        = platformServiceServiceDescriptor.Methods().ByName("UpdateSubgraph")
	platformServiceCheckFederatedGraphMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("CheckFederatedGraph")
	platformServiceWhoAmIMethodDescriptor                                = platformServiceServiceDescriptor.Methods().ByName("WhoAmI")
	platformServiceGenerateRouterTokenMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("GenerateRouterToken")
	platformServiceGetRouterTokensMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetRouterTokens")
	platformServiceDeleteRouterTokenMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("DeleteRouterToken")
	platformServicePublishPersistedOperationsMethodDescriptor            = platformServiceServiceDescriptor.Methods().ByName("PublishPersistedOperations")
	platformServiceGetPersistedOperationsMethodDescriptor                = platformServiceServiceDescriptor.Methods().ByName("GetPersistedOperations")
	platformServiceGetAuditLogsMethodDescriptor                          = platformServiceServiceDescriptor.Methods().ByName("GetAuditLogs")
	platformServiceGetFederatedGraphsMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("GetFederatedGraphs")
	platformServiceGetFederatedGraphsBySubgraphLabelsMethodDescriptor    = platformServiceServiceDescriptor.Methods().ByName("GetFederatedGraphsBySubgraphLabels")
	platformServiceGetFederatedGraphByNameMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("GetFederatedGraphByName")
	platformServiceGetFederatedGraphSDLByNameMethodDescriptor            = platformServiceServiceDescriptor.Methods().ByName("GetFederatedGraphSDLByName")
	platformServiceGetSubgraphsMethodDescriptor                          = platformServiceServiceDescriptor.Methods().ByName("GetSubgraphs")
	platformServiceGetSubgraphByNameMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("GetSubgraphByName")
	platformServiceGetSubgraphSDLFromLatestCompositionMethodDescriptor   = platformServiceServiceDescriptor.Methods().ByName("GetSubgraphSDLFromLatestComposition")
	platformServiceGetLatestSubgraphSDLMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("GetLatestSubgraphSDL")
	platformServiceGetChecksByFederatedGraphNameMethodDescriptor         = platformServiceServiceDescriptor.Methods().ByName("GetChecksByFederatedGraphName")
	platformServiceGetCheckSummaryMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetCheckSummary")
	platformServiceGetCheckOperationsMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("GetCheckOperations")
	platformServiceForceCheckSuccessMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("ForceCheckSuccess")
	platformServiceCreateOperationOverridesMethodDescriptor              = platformServiceServiceDescriptor.Methods().ByName("CreateOperationOverrides")
	platformServiceRemoveOperationOverridesMethodDescriptor              = platformServiceServiceDescriptor.Methods().ByName("RemoveOperationOverrides")
	platformServiceCreateOperationIgnoreAllOverrideMethodDescriptor      = platformServiceServiceDescriptor.Methods().ByName("CreateOperationIgnoreAllOverride")
	platformServiceRemoveOperationIgnoreAllOverrideMethodDescriptor      = platformServiceServiceDescriptor.Methods().ByName("RemoveOperationIgnoreAllOverride")
	platformServiceGetOperationOverridesMethodDescriptor                 = platformServiceServiceDescriptor.Methods().ByName("GetOperationOverrides")
	platformServiceGetAllOverridesMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetAllOverrides")
	platformServiceToggleChangeOverridesForAllOperationsMethodDescriptor = platformServiceServiceDescriptor.Methods().ByName("ToggleChangeOverridesForAllOperations")
	platformServiceCreateIgnoreOverridesForAllOperationsMethodDescriptor = platformServiceServiceDescriptor.Methods().ByName("CreateIgnoreOverridesForAllOperations")
	platformServiceGetOperationContentMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("GetOperationContent")
	platformServiceGetFederatedGraphChangelogMethodDescriptor            = platformServiceServiceDescriptor.Methods().ByName("GetFederatedGraphChangelog")
	platformServiceCreateFederatedGraphTokenMethodDescriptor             = platformServiceServiceDescriptor.Methods().ByName("CreateFederatedGraphToken")
	platformServiceGetOrganizationMembersMethodDescriptor                = platformServiceServiceDescriptor.Methods().ByName("GetOrganizationMembers")
	platformServiceGetPendingOrganizationMembersMethodDescriptor         = platformServiceServiceDescriptor.Methods().ByName("GetPendingOrganizationMembers")
	platformServiceIsMemberLimitReachedMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("IsMemberLimitReached")
	platformServiceInviteUserMethodDescriptor                            = platformServiceServiceDescriptor.Methods().ByName("InviteUser")
	platformServiceGetAPIKeysMethodDescriptor                            = platformServiceServiceDescriptor.Methods().ByName("GetAPIKeys")
	platformServiceCreateAPIKeyMethodDescriptor                          = platformServiceServiceDescriptor.Methods().ByName("CreateAPIKey")
	platformServiceDeleteAPIKeyMethodDescriptor                          = platformServiceServiceDescriptor.Methods().ByName("DeleteAPIKey")
	platformServiceRemoveOrganizationMemberMethodDescriptor              = platformServiceServiceDescriptor.Methods().ByName("RemoveOrganizationMember")
	platformServiceRemoveInvitationMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("RemoveInvitation")
	platformServiceMigrateFromApolloMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("MigrateFromApollo")
	platformServiceCreateOrganizationWebhookConfigMethodDescriptor       = platformServiceServiceDescriptor.Methods().ByName("CreateOrganizationWebhookConfig")
	platformServiceGetOrganizationWebhookConfigsMethodDescriptor         = platformServiceServiceDescriptor.Methods().ByName("GetOrganizationWebhookConfigs")
	platformServiceGetOrganizationWebhookMetaMethodDescriptor            = platformServiceServiceDescriptor.Methods().ByName("GetOrganizationWebhookMeta")
	platformServiceUpdateOrganizationWebhookConfigMethodDescriptor       = platformServiceServiceDescriptor.Methods().ByName("UpdateOrganizationWebhookConfig")
	platformServiceDeleteOrganizationWebhookConfigMethodDescriptor       = platformServiceServiceDescriptor.Methods().ByName("DeleteOrganizationWebhookConfig")
	platformServiceGetOrganizationWebhookHistoryMethodDescriptor         = platformServiceServiceDescriptor.Methods().ByName("GetOrganizationWebhookHistory")
	platformServiceGetWebhookDeliveryDetailsMethodDescriptor             = platformServiceServiceDescriptor.Methods().ByName("GetWebhookDeliveryDetails")
	platformServiceRedeliverWebhookMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("RedeliverWebhook")
	platformServiceCreateIntegrationMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("CreateIntegration")
	platformServiceGetOrganizationIntegrationsMethodDescriptor           = platformServiceServiceDescriptor.Methods().ByName("GetOrganizationIntegrations")
	platformServiceUpdateIntegrationConfigMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("UpdateIntegrationConfig")
	platformServiceDeleteIntegrationMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("DeleteIntegration")
	platformServiceDeleteUserMethodDescriptor                            = platformServiceServiceDescriptor.Methods().ByName("DeleteUser")
	platformServiceDeleteOrganizationMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("DeleteOrganization")
	platformServiceLeaveOrganizationMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("LeaveOrganization")
	platformServiceUpdateOrganizationDetailsMethodDescriptor             = platformServiceServiceDescriptor.Methods().ByName("UpdateOrganizationDetails")
	platformServiceUpdateOrgMemberRoleMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("UpdateOrgMemberRole")
	platformServiceIsGitHubAppInstalledMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("IsGitHubAppInstalled")
	platformServiceCreateOIDCProviderMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("CreateOIDCProvider")
	platformServiceGetOIDCProviderMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetOIDCProvider")
	platformServiceDeleteOIDCProviderMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("DeleteOIDCProvider")
	platformServiceUpdateIDPMappersMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("UpdateIDPMappers")
	platformServiceGetClientsMethodDescriptor                            = platformServiceServiceDescriptor.Methods().ByName("GetClients")
	platformServiceGetRoutersMethodDescriptor                            = platformServiceServiceDescriptor.Methods().ByName("GetRouters")
	platformServiceGetInvitationsMethodDescriptor                        = platformServiceServiceDescriptor.Methods().ByName("GetInvitations")
	platformServiceAcceptOrDeclineInvitationMethodDescriptor             = platformServiceServiceDescriptor.Methods().ByName("AcceptOrDeclineInvitation")
	platformServiceGetCompositionsMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetCompositions")
	platformServiceGetCompositionDetailsMethodDescriptor                 = platformServiceServiceDescriptor.Methods().ByName("GetCompositionDetails")
	platformServiceGetSdlBySchemaVersionMethodDescriptor                 = platformServiceServiceDescriptor.Methods().ByName("GetSdlBySchemaVersion")
	platformServiceGetChangelogBySchemaVersionMethodDescriptor           = platformServiceServiceDescriptor.Methods().ByName("GetChangelogBySchemaVersion")
	platformServiceGetUserAccessibleResourcesMethodDescriptor            = platformServiceServiceDescriptor.Methods().ByName("GetUserAccessibleResources")
	platformServiceUpdateFeatureSettingsMethodDescriptor                 = platformServiceServiceDescriptor.Methods().ByName("UpdateFeatureSettings")
	platformServiceAddSubgraphMemberMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("AddSubgraphMember")
	platformServiceRemoveSubgraphMemberMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("RemoveSubgraphMember")
	platformServiceGetSubgraphMembersMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("GetSubgraphMembers")
	platformServiceCreateDiscussionMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("CreateDiscussion")
	platformServiceReplyToDiscussionMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("ReplyToDiscussion")
	platformServiceGetAllDiscussionsMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("GetAllDiscussions")
	platformServiceUpdateDiscussionCommentMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("UpdateDiscussionComment")
	platformServiceDeleteDiscussionCommentMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("DeleteDiscussionComment")
	platformServiceGetDiscussionMethodDescriptor                         = platformServiceServiceDescriptor.Methods().ByName("GetDiscussion")
	platformServiceGetDiscussionSchemasMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("GetDiscussionSchemas")
	platformServiceSetDiscussionResolutionMethodDescriptor               = platformServiceServiceDescriptor.Methods().ByName("SetDiscussionResolution")
	platformServiceAddReadmeMethodDescriptor                             = platformServiceServiceDescriptor.Methods().ByName("AddReadme")
	platformServiceGetUserAccessiblePermissionsMethodDescriptor          = platformServiceServiceDescriptor.Methods().ByName("GetUserAccessiblePermissions")
	platformServiceCreateFeatureFlagMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("CreateFeatureFlag")
	platformServiceDeleteFeatureFlagMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("DeleteFeatureFlag")
	platformServiceUpdateFeatureFlagMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("UpdateFeatureFlag")
	platformServiceEnableFeatureFlagMethodDescriptor                     = platformServiceServiceDescriptor.Methods().ByName("EnableFeatureFlag")
	platformServiceGetAnalyticsViewMethodDescriptor                      = platformServiceServiceDescriptor.Methods().ByName("GetAnalyticsView")
	platformServiceGetDashboardAnalyticsViewMethodDescriptor             = platformServiceServiceDescriptor.Methods().ByName("GetDashboardAnalyticsView")
	platformServiceGetTraceMethodDescriptor                              = platformServiceServiceDescriptor.Methods().ByName("GetTrace")
	platformServiceGetGraphMetricsMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetGraphMetrics")
	platformServiceGetMetricsErrorRateMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("GetMetricsErrorRate")
	platformServiceGetSubgraphMetricsMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("GetSubgraphMetrics")
	platformServiceGetSubgraphMetricsErrorRateMethodDescriptor           = platformServiceServiceDescriptor.Methods().ByName("GetSubgraphMetricsErrorRate")
	platformServiceGetFieldUsageMethodDescriptor                         = platformServiceServiceDescriptor.Methods().ByName("GetFieldUsage")
	platformServiceGetOrganizationRequestsCountMethodDescriptor          = platformServiceServiceDescriptor.Methods().ByName("GetOrganizationRequestsCount")
	platformServiceCreateOrganizationMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	platformServiceEnableLintingForTheNamespaceMethodDescriptor          = platformServiceServiceDescriptor.Methods().ByName("EnableLintingForTheNamespace")
	platformServiceConfigureNamespaceLintConfigMethodDescriptor          = platformServiceServiceDescriptor.Methods().ByName("ConfigureNamespaceLintConfig")
	platformServiceGetNamespaceLintConfigMethodDescriptor                = platformServiceServiceDescriptor.Methods().ByName("GetNamespaceLintConfig")
	platformServiceEnableGraphPruningMethodDescriptor                    = platformServiceServiceDescriptor.Methods().ByName("EnableGraphPruning")
	platformServiceConfigureNamespaceGraphPruningConfigMethodDescriptor  = platformServiceServiceDescriptor.Methods().ByName("ConfigureNamespaceGraphPruningConfig")
	platformServiceGetNamespaceGraphPruningConfigMethodDescriptor        = platformServiceServiceDescriptor.Methods().ByName("GetNamespaceGraphPruningConfig")
	platformServiceGetFeatureFlagsMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetFeatureFlags")
	platformServiceGetFeatureFlagByNameMethodDescriptor                  = platformServiceServiceDescriptor.Methods().ByName("GetFeatureFlagByName")
	platformServiceGetFeatureSubgraphsByFeatureFlagMethodDescriptor      = platformServiceServiceDescriptor.Methods().ByName("GetFeatureSubgraphsByFeatureFlag")
	platformServiceGetFeatureSubgraphsMethodDescriptor                   = platformServiceServiceDescriptor.Methods().ByName("GetFeatureSubgraphs")
	platformServiceGetFeatureFlagsByFederatedGraphMethodDescriptor       = platformServiceServiceDescriptor.Methods().ByName("GetFeatureFlagsByFederatedGraph")
	platformServiceGetBillingPlansMethodDescriptor                       = platformServiceServiceDescriptor.Methods().ByName("GetBillingPlans")
	platformServiceCreateCheckoutSessionMethodDescriptor                 = platformServiceServiceDescriptor.Methods().ByName("CreateCheckoutSession")
	platformServiceCreateBillingPortalSessionMethodDescriptor            = platformServiceServiceDescriptor.Methods().ByName("CreateBillingPortalSession")
	platformServiceUpgradePlanMethodDescriptor                           = platformServiceServiceDescriptor.Methods().ByName("UpgradePlan")
)

// PlatformServiceClient is a client for the wg.cosmo.platform.v1.PlatformService service.
type PlatformServiceClient interface {
	// Namespaces
	CreateNamespace(context.Context, *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error)
	DeleteNamespace(context.Context, *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error)
	RenameNamespace(context.Context, *connect.Request[v1.RenameNamespaceRequest]) (*connect.Response[v1.RenameNamespaceResponse], error)
	GetNamespaces(context.Context, *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error)
	// Contracts
	CreateContract(context.Context, *connect.Request[v1.CreateContractRequest]) (*connect.Response[v1.CreateContractResponse], error)
	UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error)
	MoveFederatedGraph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error)
	MoveSubgraph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error)
	MoveMonograph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error)
	// CreateMonograph creates a monograph on the control plane.
	CreateMonograph(context.Context, *connect.Request[v1.CreateMonographRequest]) (*connect.Response[v1.CreateMonographResponse], error)
	// PublishMonograph pushes the schema of the monograph to the control plane.
	PublishMonograph(context.Context, *connect.Request[v1.PublishMonographRequest]) (*connect.Response[v1.PublishMonographResponse], error)
	// DeleteMonograph deletes a monograph from the control plane.
	DeleteMonograph(context.Context, *connect.Request[v1.DeleteMonographRequest]) (*connect.Response[v1.DeleteMonographResponse], error)
	// UpdateMonograph updates a monograph with new urls, subscription config and readme
	UpdateMonograph(context.Context, *connect.Request[v1.UpdateMonographRequest]) (*connect.Response[v1.UpdateMonographResponse], error)
	// MigrateMonograph converts a monograph into a federated graph.
	MigrateMonograph(context.Context, *connect.Request[v1.MigrateMonographRequest]) (*connect.Response[v1.MigrateMonographResponse], error)
	// CreateFederatedSubgraph creates a federated subgraph on the control plane.
	CreateFederatedSubgraph(context.Context, *connect.Request[v1.CreateFederatedSubgraphRequest]) (*connect.Response[v1.CreateFederatedSubgraphResponse], error)
	// PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
	PublishFederatedSubgraph(context.Context, *connect.Request[v1.PublishFederatedSubgraphRequest]) (*connect.Response[v1.PublishFederatedSubgraphResponse], error)
	// CreateFederatedGraph creates a federated graph on the control plane.
	CreateFederatedGraph(context.Context, *connect.Request[v1.CreateFederatedGraphRequest]) (*connect.Response[v1.CreateFederatedGraphResponse], error)
	// DeleteFederatedGraph deletes a federated graph from the control plane.
	DeleteFederatedGraph(context.Context, *connect.Request[v1.DeleteFederatedGraphRequest]) (*connect.Response[v1.DeleteFederatedGraphResponse], error)
	// DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
	DeleteFederatedSubgraph(context.Context, *connect.Request[v1.DeleteFederatedSubgraphRequest]) (*connect.Response[v1.DeleteFederatedSubgraphResponse], error)
	// CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
	CheckSubgraphSchema(context.Context, *connect.Request[v1.CheckSubgraphSchemaRequest]) (*connect.Response[v1.CheckSubgraphSchemaResponse], error)
	FixSubgraphSchema(context.Context, *connect.Request[v1.FixSubgraphSchemaRequest]) (*connect.Response[v1.FixSubgraphSchemaResponse], error)
	// UpdateFederatedGraph updates a federated graph with new labels and routing url
	UpdateFederatedGraph(context.Context, *connect.Request[v1.UpdateFederatedGraphRequest]) (*connect.Response[v1.UpdateFederatedGraphResponse], error)
	// UpdateSubgraph updates a subgraph with new labels and routing url
	UpdateSubgraph(context.Context, *connect.Request[v1.UpdateSubgraphRequest]) (*connect.Response[v1.UpdateSubgraphResponse], error)
	// CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
	CheckFederatedGraph(context.Context, *connect.Request[v1.CheckFederatedGraphRequest]) (*connect.Response[v1.CheckFederatedGraphResponse], error)
	// WhoAmI returns the identity of the user currently logged in.
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
	// GenerateRouterToken generates a temporary router token to fetch the router config.
	GenerateRouterToken(context.Context, *connect.Request[v1.GenerateRouterTokenRequest]) (*connect.Response[v1.GenerateRouterTokenResponse], error)
	// GetRouterTokens returns the router tokens of a federated graph.
	GetRouterTokens(context.Context, *connect.Request[v1.GetRouterTokensRequest]) (*connect.Response[v1.GetRouterTokensResponse], error)
	// DeleteRouterToken deletes the router token of a federated graph.
	DeleteRouterToken(context.Context, *connect.Request[v1.DeleteRouterTokenRequest]) (*connect.Response[v1.DeleteRouterTokenResponse], error)
	// Add persisted operations
	PublishPersistedOperations(context.Context, *connect.Request[v1.PublishPersistedOperationsRequest]) (*connect.Response[v1.PublishPersistedOperationsResponse], error)
	// GetPersistedOperations returns operations for the registered client id
	GetPersistedOperations(context.Context, *connect.Request[v1.GetPersistedOperationsRequest]) (*connect.Response[v1.GetPersistedOperationsResponse], error)
	// GetAuditLogs returns the audit logs of the organization
	GetAuditLogs(context.Context, *connect.Request[v1.GetAuditLogsRequest]) (*connect.Response[v1.GetAuditLogsResponse], error)
	// GetFederatedGraphs returns the list of federated graphs.
	GetFederatedGraphs(context.Context, *connect.Request[v1.GetFederatedGraphsRequest]) (*connect.Response[v1.GetFederatedGraphsResponse], error)
	// GetFederatedGraphsBySubgraphLabels returns the list of federated graphs based on the subgraph labels
	GetFederatedGraphsBySubgraphLabels(context.Context, *connect.Request[v1.GetFederatedGraphsBySubgraphLabelsRequest]) (*connect.Response[v1.GetFederatedGraphsBySubgraphLabelsResponse], error)
	// GetFederatedGraphByName returns the federated graph by name.
	GetFederatedGraphByName(context.Context, *connect.Request[v1.GetFederatedGraphByNameRequest]) (*connect.Response[v1.GetFederatedGraphByNameResponse], error)
	// GetFederatedGraphSDLByName returns the latest valid SDL of the federated graph by name.
	GetFederatedGraphSDLByName(context.Context, *connect.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect.Response[v1.GetFederatedGraphSDLByNameResponse], error)
	// GetSubgraphs returns the list of subgraphs.
	GetSubgraphs(context.Context, *connect.Request[v1.GetSubgraphsRequest]) (*connect.Response[v1.GetSubgraphsResponse], error)
	// GetSubgraphByName returns the subgraph by name.
	GetSubgraphByName(context.Context, *connect.Request[v1.GetSubgraphByNameRequest]) (*connect.Response[v1.GetSubgraphByNameResponse], error)
	// GetSubgraphSDLFromLatestComposition returns the latest valid SDL of the subgraph composed with the federated graph.
	GetSubgraphSDLFromLatestComposition(context.Context, *connect.Request[v1.GetSubgraphSDLFromLatestCompositionRequest]) (*connect.Response[v1.GetSubgraphSDLFromLatestCompositionResponse], error)
	// GetLatestSubgraphSDL returns the latest SDL of the subgraph by name.
	GetLatestSubgraphSDL(context.Context, *connect.Request[v1.GetLatestSubgraphSDLRequest]) (*connect.Response[v1.GetLatestSubgraphSDLResponse], error)
	// GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
	GetChecksByFederatedGraphName(context.Context, *connect.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect.Response[v1.GetChecksByFederatedGraphNameResponse], error)
	// GetCheckSummary returns top level information about a schema check
	GetCheckSummary(context.Context, *connect.Request[v1.GetCheckSummaryRequest]) (*connect.Response[v1.GetCheckSummaryResponse], error)
	// GetCheckOperations returns affected operations for a check
	GetCheckOperations(context.Context, *connect.Request[v1.GetCheckOperationsRequest]) (*connect.Response[v1.GetCheckOperationsResponse], error)
	// ForceCheckSuccess forces a failed check to be marked as successful
	ForceCheckSuccess(context.Context, *connect.Request[v1.ForceCheckSuccessRequest]) (*connect.Response[v1.ForceCheckSuccessResponse], error)
	// CreateOperationOverrides marks if the given set of changes as safe for an operation
	CreateOperationOverrides(context.Context, *connect.Request[v1.CreateOperationOverridesRequest]) (*connect.Response[v1.CreateOperationOverridesResponse], error)
	// RemoveOperationOverride removes a change from the safe-list for an operation
	RemoveOperationOverrides(context.Context, *connect.Request[v1.RemoveOperationOverridesRequest]) (*connect.Response[v1.RemoveOperationOverridesResponse], error)
	// CreateOperationIgnoreAllOverride adds an ignore all override for the operation
	CreateOperationIgnoreAllOverride(context.Context, *connect.Request[v1.CreateOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.CreateOperationIgnoreAllOverrideResponse], error)
	// RemoveOperationIgnoreAllOverride removes the ignore all override for the operation
	RemoveOperationIgnoreAllOverride(context.Context, *connect.Request[v1.RemoveOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.RemoveOperationIgnoreAllOverrideResponse], error)
	// GetOperationOverrides retrieves all overrides for an operation hash
	GetOperationOverrides(context.Context, *connect.Request[v1.GetOperationOverridesRequest]) (*connect.Response[v1.GetOperationOverridesResponse], error)
	// GetAllOverrides returns all overrides for operations within a namespace
	GetAllOverrides(context.Context, *connect.Request[v1.GetAllOverridesRequest]) (*connect.Response[v1.GetAllOverridesResponse], error)
	// ToggleChangeOverridesForAllOperations marks all impacting changes of a given check either safe or unsafe
	ToggleChangeOverridesForAllOperations(context.Context, *connect.Request[v1.ToggleChangeOverridesForAllOperationsRequest]) (*connect.Response[v1.ToggleChangeOverridesForAllOperationsResponse], error)
	// CreateIgnoreOverridesForAllOperations creates ignore override for all operations of a given check
	CreateIgnoreOverridesForAllOperations(context.Context, *connect.Request[v1.CreateIgnoreOverridesForAllOperationsRequest]) (*connect.Response[v1.CreateIgnoreOverridesForAllOperationsResponse], error)
	// GetOperationContent returns the operation body by searching using the hash
	GetOperationContent(context.Context, *connect.Request[v1.GetOperationContentRequest]) (*connect.Response[v1.GetOperationContentResponse], error)
	// GetFederatedGraphChangelog returns the changelog of the federated graph.
	GetFederatedGraphChangelog(context.Context, *connect.Request[v1.GetFederatedGraphChangelogRequest]) (*connect.Response[v1.GetFederatedGraphChangelogResponse], error)
	// CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
	CreateFederatedGraphToken(context.Context, *connect.Request[v1.CreateFederatedGraphTokenRequest]) (*connect.Response[v1.CreateFederatedGraphTokenResponse], error)
	// GetOrganizationMembers returns the list of organization members
	GetOrganizationMembers(context.Context, *connect.Request[v1.GetOrganizationMembersRequest]) (*connect.Response[v1.GetOrganizationMembersResponse], error)
	// GetOrganizationMembers returns the list of pending organization invites
	GetPendingOrganizationMembers(context.Context, *connect.Request[v1.GetPendingOrganizationMembersRequest]) (*connect.Response[v1.GetPendingOrganizationMembersResponse], error)
	// IsMemberLimitReached returns whether the organization has reached the member limit
	IsMemberLimitReached(context.Context, *connect.Request[v1.IsMemberLimitReachedRequest]) (*connect.Response[v1.IsMemberLimitReachedResponse], error)
	// InviteUser invites an user to join the organization
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	// GetAPIKeys returns a list of API keys of the organization
	GetAPIKeys(context.Context, *connect.Request[v1.GetAPIKeysRequest]) (*connect.Response[v1.GetAPIKeysResponse], error)
	// CreateAPIKey creates an API key for the organization
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	// DeleteAPIKey deletes an API key for the organization
	DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error)
	// RemoveOrganizationMember removes the user from the organization
	RemoveOrganizationMember(context.Context, *connect.Request[v1.RemoveOrganizationMemberRequest]) (*connect.Response[v1.RemoveOrganizationMemberResponse], error)
	// RemoveInvitation removes the org invitation of the user
	RemoveInvitation(context.Context, *connect.Request[v1.RemoveInvitationRequest]) (*connect.Response[v1.RemoveInvitationResponse], error)
	// MigrateFromApollo migrates the graphs from apollo to cosmo
	MigrateFromApollo(context.Context, *connect.Request[v1.MigrateFromApolloRequest]) (*connect.Response[v1.MigrateFromApolloResponse], error)
	// CreateOrganizationWebhookConfig create a new webhook config for the organization
	CreateOrganizationWebhookConfig(context.Context, *connect.Request[v1.CreateOrganizationWebhookConfigRequest]) (*connect.Response[v1.CreateOrganizationWebhookConfigResponse], error)
	// GetOrganizationWebhookConfigs returns all webhooks for the organization
	GetOrganizationWebhookConfigs(context.Context, *connect.Request[v1.GetOrganizationWebhookConfigsRequest]) (*connect.Response[v1.GetOrganizationWebhookConfigsResponse], error)
	// GetOrganizationWebhookMeta returns the meta data for a particular webhook
	GetOrganizationWebhookMeta(context.Context, *connect.Request[v1.GetOrganizationWebhookMetaRequest]) (*connect.Response[v1.GetOrganizationWebhookMetaResponse], error)
	// UpdateOrganizationWebhookConfig updates an existing webhook for the organization
	UpdateOrganizationWebhookConfig(context.Context, *connect.Request[v1.UpdateOrganizationWebhookConfigRequest]) (*connect.Response[v1.UpdateOrganizationWebhookConfigResponse], error)
	// DeleteOrganizationWebhookConfig deletes an organization webhook
	DeleteOrganizationWebhookConfig(context.Context, *connect.Request[v1.DeleteOrganizationWebhookConfigRequest]) (*connect.Response[v1.DeleteOrganizationWebhookConfigResponse], error)
	// GetOrganizationWebhookHistory retrieves all webhook deliveries for the organization
	GetOrganizationWebhookHistory(context.Context, *connect.Request[v1.GetOrganizationWebhookHistoryRequest]) (*connect.Response[v1.GetOrganizationWebhookHistoryResponse], error)
	// GetWebhookDeliveryDetails retrieves details for a particular webhook
	GetWebhookDeliveryDetails(context.Context, *connect.Request[v1.GetWebhookDeliveryDetailsRequest]) (*connect.Response[v1.GetWebhookDeliveryDetailsResponse], error)
	// RedeliverWebhook triggers the delivery of the given webhook once again
	RedeliverWebhook(context.Context, *connect.Request[v1.RedeliverWebhookRequest]) (*connect.Response[v1.RedeliverWebhookResponse], error)
	// CreateIntegration create a new integration for the organization
	CreateIntegration(context.Context, *connect.Request[v1.CreateIntegrationRequest]) (*connect.Response[v1.CreateIntegrationResponse], error)
	// GetOrganizationIntegrations returns all integrations of the organization
	GetOrganizationIntegrations(context.Context, *connect.Request[v1.GetOrganizationIntegrationsRequest]) (*connect.Response[v1.GetOrganizationIntegrationsResponse], error)
	// UpdateIntegrationConfig updates an existing integration of the organization
	UpdateIntegrationConfig(context.Context, *connect.Request[v1.UpdateIntegrationConfigRequest]) (*connect.Response[v1.UpdateIntegrationConfigResponse], error)
	// DeleteIntegration deletes an organization web integration hook
	DeleteIntegration(context.Context, *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error)
	// DeleteUser deletes the user
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// DeleteOrganization deletes an organization
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	// LeaveOrganization removes a member from the organization
	LeaveOrganization(context.Context, *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error)
	// UpdateOrganizationDetails updates the name and slug of the organization
	UpdateOrganizationDetails(context.Context, *connect.Request[v1.UpdateOrganizationDetailsRequest]) (*connect.Response[v1.UpdateOrganizationDetailsResponse], error)
	// UpdateOrgMemberRole updates the role of an org member
	UpdateOrgMemberRole(context.Context, *connect.Request[v1.UpdateOrgMemberRoleRequest]) (*connect.Response[v1.UpdateOrgMemberRoleResponse], error)
	// IsGitHubAppInstalled checks if the cosmo github app is installed to a repository
	IsGitHubAppInstalled(context.Context, *connect.Request[v1.IsGitHubAppInstalledRequest]) (*connect.Response[v1.IsGitHubAppInstalledResponse], error)
	// CreateOIDCProvider adds an oidc provider to the organization
	CreateOIDCProvider(context.Context, *connect.Request[v1.CreateOIDCProviderRequest]) (*connect.Response[v1.CreateOIDCProviderResponse], error)
	// GetOIDCProvider gets the oidc provider connected the organization
	GetOIDCProvider(context.Context, *connect.Request[v1.GetOIDCProviderRequest]) (*connect.Response[v1.GetOIDCProviderResponse], error)
	// DeleteOIDCProvider deletes the oidc provider connected the organization
	DeleteOIDCProvider(context.Context, *connect.Request[v1.DeleteOIDCProviderRequest]) (*connect.Response[v1.DeleteOIDCProviderResponse], error)
	// UpdateIDPMappers updates the mappings of the oidc provider
	UpdateIDPMappers(context.Context, *connect.Request[v1.UpdateIDPMappersRequest]) (*connect.Response[v1.UpdateIDPMappersResponse], error)
	// GetClients returns all the clients of the federated graph
	GetClients(context.Context, *connect.Request[v1.GetClientsRequest]) (*connect.Response[v1.GetClientsResponse], error)
	// GetRouters returns all active routers of the federated graph
	GetRouters(context.Context, *connect.Request[v1.GetRoutersRequest]) (*connect.Response[v1.GetRoutersResponse], error)
	// GetInvitations returns all the invitations a user has received
	GetInvitations(context.Context, *connect.Request[v1.GetInvitationsRequest]) (*connect.Response[v1.GetInvitationsResponse], error)
	// AcceptOrDeclineInvitation accepts or declines the invitation
	AcceptOrDeclineInvitation(context.Context, *connect.Request[v1.AcceptOrDeclineInvitationRequest]) (*connect.Response[v1.AcceptOrDeclineInvitationResponse], error)
	// GetCompositions returns all the compositions of the federated graph
	GetCompositions(context.Context, *connect.Request[v1.GetCompositionsRequest]) (*connect.Response[v1.GetCompositionsResponse], error)
	// GetCompositionDetails returns the details of that composition
	GetCompositionDetails(context.Context, *connect.Request[v1.GetCompositionDetailsRequest]) (*connect.Response[v1.GetCompositionDetailsResponse], error)
	// GetSdlBySchemaVersion returns the sdl based on the schema version
	GetSdlBySchemaVersion(context.Context, *connect.Request[v1.GetSdlBySchemaVersionRequest]) (*connect.Response[v1.GetSdlBySchemaVersionResponse], error)
	// GetChangelogBySchemaVersion returns the changelog based on the schema version
	GetChangelogBySchemaVersion(context.Context, *connect.Request[v1.GetChangelogBySchemaVersionRequest]) (*connect.Response[v1.GetChangelogBySchemaVersionResponse], error)
	// GetUserAccessibleResources returns all the federated and subgraphs where the user has write permissions
	GetUserAccessibleResources(context.Context, *connect.Request[v1.GetUserAccessibleResourcesRequest]) (*connect.Response[v1.GetUserAccessibleResourcesResponse], error)
	// UpdateFeatureSettings updates the setinngs of features(ai, rbac, scim) of the organization
	UpdateFeatureSettings(context.Context, *connect.Request[v1.UpdateFeatureSettingsRequest]) (*connect.Response[v1.UpdateFeatureSettingsResponse], error)
	// AddSubgraphMember adds a user to the subgraph
	AddSubgraphMember(context.Context, *connect.Request[v1.AddSubgraphMemberRequest]) (*connect.Response[v1.AddSubgraphMemberResponse], error)
	// RemoveSubgraphMember removes a member from the subgraph
	RemoveSubgraphMember(context.Context, *connect.Request[v1.RemoveSubgraphMemberRequest]) (*connect.Response[v1.RemoveSubgraphMemberResponse], error)
	// GetSubgraphMembers gets all the members of the subgraph
	GetSubgraphMembers(context.Context, *connect.Request[v1.GetSubgraphMembersRequest]) (*connect.Response[v1.GetSubgraphMembersResponse], error)
	// CreateDiscussion creates a new discussion with an opening comment
	CreateDiscussion(context.Context, *connect.Request[v1.CreateDiscussionRequest]) (*connect.Response[v1.CreateDiscussionResponse], error)
	// ReplyToDiscussion creates a new comment in the discussion
	ReplyToDiscussion(context.Context, *connect.Request[v1.ReplyToDiscussionRequest]) (*connect.Response[v1.ReplyToDiscussionResponse], error)
	// GetAllDiscussions fetches all discussions which may be scoped to a schema version if passed
	GetAllDiscussions(context.Context, *connect.Request[v1.GetAllDiscussionsRequest]) (*connect.Response[v1.GetAllDiscussionsResponse], error)
	// UpdateDiscussionComment edits the comment in the discussion
	UpdateDiscussionComment(context.Context, *connect.Request[v1.UpdateDiscussionCommentRequest]) (*connect.Response[v1.UpdateDiscussionCommentResponse], error)
	// DeleteDiscussionComment deletes the comment or the discussion if it is an opening comment
	DeleteDiscussionComment(context.Context, *connect.Request[v1.DeleteDiscussionCommentRequest]) (*connect.Response[v1.DeleteDiscussionCommentResponse], error)
	// GetDiscussion gets the entire discussion thread
	GetDiscussion(context.Context, *connect.Request[v1.GetDiscussionRequest]) (*connect.Response[v1.GetDiscussionResponse], error)
	// GetDiscussionSchemas gets the reference and latest schema of the target graph in which the discussion was created
	GetDiscussionSchemas(context.Context, *connect.Request[v1.GetDiscussionSchemasRequest]) (*connect.Response[v1.GetDiscussionSchemasResponse], error)
	// SetDiscussionResolutionRequest marks the discussion as resolved or not
	SetDiscussionResolution(context.Context, *connect.Request[v1.SetDiscussionResolutionRequest]) (*connect.Response[v1.SetDiscussionResolutionResponse], error)
	// AddReadme adds a readme of a target, can be a subgraph or a federated graph
	AddReadme(context.Context, *connect.Request[v1.AddReadmeRequest]) (*connect.Response[v1.AddReadmeResponse], error)
	// GetUserAccessiblePermissions returns all the federated and subgraphs where the user has write permissions
	GetUserAccessiblePermissions(context.Context, *connect.Request[v1.GetUserAccessiblePermissionsRequest]) (*connect.Response[v1.GetUserAccessiblePermissionsResponse], error)
	// CreateFeatureFlag creates a new feature flag for the selected feature graphs
	CreateFeatureFlag(context.Context, *connect.Request[v1.CreateFeatureFlagRequest]) (*connect.Response[v1.CreateFeatureFlagResponse], error)
	// DeleteFeatureFlag deletes an existing feature flag
	DeleteFeatureFlag(context.Context, *connect.Request[v1.DeleteFeatureFlagRequest]) (*connect.Response[v1.DeleteFeatureFlagResponse], error)
	// UpdateFeatureFlag updates a new feature flag for the selected feature graphs
	UpdateFeatureFlag(context.Context, *connect.Request[v1.UpdateFeatureFlagRequest]) (*connect.Response[v1.UpdateFeatureFlagResponse], error)
	// EnableFeatureFlag enables/disables a feature flag
	EnableFeatureFlag(context.Context, *connect.Request[v1.EnableFeatureFlagRequest]) (*connect.Response[v1.EnableFeatureFlagResponse], error)
	// Analytics
	GetAnalyticsView(context.Context, *connect.Request[v1.GetAnalyticsViewRequest]) (*connect.Response[v1.GetAnalyticsViewResponse], error)
	GetDashboardAnalyticsView(context.Context, *connect.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect.Response[v1.GetDashboardAnalyticsViewResponse], error)
	GetTrace(context.Context, *connect.Request[v1.GetTraceRequest]) (*connect.Response[v1.GetTraceResponse], error)
	GetGraphMetrics(context.Context, *connect.Request[v1.GetGraphMetricsRequest]) (*connect.Response[v1.GetGraphMetricsResponse], error)
	GetMetricsErrorRate(context.Context, *connect.Request[v1.GetMetricsErrorRateRequest]) (*connect.Response[v1.GetMetricsErrorRateResponse], error)
	GetSubgraphMetrics(context.Context, *connect.Request[v1.GetSubgraphMetricsRequest]) (*connect.Response[v1.GetSubgraphMetricsResponse], error)
	GetSubgraphMetricsErrorRate(context.Context, *connect.Request[v1.GetSubgraphMetricsErrorRateRequest]) (*connect.Response[v1.GetSubgraphMetricsErrorRateResponse], error)
	GetFieldUsage(context.Context, *connect.Request[v1.GetFieldUsageRequest]) (*connect.Response[v1.GetFieldUsageResponse], error)
	GetOrganizationRequestsCount(context.Context, *connect.Request[v1.GetOrganizationRequestsCountRequest]) (*connect.Response[v1.GetOrganizationRequestsCountResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// EnableLintingForTheNamespace enables the lint check for the namespace passed.
	EnableLintingForTheNamespace(context.Context, *connect.Request[v1.EnableLintingForTheNamespaceRequest]) (*connect.Response[v1.EnableLintingForTheNamespaceResponse], error)
	// ConfigureNamespaceLintConfig configures the lint config of the organization.
	ConfigureNamespaceLintConfig(context.Context, *connect.Request[v1.ConfigureNamespaceLintConfigRequest]) (*connect.Response[v1.ConfigureNamespaceLintConfigResponse], error)
	// GetNamespaceLintConfig returns the lint config of the namespace.
	GetNamespaceLintConfig(context.Context, *connect.Request[v1.GetNamespaceLintConfigRequest]) (*connect.Response[v1.GetNamespaceLintConfigResponse], error)
	// EnablePruningForTheNamespace enables the graph pruning check for the namespace passed.
	EnableGraphPruning(context.Context, *connect.Request[v1.EnableGraphPruningRequest]) (*connect.Response[v1.EnableGraphPruningResponse], error)
	// ConfigureNamespaceGraphPruningConfig configures the graph pruning config of the organization.
	ConfigureNamespaceGraphPruningConfig(context.Context, *connect.Request[v1.ConfigureNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.ConfigureNamespaceGraphPruningConfigResponse], error)
	// GetNamespaceGraphPruningConfig returns the graph pruning config of the namespace.
	GetNamespaceGraphPruningConfig(context.Context, *connect.Request[v1.GetNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.GetNamespaceGraphPruningConfigResponse], error)
	// GetFeatureFlags returns the feature flags of the namespace
	GetFeatureFlags(context.Context, *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error)
	// GetFeatureFlagByName returns the feature flag of the namespace
	GetFeatureFlagByName(context.Context, *connect.Request[v1.GetFeatureFlagByNameRequest]) (*connect.Response[v1.GetFeatureFlagByNameResponse], error)
	// GetFeatureSubgraphsByFeatureFlag returns the feature subgraphs of a feature flag
	GetFeatureSubgraphsByFeatureFlag(context.Context, *connect.Request[v1.GetFeatureSubgraphsByFeatureFlagRequest]) (*connect.Response[v1.GetFeatureSubgraphsByFeatureFlagResponse], error)
	// GetFeatureSubgraphs returns the list of feature subgraphs.
	GetFeatureSubgraphs(context.Context, *connect.Request[v1.GetFeatureSubgraphsRequest]) (*connect.Response[v1.GetFeatureSubgraphsResponse], error)
	// GetFeatureFlagsByFederatedGraph returns the list of feature flags which match the label matchers of the federated graph.
	GetFeatureFlagsByFederatedGraph(context.Context, *connect.Request[v1.GetFeatureFlagsByFederatedGraphRequest]) (*connect.Response[v1.GetFeatureFlagsByFederatedGraphResponse], error)
	// Billing
	// -----------------------------------------------------------------------------------------------------------------------------
	// Return the available billing plans
	GetBillingPlans(context.Context, *connect.Request[v1.GetBillingPlansRequest]) (*connect.Response[v1.GetBillingPlansResponse], error)
	// Create a Stripe checkout session
	CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error)
	// Create a Stripe billing portal session
	CreateBillingPortalSession(context.Context, *connect.Request[v1.CreateBillingPortalSessionRequest]) (*connect.Response[v1.CreateBillingPortalSessionResponse], error)
	// Upgrade the current plan
	UpgradePlan(context.Context, *connect.Request[v1.UpgradePlanRequest]) (*connect.Response[v1.UpgradePlanResponse], error)
}

// NewPlatformServiceClient constructs a client for the wg.cosmo.platform.v1.PlatformService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlatformServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlatformServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &platformServiceClient{
		createNamespace: connect.NewClient[v1.CreateNamespaceRequest, v1.CreateNamespaceResponse](
			httpClient,
			baseURL+PlatformServiceCreateNamespaceProcedure,
			connect.WithSchema(platformServiceCreateNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNamespace: connect.NewClient[v1.DeleteNamespaceRequest, v1.DeleteNamespaceResponse](
			httpClient,
			baseURL+PlatformServiceDeleteNamespaceProcedure,
			connect.WithSchema(platformServiceDeleteNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		renameNamespace: connect.NewClient[v1.RenameNamespaceRequest, v1.RenameNamespaceResponse](
			httpClient,
			baseURL+PlatformServiceRenameNamespaceProcedure,
			connect.WithSchema(platformServiceRenameNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNamespaces: connect.NewClient[v1.GetNamespacesRequest, v1.GetNamespacesResponse](
			httpClient,
			baseURL+PlatformServiceGetNamespacesProcedure,
			connect.WithSchema(platformServiceGetNamespacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createContract: connect.NewClient[v1.CreateContractRequest, v1.CreateContractResponse](
			httpClient,
			baseURL+PlatformServiceCreateContractProcedure,
			connect.WithSchema(platformServiceCreateContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateContract: connect.NewClient[v1.UpdateContractRequest, v1.UpdateContractResponse](
			httpClient,
			baseURL+PlatformServiceUpdateContractProcedure,
			connect.WithSchema(platformServiceUpdateContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveFederatedGraph: connect.NewClient[v1.MoveGraphRequest, v1.MoveGraphResponse](
			httpClient,
			baseURL+PlatformServiceMoveFederatedGraphProcedure,
			connect.WithSchema(platformServiceMoveFederatedGraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveSubgraph: connect.NewClient[v1.MoveGraphRequest, v1.MoveGraphResponse](
			httpClient,
			baseURL+PlatformServiceMoveSubgraphProcedure,
			connect.WithSchema(platformServiceMoveSubgraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveMonograph: connect.NewClient[v1.MoveGraphRequest, v1.MoveGraphResponse](
			httpClient,
			baseURL+PlatformServiceMoveMonographProcedure,
			connect.WithSchema(platformServiceMoveMonographMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMonograph: connect.NewClient[v1.CreateMonographRequest, v1.CreateMonographResponse](
			httpClient,
			baseURL+PlatformServiceCreateMonographProcedure,
			connect.WithSchema(platformServiceCreateMonographMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishMonograph: connect.NewClient[v1.PublishMonographRequest, v1.PublishMonographResponse](
			httpClient,
			baseURL+PlatformServicePublishMonographProcedure,
			connect.WithSchema(platformServicePublishMonographMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMonograph: connect.NewClient[v1.DeleteMonographRequest, v1.DeleteMonographResponse](
			httpClient,
			baseURL+PlatformServiceDeleteMonographProcedure,
			connect.WithSchema(platformServiceDeleteMonographMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMonograph: connect.NewClient[v1.UpdateMonographRequest, v1.UpdateMonographResponse](
			httpClient,
			baseURL+PlatformServiceUpdateMonographProcedure,
			connect.WithSchema(platformServiceUpdateMonographMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		migrateMonograph: connect.NewClient[v1.MigrateMonographRequest, v1.MigrateMonographResponse](
			httpClient,
			baseURL+PlatformServiceMigrateMonographProcedure,
			connect.WithSchema(platformServiceMigrateMonographMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFederatedSubgraph: connect.NewClient[v1.CreateFederatedSubgraphRequest, v1.CreateFederatedSubgraphResponse](
			httpClient,
			baseURL+PlatformServiceCreateFederatedSubgraphProcedure,
			connect.WithSchema(platformServiceCreateFederatedSubgraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishFederatedSubgraph: connect.NewClient[v1.PublishFederatedSubgraphRequest, v1.PublishFederatedSubgraphResponse](
			httpClient,
			baseURL+PlatformServicePublishFederatedSubgraphProcedure,
			connect.WithSchema(platformServicePublishFederatedSubgraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFederatedGraph: connect.NewClient[v1.CreateFederatedGraphRequest, v1.CreateFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceCreateFederatedGraphProcedure,
			connect.WithSchema(platformServiceCreateFederatedGraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFederatedGraph: connect.NewClient[v1.DeleteFederatedGraphRequest, v1.DeleteFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceDeleteFederatedGraphProcedure,
			connect.WithSchema(platformServiceDeleteFederatedGraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFederatedSubgraph: connect.NewClient[v1.DeleteFederatedSubgraphRequest, v1.DeleteFederatedSubgraphResponse](
			httpClient,
			baseURL+PlatformServiceDeleteFederatedSubgraphProcedure,
			connect.WithSchema(platformServiceDeleteFederatedSubgraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkSubgraphSchema: connect.NewClient[v1.CheckSubgraphSchemaRequest, v1.CheckSubgraphSchemaResponse](
			httpClient,
			baseURL+PlatformServiceCheckSubgraphSchemaProcedure,
			connect.WithSchema(platformServiceCheckSubgraphSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fixSubgraphSchema: connect.NewClient[v1.FixSubgraphSchemaRequest, v1.FixSubgraphSchemaResponse](
			httpClient,
			baseURL+PlatformServiceFixSubgraphSchemaProcedure,
			connect.WithSchema(platformServiceFixSubgraphSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFederatedGraph: connect.NewClient[v1.UpdateFederatedGraphRequest, v1.UpdateFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceUpdateFederatedGraphProcedure,
			connect.WithSchema(platformServiceUpdateFederatedGraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSubgraph: connect.NewClient[v1.UpdateSubgraphRequest, v1.UpdateSubgraphResponse](
			httpClient,
			baseURL+PlatformServiceUpdateSubgraphProcedure,
			connect.WithSchema(platformServiceUpdateSubgraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkFederatedGraph: connect.NewClient[v1.CheckFederatedGraphRequest, v1.CheckFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceCheckFederatedGraphProcedure,
			connect.WithSchema(platformServiceCheckFederatedGraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		whoAmI: connect.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+PlatformServiceWhoAmIProcedure,
			connect.WithSchema(platformServiceWhoAmIMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateRouterToken: connect.NewClient[v1.GenerateRouterTokenRequest, v1.GenerateRouterTokenResponse](
			httpClient,
			baseURL+PlatformServiceGenerateRouterTokenProcedure,
			connect.WithSchema(platformServiceGenerateRouterTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRouterTokens: connect.NewClient[v1.GetRouterTokensRequest, v1.GetRouterTokensResponse](
			httpClient,
			baseURL+PlatformServiceGetRouterTokensProcedure,
			connect.WithSchema(platformServiceGetRouterTokensMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRouterToken: connect.NewClient[v1.DeleteRouterTokenRequest, v1.DeleteRouterTokenResponse](
			httpClient,
			baseURL+PlatformServiceDeleteRouterTokenProcedure,
			connect.WithSchema(platformServiceDeleteRouterTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishPersistedOperations: connect.NewClient[v1.PublishPersistedOperationsRequest, v1.PublishPersistedOperationsResponse](
			httpClient,
			baseURL+PlatformServicePublishPersistedOperationsProcedure,
			connect.WithSchema(platformServicePublishPersistedOperationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPersistedOperations: connect.NewClient[v1.GetPersistedOperationsRequest, v1.GetPersistedOperationsResponse](
			httpClient,
			baseURL+PlatformServiceGetPersistedOperationsProcedure,
			connect.WithSchema(platformServiceGetPersistedOperationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAuditLogs: connect.NewClient[v1.GetAuditLogsRequest, v1.GetAuditLogsResponse](
			httpClient,
			baseURL+PlatformServiceGetAuditLogsProcedure,
			connect.WithSchema(platformServiceGetAuditLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFederatedGraphs: connect.NewClient[v1.GetFederatedGraphsRequest, v1.GetFederatedGraphsResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphsProcedure,
			connect.WithSchema(platformServiceGetFederatedGraphsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFederatedGraphsBySubgraphLabels: connect.NewClient[v1.GetFederatedGraphsBySubgraphLabelsRequest, v1.GetFederatedGraphsBySubgraphLabelsResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphsBySubgraphLabelsProcedure,
			connect.WithSchema(platformServiceGetFederatedGraphsBySubgraphLabelsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFederatedGraphByName: connect.NewClient[v1.GetFederatedGraphByNameRequest, v1.GetFederatedGraphByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphByNameProcedure,
			connect.WithSchema(platformServiceGetFederatedGraphByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFederatedGraphSDLByName: connect.NewClient[v1.GetFederatedGraphSDLByNameRequest, v1.GetFederatedGraphSDLByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphSDLByNameProcedure,
			connect.WithSchema(platformServiceGetFederatedGraphSDLByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubgraphs: connect.NewClient[v1.GetSubgraphsRequest, v1.GetSubgraphsResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphsProcedure,
			connect.WithSchema(platformServiceGetSubgraphsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubgraphByName: connect.NewClient[v1.GetSubgraphByNameRequest, v1.GetSubgraphByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphByNameProcedure,
			connect.WithSchema(platformServiceGetSubgraphByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubgraphSDLFromLatestComposition: connect.NewClient[v1.GetSubgraphSDLFromLatestCompositionRequest, v1.GetSubgraphSDLFromLatestCompositionResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphSDLFromLatestCompositionProcedure,
			connect.WithSchema(platformServiceGetSubgraphSDLFromLatestCompositionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLatestSubgraphSDL: connect.NewClient[v1.GetLatestSubgraphSDLRequest, v1.GetLatestSubgraphSDLResponse](
			httpClient,
			baseURL+PlatformServiceGetLatestSubgraphSDLProcedure,
			connect.WithSchema(platformServiceGetLatestSubgraphSDLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChecksByFederatedGraphName: connect.NewClient[v1.GetChecksByFederatedGraphNameRequest, v1.GetChecksByFederatedGraphNameResponse](
			httpClient,
			baseURL+PlatformServiceGetChecksByFederatedGraphNameProcedure,
			connect.WithSchema(platformServiceGetChecksByFederatedGraphNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCheckSummary: connect.NewClient[v1.GetCheckSummaryRequest, v1.GetCheckSummaryResponse](
			httpClient,
			baseURL+PlatformServiceGetCheckSummaryProcedure,
			connect.WithSchema(platformServiceGetCheckSummaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCheckOperations: connect.NewClient[v1.GetCheckOperationsRequest, v1.GetCheckOperationsResponse](
			httpClient,
			baseURL+PlatformServiceGetCheckOperationsProcedure,
			connect.WithSchema(platformServiceGetCheckOperationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		forceCheckSuccess: connect.NewClient[v1.ForceCheckSuccessRequest, v1.ForceCheckSuccessResponse](
			httpClient,
			baseURL+PlatformServiceForceCheckSuccessProcedure,
			connect.WithSchema(platformServiceForceCheckSuccessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOperationOverrides: connect.NewClient[v1.CreateOperationOverridesRequest, v1.CreateOperationOverridesResponse](
			httpClient,
			baseURL+PlatformServiceCreateOperationOverridesProcedure,
			connect.WithSchema(platformServiceCreateOperationOverridesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeOperationOverrides: connect.NewClient[v1.RemoveOperationOverridesRequest, v1.RemoveOperationOverridesResponse](
			httpClient,
			baseURL+PlatformServiceRemoveOperationOverridesProcedure,
			connect.WithSchema(platformServiceRemoveOperationOverridesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOperationIgnoreAllOverride: connect.NewClient[v1.CreateOperationIgnoreAllOverrideRequest, v1.CreateOperationIgnoreAllOverrideResponse](
			httpClient,
			baseURL+PlatformServiceCreateOperationIgnoreAllOverrideProcedure,
			connect.WithSchema(platformServiceCreateOperationIgnoreAllOverrideMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeOperationIgnoreAllOverride: connect.NewClient[v1.RemoveOperationIgnoreAllOverrideRequest, v1.RemoveOperationIgnoreAllOverrideResponse](
			httpClient,
			baseURL+PlatformServiceRemoveOperationIgnoreAllOverrideProcedure,
			connect.WithSchema(platformServiceRemoveOperationIgnoreAllOverrideMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOperationOverrides: connect.NewClient[v1.GetOperationOverridesRequest, v1.GetOperationOverridesResponse](
			httpClient,
			baseURL+PlatformServiceGetOperationOverridesProcedure,
			connect.WithSchema(platformServiceGetOperationOverridesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAllOverrides: connect.NewClient[v1.GetAllOverridesRequest, v1.GetAllOverridesResponse](
			httpClient,
			baseURL+PlatformServiceGetAllOverridesProcedure,
			connect.WithSchema(platformServiceGetAllOverridesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		toggleChangeOverridesForAllOperations: connect.NewClient[v1.ToggleChangeOverridesForAllOperationsRequest, v1.ToggleChangeOverridesForAllOperationsResponse](
			httpClient,
			baseURL+PlatformServiceToggleChangeOverridesForAllOperationsProcedure,
			connect.WithSchema(platformServiceToggleChangeOverridesForAllOperationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createIgnoreOverridesForAllOperations: connect.NewClient[v1.CreateIgnoreOverridesForAllOperationsRequest, v1.CreateIgnoreOverridesForAllOperationsResponse](
			httpClient,
			baseURL+PlatformServiceCreateIgnoreOverridesForAllOperationsProcedure,
			connect.WithSchema(platformServiceCreateIgnoreOverridesForAllOperationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOperationContent: connect.NewClient[v1.GetOperationContentRequest, v1.GetOperationContentResponse](
			httpClient,
			baseURL+PlatformServiceGetOperationContentProcedure,
			connect.WithSchema(platformServiceGetOperationContentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFederatedGraphChangelog: connect.NewClient[v1.GetFederatedGraphChangelogRequest, v1.GetFederatedGraphChangelogResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphChangelogProcedure,
			connect.WithSchema(platformServiceGetFederatedGraphChangelogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFederatedGraphToken: connect.NewClient[v1.CreateFederatedGraphTokenRequest, v1.CreateFederatedGraphTokenResponse](
			httpClient,
			baseURL+PlatformServiceCreateFederatedGraphTokenProcedure,
			connect.WithSchema(platformServiceCreateFederatedGraphTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationMembers: connect.NewClient[v1.GetOrganizationMembersRequest, v1.GetOrganizationMembersResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationMembersProcedure,
			connect.WithSchema(platformServiceGetOrganizationMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPendingOrganizationMembers: connect.NewClient[v1.GetPendingOrganizationMembersRequest, v1.GetPendingOrganizationMembersResponse](
			httpClient,
			baseURL+PlatformServiceGetPendingOrganizationMembersProcedure,
			connect.WithSchema(platformServiceGetPendingOrganizationMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isMemberLimitReached: connect.NewClient[v1.IsMemberLimitReachedRequest, v1.IsMemberLimitReachedResponse](
			httpClient,
			baseURL+PlatformServiceIsMemberLimitReachedProcedure,
			connect.WithSchema(platformServiceIsMemberLimitReachedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+PlatformServiceInviteUserProcedure,
			connect.WithSchema(platformServiceInviteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAPIKeys: connect.NewClient[v1.GetAPIKeysRequest, v1.GetAPIKeysResponse](
			httpClient,
			baseURL+PlatformServiceGetAPIKeysProcedure,
			connect.WithSchema(platformServiceGetAPIKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAPIKey: connect.NewClient[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse](
			httpClient,
			baseURL+PlatformServiceCreateAPIKeyProcedure,
			connect.WithSchema(platformServiceCreateAPIKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAPIKey: connect.NewClient[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse](
			httpClient,
			baseURL+PlatformServiceDeleteAPIKeyProcedure,
			connect.WithSchema(platformServiceDeleteAPIKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeOrganizationMember: connect.NewClient[v1.RemoveOrganizationMemberRequest, v1.RemoveOrganizationMemberResponse](
			httpClient,
			baseURL+PlatformServiceRemoveOrganizationMemberProcedure,
			connect.WithSchema(platformServiceRemoveOrganizationMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeInvitation: connect.NewClient[v1.RemoveInvitationRequest, v1.RemoveInvitationResponse](
			httpClient,
			baseURL+PlatformServiceRemoveInvitationProcedure,
			connect.WithSchema(platformServiceRemoveInvitationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		migrateFromApollo: connect.NewClient[v1.MigrateFromApolloRequest, v1.MigrateFromApolloResponse](
			httpClient,
			baseURL+PlatformServiceMigrateFromApolloProcedure,
			connect.WithSchema(platformServiceMigrateFromApolloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganizationWebhookConfig: connect.NewClient[v1.CreateOrganizationWebhookConfigRequest, v1.CreateOrganizationWebhookConfigResponse](
			httpClient,
			baseURL+PlatformServiceCreateOrganizationWebhookConfigProcedure,
			connect.WithSchema(platformServiceCreateOrganizationWebhookConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationWebhookConfigs: connect.NewClient[v1.GetOrganizationWebhookConfigsRequest, v1.GetOrganizationWebhookConfigsResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationWebhookConfigsProcedure,
			connect.WithSchema(platformServiceGetOrganizationWebhookConfigsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationWebhookMeta: connect.NewClient[v1.GetOrganizationWebhookMetaRequest, v1.GetOrganizationWebhookMetaResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationWebhookMetaProcedure,
			connect.WithSchema(platformServiceGetOrganizationWebhookMetaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationWebhookConfig: connect.NewClient[v1.UpdateOrganizationWebhookConfigRequest, v1.UpdateOrganizationWebhookConfigResponse](
			httpClient,
			baseURL+PlatformServiceUpdateOrganizationWebhookConfigProcedure,
			connect.WithSchema(platformServiceUpdateOrganizationWebhookConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationWebhookConfig: connect.NewClient[v1.DeleteOrganizationWebhookConfigRequest, v1.DeleteOrganizationWebhookConfigResponse](
			httpClient,
			baseURL+PlatformServiceDeleteOrganizationWebhookConfigProcedure,
			connect.WithSchema(platformServiceDeleteOrganizationWebhookConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationWebhookHistory: connect.NewClient[v1.GetOrganizationWebhookHistoryRequest, v1.GetOrganizationWebhookHistoryResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationWebhookHistoryProcedure,
			connect.WithSchema(platformServiceGetOrganizationWebhookHistoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWebhookDeliveryDetails: connect.NewClient[v1.GetWebhookDeliveryDetailsRequest, v1.GetWebhookDeliveryDetailsResponse](
			httpClient,
			baseURL+PlatformServiceGetWebhookDeliveryDetailsProcedure,
			connect.WithSchema(platformServiceGetWebhookDeliveryDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		redeliverWebhook: connect.NewClient[v1.RedeliverWebhookRequest, v1.RedeliverWebhookResponse](
			httpClient,
			baseURL+PlatformServiceRedeliverWebhookProcedure,
			connect.WithSchema(platformServiceRedeliverWebhookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createIntegration: connect.NewClient[v1.CreateIntegrationRequest, v1.CreateIntegrationResponse](
			httpClient,
			baseURL+PlatformServiceCreateIntegrationProcedure,
			connect.WithSchema(platformServiceCreateIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationIntegrations: connect.NewClient[v1.GetOrganizationIntegrationsRequest, v1.GetOrganizationIntegrationsResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationIntegrationsProcedure,
			connect.WithSchema(platformServiceGetOrganizationIntegrationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateIntegrationConfig: connect.NewClient[v1.UpdateIntegrationConfigRequest, v1.UpdateIntegrationConfigResponse](
			httpClient,
			baseURL+PlatformServiceUpdateIntegrationConfigProcedure,
			connect.WithSchema(platformServiceUpdateIntegrationConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteIntegration: connect.NewClient[v1.DeleteIntegrationRequest, v1.DeleteIntegrationResponse](
			httpClient,
			baseURL+PlatformServiceDeleteIntegrationProcedure,
			connect.WithSchema(platformServiceDeleteIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+PlatformServiceDeleteUserProcedure,
			connect.WithSchema(platformServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse](
			httpClient,
			baseURL+PlatformServiceDeleteOrganizationProcedure,
			connect.WithSchema(platformServiceDeleteOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		leaveOrganization: connect.NewClient[v1.LeaveOrganizationRequest, v1.LeaveOrganizationResponse](
			httpClient,
			baseURL+PlatformServiceLeaveOrganizationProcedure,
			connect.WithSchema(platformServiceLeaveOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationDetails: connect.NewClient[v1.UpdateOrganizationDetailsRequest, v1.UpdateOrganizationDetailsResponse](
			httpClient,
			baseURL+PlatformServiceUpdateOrganizationDetailsProcedure,
			connect.WithSchema(platformServiceUpdateOrganizationDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrgMemberRole: connect.NewClient[v1.UpdateOrgMemberRoleRequest, v1.UpdateOrgMemberRoleResponse](
			httpClient,
			baseURL+PlatformServiceUpdateOrgMemberRoleProcedure,
			connect.WithSchema(platformServiceUpdateOrgMemberRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isGitHubAppInstalled: connect.NewClient[v1.IsGitHubAppInstalledRequest, v1.IsGitHubAppInstalledResponse](
			httpClient,
			baseURL+PlatformServiceIsGitHubAppInstalledProcedure,
			connect.WithSchema(platformServiceIsGitHubAppInstalledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOIDCProvider: connect.NewClient[v1.CreateOIDCProviderRequest, v1.CreateOIDCProviderResponse](
			httpClient,
			baseURL+PlatformServiceCreateOIDCProviderProcedure,
			connect.WithSchema(platformServiceCreateOIDCProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOIDCProvider: connect.NewClient[v1.GetOIDCProviderRequest, v1.GetOIDCProviderResponse](
			httpClient,
			baseURL+PlatformServiceGetOIDCProviderProcedure,
			connect.WithSchema(platformServiceGetOIDCProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOIDCProvider: connect.NewClient[v1.DeleteOIDCProviderRequest, v1.DeleteOIDCProviderResponse](
			httpClient,
			baseURL+PlatformServiceDeleteOIDCProviderProcedure,
			connect.WithSchema(platformServiceDeleteOIDCProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateIDPMappers: connect.NewClient[v1.UpdateIDPMappersRequest, v1.UpdateIDPMappersResponse](
			httpClient,
			baseURL+PlatformServiceUpdateIDPMappersProcedure,
			connect.WithSchema(platformServiceUpdateIDPMappersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getClients: connect.NewClient[v1.GetClientsRequest, v1.GetClientsResponse](
			httpClient,
			baseURL+PlatformServiceGetClientsProcedure,
			connect.WithSchema(platformServiceGetClientsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRouters: connect.NewClient[v1.GetRoutersRequest, v1.GetRoutersResponse](
			httpClient,
			baseURL+PlatformServiceGetRoutersProcedure,
			connect.WithSchema(platformServiceGetRoutersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getInvitations: connect.NewClient[v1.GetInvitationsRequest, v1.GetInvitationsResponse](
			httpClient,
			baseURL+PlatformServiceGetInvitationsProcedure,
			connect.WithSchema(platformServiceGetInvitationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		acceptOrDeclineInvitation: connect.NewClient[v1.AcceptOrDeclineInvitationRequest, v1.AcceptOrDeclineInvitationResponse](
			httpClient,
			baseURL+PlatformServiceAcceptOrDeclineInvitationProcedure,
			connect.WithSchema(platformServiceAcceptOrDeclineInvitationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCompositions: connect.NewClient[v1.GetCompositionsRequest, v1.GetCompositionsResponse](
			httpClient,
			baseURL+PlatformServiceGetCompositionsProcedure,
			connect.WithSchema(platformServiceGetCompositionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCompositionDetails: connect.NewClient[v1.GetCompositionDetailsRequest, v1.GetCompositionDetailsResponse](
			httpClient,
			baseURL+PlatformServiceGetCompositionDetailsProcedure,
			connect.WithSchema(platformServiceGetCompositionDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSdlBySchemaVersion: connect.NewClient[v1.GetSdlBySchemaVersionRequest, v1.GetSdlBySchemaVersionResponse](
			httpClient,
			baseURL+PlatformServiceGetSdlBySchemaVersionProcedure,
			connect.WithSchema(platformServiceGetSdlBySchemaVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChangelogBySchemaVersion: connect.NewClient[v1.GetChangelogBySchemaVersionRequest, v1.GetChangelogBySchemaVersionResponse](
			httpClient,
			baseURL+PlatformServiceGetChangelogBySchemaVersionProcedure,
			connect.WithSchema(platformServiceGetChangelogBySchemaVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserAccessibleResources: connect.NewClient[v1.GetUserAccessibleResourcesRequest, v1.GetUserAccessibleResourcesResponse](
			httpClient,
			baseURL+PlatformServiceGetUserAccessibleResourcesProcedure,
			connect.WithSchema(platformServiceGetUserAccessibleResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFeatureSettings: connect.NewClient[v1.UpdateFeatureSettingsRequest, v1.UpdateFeatureSettingsResponse](
			httpClient,
			baseURL+PlatformServiceUpdateFeatureSettingsProcedure,
			connect.WithSchema(platformServiceUpdateFeatureSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addSubgraphMember: connect.NewClient[v1.AddSubgraphMemberRequest, v1.AddSubgraphMemberResponse](
			httpClient,
			baseURL+PlatformServiceAddSubgraphMemberProcedure,
			connect.WithSchema(platformServiceAddSubgraphMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeSubgraphMember: connect.NewClient[v1.RemoveSubgraphMemberRequest, v1.RemoveSubgraphMemberResponse](
			httpClient,
			baseURL+PlatformServiceRemoveSubgraphMemberProcedure,
			connect.WithSchema(platformServiceRemoveSubgraphMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubgraphMembers: connect.NewClient[v1.GetSubgraphMembersRequest, v1.GetSubgraphMembersResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphMembersProcedure,
			connect.WithSchema(platformServiceGetSubgraphMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDiscussion: connect.NewClient[v1.CreateDiscussionRequest, v1.CreateDiscussionResponse](
			httpClient,
			baseURL+PlatformServiceCreateDiscussionProcedure,
			connect.WithSchema(platformServiceCreateDiscussionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		replyToDiscussion: connect.NewClient[v1.ReplyToDiscussionRequest, v1.ReplyToDiscussionResponse](
			httpClient,
			baseURL+PlatformServiceReplyToDiscussionProcedure,
			connect.WithSchema(platformServiceReplyToDiscussionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAllDiscussions: connect.NewClient[v1.GetAllDiscussionsRequest, v1.GetAllDiscussionsResponse](
			httpClient,
			baseURL+PlatformServiceGetAllDiscussionsProcedure,
			connect.WithSchema(platformServiceGetAllDiscussionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDiscussionComment: connect.NewClient[v1.UpdateDiscussionCommentRequest, v1.UpdateDiscussionCommentResponse](
			httpClient,
			baseURL+PlatformServiceUpdateDiscussionCommentProcedure,
			connect.WithSchema(platformServiceUpdateDiscussionCommentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDiscussionComment: connect.NewClient[v1.DeleteDiscussionCommentRequest, v1.DeleteDiscussionCommentResponse](
			httpClient,
			baseURL+PlatformServiceDeleteDiscussionCommentProcedure,
			connect.WithSchema(platformServiceDeleteDiscussionCommentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDiscussion: connect.NewClient[v1.GetDiscussionRequest, v1.GetDiscussionResponse](
			httpClient,
			baseURL+PlatformServiceGetDiscussionProcedure,
			connect.WithSchema(platformServiceGetDiscussionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDiscussionSchemas: connect.NewClient[v1.GetDiscussionSchemasRequest, v1.GetDiscussionSchemasResponse](
			httpClient,
			baseURL+PlatformServiceGetDiscussionSchemasProcedure,
			connect.WithSchema(platformServiceGetDiscussionSchemasMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDiscussionResolution: connect.NewClient[v1.SetDiscussionResolutionRequest, v1.SetDiscussionResolutionResponse](
			httpClient,
			baseURL+PlatformServiceSetDiscussionResolutionProcedure,
			connect.WithSchema(platformServiceSetDiscussionResolutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addReadme: connect.NewClient[v1.AddReadmeRequest, v1.AddReadmeResponse](
			httpClient,
			baseURL+PlatformServiceAddReadmeProcedure,
			connect.WithSchema(platformServiceAddReadmeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserAccessiblePermissions: connect.NewClient[v1.GetUserAccessiblePermissionsRequest, v1.GetUserAccessiblePermissionsResponse](
			httpClient,
			baseURL+PlatformServiceGetUserAccessiblePermissionsProcedure,
			connect.WithSchema(platformServiceGetUserAccessiblePermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFeatureFlag: connect.NewClient[v1.CreateFeatureFlagRequest, v1.CreateFeatureFlagResponse](
			httpClient,
			baseURL+PlatformServiceCreateFeatureFlagProcedure,
			connect.WithSchema(platformServiceCreateFeatureFlagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFeatureFlag: connect.NewClient[v1.DeleteFeatureFlagRequest, v1.DeleteFeatureFlagResponse](
			httpClient,
			baseURL+PlatformServiceDeleteFeatureFlagProcedure,
			connect.WithSchema(platformServiceDeleteFeatureFlagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFeatureFlag: connect.NewClient[v1.UpdateFeatureFlagRequest, v1.UpdateFeatureFlagResponse](
			httpClient,
			baseURL+PlatformServiceUpdateFeatureFlagProcedure,
			connect.WithSchema(platformServiceUpdateFeatureFlagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableFeatureFlag: connect.NewClient[v1.EnableFeatureFlagRequest, v1.EnableFeatureFlagResponse](
			httpClient,
			baseURL+PlatformServiceEnableFeatureFlagProcedure,
			connect.WithSchema(platformServiceEnableFeatureFlagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAnalyticsView: connect.NewClient[v1.GetAnalyticsViewRequest, v1.GetAnalyticsViewResponse](
			httpClient,
			baseURL+PlatformServiceGetAnalyticsViewProcedure,
			connect.WithSchema(platformServiceGetAnalyticsViewMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getDashboardAnalyticsView: connect.NewClient[v1.GetDashboardAnalyticsViewRequest, v1.GetDashboardAnalyticsViewResponse](
			httpClient,
			baseURL+PlatformServiceGetDashboardAnalyticsViewProcedure,
			connect.WithSchema(platformServiceGetDashboardAnalyticsViewMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTrace: connect.NewClient[v1.GetTraceRequest, v1.GetTraceResponse](
			httpClient,
			baseURL+PlatformServiceGetTraceProcedure,
			connect.WithSchema(platformServiceGetTraceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGraphMetrics: connect.NewClient[v1.GetGraphMetricsRequest, v1.GetGraphMetricsResponse](
			httpClient,
			baseURL+PlatformServiceGetGraphMetricsProcedure,
			connect.WithSchema(platformServiceGetGraphMetricsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getMetricsErrorRate: connect.NewClient[v1.GetMetricsErrorRateRequest, v1.GetMetricsErrorRateResponse](
			httpClient,
			baseURL+PlatformServiceGetMetricsErrorRateProcedure,
			connect.WithSchema(platformServiceGetMetricsErrorRateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSubgraphMetrics: connect.NewClient[v1.GetSubgraphMetricsRequest, v1.GetSubgraphMetricsResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphMetricsProcedure,
			connect.WithSchema(platformServiceGetSubgraphMetricsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSubgraphMetricsErrorRate: connect.NewClient[v1.GetSubgraphMetricsErrorRateRequest, v1.GetSubgraphMetricsErrorRateResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphMetricsErrorRateProcedure,
			connect.WithSchema(platformServiceGetSubgraphMetricsErrorRateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getFieldUsage: connect.NewClient[v1.GetFieldUsageRequest, v1.GetFieldUsageResponse](
			httpClient,
			baseURL+PlatformServiceGetFieldUsageProcedure,
			connect.WithSchema(platformServiceGetFieldUsageMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getOrganizationRequestsCount: connect.NewClient[v1.GetOrganizationRequestsCountRequest, v1.GetOrganizationRequestsCountResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationRequestsCountProcedure,
			connect.WithSchema(platformServiceGetOrganizationRequestsCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+PlatformServiceCreateOrganizationProcedure,
			connect.WithSchema(platformServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableLintingForTheNamespace: connect.NewClient[v1.EnableLintingForTheNamespaceRequest, v1.EnableLintingForTheNamespaceResponse](
			httpClient,
			baseURL+PlatformServiceEnableLintingForTheNamespaceProcedure,
			connect.WithSchema(platformServiceEnableLintingForTheNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		configureNamespaceLintConfig: connect.NewClient[v1.ConfigureNamespaceLintConfigRequest, v1.ConfigureNamespaceLintConfigResponse](
			httpClient,
			baseURL+PlatformServiceConfigureNamespaceLintConfigProcedure,
			connect.WithSchema(platformServiceConfigureNamespaceLintConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNamespaceLintConfig: connect.NewClient[v1.GetNamespaceLintConfigRequest, v1.GetNamespaceLintConfigResponse](
			httpClient,
			baseURL+PlatformServiceGetNamespaceLintConfigProcedure,
			connect.WithSchema(platformServiceGetNamespaceLintConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableGraphPruning: connect.NewClient[v1.EnableGraphPruningRequest, v1.EnableGraphPruningResponse](
			httpClient,
			baseURL+PlatformServiceEnableGraphPruningProcedure,
			connect.WithSchema(platformServiceEnableGraphPruningMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		configureNamespaceGraphPruningConfig: connect.NewClient[v1.ConfigureNamespaceGraphPruningConfigRequest, v1.ConfigureNamespaceGraphPruningConfigResponse](
			httpClient,
			baseURL+PlatformServiceConfigureNamespaceGraphPruningConfigProcedure,
			connect.WithSchema(platformServiceConfigureNamespaceGraphPruningConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNamespaceGraphPruningConfig: connect.NewClient[v1.GetNamespaceGraphPruningConfigRequest, v1.GetNamespaceGraphPruningConfigResponse](
			httpClient,
			baseURL+PlatformServiceGetNamespaceGraphPruningConfigProcedure,
			connect.WithSchema(platformServiceGetNamespaceGraphPruningConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFeatureFlags: connect.NewClient[v1.GetFeatureFlagsRequest, v1.GetFeatureFlagsResponse](
			httpClient,
			baseURL+PlatformServiceGetFeatureFlagsProcedure,
			connect.WithSchema(platformServiceGetFeatureFlagsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFeatureFlagByName: connect.NewClient[v1.GetFeatureFlagByNameRequest, v1.GetFeatureFlagByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetFeatureFlagByNameProcedure,
			connect.WithSchema(platformServiceGetFeatureFlagByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFeatureSubgraphsByFeatureFlag: connect.NewClient[v1.GetFeatureSubgraphsByFeatureFlagRequest, v1.GetFeatureSubgraphsByFeatureFlagResponse](
			httpClient,
			baseURL+PlatformServiceGetFeatureSubgraphsByFeatureFlagProcedure,
			connect.WithSchema(platformServiceGetFeatureSubgraphsByFeatureFlagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFeatureSubgraphs: connect.NewClient[v1.GetFeatureSubgraphsRequest, v1.GetFeatureSubgraphsResponse](
			httpClient,
			baseURL+PlatformServiceGetFeatureSubgraphsProcedure,
			connect.WithSchema(platformServiceGetFeatureSubgraphsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFeatureFlagsByFederatedGraph: connect.NewClient[v1.GetFeatureFlagsByFederatedGraphRequest, v1.GetFeatureFlagsByFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceGetFeatureFlagsByFederatedGraphProcedure,
			connect.WithSchema(platformServiceGetFeatureFlagsByFederatedGraphMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBillingPlans: connect.NewClient[v1.GetBillingPlansRequest, v1.GetBillingPlansResponse](
			httpClient,
			baseURL+PlatformServiceGetBillingPlansProcedure,
			connect.WithSchema(platformServiceGetBillingPlansMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCheckoutSession: connect.NewClient[v1.CreateCheckoutSessionRequest, v1.CreateCheckoutSessionResponse](
			httpClient,
			baseURL+PlatformServiceCreateCheckoutSessionProcedure,
			connect.WithSchema(platformServiceCreateCheckoutSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createBillingPortalSession: connect.NewClient[v1.CreateBillingPortalSessionRequest, v1.CreateBillingPortalSessionResponse](
			httpClient,
			baseURL+PlatformServiceCreateBillingPortalSessionProcedure,
			connect.WithSchema(platformServiceCreateBillingPortalSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upgradePlan: connect.NewClient[v1.UpgradePlanRequest, v1.UpgradePlanResponse](
			httpClient,
			baseURL+PlatformServiceUpgradePlanProcedure,
			connect.WithSchema(platformServiceUpgradePlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// platformServiceClient implements PlatformServiceClient.
type platformServiceClient struct {
	createNamespace                       *connect.Client[v1.CreateNamespaceRequest, v1.CreateNamespaceResponse]
	deleteNamespace                       *connect.Client[v1.DeleteNamespaceRequest, v1.DeleteNamespaceResponse]
	renameNamespace                       *connect.Client[v1.RenameNamespaceRequest, v1.RenameNamespaceResponse]
	getNamespaces                         *connect.Client[v1.GetNamespacesRequest, v1.GetNamespacesResponse]
	createContract                        *connect.Client[v1.CreateContractRequest, v1.CreateContractResponse]
	updateContract                        *connect.Client[v1.UpdateContractRequest, v1.UpdateContractResponse]
	moveFederatedGraph                    *connect.Client[v1.MoveGraphRequest, v1.MoveGraphResponse]
	moveSubgraph                          *connect.Client[v1.MoveGraphRequest, v1.MoveGraphResponse]
	moveMonograph                         *connect.Client[v1.MoveGraphRequest, v1.MoveGraphResponse]
	createMonograph                       *connect.Client[v1.CreateMonographRequest, v1.CreateMonographResponse]
	publishMonograph                      *connect.Client[v1.PublishMonographRequest, v1.PublishMonographResponse]
	deleteMonograph                       *connect.Client[v1.DeleteMonographRequest, v1.DeleteMonographResponse]
	updateMonograph                       *connect.Client[v1.UpdateMonographRequest, v1.UpdateMonographResponse]
	migrateMonograph                      *connect.Client[v1.MigrateMonographRequest, v1.MigrateMonographResponse]
	createFederatedSubgraph               *connect.Client[v1.CreateFederatedSubgraphRequest, v1.CreateFederatedSubgraphResponse]
	publishFederatedSubgraph              *connect.Client[v1.PublishFederatedSubgraphRequest, v1.PublishFederatedSubgraphResponse]
	createFederatedGraph                  *connect.Client[v1.CreateFederatedGraphRequest, v1.CreateFederatedGraphResponse]
	deleteFederatedGraph                  *connect.Client[v1.DeleteFederatedGraphRequest, v1.DeleteFederatedGraphResponse]
	deleteFederatedSubgraph               *connect.Client[v1.DeleteFederatedSubgraphRequest, v1.DeleteFederatedSubgraphResponse]
	checkSubgraphSchema                   *connect.Client[v1.CheckSubgraphSchemaRequest, v1.CheckSubgraphSchemaResponse]
	fixSubgraphSchema                     *connect.Client[v1.FixSubgraphSchemaRequest, v1.FixSubgraphSchemaResponse]
	updateFederatedGraph                  *connect.Client[v1.UpdateFederatedGraphRequest, v1.UpdateFederatedGraphResponse]
	updateSubgraph                        *connect.Client[v1.UpdateSubgraphRequest, v1.UpdateSubgraphResponse]
	checkFederatedGraph                   *connect.Client[v1.CheckFederatedGraphRequest, v1.CheckFederatedGraphResponse]
	whoAmI                                *connect.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
	generateRouterToken                   *connect.Client[v1.GenerateRouterTokenRequest, v1.GenerateRouterTokenResponse]
	getRouterTokens                       *connect.Client[v1.GetRouterTokensRequest, v1.GetRouterTokensResponse]
	deleteRouterToken                     *connect.Client[v1.DeleteRouterTokenRequest, v1.DeleteRouterTokenResponse]
	publishPersistedOperations            *connect.Client[v1.PublishPersistedOperationsRequest, v1.PublishPersistedOperationsResponse]
	getPersistedOperations                *connect.Client[v1.GetPersistedOperationsRequest, v1.GetPersistedOperationsResponse]
	getAuditLogs                          *connect.Client[v1.GetAuditLogsRequest, v1.GetAuditLogsResponse]
	getFederatedGraphs                    *connect.Client[v1.GetFederatedGraphsRequest, v1.GetFederatedGraphsResponse]
	getFederatedGraphsBySubgraphLabels    *connect.Client[v1.GetFederatedGraphsBySubgraphLabelsRequest, v1.GetFederatedGraphsBySubgraphLabelsResponse]
	getFederatedGraphByName               *connect.Client[v1.GetFederatedGraphByNameRequest, v1.GetFederatedGraphByNameResponse]
	getFederatedGraphSDLByName            *connect.Client[v1.GetFederatedGraphSDLByNameRequest, v1.GetFederatedGraphSDLByNameResponse]
	getSubgraphs                          *connect.Client[v1.GetSubgraphsRequest, v1.GetSubgraphsResponse]
	getSubgraphByName                     *connect.Client[v1.GetSubgraphByNameRequest, v1.GetSubgraphByNameResponse]
	getSubgraphSDLFromLatestComposition   *connect.Client[v1.GetSubgraphSDLFromLatestCompositionRequest, v1.GetSubgraphSDLFromLatestCompositionResponse]
	getLatestSubgraphSDL                  *connect.Client[v1.GetLatestSubgraphSDLRequest, v1.GetLatestSubgraphSDLResponse]
	getChecksByFederatedGraphName         *connect.Client[v1.GetChecksByFederatedGraphNameRequest, v1.GetChecksByFederatedGraphNameResponse]
	getCheckSummary                       *connect.Client[v1.GetCheckSummaryRequest, v1.GetCheckSummaryResponse]
	getCheckOperations                    *connect.Client[v1.GetCheckOperationsRequest, v1.GetCheckOperationsResponse]
	forceCheckSuccess                     *connect.Client[v1.ForceCheckSuccessRequest, v1.ForceCheckSuccessResponse]
	createOperationOverrides              *connect.Client[v1.CreateOperationOverridesRequest, v1.CreateOperationOverridesResponse]
	removeOperationOverrides              *connect.Client[v1.RemoveOperationOverridesRequest, v1.RemoveOperationOverridesResponse]
	createOperationIgnoreAllOverride      *connect.Client[v1.CreateOperationIgnoreAllOverrideRequest, v1.CreateOperationIgnoreAllOverrideResponse]
	removeOperationIgnoreAllOverride      *connect.Client[v1.RemoveOperationIgnoreAllOverrideRequest, v1.RemoveOperationIgnoreAllOverrideResponse]
	getOperationOverrides                 *connect.Client[v1.GetOperationOverridesRequest, v1.GetOperationOverridesResponse]
	getAllOverrides                       *connect.Client[v1.GetAllOverridesRequest, v1.GetAllOverridesResponse]
	toggleChangeOverridesForAllOperations *connect.Client[v1.ToggleChangeOverridesForAllOperationsRequest, v1.ToggleChangeOverridesForAllOperationsResponse]
	createIgnoreOverridesForAllOperations *connect.Client[v1.CreateIgnoreOverridesForAllOperationsRequest, v1.CreateIgnoreOverridesForAllOperationsResponse]
	getOperationContent                   *connect.Client[v1.GetOperationContentRequest, v1.GetOperationContentResponse]
	getFederatedGraphChangelog            *connect.Client[v1.GetFederatedGraphChangelogRequest, v1.GetFederatedGraphChangelogResponse]
	createFederatedGraphToken             *connect.Client[v1.CreateFederatedGraphTokenRequest, v1.CreateFederatedGraphTokenResponse]
	getOrganizationMembers                *connect.Client[v1.GetOrganizationMembersRequest, v1.GetOrganizationMembersResponse]
	getPendingOrganizationMembers         *connect.Client[v1.GetPendingOrganizationMembersRequest, v1.GetPendingOrganizationMembersResponse]
	isMemberLimitReached                  *connect.Client[v1.IsMemberLimitReachedRequest, v1.IsMemberLimitReachedResponse]
	inviteUser                            *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	getAPIKeys                            *connect.Client[v1.GetAPIKeysRequest, v1.GetAPIKeysResponse]
	createAPIKey                          *connect.Client[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse]
	deleteAPIKey                          *connect.Client[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse]
	removeOrganizationMember              *connect.Client[v1.RemoveOrganizationMemberRequest, v1.RemoveOrganizationMemberResponse]
	removeInvitation                      *connect.Client[v1.RemoveInvitationRequest, v1.RemoveInvitationResponse]
	migrateFromApollo                     *connect.Client[v1.MigrateFromApolloRequest, v1.MigrateFromApolloResponse]
	createOrganizationWebhookConfig       *connect.Client[v1.CreateOrganizationWebhookConfigRequest, v1.CreateOrganizationWebhookConfigResponse]
	getOrganizationWebhookConfigs         *connect.Client[v1.GetOrganizationWebhookConfigsRequest, v1.GetOrganizationWebhookConfigsResponse]
	getOrganizationWebhookMeta            *connect.Client[v1.GetOrganizationWebhookMetaRequest, v1.GetOrganizationWebhookMetaResponse]
	updateOrganizationWebhookConfig       *connect.Client[v1.UpdateOrganizationWebhookConfigRequest, v1.UpdateOrganizationWebhookConfigResponse]
	deleteOrganizationWebhookConfig       *connect.Client[v1.DeleteOrganizationWebhookConfigRequest, v1.DeleteOrganizationWebhookConfigResponse]
	getOrganizationWebhookHistory         *connect.Client[v1.GetOrganizationWebhookHistoryRequest, v1.GetOrganizationWebhookHistoryResponse]
	getWebhookDeliveryDetails             *connect.Client[v1.GetWebhookDeliveryDetailsRequest, v1.GetWebhookDeliveryDetailsResponse]
	redeliverWebhook                      *connect.Client[v1.RedeliverWebhookRequest, v1.RedeliverWebhookResponse]
	createIntegration                     *connect.Client[v1.CreateIntegrationRequest, v1.CreateIntegrationResponse]
	getOrganizationIntegrations           *connect.Client[v1.GetOrganizationIntegrationsRequest, v1.GetOrganizationIntegrationsResponse]
	updateIntegrationConfig               *connect.Client[v1.UpdateIntegrationConfigRequest, v1.UpdateIntegrationConfigResponse]
	deleteIntegration                     *connect.Client[v1.DeleteIntegrationRequest, v1.DeleteIntegrationResponse]
	deleteUser                            *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	deleteOrganization                    *connect.Client[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse]
	leaveOrganization                     *connect.Client[v1.LeaveOrganizationRequest, v1.LeaveOrganizationResponse]
	updateOrganizationDetails             *connect.Client[v1.UpdateOrganizationDetailsRequest, v1.UpdateOrganizationDetailsResponse]
	updateOrgMemberRole                   *connect.Client[v1.UpdateOrgMemberRoleRequest, v1.UpdateOrgMemberRoleResponse]
	isGitHubAppInstalled                  *connect.Client[v1.IsGitHubAppInstalledRequest, v1.IsGitHubAppInstalledResponse]
	createOIDCProvider                    *connect.Client[v1.CreateOIDCProviderRequest, v1.CreateOIDCProviderResponse]
	getOIDCProvider                       *connect.Client[v1.GetOIDCProviderRequest, v1.GetOIDCProviderResponse]
	deleteOIDCProvider                    *connect.Client[v1.DeleteOIDCProviderRequest, v1.DeleteOIDCProviderResponse]
	updateIDPMappers                      *connect.Client[v1.UpdateIDPMappersRequest, v1.UpdateIDPMappersResponse]
	getClients                            *connect.Client[v1.GetClientsRequest, v1.GetClientsResponse]
	getRouters                            *connect.Client[v1.GetRoutersRequest, v1.GetRoutersResponse]
	getInvitations                        *connect.Client[v1.GetInvitationsRequest, v1.GetInvitationsResponse]
	acceptOrDeclineInvitation             *connect.Client[v1.AcceptOrDeclineInvitationRequest, v1.AcceptOrDeclineInvitationResponse]
	getCompositions                       *connect.Client[v1.GetCompositionsRequest, v1.GetCompositionsResponse]
	getCompositionDetails                 *connect.Client[v1.GetCompositionDetailsRequest, v1.GetCompositionDetailsResponse]
	getSdlBySchemaVersion                 *connect.Client[v1.GetSdlBySchemaVersionRequest, v1.GetSdlBySchemaVersionResponse]
	getChangelogBySchemaVersion           *connect.Client[v1.GetChangelogBySchemaVersionRequest, v1.GetChangelogBySchemaVersionResponse]
	getUserAccessibleResources            *connect.Client[v1.GetUserAccessibleResourcesRequest, v1.GetUserAccessibleResourcesResponse]
	updateFeatureSettings                 *connect.Client[v1.UpdateFeatureSettingsRequest, v1.UpdateFeatureSettingsResponse]
	addSubgraphMember                     *connect.Client[v1.AddSubgraphMemberRequest, v1.AddSubgraphMemberResponse]
	removeSubgraphMember                  *connect.Client[v1.RemoveSubgraphMemberRequest, v1.RemoveSubgraphMemberResponse]
	getSubgraphMembers                    *connect.Client[v1.GetSubgraphMembersRequest, v1.GetSubgraphMembersResponse]
	createDiscussion                      *connect.Client[v1.CreateDiscussionRequest, v1.CreateDiscussionResponse]
	replyToDiscussion                     *connect.Client[v1.ReplyToDiscussionRequest, v1.ReplyToDiscussionResponse]
	getAllDiscussions                     *connect.Client[v1.GetAllDiscussionsRequest, v1.GetAllDiscussionsResponse]
	updateDiscussionComment               *connect.Client[v1.UpdateDiscussionCommentRequest, v1.UpdateDiscussionCommentResponse]
	deleteDiscussionComment               *connect.Client[v1.DeleteDiscussionCommentRequest, v1.DeleteDiscussionCommentResponse]
	getDiscussion                         *connect.Client[v1.GetDiscussionRequest, v1.GetDiscussionResponse]
	getDiscussionSchemas                  *connect.Client[v1.GetDiscussionSchemasRequest, v1.GetDiscussionSchemasResponse]
	setDiscussionResolution               *connect.Client[v1.SetDiscussionResolutionRequest, v1.SetDiscussionResolutionResponse]
	addReadme                             *connect.Client[v1.AddReadmeRequest, v1.AddReadmeResponse]
	getUserAccessiblePermissions          *connect.Client[v1.GetUserAccessiblePermissionsRequest, v1.GetUserAccessiblePermissionsResponse]
	createFeatureFlag                     *connect.Client[v1.CreateFeatureFlagRequest, v1.CreateFeatureFlagResponse]
	deleteFeatureFlag                     *connect.Client[v1.DeleteFeatureFlagRequest, v1.DeleteFeatureFlagResponse]
	updateFeatureFlag                     *connect.Client[v1.UpdateFeatureFlagRequest, v1.UpdateFeatureFlagResponse]
	enableFeatureFlag                     *connect.Client[v1.EnableFeatureFlagRequest, v1.EnableFeatureFlagResponse]
	getAnalyticsView                      *connect.Client[v1.GetAnalyticsViewRequest, v1.GetAnalyticsViewResponse]
	getDashboardAnalyticsView             *connect.Client[v1.GetDashboardAnalyticsViewRequest, v1.GetDashboardAnalyticsViewResponse]
	getTrace                              *connect.Client[v1.GetTraceRequest, v1.GetTraceResponse]
	getGraphMetrics                       *connect.Client[v1.GetGraphMetricsRequest, v1.GetGraphMetricsResponse]
	getMetricsErrorRate                   *connect.Client[v1.GetMetricsErrorRateRequest, v1.GetMetricsErrorRateResponse]
	getSubgraphMetrics                    *connect.Client[v1.GetSubgraphMetricsRequest, v1.GetSubgraphMetricsResponse]
	getSubgraphMetricsErrorRate           *connect.Client[v1.GetSubgraphMetricsErrorRateRequest, v1.GetSubgraphMetricsErrorRateResponse]
	getFieldUsage                         *connect.Client[v1.GetFieldUsageRequest, v1.GetFieldUsageResponse]
	getOrganizationRequestsCount          *connect.Client[v1.GetOrganizationRequestsCountRequest, v1.GetOrganizationRequestsCountResponse]
	createOrganization                    *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	enableLintingForTheNamespace          *connect.Client[v1.EnableLintingForTheNamespaceRequest, v1.EnableLintingForTheNamespaceResponse]
	configureNamespaceLintConfig          *connect.Client[v1.ConfigureNamespaceLintConfigRequest, v1.ConfigureNamespaceLintConfigResponse]
	getNamespaceLintConfig                *connect.Client[v1.GetNamespaceLintConfigRequest, v1.GetNamespaceLintConfigResponse]
	enableGraphPruning                    *connect.Client[v1.EnableGraphPruningRequest, v1.EnableGraphPruningResponse]
	configureNamespaceGraphPruningConfig  *connect.Client[v1.ConfigureNamespaceGraphPruningConfigRequest, v1.ConfigureNamespaceGraphPruningConfigResponse]
	getNamespaceGraphPruningConfig        *connect.Client[v1.GetNamespaceGraphPruningConfigRequest, v1.GetNamespaceGraphPruningConfigResponse]
	getFeatureFlags                       *connect.Client[v1.GetFeatureFlagsRequest, v1.GetFeatureFlagsResponse]
	getFeatureFlagByName                  *connect.Client[v1.GetFeatureFlagByNameRequest, v1.GetFeatureFlagByNameResponse]
	getFeatureSubgraphsByFeatureFlag      *connect.Client[v1.GetFeatureSubgraphsByFeatureFlagRequest, v1.GetFeatureSubgraphsByFeatureFlagResponse]
	getFeatureSubgraphs                   *connect.Client[v1.GetFeatureSubgraphsRequest, v1.GetFeatureSubgraphsResponse]
	getFeatureFlagsByFederatedGraph       *connect.Client[v1.GetFeatureFlagsByFederatedGraphRequest, v1.GetFeatureFlagsByFederatedGraphResponse]
	getBillingPlans                       *connect.Client[v1.GetBillingPlansRequest, v1.GetBillingPlansResponse]
	createCheckoutSession                 *connect.Client[v1.CreateCheckoutSessionRequest, v1.CreateCheckoutSessionResponse]
	createBillingPortalSession            *connect.Client[v1.CreateBillingPortalSessionRequest, v1.CreateBillingPortalSessionResponse]
	upgradePlan                           *connect.Client[v1.UpgradePlanRequest, v1.UpgradePlanResponse]
}

// CreateNamespace calls wg.cosmo.platform.v1.PlatformService.CreateNamespace.
func (c *platformServiceClient) CreateNamespace(ctx context.Context, req *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error) {
	return c.createNamespace.CallUnary(ctx, req)
}

// DeleteNamespace calls wg.cosmo.platform.v1.PlatformService.DeleteNamespace.
func (c *platformServiceClient) DeleteNamespace(ctx context.Context, req *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error) {
	return c.deleteNamespace.CallUnary(ctx, req)
}

// RenameNamespace calls wg.cosmo.platform.v1.PlatformService.RenameNamespace.
func (c *platformServiceClient) RenameNamespace(ctx context.Context, req *connect.Request[v1.RenameNamespaceRequest]) (*connect.Response[v1.RenameNamespaceResponse], error) {
	return c.renameNamespace.CallUnary(ctx, req)
}

// GetNamespaces calls wg.cosmo.platform.v1.PlatformService.GetNamespaces.
func (c *platformServiceClient) GetNamespaces(ctx context.Context, req *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error) {
	return c.getNamespaces.CallUnary(ctx, req)
}

// CreateContract calls wg.cosmo.platform.v1.PlatformService.CreateContract.
func (c *platformServiceClient) CreateContract(ctx context.Context, req *connect.Request[v1.CreateContractRequest]) (*connect.Response[v1.CreateContractResponse], error) {
	return c.createContract.CallUnary(ctx, req)
}

// UpdateContract calls wg.cosmo.platform.v1.PlatformService.UpdateContract.
func (c *platformServiceClient) UpdateContract(ctx context.Context, req *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error) {
	return c.updateContract.CallUnary(ctx, req)
}

// MoveFederatedGraph calls wg.cosmo.platform.v1.PlatformService.MoveFederatedGraph.
func (c *platformServiceClient) MoveFederatedGraph(ctx context.Context, req *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error) {
	return c.moveFederatedGraph.CallUnary(ctx, req)
}

// MoveSubgraph calls wg.cosmo.platform.v1.PlatformService.MoveSubgraph.
func (c *platformServiceClient) MoveSubgraph(ctx context.Context, req *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error) {
	return c.moveSubgraph.CallUnary(ctx, req)
}

// MoveMonograph calls wg.cosmo.platform.v1.PlatformService.MoveMonograph.
func (c *platformServiceClient) MoveMonograph(ctx context.Context, req *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error) {
	return c.moveMonograph.CallUnary(ctx, req)
}

// CreateMonograph calls wg.cosmo.platform.v1.PlatformService.CreateMonograph.
func (c *platformServiceClient) CreateMonograph(ctx context.Context, req *connect.Request[v1.CreateMonographRequest]) (*connect.Response[v1.CreateMonographResponse], error) {
	return c.createMonograph.CallUnary(ctx, req)
}

// PublishMonograph calls wg.cosmo.platform.v1.PlatformService.PublishMonograph.
func (c *platformServiceClient) PublishMonograph(ctx context.Context, req *connect.Request[v1.PublishMonographRequest]) (*connect.Response[v1.PublishMonographResponse], error) {
	return c.publishMonograph.CallUnary(ctx, req)
}

// DeleteMonograph calls wg.cosmo.platform.v1.PlatformService.DeleteMonograph.
func (c *platformServiceClient) DeleteMonograph(ctx context.Context, req *connect.Request[v1.DeleteMonographRequest]) (*connect.Response[v1.DeleteMonographResponse], error) {
	return c.deleteMonograph.CallUnary(ctx, req)
}

// UpdateMonograph calls wg.cosmo.platform.v1.PlatformService.UpdateMonograph.
func (c *platformServiceClient) UpdateMonograph(ctx context.Context, req *connect.Request[v1.UpdateMonographRequest]) (*connect.Response[v1.UpdateMonographResponse], error) {
	return c.updateMonograph.CallUnary(ctx, req)
}

// MigrateMonograph calls wg.cosmo.platform.v1.PlatformService.MigrateMonograph.
func (c *platformServiceClient) MigrateMonograph(ctx context.Context, req *connect.Request[v1.MigrateMonographRequest]) (*connect.Response[v1.MigrateMonographResponse], error) {
	return c.migrateMonograph.CallUnary(ctx, req)
}

// CreateFederatedSubgraph calls wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph.
func (c *platformServiceClient) CreateFederatedSubgraph(ctx context.Context, req *connect.Request[v1.CreateFederatedSubgraphRequest]) (*connect.Response[v1.CreateFederatedSubgraphResponse], error) {
	return c.createFederatedSubgraph.CallUnary(ctx, req)
}

// PublishFederatedSubgraph calls wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph.
func (c *platformServiceClient) PublishFederatedSubgraph(ctx context.Context, req *connect.Request[v1.PublishFederatedSubgraphRequest]) (*connect.Response[v1.PublishFederatedSubgraphResponse], error) {
	return c.publishFederatedSubgraph.CallUnary(ctx, req)
}

// CreateFederatedGraph calls wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph.
func (c *platformServiceClient) CreateFederatedGraph(ctx context.Context, req *connect.Request[v1.CreateFederatedGraphRequest]) (*connect.Response[v1.CreateFederatedGraphResponse], error) {
	return c.createFederatedGraph.CallUnary(ctx, req)
}

// DeleteFederatedGraph calls wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph.
func (c *platformServiceClient) DeleteFederatedGraph(ctx context.Context, req *connect.Request[v1.DeleteFederatedGraphRequest]) (*connect.Response[v1.DeleteFederatedGraphResponse], error) {
	return c.deleteFederatedGraph.CallUnary(ctx, req)
}

// DeleteFederatedSubgraph calls wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph.
func (c *platformServiceClient) DeleteFederatedSubgraph(ctx context.Context, req *connect.Request[v1.DeleteFederatedSubgraphRequest]) (*connect.Response[v1.DeleteFederatedSubgraphResponse], error) {
	return c.deleteFederatedSubgraph.CallUnary(ctx, req)
}

// CheckSubgraphSchema calls wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema.
func (c *platformServiceClient) CheckSubgraphSchema(ctx context.Context, req *connect.Request[v1.CheckSubgraphSchemaRequest]) (*connect.Response[v1.CheckSubgraphSchemaResponse], error) {
	return c.checkSubgraphSchema.CallUnary(ctx, req)
}

// FixSubgraphSchema calls wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema.
func (c *platformServiceClient) FixSubgraphSchema(ctx context.Context, req *connect.Request[v1.FixSubgraphSchemaRequest]) (*connect.Response[v1.FixSubgraphSchemaResponse], error) {
	return c.fixSubgraphSchema.CallUnary(ctx, req)
}

// UpdateFederatedGraph calls wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph.
func (c *platformServiceClient) UpdateFederatedGraph(ctx context.Context, req *connect.Request[v1.UpdateFederatedGraphRequest]) (*connect.Response[v1.UpdateFederatedGraphResponse], error) {
	return c.updateFederatedGraph.CallUnary(ctx, req)
}

// UpdateSubgraph calls wg.cosmo.platform.v1.PlatformService.UpdateSubgraph.
func (c *platformServiceClient) UpdateSubgraph(ctx context.Context, req *connect.Request[v1.UpdateSubgraphRequest]) (*connect.Response[v1.UpdateSubgraphResponse], error) {
	return c.updateSubgraph.CallUnary(ctx, req)
}

// CheckFederatedGraph calls wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph.
func (c *platformServiceClient) CheckFederatedGraph(ctx context.Context, req *connect.Request[v1.CheckFederatedGraphRequest]) (*connect.Response[v1.CheckFederatedGraphResponse], error) {
	return c.checkFederatedGraph.CallUnary(ctx, req)
}

// WhoAmI calls wg.cosmo.platform.v1.PlatformService.WhoAmI.
func (c *platformServiceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// GenerateRouterToken calls wg.cosmo.platform.v1.PlatformService.GenerateRouterToken.
func (c *platformServiceClient) GenerateRouterToken(ctx context.Context, req *connect.Request[v1.GenerateRouterTokenRequest]) (*connect.Response[v1.GenerateRouterTokenResponse], error) {
	return c.generateRouterToken.CallUnary(ctx, req)
}

// GetRouterTokens calls wg.cosmo.platform.v1.PlatformService.GetRouterTokens.
func (c *platformServiceClient) GetRouterTokens(ctx context.Context, req *connect.Request[v1.GetRouterTokensRequest]) (*connect.Response[v1.GetRouterTokensResponse], error) {
	return c.getRouterTokens.CallUnary(ctx, req)
}

// DeleteRouterToken calls wg.cosmo.platform.v1.PlatformService.DeleteRouterToken.
func (c *platformServiceClient) DeleteRouterToken(ctx context.Context, req *connect.Request[v1.DeleteRouterTokenRequest]) (*connect.Response[v1.DeleteRouterTokenResponse], error) {
	return c.deleteRouterToken.CallUnary(ctx, req)
}

// PublishPersistedOperations calls wg.cosmo.platform.v1.PlatformService.PublishPersistedOperations.
func (c *platformServiceClient) PublishPersistedOperations(ctx context.Context, req *connect.Request[v1.PublishPersistedOperationsRequest]) (*connect.Response[v1.PublishPersistedOperationsResponse], error) {
	return c.publishPersistedOperations.CallUnary(ctx, req)
}

// GetPersistedOperations calls wg.cosmo.platform.v1.PlatformService.GetPersistedOperations.
func (c *platformServiceClient) GetPersistedOperations(ctx context.Context, req *connect.Request[v1.GetPersistedOperationsRequest]) (*connect.Response[v1.GetPersistedOperationsResponse], error) {
	return c.getPersistedOperations.CallUnary(ctx, req)
}

// GetAuditLogs calls wg.cosmo.platform.v1.PlatformService.GetAuditLogs.
func (c *platformServiceClient) GetAuditLogs(ctx context.Context, req *connect.Request[v1.GetAuditLogsRequest]) (*connect.Response[v1.GetAuditLogsResponse], error) {
	return c.getAuditLogs.CallUnary(ctx, req)
}

// GetFederatedGraphs calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs.
func (c *platformServiceClient) GetFederatedGraphs(ctx context.Context, req *connect.Request[v1.GetFederatedGraphsRequest]) (*connect.Response[v1.GetFederatedGraphsResponse], error) {
	return c.getFederatedGraphs.CallUnary(ctx, req)
}

// GetFederatedGraphsBySubgraphLabels calls
// wg.cosmo.platform.v1.PlatformService.GetFederatedGraphsBySubgraphLabels.
func (c *platformServiceClient) GetFederatedGraphsBySubgraphLabels(ctx context.Context, req *connect.Request[v1.GetFederatedGraphsBySubgraphLabelsRequest]) (*connect.Response[v1.GetFederatedGraphsBySubgraphLabelsResponse], error) {
	return c.getFederatedGraphsBySubgraphLabels.CallUnary(ctx, req)
}

// GetFederatedGraphByName calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName.
func (c *platformServiceClient) GetFederatedGraphByName(ctx context.Context, req *connect.Request[v1.GetFederatedGraphByNameRequest]) (*connect.Response[v1.GetFederatedGraphByNameResponse], error) {
	return c.getFederatedGraphByName.CallUnary(ctx, req)
}

// GetFederatedGraphSDLByName calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName.
func (c *platformServiceClient) GetFederatedGraphSDLByName(ctx context.Context, req *connect.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect.Response[v1.GetFederatedGraphSDLByNameResponse], error) {
	return c.getFederatedGraphSDLByName.CallUnary(ctx, req)
}

// GetSubgraphs calls wg.cosmo.platform.v1.PlatformService.GetSubgraphs.
func (c *platformServiceClient) GetSubgraphs(ctx context.Context, req *connect.Request[v1.GetSubgraphsRequest]) (*connect.Response[v1.GetSubgraphsResponse], error) {
	return c.getSubgraphs.CallUnary(ctx, req)
}

// GetSubgraphByName calls wg.cosmo.platform.v1.PlatformService.GetSubgraphByName.
func (c *platformServiceClient) GetSubgraphByName(ctx context.Context, req *connect.Request[v1.GetSubgraphByNameRequest]) (*connect.Response[v1.GetSubgraphByNameResponse], error) {
	return c.getSubgraphByName.CallUnary(ctx, req)
}

// GetSubgraphSDLFromLatestComposition calls
// wg.cosmo.platform.v1.PlatformService.GetSubgraphSDLFromLatestComposition.
func (c *platformServiceClient) GetSubgraphSDLFromLatestComposition(ctx context.Context, req *connect.Request[v1.GetSubgraphSDLFromLatestCompositionRequest]) (*connect.Response[v1.GetSubgraphSDLFromLatestCompositionResponse], error) {
	return c.getSubgraphSDLFromLatestComposition.CallUnary(ctx, req)
}

// GetLatestSubgraphSDL calls wg.cosmo.platform.v1.PlatformService.GetLatestSubgraphSDL.
func (c *platformServiceClient) GetLatestSubgraphSDL(ctx context.Context, req *connect.Request[v1.GetLatestSubgraphSDLRequest]) (*connect.Response[v1.GetLatestSubgraphSDLResponse], error) {
	return c.getLatestSubgraphSDL.CallUnary(ctx, req)
}

// GetChecksByFederatedGraphName calls
// wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName.
func (c *platformServiceClient) GetChecksByFederatedGraphName(ctx context.Context, req *connect.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect.Response[v1.GetChecksByFederatedGraphNameResponse], error) {
	return c.getChecksByFederatedGraphName.CallUnary(ctx, req)
}

// GetCheckSummary calls wg.cosmo.platform.v1.PlatformService.GetCheckSummary.
func (c *platformServiceClient) GetCheckSummary(ctx context.Context, req *connect.Request[v1.GetCheckSummaryRequest]) (*connect.Response[v1.GetCheckSummaryResponse], error) {
	return c.getCheckSummary.CallUnary(ctx, req)
}

// GetCheckOperations calls wg.cosmo.platform.v1.PlatformService.GetCheckOperations.
func (c *platformServiceClient) GetCheckOperations(ctx context.Context, req *connect.Request[v1.GetCheckOperationsRequest]) (*connect.Response[v1.GetCheckOperationsResponse], error) {
	return c.getCheckOperations.CallUnary(ctx, req)
}

// ForceCheckSuccess calls wg.cosmo.platform.v1.PlatformService.ForceCheckSuccess.
func (c *platformServiceClient) ForceCheckSuccess(ctx context.Context, req *connect.Request[v1.ForceCheckSuccessRequest]) (*connect.Response[v1.ForceCheckSuccessResponse], error) {
	return c.forceCheckSuccess.CallUnary(ctx, req)
}

// CreateOperationOverrides calls wg.cosmo.platform.v1.PlatformService.CreateOperationOverrides.
func (c *platformServiceClient) CreateOperationOverrides(ctx context.Context, req *connect.Request[v1.CreateOperationOverridesRequest]) (*connect.Response[v1.CreateOperationOverridesResponse], error) {
	return c.createOperationOverrides.CallUnary(ctx, req)
}

// RemoveOperationOverrides calls wg.cosmo.platform.v1.PlatformService.RemoveOperationOverrides.
func (c *platformServiceClient) RemoveOperationOverrides(ctx context.Context, req *connect.Request[v1.RemoveOperationOverridesRequest]) (*connect.Response[v1.RemoveOperationOverridesResponse], error) {
	return c.removeOperationOverrides.CallUnary(ctx, req)
}

// CreateOperationIgnoreAllOverride calls
// wg.cosmo.platform.v1.PlatformService.CreateOperationIgnoreAllOverride.
func (c *platformServiceClient) CreateOperationIgnoreAllOverride(ctx context.Context, req *connect.Request[v1.CreateOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.CreateOperationIgnoreAllOverrideResponse], error) {
	return c.createOperationIgnoreAllOverride.CallUnary(ctx, req)
}

// RemoveOperationIgnoreAllOverride calls
// wg.cosmo.platform.v1.PlatformService.RemoveOperationIgnoreAllOverride.
func (c *platformServiceClient) RemoveOperationIgnoreAllOverride(ctx context.Context, req *connect.Request[v1.RemoveOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.RemoveOperationIgnoreAllOverrideResponse], error) {
	return c.removeOperationIgnoreAllOverride.CallUnary(ctx, req)
}

// GetOperationOverrides calls wg.cosmo.platform.v1.PlatformService.GetOperationOverrides.
func (c *platformServiceClient) GetOperationOverrides(ctx context.Context, req *connect.Request[v1.GetOperationOverridesRequest]) (*connect.Response[v1.GetOperationOverridesResponse], error) {
	return c.getOperationOverrides.CallUnary(ctx, req)
}

// GetAllOverrides calls wg.cosmo.platform.v1.PlatformService.GetAllOverrides.
func (c *platformServiceClient) GetAllOverrides(ctx context.Context, req *connect.Request[v1.GetAllOverridesRequest]) (*connect.Response[v1.GetAllOverridesResponse], error) {
	return c.getAllOverrides.CallUnary(ctx, req)
}

// ToggleChangeOverridesForAllOperations calls
// wg.cosmo.platform.v1.PlatformService.ToggleChangeOverridesForAllOperations.
func (c *platformServiceClient) ToggleChangeOverridesForAllOperations(ctx context.Context, req *connect.Request[v1.ToggleChangeOverridesForAllOperationsRequest]) (*connect.Response[v1.ToggleChangeOverridesForAllOperationsResponse], error) {
	return c.toggleChangeOverridesForAllOperations.CallUnary(ctx, req)
}

// CreateIgnoreOverridesForAllOperations calls
// wg.cosmo.platform.v1.PlatformService.CreateIgnoreOverridesForAllOperations.
func (c *platformServiceClient) CreateIgnoreOverridesForAllOperations(ctx context.Context, req *connect.Request[v1.CreateIgnoreOverridesForAllOperationsRequest]) (*connect.Response[v1.CreateIgnoreOverridesForAllOperationsResponse], error) {
	return c.createIgnoreOverridesForAllOperations.CallUnary(ctx, req)
}

// GetOperationContent calls wg.cosmo.platform.v1.PlatformService.GetOperationContent.
func (c *platformServiceClient) GetOperationContent(ctx context.Context, req *connect.Request[v1.GetOperationContentRequest]) (*connect.Response[v1.GetOperationContentResponse], error) {
	return c.getOperationContent.CallUnary(ctx, req)
}

// GetFederatedGraphChangelog calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog.
func (c *platformServiceClient) GetFederatedGraphChangelog(ctx context.Context, req *connect.Request[v1.GetFederatedGraphChangelogRequest]) (*connect.Response[v1.GetFederatedGraphChangelogResponse], error) {
	return c.getFederatedGraphChangelog.CallUnary(ctx, req)
}

// CreateFederatedGraphToken calls wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken.
func (c *platformServiceClient) CreateFederatedGraphToken(ctx context.Context, req *connect.Request[v1.CreateFederatedGraphTokenRequest]) (*connect.Response[v1.CreateFederatedGraphTokenResponse], error) {
	return c.createFederatedGraphToken.CallUnary(ctx, req)
}

// GetOrganizationMembers calls wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers.
func (c *platformServiceClient) GetOrganizationMembers(ctx context.Context, req *connect.Request[v1.GetOrganizationMembersRequest]) (*connect.Response[v1.GetOrganizationMembersResponse], error) {
	return c.getOrganizationMembers.CallUnary(ctx, req)
}

// GetPendingOrganizationMembers calls
// wg.cosmo.platform.v1.PlatformService.GetPendingOrganizationMembers.
func (c *platformServiceClient) GetPendingOrganizationMembers(ctx context.Context, req *connect.Request[v1.GetPendingOrganizationMembersRequest]) (*connect.Response[v1.GetPendingOrganizationMembersResponse], error) {
	return c.getPendingOrganizationMembers.CallUnary(ctx, req)
}

// IsMemberLimitReached calls wg.cosmo.platform.v1.PlatformService.IsMemberLimitReached.
func (c *platformServiceClient) IsMemberLimitReached(ctx context.Context, req *connect.Request[v1.IsMemberLimitReachedRequest]) (*connect.Response[v1.IsMemberLimitReachedResponse], error) {
	return c.isMemberLimitReached.CallUnary(ctx, req)
}

// InviteUser calls wg.cosmo.platform.v1.PlatformService.InviteUser.
func (c *platformServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// GetAPIKeys calls wg.cosmo.platform.v1.PlatformService.GetAPIKeys.
func (c *platformServiceClient) GetAPIKeys(ctx context.Context, req *connect.Request[v1.GetAPIKeysRequest]) (*connect.Response[v1.GetAPIKeysResponse], error) {
	return c.getAPIKeys.CallUnary(ctx, req)
}

// CreateAPIKey calls wg.cosmo.platform.v1.PlatformService.CreateAPIKey.
func (c *platformServiceClient) CreateAPIKey(ctx context.Context, req *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// DeleteAPIKey calls wg.cosmo.platform.v1.PlatformService.DeleteAPIKey.
func (c *platformServiceClient) DeleteAPIKey(ctx context.Context, req *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error) {
	return c.deleteAPIKey.CallUnary(ctx, req)
}

// RemoveOrganizationMember calls wg.cosmo.platform.v1.PlatformService.RemoveOrganizationMember.
func (c *platformServiceClient) RemoveOrganizationMember(ctx context.Context, req *connect.Request[v1.RemoveOrganizationMemberRequest]) (*connect.Response[v1.RemoveOrganizationMemberResponse], error) {
	return c.removeOrganizationMember.CallUnary(ctx, req)
}

// RemoveInvitation calls wg.cosmo.platform.v1.PlatformService.RemoveInvitation.
func (c *platformServiceClient) RemoveInvitation(ctx context.Context, req *connect.Request[v1.RemoveInvitationRequest]) (*connect.Response[v1.RemoveInvitationResponse], error) {
	return c.removeInvitation.CallUnary(ctx, req)
}

// MigrateFromApollo calls wg.cosmo.platform.v1.PlatformService.MigrateFromApollo.
func (c *platformServiceClient) MigrateFromApollo(ctx context.Context, req *connect.Request[v1.MigrateFromApolloRequest]) (*connect.Response[v1.MigrateFromApolloResponse], error) {
	return c.migrateFromApollo.CallUnary(ctx, req)
}

// CreateOrganizationWebhookConfig calls
// wg.cosmo.platform.v1.PlatformService.CreateOrganizationWebhookConfig.
func (c *platformServiceClient) CreateOrganizationWebhookConfig(ctx context.Context, req *connect.Request[v1.CreateOrganizationWebhookConfigRequest]) (*connect.Response[v1.CreateOrganizationWebhookConfigResponse], error) {
	return c.createOrganizationWebhookConfig.CallUnary(ctx, req)
}

// GetOrganizationWebhookConfigs calls
// wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookConfigs.
func (c *platformServiceClient) GetOrganizationWebhookConfigs(ctx context.Context, req *connect.Request[v1.GetOrganizationWebhookConfigsRequest]) (*connect.Response[v1.GetOrganizationWebhookConfigsResponse], error) {
	return c.getOrganizationWebhookConfigs.CallUnary(ctx, req)
}

// GetOrganizationWebhookMeta calls wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookMeta.
func (c *platformServiceClient) GetOrganizationWebhookMeta(ctx context.Context, req *connect.Request[v1.GetOrganizationWebhookMetaRequest]) (*connect.Response[v1.GetOrganizationWebhookMetaResponse], error) {
	return c.getOrganizationWebhookMeta.CallUnary(ctx, req)
}

// UpdateOrganizationWebhookConfig calls
// wg.cosmo.platform.v1.PlatformService.UpdateOrganizationWebhookConfig.
func (c *platformServiceClient) UpdateOrganizationWebhookConfig(ctx context.Context, req *connect.Request[v1.UpdateOrganizationWebhookConfigRequest]) (*connect.Response[v1.UpdateOrganizationWebhookConfigResponse], error) {
	return c.updateOrganizationWebhookConfig.CallUnary(ctx, req)
}

// DeleteOrganizationWebhookConfig calls
// wg.cosmo.platform.v1.PlatformService.DeleteOrganizationWebhookConfig.
func (c *platformServiceClient) DeleteOrganizationWebhookConfig(ctx context.Context, req *connect.Request[v1.DeleteOrganizationWebhookConfigRequest]) (*connect.Response[v1.DeleteOrganizationWebhookConfigResponse], error) {
	return c.deleteOrganizationWebhookConfig.CallUnary(ctx, req)
}

// GetOrganizationWebhookHistory calls
// wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookHistory.
func (c *platformServiceClient) GetOrganizationWebhookHistory(ctx context.Context, req *connect.Request[v1.GetOrganizationWebhookHistoryRequest]) (*connect.Response[v1.GetOrganizationWebhookHistoryResponse], error) {
	return c.getOrganizationWebhookHistory.CallUnary(ctx, req)
}

// GetWebhookDeliveryDetails calls wg.cosmo.platform.v1.PlatformService.GetWebhookDeliveryDetails.
func (c *platformServiceClient) GetWebhookDeliveryDetails(ctx context.Context, req *connect.Request[v1.GetWebhookDeliveryDetailsRequest]) (*connect.Response[v1.GetWebhookDeliveryDetailsResponse], error) {
	return c.getWebhookDeliveryDetails.CallUnary(ctx, req)
}

// RedeliverWebhook calls wg.cosmo.platform.v1.PlatformService.RedeliverWebhook.
func (c *platformServiceClient) RedeliverWebhook(ctx context.Context, req *connect.Request[v1.RedeliverWebhookRequest]) (*connect.Response[v1.RedeliverWebhookResponse], error) {
	return c.redeliverWebhook.CallUnary(ctx, req)
}

// CreateIntegration calls wg.cosmo.platform.v1.PlatformService.CreateIntegration.
func (c *platformServiceClient) CreateIntegration(ctx context.Context, req *connect.Request[v1.CreateIntegrationRequest]) (*connect.Response[v1.CreateIntegrationResponse], error) {
	return c.createIntegration.CallUnary(ctx, req)
}

// GetOrganizationIntegrations calls
// wg.cosmo.platform.v1.PlatformService.GetOrganizationIntegrations.
func (c *platformServiceClient) GetOrganizationIntegrations(ctx context.Context, req *connect.Request[v1.GetOrganizationIntegrationsRequest]) (*connect.Response[v1.GetOrganizationIntegrationsResponse], error) {
	return c.getOrganizationIntegrations.CallUnary(ctx, req)
}

// UpdateIntegrationConfig calls wg.cosmo.platform.v1.PlatformService.UpdateIntegrationConfig.
func (c *platformServiceClient) UpdateIntegrationConfig(ctx context.Context, req *connect.Request[v1.UpdateIntegrationConfigRequest]) (*connect.Response[v1.UpdateIntegrationConfigResponse], error) {
	return c.updateIntegrationConfig.CallUnary(ctx, req)
}

// DeleteIntegration calls wg.cosmo.platform.v1.PlatformService.DeleteIntegration.
func (c *platformServiceClient) DeleteIntegration(ctx context.Context, req *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error) {
	return c.deleteIntegration.CallUnary(ctx, req)
}

// DeleteUser calls wg.cosmo.platform.v1.PlatformService.DeleteUser.
func (c *platformServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// DeleteOrganization calls wg.cosmo.platform.v1.PlatformService.DeleteOrganization.
func (c *platformServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// LeaveOrganization calls wg.cosmo.platform.v1.PlatformService.LeaveOrganization.
func (c *platformServiceClient) LeaveOrganization(ctx context.Context, req *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error) {
	return c.leaveOrganization.CallUnary(ctx, req)
}

// UpdateOrganizationDetails calls wg.cosmo.platform.v1.PlatformService.UpdateOrganizationDetails.
func (c *platformServiceClient) UpdateOrganizationDetails(ctx context.Context, req *connect.Request[v1.UpdateOrganizationDetailsRequest]) (*connect.Response[v1.UpdateOrganizationDetailsResponse], error) {
	return c.updateOrganizationDetails.CallUnary(ctx, req)
}

// UpdateOrgMemberRole calls wg.cosmo.platform.v1.PlatformService.UpdateOrgMemberRole.
func (c *platformServiceClient) UpdateOrgMemberRole(ctx context.Context, req *connect.Request[v1.UpdateOrgMemberRoleRequest]) (*connect.Response[v1.UpdateOrgMemberRoleResponse], error) {
	return c.updateOrgMemberRole.CallUnary(ctx, req)
}

// IsGitHubAppInstalled calls wg.cosmo.platform.v1.PlatformService.IsGitHubAppInstalled.
func (c *platformServiceClient) IsGitHubAppInstalled(ctx context.Context, req *connect.Request[v1.IsGitHubAppInstalledRequest]) (*connect.Response[v1.IsGitHubAppInstalledResponse], error) {
	return c.isGitHubAppInstalled.CallUnary(ctx, req)
}

// CreateOIDCProvider calls wg.cosmo.platform.v1.PlatformService.CreateOIDCProvider.
func (c *platformServiceClient) CreateOIDCProvider(ctx context.Context, req *connect.Request[v1.CreateOIDCProviderRequest]) (*connect.Response[v1.CreateOIDCProviderResponse], error) {
	return c.createOIDCProvider.CallUnary(ctx, req)
}

// GetOIDCProvider calls wg.cosmo.platform.v1.PlatformService.GetOIDCProvider.
func (c *platformServiceClient) GetOIDCProvider(ctx context.Context, req *connect.Request[v1.GetOIDCProviderRequest]) (*connect.Response[v1.GetOIDCProviderResponse], error) {
	return c.getOIDCProvider.CallUnary(ctx, req)
}

// DeleteOIDCProvider calls wg.cosmo.platform.v1.PlatformService.DeleteOIDCProvider.
func (c *platformServiceClient) DeleteOIDCProvider(ctx context.Context, req *connect.Request[v1.DeleteOIDCProviderRequest]) (*connect.Response[v1.DeleteOIDCProviderResponse], error) {
	return c.deleteOIDCProvider.CallUnary(ctx, req)
}

// UpdateIDPMappers calls wg.cosmo.platform.v1.PlatformService.UpdateIDPMappers.
func (c *platformServiceClient) UpdateIDPMappers(ctx context.Context, req *connect.Request[v1.UpdateIDPMappersRequest]) (*connect.Response[v1.UpdateIDPMappersResponse], error) {
	return c.updateIDPMappers.CallUnary(ctx, req)
}

// GetClients calls wg.cosmo.platform.v1.PlatformService.GetClients.
func (c *platformServiceClient) GetClients(ctx context.Context, req *connect.Request[v1.GetClientsRequest]) (*connect.Response[v1.GetClientsResponse], error) {
	return c.getClients.CallUnary(ctx, req)
}

// GetRouters calls wg.cosmo.platform.v1.PlatformService.GetRouters.
func (c *platformServiceClient) GetRouters(ctx context.Context, req *connect.Request[v1.GetRoutersRequest]) (*connect.Response[v1.GetRoutersResponse], error) {
	return c.getRouters.CallUnary(ctx, req)
}

// GetInvitations calls wg.cosmo.platform.v1.PlatformService.GetInvitations.
func (c *platformServiceClient) GetInvitations(ctx context.Context, req *connect.Request[v1.GetInvitationsRequest]) (*connect.Response[v1.GetInvitationsResponse], error) {
	return c.getInvitations.CallUnary(ctx, req)
}

// AcceptOrDeclineInvitation calls wg.cosmo.platform.v1.PlatformService.AcceptOrDeclineInvitation.
func (c *platformServiceClient) AcceptOrDeclineInvitation(ctx context.Context, req *connect.Request[v1.AcceptOrDeclineInvitationRequest]) (*connect.Response[v1.AcceptOrDeclineInvitationResponse], error) {
	return c.acceptOrDeclineInvitation.CallUnary(ctx, req)
}

// GetCompositions calls wg.cosmo.platform.v1.PlatformService.GetCompositions.
func (c *platformServiceClient) GetCompositions(ctx context.Context, req *connect.Request[v1.GetCompositionsRequest]) (*connect.Response[v1.GetCompositionsResponse], error) {
	return c.getCompositions.CallUnary(ctx, req)
}

// GetCompositionDetails calls wg.cosmo.platform.v1.PlatformService.GetCompositionDetails.
func (c *platformServiceClient) GetCompositionDetails(ctx context.Context, req *connect.Request[v1.GetCompositionDetailsRequest]) (*connect.Response[v1.GetCompositionDetailsResponse], error) {
	return c.getCompositionDetails.CallUnary(ctx, req)
}

// GetSdlBySchemaVersion calls wg.cosmo.platform.v1.PlatformService.GetSdlBySchemaVersion.
func (c *platformServiceClient) GetSdlBySchemaVersion(ctx context.Context, req *connect.Request[v1.GetSdlBySchemaVersionRequest]) (*connect.Response[v1.GetSdlBySchemaVersionResponse], error) {
	return c.getSdlBySchemaVersion.CallUnary(ctx, req)
}

// GetChangelogBySchemaVersion calls
// wg.cosmo.platform.v1.PlatformService.GetChangelogBySchemaVersion.
func (c *platformServiceClient) GetChangelogBySchemaVersion(ctx context.Context, req *connect.Request[v1.GetChangelogBySchemaVersionRequest]) (*connect.Response[v1.GetChangelogBySchemaVersionResponse], error) {
	return c.getChangelogBySchemaVersion.CallUnary(ctx, req)
}

// GetUserAccessibleResources calls wg.cosmo.platform.v1.PlatformService.GetUserAccessibleResources.
func (c *platformServiceClient) GetUserAccessibleResources(ctx context.Context, req *connect.Request[v1.GetUserAccessibleResourcesRequest]) (*connect.Response[v1.GetUserAccessibleResourcesResponse], error) {
	return c.getUserAccessibleResources.CallUnary(ctx, req)
}

// UpdateFeatureSettings calls wg.cosmo.platform.v1.PlatformService.UpdateFeatureSettings.
func (c *platformServiceClient) UpdateFeatureSettings(ctx context.Context, req *connect.Request[v1.UpdateFeatureSettingsRequest]) (*connect.Response[v1.UpdateFeatureSettingsResponse], error) {
	return c.updateFeatureSettings.CallUnary(ctx, req)
}

// AddSubgraphMember calls wg.cosmo.platform.v1.PlatformService.AddSubgraphMember.
func (c *platformServiceClient) AddSubgraphMember(ctx context.Context, req *connect.Request[v1.AddSubgraphMemberRequest]) (*connect.Response[v1.AddSubgraphMemberResponse], error) {
	return c.addSubgraphMember.CallUnary(ctx, req)
}

// RemoveSubgraphMember calls wg.cosmo.platform.v1.PlatformService.RemoveSubgraphMember.
func (c *platformServiceClient) RemoveSubgraphMember(ctx context.Context, req *connect.Request[v1.RemoveSubgraphMemberRequest]) (*connect.Response[v1.RemoveSubgraphMemberResponse], error) {
	return c.removeSubgraphMember.CallUnary(ctx, req)
}

// GetSubgraphMembers calls wg.cosmo.platform.v1.PlatformService.GetSubgraphMembers.
func (c *platformServiceClient) GetSubgraphMembers(ctx context.Context, req *connect.Request[v1.GetSubgraphMembersRequest]) (*connect.Response[v1.GetSubgraphMembersResponse], error) {
	return c.getSubgraphMembers.CallUnary(ctx, req)
}

// CreateDiscussion calls wg.cosmo.platform.v1.PlatformService.CreateDiscussion.
func (c *platformServiceClient) CreateDiscussion(ctx context.Context, req *connect.Request[v1.CreateDiscussionRequest]) (*connect.Response[v1.CreateDiscussionResponse], error) {
	return c.createDiscussion.CallUnary(ctx, req)
}

// ReplyToDiscussion calls wg.cosmo.platform.v1.PlatformService.ReplyToDiscussion.
func (c *platformServiceClient) ReplyToDiscussion(ctx context.Context, req *connect.Request[v1.ReplyToDiscussionRequest]) (*connect.Response[v1.ReplyToDiscussionResponse], error) {
	return c.replyToDiscussion.CallUnary(ctx, req)
}

// GetAllDiscussions calls wg.cosmo.platform.v1.PlatformService.GetAllDiscussions.
func (c *platformServiceClient) GetAllDiscussions(ctx context.Context, req *connect.Request[v1.GetAllDiscussionsRequest]) (*connect.Response[v1.GetAllDiscussionsResponse], error) {
	return c.getAllDiscussions.CallUnary(ctx, req)
}

// UpdateDiscussionComment calls wg.cosmo.platform.v1.PlatformService.UpdateDiscussionComment.
func (c *platformServiceClient) UpdateDiscussionComment(ctx context.Context, req *connect.Request[v1.UpdateDiscussionCommentRequest]) (*connect.Response[v1.UpdateDiscussionCommentResponse], error) {
	return c.updateDiscussionComment.CallUnary(ctx, req)
}

// DeleteDiscussionComment calls wg.cosmo.platform.v1.PlatformService.DeleteDiscussionComment.
func (c *platformServiceClient) DeleteDiscussionComment(ctx context.Context, req *connect.Request[v1.DeleteDiscussionCommentRequest]) (*connect.Response[v1.DeleteDiscussionCommentResponse], error) {
	return c.deleteDiscussionComment.CallUnary(ctx, req)
}

// GetDiscussion calls wg.cosmo.platform.v1.PlatformService.GetDiscussion.
func (c *platformServiceClient) GetDiscussion(ctx context.Context, req *connect.Request[v1.GetDiscussionRequest]) (*connect.Response[v1.GetDiscussionResponse], error) {
	return c.getDiscussion.CallUnary(ctx, req)
}

// GetDiscussionSchemas calls wg.cosmo.platform.v1.PlatformService.GetDiscussionSchemas.
func (c *platformServiceClient) GetDiscussionSchemas(ctx context.Context, req *connect.Request[v1.GetDiscussionSchemasRequest]) (*connect.Response[v1.GetDiscussionSchemasResponse], error) {
	return c.getDiscussionSchemas.CallUnary(ctx, req)
}

// SetDiscussionResolution calls wg.cosmo.platform.v1.PlatformService.SetDiscussionResolution.
func (c *platformServiceClient) SetDiscussionResolution(ctx context.Context, req *connect.Request[v1.SetDiscussionResolutionRequest]) (*connect.Response[v1.SetDiscussionResolutionResponse], error) {
	return c.setDiscussionResolution.CallUnary(ctx, req)
}

// AddReadme calls wg.cosmo.platform.v1.PlatformService.AddReadme.
func (c *platformServiceClient) AddReadme(ctx context.Context, req *connect.Request[v1.AddReadmeRequest]) (*connect.Response[v1.AddReadmeResponse], error) {
	return c.addReadme.CallUnary(ctx, req)
}

// GetUserAccessiblePermissions calls
// wg.cosmo.platform.v1.PlatformService.GetUserAccessiblePermissions.
func (c *platformServiceClient) GetUserAccessiblePermissions(ctx context.Context, req *connect.Request[v1.GetUserAccessiblePermissionsRequest]) (*connect.Response[v1.GetUserAccessiblePermissionsResponse], error) {
	return c.getUserAccessiblePermissions.CallUnary(ctx, req)
}

// CreateFeatureFlag calls wg.cosmo.platform.v1.PlatformService.CreateFeatureFlag.
func (c *platformServiceClient) CreateFeatureFlag(ctx context.Context, req *connect.Request[v1.CreateFeatureFlagRequest]) (*connect.Response[v1.CreateFeatureFlagResponse], error) {
	return c.createFeatureFlag.CallUnary(ctx, req)
}

// DeleteFeatureFlag calls wg.cosmo.platform.v1.PlatformService.DeleteFeatureFlag.
func (c *platformServiceClient) DeleteFeatureFlag(ctx context.Context, req *connect.Request[v1.DeleteFeatureFlagRequest]) (*connect.Response[v1.DeleteFeatureFlagResponse], error) {
	return c.deleteFeatureFlag.CallUnary(ctx, req)
}

// UpdateFeatureFlag calls wg.cosmo.platform.v1.PlatformService.UpdateFeatureFlag.
func (c *platformServiceClient) UpdateFeatureFlag(ctx context.Context, req *connect.Request[v1.UpdateFeatureFlagRequest]) (*connect.Response[v1.UpdateFeatureFlagResponse], error) {
	return c.updateFeatureFlag.CallUnary(ctx, req)
}

// EnableFeatureFlag calls wg.cosmo.platform.v1.PlatformService.EnableFeatureFlag.
func (c *platformServiceClient) EnableFeatureFlag(ctx context.Context, req *connect.Request[v1.EnableFeatureFlagRequest]) (*connect.Response[v1.EnableFeatureFlagResponse], error) {
	return c.enableFeatureFlag.CallUnary(ctx, req)
}

// GetAnalyticsView calls wg.cosmo.platform.v1.PlatformService.GetAnalyticsView.
func (c *platformServiceClient) GetAnalyticsView(ctx context.Context, req *connect.Request[v1.GetAnalyticsViewRequest]) (*connect.Response[v1.GetAnalyticsViewResponse], error) {
	return c.getAnalyticsView.CallUnary(ctx, req)
}

// GetDashboardAnalyticsView calls wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView.
func (c *platformServiceClient) GetDashboardAnalyticsView(ctx context.Context, req *connect.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect.Response[v1.GetDashboardAnalyticsViewResponse], error) {
	return c.getDashboardAnalyticsView.CallUnary(ctx, req)
}

// GetTrace calls wg.cosmo.platform.v1.PlatformService.GetTrace.
func (c *platformServiceClient) GetTrace(ctx context.Context, req *connect.Request[v1.GetTraceRequest]) (*connect.Response[v1.GetTraceResponse], error) {
	return c.getTrace.CallUnary(ctx, req)
}

// GetGraphMetrics calls wg.cosmo.platform.v1.PlatformService.GetGraphMetrics.
func (c *platformServiceClient) GetGraphMetrics(ctx context.Context, req *connect.Request[v1.GetGraphMetricsRequest]) (*connect.Response[v1.GetGraphMetricsResponse], error) {
	return c.getGraphMetrics.CallUnary(ctx, req)
}

// GetMetricsErrorRate calls wg.cosmo.platform.v1.PlatformService.GetMetricsErrorRate.
func (c *platformServiceClient) GetMetricsErrorRate(ctx context.Context, req *connect.Request[v1.GetMetricsErrorRateRequest]) (*connect.Response[v1.GetMetricsErrorRateResponse], error) {
	return c.getMetricsErrorRate.CallUnary(ctx, req)
}

// GetSubgraphMetrics calls wg.cosmo.platform.v1.PlatformService.GetSubgraphMetrics.
func (c *platformServiceClient) GetSubgraphMetrics(ctx context.Context, req *connect.Request[v1.GetSubgraphMetricsRequest]) (*connect.Response[v1.GetSubgraphMetricsResponse], error) {
	return c.getSubgraphMetrics.CallUnary(ctx, req)
}

// GetSubgraphMetricsErrorRate calls
// wg.cosmo.platform.v1.PlatformService.GetSubgraphMetricsErrorRate.
func (c *platformServiceClient) GetSubgraphMetricsErrorRate(ctx context.Context, req *connect.Request[v1.GetSubgraphMetricsErrorRateRequest]) (*connect.Response[v1.GetSubgraphMetricsErrorRateResponse], error) {
	return c.getSubgraphMetricsErrorRate.CallUnary(ctx, req)
}

// GetFieldUsage calls wg.cosmo.platform.v1.PlatformService.GetFieldUsage.
func (c *platformServiceClient) GetFieldUsage(ctx context.Context, req *connect.Request[v1.GetFieldUsageRequest]) (*connect.Response[v1.GetFieldUsageResponse], error) {
	return c.getFieldUsage.CallUnary(ctx, req)
}

// GetOrganizationRequestsCount calls
// wg.cosmo.platform.v1.PlatformService.GetOrganizationRequestsCount.
func (c *platformServiceClient) GetOrganizationRequestsCount(ctx context.Context, req *connect.Request[v1.GetOrganizationRequestsCountRequest]) (*connect.Response[v1.GetOrganizationRequestsCountResponse], error) {
	return c.getOrganizationRequestsCount.CallUnary(ctx, req)
}

// CreateOrganization calls wg.cosmo.platform.v1.PlatformService.CreateOrganization.
func (c *platformServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// EnableLintingForTheNamespace calls
// wg.cosmo.platform.v1.PlatformService.EnableLintingForTheNamespace.
func (c *platformServiceClient) EnableLintingForTheNamespace(ctx context.Context, req *connect.Request[v1.EnableLintingForTheNamespaceRequest]) (*connect.Response[v1.EnableLintingForTheNamespaceResponse], error) {
	return c.enableLintingForTheNamespace.CallUnary(ctx, req)
}

// ConfigureNamespaceLintConfig calls
// wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceLintConfig.
func (c *platformServiceClient) ConfigureNamespaceLintConfig(ctx context.Context, req *connect.Request[v1.ConfigureNamespaceLintConfigRequest]) (*connect.Response[v1.ConfigureNamespaceLintConfigResponse], error) {
	return c.configureNamespaceLintConfig.CallUnary(ctx, req)
}

// GetNamespaceLintConfig calls wg.cosmo.platform.v1.PlatformService.GetNamespaceLintConfig.
func (c *platformServiceClient) GetNamespaceLintConfig(ctx context.Context, req *connect.Request[v1.GetNamespaceLintConfigRequest]) (*connect.Response[v1.GetNamespaceLintConfigResponse], error) {
	return c.getNamespaceLintConfig.CallUnary(ctx, req)
}

// EnableGraphPruning calls wg.cosmo.platform.v1.PlatformService.EnableGraphPruning.
func (c *platformServiceClient) EnableGraphPruning(ctx context.Context, req *connect.Request[v1.EnableGraphPruningRequest]) (*connect.Response[v1.EnableGraphPruningResponse], error) {
	return c.enableGraphPruning.CallUnary(ctx, req)
}

// ConfigureNamespaceGraphPruningConfig calls
// wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceGraphPruningConfig.
func (c *platformServiceClient) ConfigureNamespaceGraphPruningConfig(ctx context.Context, req *connect.Request[v1.ConfigureNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.ConfigureNamespaceGraphPruningConfigResponse], error) {
	return c.configureNamespaceGraphPruningConfig.CallUnary(ctx, req)
}

// GetNamespaceGraphPruningConfig calls
// wg.cosmo.platform.v1.PlatformService.GetNamespaceGraphPruningConfig.
func (c *platformServiceClient) GetNamespaceGraphPruningConfig(ctx context.Context, req *connect.Request[v1.GetNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.GetNamespaceGraphPruningConfigResponse], error) {
	return c.getNamespaceGraphPruningConfig.CallUnary(ctx, req)
}

// GetFeatureFlags calls wg.cosmo.platform.v1.PlatformService.GetFeatureFlags.
func (c *platformServiceClient) GetFeatureFlags(ctx context.Context, req *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error) {
	return c.getFeatureFlags.CallUnary(ctx, req)
}

// GetFeatureFlagByName calls wg.cosmo.platform.v1.PlatformService.GetFeatureFlagByName.
func (c *platformServiceClient) GetFeatureFlagByName(ctx context.Context, req *connect.Request[v1.GetFeatureFlagByNameRequest]) (*connect.Response[v1.GetFeatureFlagByNameResponse], error) {
	return c.getFeatureFlagByName.CallUnary(ctx, req)
}

// GetFeatureSubgraphsByFeatureFlag calls
// wg.cosmo.platform.v1.PlatformService.GetFeatureSubgraphsByFeatureFlag.
func (c *platformServiceClient) GetFeatureSubgraphsByFeatureFlag(ctx context.Context, req *connect.Request[v1.GetFeatureSubgraphsByFeatureFlagRequest]) (*connect.Response[v1.GetFeatureSubgraphsByFeatureFlagResponse], error) {
	return c.getFeatureSubgraphsByFeatureFlag.CallUnary(ctx, req)
}

// GetFeatureSubgraphs calls wg.cosmo.platform.v1.PlatformService.GetFeatureSubgraphs.
func (c *platformServiceClient) GetFeatureSubgraphs(ctx context.Context, req *connect.Request[v1.GetFeatureSubgraphsRequest]) (*connect.Response[v1.GetFeatureSubgraphsResponse], error) {
	return c.getFeatureSubgraphs.CallUnary(ctx, req)
}

// GetFeatureFlagsByFederatedGraph calls
// wg.cosmo.platform.v1.PlatformService.GetFeatureFlagsByFederatedGraph.
func (c *platformServiceClient) GetFeatureFlagsByFederatedGraph(ctx context.Context, req *connect.Request[v1.GetFeatureFlagsByFederatedGraphRequest]) (*connect.Response[v1.GetFeatureFlagsByFederatedGraphResponse], error) {
	return c.getFeatureFlagsByFederatedGraph.CallUnary(ctx, req)
}

// GetBillingPlans calls wg.cosmo.platform.v1.PlatformService.GetBillingPlans.
func (c *platformServiceClient) GetBillingPlans(ctx context.Context, req *connect.Request[v1.GetBillingPlansRequest]) (*connect.Response[v1.GetBillingPlansResponse], error) {
	return c.getBillingPlans.CallUnary(ctx, req)
}

// CreateCheckoutSession calls wg.cosmo.platform.v1.PlatformService.CreateCheckoutSession.
func (c *platformServiceClient) CreateCheckoutSession(ctx context.Context, req *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error) {
	return c.createCheckoutSession.CallUnary(ctx, req)
}

// CreateBillingPortalSession calls wg.cosmo.platform.v1.PlatformService.CreateBillingPortalSession.
func (c *platformServiceClient) CreateBillingPortalSession(ctx context.Context, req *connect.Request[v1.CreateBillingPortalSessionRequest]) (*connect.Response[v1.CreateBillingPortalSessionResponse], error) {
	return c.createBillingPortalSession.CallUnary(ctx, req)
}

// UpgradePlan calls wg.cosmo.platform.v1.PlatformService.UpgradePlan.
func (c *platformServiceClient) UpgradePlan(ctx context.Context, req *connect.Request[v1.UpgradePlanRequest]) (*connect.Response[v1.UpgradePlanResponse], error) {
	return c.upgradePlan.CallUnary(ctx, req)
}

// PlatformServiceHandler is an implementation of the wg.cosmo.platform.v1.PlatformService service.
type PlatformServiceHandler interface {
	// Namespaces
	CreateNamespace(context.Context, *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error)
	DeleteNamespace(context.Context, *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error)
	RenameNamespace(context.Context, *connect.Request[v1.RenameNamespaceRequest]) (*connect.Response[v1.RenameNamespaceResponse], error)
	GetNamespaces(context.Context, *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error)
	// Contracts
	CreateContract(context.Context, *connect.Request[v1.CreateContractRequest]) (*connect.Response[v1.CreateContractResponse], error)
	UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error)
	MoveFederatedGraph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error)
	MoveSubgraph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error)
	MoveMonograph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error)
	// CreateMonograph creates a monograph on the control plane.
	CreateMonograph(context.Context, *connect.Request[v1.CreateMonographRequest]) (*connect.Response[v1.CreateMonographResponse], error)
	// PublishMonograph pushes the schema of the monograph to the control plane.
	PublishMonograph(context.Context, *connect.Request[v1.PublishMonographRequest]) (*connect.Response[v1.PublishMonographResponse], error)
	// DeleteMonograph deletes a monograph from the control plane.
	DeleteMonograph(context.Context, *connect.Request[v1.DeleteMonographRequest]) (*connect.Response[v1.DeleteMonographResponse], error)
	// UpdateMonograph updates a monograph with new urls, subscription config and readme
	UpdateMonograph(context.Context, *connect.Request[v1.UpdateMonographRequest]) (*connect.Response[v1.UpdateMonographResponse], error)
	// MigrateMonograph converts a monograph into a federated graph.
	MigrateMonograph(context.Context, *connect.Request[v1.MigrateMonographRequest]) (*connect.Response[v1.MigrateMonographResponse], error)
	// CreateFederatedSubgraph creates a federated subgraph on the control plane.
	CreateFederatedSubgraph(context.Context, *connect.Request[v1.CreateFederatedSubgraphRequest]) (*connect.Response[v1.CreateFederatedSubgraphResponse], error)
	// PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
	PublishFederatedSubgraph(context.Context, *connect.Request[v1.PublishFederatedSubgraphRequest]) (*connect.Response[v1.PublishFederatedSubgraphResponse], error)
	// CreateFederatedGraph creates a federated graph on the control plane.
	CreateFederatedGraph(context.Context, *connect.Request[v1.CreateFederatedGraphRequest]) (*connect.Response[v1.CreateFederatedGraphResponse], error)
	// DeleteFederatedGraph deletes a federated graph from the control plane.
	DeleteFederatedGraph(context.Context, *connect.Request[v1.DeleteFederatedGraphRequest]) (*connect.Response[v1.DeleteFederatedGraphResponse], error)
	// DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
	DeleteFederatedSubgraph(context.Context, *connect.Request[v1.DeleteFederatedSubgraphRequest]) (*connect.Response[v1.DeleteFederatedSubgraphResponse], error)
	// CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
	CheckSubgraphSchema(context.Context, *connect.Request[v1.CheckSubgraphSchemaRequest]) (*connect.Response[v1.CheckSubgraphSchemaResponse], error)
	FixSubgraphSchema(context.Context, *connect.Request[v1.FixSubgraphSchemaRequest]) (*connect.Response[v1.FixSubgraphSchemaResponse], error)
	// UpdateFederatedGraph updates a federated graph with new labels and routing url
	UpdateFederatedGraph(context.Context, *connect.Request[v1.UpdateFederatedGraphRequest]) (*connect.Response[v1.UpdateFederatedGraphResponse], error)
	// UpdateSubgraph updates a subgraph with new labels and routing url
	UpdateSubgraph(context.Context, *connect.Request[v1.UpdateSubgraphRequest]) (*connect.Response[v1.UpdateSubgraphResponse], error)
	// CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
	CheckFederatedGraph(context.Context, *connect.Request[v1.CheckFederatedGraphRequest]) (*connect.Response[v1.CheckFederatedGraphResponse], error)
	// WhoAmI returns the identity of the user currently logged in.
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
	// GenerateRouterToken generates a temporary router token to fetch the router config.
	GenerateRouterToken(context.Context, *connect.Request[v1.GenerateRouterTokenRequest]) (*connect.Response[v1.GenerateRouterTokenResponse], error)
	// GetRouterTokens returns the router tokens of a federated graph.
	GetRouterTokens(context.Context, *connect.Request[v1.GetRouterTokensRequest]) (*connect.Response[v1.GetRouterTokensResponse], error)
	// DeleteRouterToken deletes the router token of a federated graph.
	DeleteRouterToken(context.Context, *connect.Request[v1.DeleteRouterTokenRequest]) (*connect.Response[v1.DeleteRouterTokenResponse], error)
	// Add persisted operations
	PublishPersistedOperations(context.Context, *connect.Request[v1.PublishPersistedOperationsRequest]) (*connect.Response[v1.PublishPersistedOperationsResponse], error)
	// GetPersistedOperations returns operations for the registered client id
	GetPersistedOperations(context.Context, *connect.Request[v1.GetPersistedOperationsRequest]) (*connect.Response[v1.GetPersistedOperationsResponse], error)
	// GetAuditLogs returns the audit logs of the organization
	GetAuditLogs(context.Context, *connect.Request[v1.GetAuditLogsRequest]) (*connect.Response[v1.GetAuditLogsResponse], error)
	// GetFederatedGraphs returns the list of federated graphs.
	GetFederatedGraphs(context.Context, *connect.Request[v1.GetFederatedGraphsRequest]) (*connect.Response[v1.GetFederatedGraphsResponse], error)
	// GetFederatedGraphsBySubgraphLabels returns the list of federated graphs based on the subgraph labels
	GetFederatedGraphsBySubgraphLabels(context.Context, *connect.Request[v1.GetFederatedGraphsBySubgraphLabelsRequest]) (*connect.Response[v1.GetFederatedGraphsBySubgraphLabelsResponse], error)
	// GetFederatedGraphByName returns the federated graph by name.
	GetFederatedGraphByName(context.Context, *connect.Request[v1.GetFederatedGraphByNameRequest]) (*connect.Response[v1.GetFederatedGraphByNameResponse], error)
	// GetFederatedGraphSDLByName returns the latest valid SDL of the federated graph by name.
	GetFederatedGraphSDLByName(context.Context, *connect.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect.Response[v1.GetFederatedGraphSDLByNameResponse], error)
	// GetSubgraphs returns the list of subgraphs.
	GetSubgraphs(context.Context, *connect.Request[v1.GetSubgraphsRequest]) (*connect.Response[v1.GetSubgraphsResponse], error)
	// GetSubgraphByName returns the subgraph by name.
	GetSubgraphByName(context.Context, *connect.Request[v1.GetSubgraphByNameRequest]) (*connect.Response[v1.GetSubgraphByNameResponse], error)
	// GetSubgraphSDLFromLatestComposition returns the latest valid SDL of the subgraph composed with the federated graph.
	GetSubgraphSDLFromLatestComposition(context.Context, *connect.Request[v1.GetSubgraphSDLFromLatestCompositionRequest]) (*connect.Response[v1.GetSubgraphSDLFromLatestCompositionResponse], error)
	// GetLatestSubgraphSDL returns the latest SDL of the subgraph by name.
	GetLatestSubgraphSDL(context.Context, *connect.Request[v1.GetLatestSubgraphSDLRequest]) (*connect.Response[v1.GetLatestSubgraphSDLResponse], error)
	// GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
	GetChecksByFederatedGraphName(context.Context, *connect.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect.Response[v1.GetChecksByFederatedGraphNameResponse], error)
	// GetCheckSummary returns top level information about a schema check
	GetCheckSummary(context.Context, *connect.Request[v1.GetCheckSummaryRequest]) (*connect.Response[v1.GetCheckSummaryResponse], error)
	// GetCheckOperations returns affected operations for a check
	GetCheckOperations(context.Context, *connect.Request[v1.GetCheckOperationsRequest]) (*connect.Response[v1.GetCheckOperationsResponse], error)
	// ForceCheckSuccess forces a failed check to be marked as successful
	ForceCheckSuccess(context.Context, *connect.Request[v1.ForceCheckSuccessRequest]) (*connect.Response[v1.ForceCheckSuccessResponse], error)
	// CreateOperationOverrides marks if the given set of changes as safe for an operation
	CreateOperationOverrides(context.Context, *connect.Request[v1.CreateOperationOverridesRequest]) (*connect.Response[v1.CreateOperationOverridesResponse], error)
	// RemoveOperationOverride removes a change from the safe-list for an operation
	RemoveOperationOverrides(context.Context, *connect.Request[v1.RemoveOperationOverridesRequest]) (*connect.Response[v1.RemoveOperationOverridesResponse], error)
	// CreateOperationIgnoreAllOverride adds an ignore all override for the operation
	CreateOperationIgnoreAllOverride(context.Context, *connect.Request[v1.CreateOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.CreateOperationIgnoreAllOverrideResponse], error)
	// RemoveOperationIgnoreAllOverride removes the ignore all override for the operation
	RemoveOperationIgnoreAllOverride(context.Context, *connect.Request[v1.RemoveOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.RemoveOperationIgnoreAllOverrideResponse], error)
	// GetOperationOverrides retrieves all overrides for an operation hash
	GetOperationOverrides(context.Context, *connect.Request[v1.GetOperationOverridesRequest]) (*connect.Response[v1.GetOperationOverridesResponse], error)
	// GetAllOverrides returns all overrides for operations within a namespace
	GetAllOverrides(context.Context, *connect.Request[v1.GetAllOverridesRequest]) (*connect.Response[v1.GetAllOverridesResponse], error)
	// ToggleChangeOverridesForAllOperations marks all impacting changes of a given check either safe or unsafe
	ToggleChangeOverridesForAllOperations(context.Context, *connect.Request[v1.ToggleChangeOverridesForAllOperationsRequest]) (*connect.Response[v1.ToggleChangeOverridesForAllOperationsResponse], error)
	// CreateIgnoreOverridesForAllOperations creates ignore override for all operations of a given check
	CreateIgnoreOverridesForAllOperations(context.Context, *connect.Request[v1.CreateIgnoreOverridesForAllOperationsRequest]) (*connect.Response[v1.CreateIgnoreOverridesForAllOperationsResponse], error)
	// GetOperationContent returns the operation body by searching using the hash
	GetOperationContent(context.Context, *connect.Request[v1.GetOperationContentRequest]) (*connect.Response[v1.GetOperationContentResponse], error)
	// GetFederatedGraphChangelog returns the changelog of the federated graph.
	GetFederatedGraphChangelog(context.Context, *connect.Request[v1.GetFederatedGraphChangelogRequest]) (*connect.Response[v1.GetFederatedGraphChangelogResponse], error)
	// CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
	CreateFederatedGraphToken(context.Context, *connect.Request[v1.CreateFederatedGraphTokenRequest]) (*connect.Response[v1.CreateFederatedGraphTokenResponse], error)
	// GetOrganizationMembers returns the list of organization members
	GetOrganizationMembers(context.Context, *connect.Request[v1.GetOrganizationMembersRequest]) (*connect.Response[v1.GetOrganizationMembersResponse], error)
	// GetOrganizationMembers returns the list of pending organization invites
	GetPendingOrganizationMembers(context.Context, *connect.Request[v1.GetPendingOrganizationMembersRequest]) (*connect.Response[v1.GetPendingOrganizationMembersResponse], error)
	// IsMemberLimitReached returns whether the organization has reached the member limit
	IsMemberLimitReached(context.Context, *connect.Request[v1.IsMemberLimitReachedRequest]) (*connect.Response[v1.IsMemberLimitReachedResponse], error)
	// InviteUser invites an user to join the organization
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	// GetAPIKeys returns a list of API keys of the organization
	GetAPIKeys(context.Context, *connect.Request[v1.GetAPIKeysRequest]) (*connect.Response[v1.GetAPIKeysResponse], error)
	// CreateAPIKey creates an API key for the organization
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	// DeleteAPIKey deletes an API key for the organization
	DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error)
	// RemoveOrganizationMember removes the user from the organization
	RemoveOrganizationMember(context.Context, *connect.Request[v1.RemoveOrganizationMemberRequest]) (*connect.Response[v1.RemoveOrganizationMemberResponse], error)
	// RemoveInvitation removes the org invitation of the user
	RemoveInvitation(context.Context, *connect.Request[v1.RemoveInvitationRequest]) (*connect.Response[v1.RemoveInvitationResponse], error)
	// MigrateFromApollo migrates the graphs from apollo to cosmo
	MigrateFromApollo(context.Context, *connect.Request[v1.MigrateFromApolloRequest]) (*connect.Response[v1.MigrateFromApolloResponse], error)
	// CreateOrganizationWebhookConfig create a new webhook config for the organization
	CreateOrganizationWebhookConfig(context.Context, *connect.Request[v1.CreateOrganizationWebhookConfigRequest]) (*connect.Response[v1.CreateOrganizationWebhookConfigResponse], error)
	// GetOrganizationWebhookConfigs returns all webhooks for the organization
	GetOrganizationWebhookConfigs(context.Context, *connect.Request[v1.GetOrganizationWebhookConfigsRequest]) (*connect.Response[v1.GetOrganizationWebhookConfigsResponse], error)
	// GetOrganizationWebhookMeta returns the meta data for a particular webhook
	GetOrganizationWebhookMeta(context.Context, *connect.Request[v1.GetOrganizationWebhookMetaRequest]) (*connect.Response[v1.GetOrganizationWebhookMetaResponse], error)
	// UpdateOrganizationWebhookConfig updates an existing webhook for the organization
	UpdateOrganizationWebhookConfig(context.Context, *connect.Request[v1.UpdateOrganizationWebhookConfigRequest]) (*connect.Response[v1.UpdateOrganizationWebhookConfigResponse], error)
	// DeleteOrganizationWebhookConfig deletes an organization webhook
	DeleteOrganizationWebhookConfig(context.Context, *connect.Request[v1.DeleteOrganizationWebhookConfigRequest]) (*connect.Response[v1.DeleteOrganizationWebhookConfigResponse], error)
	// GetOrganizationWebhookHistory retrieves all webhook deliveries for the organization
	GetOrganizationWebhookHistory(context.Context, *connect.Request[v1.GetOrganizationWebhookHistoryRequest]) (*connect.Response[v1.GetOrganizationWebhookHistoryResponse], error)
	// GetWebhookDeliveryDetails retrieves details for a particular webhook
	GetWebhookDeliveryDetails(context.Context, *connect.Request[v1.GetWebhookDeliveryDetailsRequest]) (*connect.Response[v1.GetWebhookDeliveryDetailsResponse], error)
	// RedeliverWebhook triggers the delivery of the given webhook once again
	RedeliverWebhook(context.Context, *connect.Request[v1.RedeliverWebhookRequest]) (*connect.Response[v1.RedeliverWebhookResponse], error)
	// CreateIntegration create a new integration for the organization
	CreateIntegration(context.Context, *connect.Request[v1.CreateIntegrationRequest]) (*connect.Response[v1.CreateIntegrationResponse], error)
	// GetOrganizationIntegrations returns all integrations of the organization
	GetOrganizationIntegrations(context.Context, *connect.Request[v1.GetOrganizationIntegrationsRequest]) (*connect.Response[v1.GetOrganizationIntegrationsResponse], error)
	// UpdateIntegrationConfig updates an existing integration of the organization
	UpdateIntegrationConfig(context.Context, *connect.Request[v1.UpdateIntegrationConfigRequest]) (*connect.Response[v1.UpdateIntegrationConfigResponse], error)
	// DeleteIntegration deletes an organization web integration hook
	DeleteIntegration(context.Context, *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error)
	// DeleteUser deletes the user
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// DeleteOrganization deletes an organization
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	// LeaveOrganization removes a member from the organization
	LeaveOrganization(context.Context, *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error)
	// UpdateOrganizationDetails updates the name and slug of the organization
	UpdateOrganizationDetails(context.Context, *connect.Request[v1.UpdateOrganizationDetailsRequest]) (*connect.Response[v1.UpdateOrganizationDetailsResponse], error)
	// UpdateOrgMemberRole updates the role of an org member
	UpdateOrgMemberRole(context.Context, *connect.Request[v1.UpdateOrgMemberRoleRequest]) (*connect.Response[v1.UpdateOrgMemberRoleResponse], error)
	// IsGitHubAppInstalled checks if the cosmo github app is installed to a repository
	IsGitHubAppInstalled(context.Context, *connect.Request[v1.IsGitHubAppInstalledRequest]) (*connect.Response[v1.IsGitHubAppInstalledResponse], error)
	// CreateOIDCProvider adds an oidc provider to the organization
	CreateOIDCProvider(context.Context, *connect.Request[v1.CreateOIDCProviderRequest]) (*connect.Response[v1.CreateOIDCProviderResponse], error)
	// GetOIDCProvider gets the oidc provider connected the organization
	GetOIDCProvider(context.Context, *connect.Request[v1.GetOIDCProviderRequest]) (*connect.Response[v1.GetOIDCProviderResponse], error)
	// DeleteOIDCProvider deletes the oidc provider connected the organization
	DeleteOIDCProvider(context.Context, *connect.Request[v1.DeleteOIDCProviderRequest]) (*connect.Response[v1.DeleteOIDCProviderResponse], error)
	// UpdateIDPMappers updates the mappings of the oidc provider
	UpdateIDPMappers(context.Context, *connect.Request[v1.UpdateIDPMappersRequest]) (*connect.Response[v1.UpdateIDPMappersResponse], error)
	// GetClients returns all the clients of the federated graph
	GetClients(context.Context, *connect.Request[v1.GetClientsRequest]) (*connect.Response[v1.GetClientsResponse], error)
	// GetRouters returns all active routers of the federated graph
	GetRouters(context.Context, *connect.Request[v1.GetRoutersRequest]) (*connect.Response[v1.GetRoutersResponse], error)
	// GetInvitations returns all the invitations a user has received
	GetInvitations(context.Context, *connect.Request[v1.GetInvitationsRequest]) (*connect.Response[v1.GetInvitationsResponse], error)
	// AcceptOrDeclineInvitation accepts or declines the invitation
	AcceptOrDeclineInvitation(context.Context, *connect.Request[v1.AcceptOrDeclineInvitationRequest]) (*connect.Response[v1.AcceptOrDeclineInvitationResponse], error)
	// GetCompositions returns all the compositions of the federated graph
	GetCompositions(context.Context, *connect.Request[v1.GetCompositionsRequest]) (*connect.Response[v1.GetCompositionsResponse], error)
	// GetCompositionDetails returns the details of that composition
	GetCompositionDetails(context.Context, *connect.Request[v1.GetCompositionDetailsRequest]) (*connect.Response[v1.GetCompositionDetailsResponse], error)
	// GetSdlBySchemaVersion returns the sdl based on the schema version
	GetSdlBySchemaVersion(context.Context, *connect.Request[v1.GetSdlBySchemaVersionRequest]) (*connect.Response[v1.GetSdlBySchemaVersionResponse], error)
	// GetChangelogBySchemaVersion returns the changelog based on the schema version
	GetChangelogBySchemaVersion(context.Context, *connect.Request[v1.GetChangelogBySchemaVersionRequest]) (*connect.Response[v1.GetChangelogBySchemaVersionResponse], error)
	// GetUserAccessibleResources returns all the federated and subgraphs where the user has write permissions
	GetUserAccessibleResources(context.Context, *connect.Request[v1.GetUserAccessibleResourcesRequest]) (*connect.Response[v1.GetUserAccessibleResourcesResponse], error)
	// UpdateFeatureSettings updates the setinngs of features(ai, rbac, scim) of the organization
	UpdateFeatureSettings(context.Context, *connect.Request[v1.UpdateFeatureSettingsRequest]) (*connect.Response[v1.UpdateFeatureSettingsResponse], error)
	// AddSubgraphMember adds a user to the subgraph
	AddSubgraphMember(context.Context, *connect.Request[v1.AddSubgraphMemberRequest]) (*connect.Response[v1.AddSubgraphMemberResponse], error)
	// RemoveSubgraphMember removes a member from the subgraph
	RemoveSubgraphMember(context.Context, *connect.Request[v1.RemoveSubgraphMemberRequest]) (*connect.Response[v1.RemoveSubgraphMemberResponse], error)
	// GetSubgraphMembers gets all the members of the subgraph
	GetSubgraphMembers(context.Context, *connect.Request[v1.GetSubgraphMembersRequest]) (*connect.Response[v1.GetSubgraphMembersResponse], error)
	// CreateDiscussion creates a new discussion with an opening comment
	CreateDiscussion(context.Context, *connect.Request[v1.CreateDiscussionRequest]) (*connect.Response[v1.CreateDiscussionResponse], error)
	// ReplyToDiscussion creates a new comment in the discussion
	ReplyToDiscussion(context.Context, *connect.Request[v1.ReplyToDiscussionRequest]) (*connect.Response[v1.ReplyToDiscussionResponse], error)
	// GetAllDiscussions fetches all discussions which may be scoped to a schema version if passed
	GetAllDiscussions(context.Context, *connect.Request[v1.GetAllDiscussionsRequest]) (*connect.Response[v1.GetAllDiscussionsResponse], error)
	// UpdateDiscussionComment edits the comment in the discussion
	UpdateDiscussionComment(context.Context, *connect.Request[v1.UpdateDiscussionCommentRequest]) (*connect.Response[v1.UpdateDiscussionCommentResponse], error)
	// DeleteDiscussionComment deletes the comment or the discussion if it is an opening comment
	DeleteDiscussionComment(context.Context, *connect.Request[v1.DeleteDiscussionCommentRequest]) (*connect.Response[v1.DeleteDiscussionCommentResponse], error)
	// GetDiscussion gets the entire discussion thread
	GetDiscussion(context.Context, *connect.Request[v1.GetDiscussionRequest]) (*connect.Response[v1.GetDiscussionResponse], error)
	// GetDiscussionSchemas gets the reference and latest schema of the target graph in which the discussion was created
	GetDiscussionSchemas(context.Context, *connect.Request[v1.GetDiscussionSchemasRequest]) (*connect.Response[v1.GetDiscussionSchemasResponse], error)
	// SetDiscussionResolutionRequest marks the discussion as resolved or not
	SetDiscussionResolution(context.Context, *connect.Request[v1.SetDiscussionResolutionRequest]) (*connect.Response[v1.SetDiscussionResolutionResponse], error)
	// AddReadme adds a readme of a target, can be a subgraph or a federated graph
	AddReadme(context.Context, *connect.Request[v1.AddReadmeRequest]) (*connect.Response[v1.AddReadmeResponse], error)
	// GetUserAccessiblePermissions returns all the federated and subgraphs where the user has write permissions
	GetUserAccessiblePermissions(context.Context, *connect.Request[v1.GetUserAccessiblePermissionsRequest]) (*connect.Response[v1.GetUserAccessiblePermissionsResponse], error)
	// CreateFeatureFlag creates a new feature flag for the selected feature graphs
	CreateFeatureFlag(context.Context, *connect.Request[v1.CreateFeatureFlagRequest]) (*connect.Response[v1.CreateFeatureFlagResponse], error)
	// DeleteFeatureFlag deletes an existing feature flag
	DeleteFeatureFlag(context.Context, *connect.Request[v1.DeleteFeatureFlagRequest]) (*connect.Response[v1.DeleteFeatureFlagResponse], error)
	// UpdateFeatureFlag updates a new feature flag for the selected feature graphs
	UpdateFeatureFlag(context.Context, *connect.Request[v1.UpdateFeatureFlagRequest]) (*connect.Response[v1.UpdateFeatureFlagResponse], error)
	// EnableFeatureFlag enables/disables a feature flag
	EnableFeatureFlag(context.Context, *connect.Request[v1.EnableFeatureFlagRequest]) (*connect.Response[v1.EnableFeatureFlagResponse], error)
	// Analytics
	GetAnalyticsView(context.Context, *connect.Request[v1.GetAnalyticsViewRequest]) (*connect.Response[v1.GetAnalyticsViewResponse], error)
	GetDashboardAnalyticsView(context.Context, *connect.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect.Response[v1.GetDashboardAnalyticsViewResponse], error)
	GetTrace(context.Context, *connect.Request[v1.GetTraceRequest]) (*connect.Response[v1.GetTraceResponse], error)
	GetGraphMetrics(context.Context, *connect.Request[v1.GetGraphMetricsRequest]) (*connect.Response[v1.GetGraphMetricsResponse], error)
	GetMetricsErrorRate(context.Context, *connect.Request[v1.GetMetricsErrorRateRequest]) (*connect.Response[v1.GetMetricsErrorRateResponse], error)
	GetSubgraphMetrics(context.Context, *connect.Request[v1.GetSubgraphMetricsRequest]) (*connect.Response[v1.GetSubgraphMetricsResponse], error)
	GetSubgraphMetricsErrorRate(context.Context, *connect.Request[v1.GetSubgraphMetricsErrorRateRequest]) (*connect.Response[v1.GetSubgraphMetricsErrorRateResponse], error)
	GetFieldUsage(context.Context, *connect.Request[v1.GetFieldUsageRequest]) (*connect.Response[v1.GetFieldUsageResponse], error)
	GetOrganizationRequestsCount(context.Context, *connect.Request[v1.GetOrganizationRequestsCountRequest]) (*connect.Response[v1.GetOrganizationRequestsCountResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// EnableLintingForTheNamespace enables the lint check for the namespace passed.
	EnableLintingForTheNamespace(context.Context, *connect.Request[v1.EnableLintingForTheNamespaceRequest]) (*connect.Response[v1.EnableLintingForTheNamespaceResponse], error)
	// ConfigureNamespaceLintConfig configures the lint config of the organization.
	ConfigureNamespaceLintConfig(context.Context, *connect.Request[v1.ConfigureNamespaceLintConfigRequest]) (*connect.Response[v1.ConfigureNamespaceLintConfigResponse], error)
	// GetNamespaceLintConfig returns the lint config of the namespace.
	GetNamespaceLintConfig(context.Context, *connect.Request[v1.GetNamespaceLintConfigRequest]) (*connect.Response[v1.GetNamespaceLintConfigResponse], error)
	// EnablePruningForTheNamespace enables the graph pruning check for the namespace passed.
	EnableGraphPruning(context.Context, *connect.Request[v1.EnableGraphPruningRequest]) (*connect.Response[v1.EnableGraphPruningResponse], error)
	// ConfigureNamespaceGraphPruningConfig configures the graph pruning config of the organization.
	ConfigureNamespaceGraphPruningConfig(context.Context, *connect.Request[v1.ConfigureNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.ConfigureNamespaceGraphPruningConfigResponse], error)
	// GetNamespaceGraphPruningConfig returns the graph pruning config of the namespace.
	GetNamespaceGraphPruningConfig(context.Context, *connect.Request[v1.GetNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.GetNamespaceGraphPruningConfigResponse], error)
	// GetFeatureFlags returns the feature flags of the namespace
	GetFeatureFlags(context.Context, *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error)
	// GetFeatureFlagByName returns the feature flag of the namespace
	GetFeatureFlagByName(context.Context, *connect.Request[v1.GetFeatureFlagByNameRequest]) (*connect.Response[v1.GetFeatureFlagByNameResponse], error)
	// GetFeatureSubgraphsByFeatureFlag returns the feature subgraphs of a feature flag
	GetFeatureSubgraphsByFeatureFlag(context.Context, *connect.Request[v1.GetFeatureSubgraphsByFeatureFlagRequest]) (*connect.Response[v1.GetFeatureSubgraphsByFeatureFlagResponse], error)
	// GetFeatureSubgraphs returns the list of feature subgraphs.
	GetFeatureSubgraphs(context.Context, *connect.Request[v1.GetFeatureSubgraphsRequest]) (*connect.Response[v1.GetFeatureSubgraphsResponse], error)
	// GetFeatureFlagsByFederatedGraph returns the list of feature flags which match the label matchers of the federated graph.
	GetFeatureFlagsByFederatedGraph(context.Context, *connect.Request[v1.GetFeatureFlagsByFederatedGraphRequest]) (*connect.Response[v1.GetFeatureFlagsByFederatedGraphResponse], error)
	// Billing
	// -----------------------------------------------------------------------------------------------------------------------------
	// Return the available billing plans
	GetBillingPlans(context.Context, *connect.Request[v1.GetBillingPlansRequest]) (*connect.Response[v1.GetBillingPlansResponse], error)
	// Create a Stripe checkout session
	CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error)
	// Create a Stripe billing portal session
	CreateBillingPortalSession(context.Context, *connect.Request[v1.CreateBillingPortalSessionRequest]) (*connect.Response[v1.CreateBillingPortalSessionResponse], error)
	// Upgrade the current plan
	UpgradePlan(context.Context, *connect.Request[v1.UpgradePlanRequest]) (*connect.Response[v1.UpgradePlanResponse], error)
}

// NewPlatformServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlatformServiceHandler(svc PlatformServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	platformServiceCreateNamespaceHandler := connect.NewUnaryHandler(
		PlatformServiceCreateNamespaceProcedure,
		svc.CreateNamespace,
		connect.WithSchema(platformServiceCreateNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteNamespaceHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteNamespaceProcedure,
		svc.DeleteNamespace,
		connect.WithSchema(platformServiceDeleteNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRenameNamespaceHandler := connect.NewUnaryHandler(
		PlatformServiceRenameNamespaceProcedure,
		svc.RenameNamespace,
		connect.WithSchema(platformServiceRenameNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetNamespacesHandler := connect.NewUnaryHandler(
		PlatformServiceGetNamespacesProcedure,
		svc.GetNamespaces,
		connect.WithSchema(platformServiceGetNamespacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateContractHandler := connect.NewUnaryHandler(
		PlatformServiceCreateContractProcedure,
		svc.CreateContract,
		connect.WithSchema(platformServiceCreateContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateContractHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateContractProcedure,
		svc.UpdateContract,
		connect.WithSchema(platformServiceUpdateContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceMoveFederatedGraphHandler := connect.NewUnaryHandler(
		PlatformServiceMoveFederatedGraphProcedure,
		svc.MoveFederatedGraph,
		connect.WithSchema(platformServiceMoveFederatedGraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceMoveSubgraphHandler := connect.NewUnaryHandler(
		PlatformServiceMoveSubgraphProcedure,
		svc.MoveSubgraph,
		connect.WithSchema(platformServiceMoveSubgraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceMoveMonographHandler := connect.NewUnaryHandler(
		PlatformServiceMoveMonographProcedure,
		svc.MoveMonograph,
		connect.WithSchema(platformServiceMoveMonographMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateMonographHandler := connect.NewUnaryHandler(
		PlatformServiceCreateMonographProcedure,
		svc.CreateMonograph,
		connect.WithSchema(platformServiceCreateMonographMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServicePublishMonographHandler := connect.NewUnaryHandler(
		PlatformServicePublishMonographProcedure,
		svc.PublishMonograph,
		connect.WithSchema(platformServicePublishMonographMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteMonographHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteMonographProcedure,
		svc.DeleteMonograph,
		connect.WithSchema(platformServiceDeleteMonographMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateMonographHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateMonographProcedure,
		svc.UpdateMonograph,
		connect.WithSchema(platformServiceUpdateMonographMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceMigrateMonographHandler := connect.NewUnaryHandler(
		PlatformServiceMigrateMonographProcedure,
		svc.MigrateMonograph,
		connect.WithSchema(platformServiceMigrateMonographMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateFederatedSubgraphHandler := connect.NewUnaryHandler(
		PlatformServiceCreateFederatedSubgraphProcedure,
		svc.CreateFederatedSubgraph,
		connect.WithSchema(platformServiceCreateFederatedSubgraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServicePublishFederatedSubgraphHandler := connect.NewUnaryHandler(
		PlatformServicePublishFederatedSubgraphProcedure,
		svc.PublishFederatedSubgraph,
		connect.WithSchema(platformServicePublishFederatedSubgraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateFederatedGraphHandler := connect.NewUnaryHandler(
		PlatformServiceCreateFederatedGraphProcedure,
		svc.CreateFederatedGraph,
		connect.WithSchema(platformServiceCreateFederatedGraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteFederatedGraphHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteFederatedGraphProcedure,
		svc.DeleteFederatedGraph,
		connect.WithSchema(platformServiceDeleteFederatedGraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteFederatedSubgraphHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteFederatedSubgraphProcedure,
		svc.DeleteFederatedSubgraph,
		connect.WithSchema(platformServiceDeleteFederatedSubgraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCheckSubgraphSchemaHandler := connect.NewUnaryHandler(
		PlatformServiceCheckSubgraphSchemaProcedure,
		svc.CheckSubgraphSchema,
		connect.WithSchema(platformServiceCheckSubgraphSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceFixSubgraphSchemaHandler := connect.NewUnaryHandler(
		PlatformServiceFixSubgraphSchemaProcedure,
		svc.FixSubgraphSchema,
		connect.WithSchema(platformServiceFixSubgraphSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateFederatedGraphHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateFederatedGraphProcedure,
		svc.UpdateFederatedGraph,
		connect.WithSchema(platformServiceUpdateFederatedGraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateSubgraphHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateSubgraphProcedure,
		svc.UpdateSubgraph,
		connect.WithSchema(platformServiceUpdateSubgraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCheckFederatedGraphHandler := connect.NewUnaryHandler(
		PlatformServiceCheckFederatedGraphProcedure,
		svc.CheckFederatedGraph,
		connect.WithSchema(platformServiceCheckFederatedGraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceWhoAmIHandler := connect.NewUnaryHandler(
		PlatformServiceWhoAmIProcedure,
		svc.WhoAmI,
		connect.WithSchema(platformServiceWhoAmIMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGenerateRouterTokenHandler := connect.NewUnaryHandler(
		PlatformServiceGenerateRouterTokenProcedure,
		svc.GenerateRouterToken,
		connect.WithSchema(platformServiceGenerateRouterTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetRouterTokensHandler := connect.NewUnaryHandler(
		PlatformServiceGetRouterTokensProcedure,
		svc.GetRouterTokens,
		connect.WithSchema(platformServiceGetRouterTokensMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteRouterTokenHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteRouterTokenProcedure,
		svc.DeleteRouterToken,
		connect.WithSchema(platformServiceDeleteRouterTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServicePublishPersistedOperationsHandler := connect.NewUnaryHandler(
		PlatformServicePublishPersistedOperationsProcedure,
		svc.PublishPersistedOperations,
		connect.WithSchema(platformServicePublishPersistedOperationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetPersistedOperationsHandler := connect.NewUnaryHandler(
		PlatformServiceGetPersistedOperationsProcedure,
		svc.GetPersistedOperations,
		connect.WithSchema(platformServiceGetPersistedOperationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetAuditLogsHandler := connect.NewUnaryHandler(
		PlatformServiceGetAuditLogsProcedure,
		svc.GetAuditLogs,
		connect.WithSchema(platformServiceGetAuditLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFederatedGraphsHandler := connect.NewUnaryHandler(
		PlatformServiceGetFederatedGraphsProcedure,
		svc.GetFederatedGraphs,
		connect.WithSchema(platformServiceGetFederatedGraphsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFederatedGraphsBySubgraphLabelsHandler := connect.NewUnaryHandler(
		PlatformServiceGetFederatedGraphsBySubgraphLabelsProcedure,
		svc.GetFederatedGraphsBySubgraphLabels,
		connect.WithSchema(platformServiceGetFederatedGraphsBySubgraphLabelsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFederatedGraphByNameHandler := connect.NewUnaryHandler(
		PlatformServiceGetFederatedGraphByNameProcedure,
		svc.GetFederatedGraphByName,
		connect.WithSchema(platformServiceGetFederatedGraphByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFederatedGraphSDLByNameHandler := connect.NewUnaryHandler(
		PlatformServiceGetFederatedGraphSDLByNameProcedure,
		svc.GetFederatedGraphSDLByName,
		connect.WithSchema(platformServiceGetFederatedGraphSDLByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSubgraphsHandler := connect.NewUnaryHandler(
		PlatformServiceGetSubgraphsProcedure,
		svc.GetSubgraphs,
		connect.WithSchema(platformServiceGetSubgraphsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSubgraphByNameHandler := connect.NewUnaryHandler(
		PlatformServiceGetSubgraphByNameProcedure,
		svc.GetSubgraphByName,
		connect.WithSchema(platformServiceGetSubgraphByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSubgraphSDLFromLatestCompositionHandler := connect.NewUnaryHandler(
		PlatformServiceGetSubgraphSDLFromLatestCompositionProcedure,
		svc.GetSubgraphSDLFromLatestComposition,
		connect.WithSchema(platformServiceGetSubgraphSDLFromLatestCompositionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetLatestSubgraphSDLHandler := connect.NewUnaryHandler(
		PlatformServiceGetLatestSubgraphSDLProcedure,
		svc.GetLatestSubgraphSDL,
		connect.WithSchema(platformServiceGetLatestSubgraphSDLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetChecksByFederatedGraphNameHandler := connect.NewUnaryHandler(
		PlatformServiceGetChecksByFederatedGraphNameProcedure,
		svc.GetChecksByFederatedGraphName,
		connect.WithSchema(platformServiceGetChecksByFederatedGraphNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetCheckSummaryHandler := connect.NewUnaryHandler(
		PlatformServiceGetCheckSummaryProcedure,
		svc.GetCheckSummary,
		connect.WithSchema(platformServiceGetCheckSummaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetCheckOperationsHandler := connect.NewUnaryHandler(
		PlatformServiceGetCheckOperationsProcedure,
		svc.GetCheckOperations,
		connect.WithSchema(platformServiceGetCheckOperationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceForceCheckSuccessHandler := connect.NewUnaryHandler(
		PlatformServiceForceCheckSuccessProcedure,
		svc.ForceCheckSuccess,
		connect.WithSchema(platformServiceForceCheckSuccessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateOperationOverridesHandler := connect.NewUnaryHandler(
		PlatformServiceCreateOperationOverridesProcedure,
		svc.CreateOperationOverrides,
		connect.WithSchema(platformServiceCreateOperationOverridesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRemoveOperationOverridesHandler := connect.NewUnaryHandler(
		PlatformServiceRemoveOperationOverridesProcedure,
		svc.RemoveOperationOverrides,
		connect.WithSchema(platformServiceRemoveOperationOverridesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateOperationIgnoreAllOverrideHandler := connect.NewUnaryHandler(
		PlatformServiceCreateOperationIgnoreAllOverrideProcedure,
		svc.CreateOperationIgnoreAllOverride,
		connect.WithSchema(platformServiceCreateOperationIgnoreAllOverrideMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRemoveOperationIgnoreAllOverrideHandler := connect.NewUnaryHandler(
		PlatformServiceRemoveOperationIgnoreAllOverrideProcedure,
		svc.RemoveOperationIgnoreAllOverride,
		connect.WithSchema(platformServiceRemoveOperationIgnoreAllOverrideMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOperationOverridesHandler := connect.NewUnaryHandler(
		PlatformServiceGetOperationOverridesProcedure,
		svc.GetOperationOverrides,
		connect.WithSchema(platformServiceGetOperationOverridesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetAllOverridesHandler := connect.NewUnaryHandler(
		PlatformServiceGetAllOverridesProcedure,
		svc.GetAllOverrides,
		connect.WithSchema(platformServiceGetAllOverridesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceToggleChangeOverridesForAllOperationsHandler := connect.NewUnaryHandler(
		PlatformServiceToggleChangeOverridesForAllOperationsProcedure,
		svc.ToggleChangeOverridesForAllOperations,
		connect.WithSchema(platformServiceToggleChangeOverridesForAllOperationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateIgnoreOverridesForAllOperationsHandler := connect.NewUnaryHandler(
		PlatformServiceCreateIgnoreOverridesForAllOperationsProcedure,
		svc.CreateIgnoreOverridesForAllOperations,
		connect.WithSchema(platformServiceCreateIgnoreOverridesForAllOperationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOperationContentHandler := connect.NewUnaryHandler(
		PlatformServiceGetOperationContentProcedure,
		svc.GetOperationContent,
		connect.WithSchema(platformServiceGetOperationContentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFederatedGraphChangelogHandler := connect.NewUnaryHandler(
		PlatformServiceGetFederatedGraphChangelogProcedure,
		svc.GetFederatedGraphChangelog,
		connect.WithSchema(platformServiceGetFederatedGraphChangelogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateFederatedGraphTokenHandler := connect.NewUnaryHandler(
		PlatformServiceCreateFederatedGraphTokenProcedure,
		svc.CreateFederatedGraphToken,
		connect.WithSchema(platformServiceCreateFederatedGraphTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOrganizationMembersHandler := connect.NewUnaryHandler(
		PlatformServiceGetOrganizationMembersProcedure,
		svc.GetOrganizationMembers,
		connect.WithSchema(platformServiceGetOrganizationMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetPendingOrganizationMembersHandler := connect.NewUnaryHandler(
		PlatformServiceGetPendingOrganizationMembersProcedure,
		svc.GetPendingOrganizationMembers,
		connect.WithSchema(platformServiceGetPendingOrganizationMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceIsMemberLimitReachedHandler := connect.NewUnaryHandler(
		PlatformServiceIsMemberLimitReachedProcedure,
		svc.IsMemberLimitReached,
		connect.WithSchema(platformServiceIsMemberLimitReachedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceInviteUserHandler := connect.NewUnaryHandler(
		PlatformServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(platformServiceInviteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetAPIKeysHandler := connect.NewUnaryHandler(
		PlatformServiceGetAPIKeysProcedure,
		svc.GetAPIKeys,
		connect.WithSchema(platformServiceGetAPIKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateAPIKeyHandler := connect.NewUnaryHandler(
		PlatformServiceCreateAPIKeyProcedure,
		svc.CreateAPIKey,
		connect.WithSchema(platformServiceCreateAPIKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteAPIKeyHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteAPIKeyProcedure,
		svc.DeleteAPIKey,
		connect.WithSchema(platformServiceDeleteAPIKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRemoveOrganizationMemberHandler := connect.NewUnaryHandler(
		PlatformServiceRemoveOrganizationMemberProcedure,
		svc.RemoveOrganizationMember,
		connect.WithSchema(platformServiceRemoveOrganizationMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRemoveInvitationHandler := connect.NewUnaryHandler(
		PlatformServiceRemoveInvitationProcedure,
		svc.RemoveInvitation,
		connect.WithSchema(platformServiceRemoveInvitationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceMigrateFromApolloHandler := connect.NewUnaryHandler(
		PlatformServiceMigrateFromApolloProcedure,
		svc.MigrateFromApollo,
		connect.WithSchema(platformServiceMigrateFromApolloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateOrganizationWebhookConfigHandler := connect.NewUnaryHandler(
		PlatformServiceCreateOrganizationWebhookConfigProcedure,
		svc.CreateOrganizationWebhookConfig,
		connect.WithSchema(platformServiceCreateOrganizationWebhookConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOrganizationWebhookConfigsHandler := connect.NewUnaryHandler(
		PlatformServiceGetOrganizationWebhookConfigsProcedure,
		svc.GetOrganizationWebhookConfigs,
		connect.WithSchema(platformServiceGetOrganizationWebhookConfigsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOrganizationWebhookMetaHandler := connect.NewUnaryHandler(
		PlatformServiceGetOrganizationWebhookMetaProcedure,
		svc.GetOrganizationWebhookMeta,
		connect.WithSchema(platformServiceGetOrganizationWebhookMetaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateOrganizationWebhookConfigHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateOrganizationWebhookConfigProcedure,
		svc.UpdateOrganizationWebhookConfig,
		connect.WithSchema(platformServiceUpdateOrganizationWebhookConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteOrganizationWebhookConfigHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteOrganizationWebhookConfigProcedure,
		svc.DeleteOrganizationWebhookConfig,
		connect.WithSchema(platformServiceDeleteOrganizationWebhookConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOrganizationWebhookHistoryHandler := connect.NewUnaryHandler(
		PlatformServiceGetOrganizationWebhookHistoryProcedure,
		svc.GetOrganizationWebhookHistory,
		connect.WithSchema(platformServiceGetOrganizationWebhookHistoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetWebhookDeliveryDetailsHandler := connect.NewUnaryHandler(
		PlatformServiceGetWebhookDeliveryDetailsProcedure,
		svc.GetWebhookDeliveryDetails,
		connect.WithSchema(platformServiceGetWebhookDeliveryDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRedeliverWebhookHandler := connect.NewUnaryHandler(
		PlatformServiceRedeliverWebhookProcedure,
		svc.RedeliverWebhook,
		connect.WithSchema(platformServiceRedeliverWebhookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateIntegrationHandler := connect.NewUnaryHandler(
		PlatformServiceCreateIntegrationProcedure,
		svc.CreateIntegration,
		connect.WithSchema(platformServiceCreateIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOrganizationIntegrationsHandler := connect.NewUnaryHandler(
		PlatformServiceGetOrganizationIntegrationsProcedure,
		svc.GetOrganizationIntegrations,
		connect.WithSchema(platformServiceGetOrganizationIntegrationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateIntegrationConfigHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateIntegrationConfigProcedure,
		svc.UpdateIntegrationConfig,
		connect.WithSchema(platformServiceUpdateIntegrationConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteIntegrationHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteIntegrationProcedure,
		svc.DeleteIntegration,
		connect.WithSchema(platformServiceDeleteIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteUserHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(platformServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(platformServiceDeleteOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceLeaveOrganizationHandler := connect.NewUnaryHandler(
		PlatformServiceLeaveOrganizationProcedure,
		svc.LeaveOrganization,
		connect.WithSchema(platformServiceLeaveOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateOrganizationDetailsHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateOrganizationDetailsProcedure,
		svc.UpdateOrganizationDetails,
		connect.WithSchema(platformServiceUpdateOrganizationDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateOrgMemberRoleHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateOrgMemberRoleProcedure,
		svc.UpdateOrgMemberRole,
		connect.WithSchema(platformServiceUpdateOrgMemberRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceIsGitHubAppInstalledHandler := connect.NewUnaryHandler(
		PlatformServiceIsGitHubAppInstalledProcedure,
		svc.IsGitHubAppInstalled,
		connect.WithSchema(platformServiceIsGitHubAppInstalledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateOIDCProviderHandler := connect.NewUnaryHandler(
		PlatformServiceCreateOIDCProviderProcedure,
		svc.CreateOIDCProvider,
		connect.WithSchema(platformServiceCreateOIDCProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOIDCProviderHandler := connect.NewUnaryHandler(
		PlatformServiceGetOIDCProviderProcedure,
		svc.GetOIDCProvider,
		connect.WithSchema(platformServiceGetOIDCProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteOIDCProviderHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteOIDCProviderProcedure,
		svc.DeleteOIDCProvider,
		connect.WithSchema(platformServiceDeleteOIDCProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateIDPMappersHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateIDPMappersProcedure,
		svc.UpdateIDPMappers,
		connect.WithSchema(platformServiceUpdateIDPMappersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetClientsHandler := connect.NewUnaryHandler(
		PlatformServiceGetClientsProcedure,
		svc.GetClients,
		connect.WithSchema(platformServiceGetClientsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetRoutersHandler := connect.NewUnaryHandler(
		PlatformServiceGetRoutersProcedure,
		svc.GetRouters,
		connect.WithSchema(platformServiceGetRoutersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetInvitationsHandler := connect.NewUnaryHandler(
		PlatformServiceGetInvitationsProcedure,
		svc.GetInvitations,
		connect.WithSchema(platformServiceGetInvitationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceAcceptOrDeclineInvitationHandler := connect.NewUnaryHandler(
		PlatformServiceAcceptOrDeclineInvitationProcedure,
		svc.AcceptOrDeclineInvitation,
		connect.WithSchema(platformServiceAcceptOrDeclineInvitationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetCompositionsHandler := connect.NewUnaryHandler(
		PlatformServiceGetCompositionsProcedure,
		svc.GetCompositions,
		connect.WithSchema(platformServiceGetCompositionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetCompositionDetailsHandler := connect.NewUnaryHandler(
		PlatformServiceGetCompositionDetailsProcedure,
		svc.GetCompositionDetails,
		connect.WithSchema(platformServiceGetCompositionDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSdlBySchemaVersionHandler := connect.NewUnaryHandler(
		PlatformServiceGetSdlBySchemaVersionProcedure,
		svc.GetSdlBySchemaVersion,
		connect.WithSchema(platformServiceGetSdlBySchemaVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetChangelogBySchemaVersionHandler := connect.NewUnaryHandler(
		PlatformServiceGetChangelogBySchemaVersionProcedure,
		svc.GetChangelogBySchemaVersion,
		connect.WithSchema(platformServiceGetChangelogBySchemaVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetUserAccessibleResourcesHandler := connect.NewUnaryHandler(
		PlatformServiceGetUserAccessibleResourcesProcedure,
		svc.GetUserAccessibleResources,
		connect.WithSchema(platformServiceGetUserAccessibleResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateFeatureSettingsHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateFeatureSettingsProcedure,
		svc.UpdateFeatureSettings,
		connect.WithSchema(platformServiceUpdateFeatureSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceAddSubgraphMemberHandler := connect.NewUnaryHandler(
		PlatformServiceAddSubgraphMemberProcedure,
		svc.AddSubgraphMember,
		connect.WithSchema(platformServiceAddSubgraphMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceRemoveSubgraphMemberHandler := connect.NewUnaryHandler(
		PlatformServiceRemoveSubgraphMemberProcedure,
		svc.RemoveSubgraphMember,
		connect.WithSchema(platformServiceRemoveSubgraphMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSubgraphMembersHandler := connect.NewUnaryHandler(
		PlatformServiceGetSubgraphMembersProcedure,
		svc.GetSubgraphMembers,
		connect.WithSchema(platformServiceGetSubgraphMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateDiscussionHandler := connect.NewUnaryHandler(
		PlatformServiceCreateDiscussionProcedure,
		svc.CreateDiscussion,
		connect.WithSchema(platformServiceCreateDiscussionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceReplyToDiscussionHandler := connect.NewUnaryHandler(
		PlatformServiceReplyToDiscussionProcedure,
		svc.ReplyToDiscussion,
		connect.WithSchema(platformServiceReplyToDiscussionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetAllDiscussionsHandler := connect.NewUnaryHandler(
		PlatformServiceGetAllDiscussionsProcedure,
		svc.GetAllDiscussions,
		connect.WithSchema(platformServiceGetAllDiscussionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateDiscussionCommentHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateDiscussionCommentProcedure,
		svc.UpdateDiscussionComment,
		connect.WithSchema(platformServiceUpdateDiscussionCommentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteDiscussionCommentHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteDiscussionCommentProcedure,
		svc.DeleteDiscussionComment,
		connect.WithSchema(platformServiceDeleteDiscussionCommentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetDiscussionHandler := connect.NewUnaryHandler(
		PlatformServiceGetDiscussionProcedure,
		svc.GetDiscussion,
		connect.WithSchema(platformServiceGetDiscussionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetDiscussionSchemasHandler := connect.NewUnaryHandler(
		PlatformServiceGetDiscussionSchemasProcedure,
		svc.GetDiscussionSchemas,
		connect.WithSchema(platformServiceGetDiscussionSchemasMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceSetDiscussionResolutionHandler := connect.NewUnaryHandler(
		PlatformServiceSetDiscussionResolutionProcedure,
		svc.SetDiscussionResolution,
		connect.WithSchema(platformServiceSetDiscussionResolutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceAddReadmeHandler := connect.NewUnaryHandler(
		PlatformServiceAddReadmeProcedure,
		svc.AddReadme,
		connect.WithSchema(platformServiceAddReadmeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetUserAccessiblePermissionsHandler := connect.NewUnaryHandler(
		PlatformServiceGetUserAccessiblePermissionsProcedure,
		svc.GetUserAccessiblePermissions,
		connect.WithSchema(platformServiceGetUserAccessiblePermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateFeatureFlagHandler := connect.NewUnaryHandler(
		PlatformServiceCreateFeatureFlagProcedure,
		svc.CreateFeatureFlag,
		connect.WithSchema(platformServiceCreateFeatureFlagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceDeleteFeatureFlagHandler := connect.NewUnaryHandler(
		PlatformServiceDeleteFeatureFlagProcedure,
		svc.DeleteFeatureFlag,
		connect.WithSchema(platformServiceDeleteFeatureFlagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdateFeatureFlagHandler := connect.NewUnaryHandler(
		PlatformServiceUpdateFeatureFlagProcedure,
		svc.UpdateFeatureFlag,
		connect.WithSchema(platformServiceUpdateFeatureFlagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceEnableFeatureFlagHandler := connect.NewUnaryHandler(
		PlatformServiceEnableFeatureFlagProcedure,
		svc.EnableFeatureFlag,
		connect.WithSchema(platformServiceEnableFeatureFlagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetAnalyticsViewHandler := connect.NewUnaryHandler(
		PlatformServiceGetAnalyticsViewProcedure,
		svc.GetAnalyticsView,
		connect.WithSchema(platformServiceGetAnalyticsViewMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetDashboardAnalyticsViewHandler := connect.NewUnaryHandler(
		PlatformServiceGetDashboardAnalyticsViewProcedure,
		svc.GetDashboardAnalyticsView,
		connect.WithSchema(platformServiceGetDashboardAnalyticsViewMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetTraceHandler := connect.NewUnaryHandler(
		PlatformServiceGetTraceProcedure,
		svc.GetTrace,
		connect.WithSchema(platformServiceGetTraceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetGraphMetricsHandler := connect.NewUnaryHandler(
		PlatformServiceGetGraphMetricsProcedure,
		svc.GetGraphMetrics,
		connect.WithSchema(platformServiceGetGraphMetricsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetMetricsErrorRateHandler := connect.NewUnaryHandler(
		PlatformServiceGetMetricsErrorRateProcedure,
		svc.GetMetricsErrorRate,
		connect.WithSchema(platformServiceGetMetricsErrorRateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSubgraphMetricsHandler := connect.NewUnaryHandler(
		PlatformServiceGetSubgraphMetricsProcedure,
		svc.GetSubgraphMetrics,
		connect.WithSchema(platformServiceGetSubgraphMetricsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetSubgraphMetricsErrorRateHandler := connect.NewUnaryHandler(
		PlatformServiceGetSubgraphMetricsErrorRateProcedure,
		svc.GetSubgraphMetricsErrorRate,
		connect.WithSchema(platformServiceGetSubgraphMetricsErrorRateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFieldUsageHandler := connect.NewUnaryHandler(
		PlatformServiceGetFieldUsageProcedure,
		svc.GetFieldUsage,
		connect.WithSchema(platformServiceGetFieldUsageMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetOrganizationRequestsCountHandler := connect.NewUnaryHandler(
		PlatformServiceGetOrganizationRequestsCountProcedure,
		svc.GetOrganizationRequestsCount,
		connect.WithSchema(platformServiceGetOrganizationRequestsCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		PlatformServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(platformServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceEnableLintingForTheNamespaceHandler := connect.NewUnaryHandler(
		PlatformServiceEnableLintingForTheNamespaceProcedure,
		svc.EnableLintingForTheNamespace,
		connect.WithSchema(platformServiceEnableLintingForTheNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceConfigureNamespaceLintConfigHandler := connect.NewUnaryHandler(
		PlatformServiceConfigureNamespaceLintConfigProcedure,
		svc.ConfigureNamespaceLintConfig,
		connect.WithSchema(platformServiceConfigureNamespaceLintConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetNamespaceLintConfigHandler := connect.NewUnaryHandler(
		PlatformServiceGetNamespaceLintConfigProcedure,
		svc.GetNamespaceLintConfig,
		connect.WithSchema(platformServiceGetNamespaceLintConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceEnableGraphPruningHandler := connect.NewUnaryHandler(
		PlatformServiceEnableGraphPruningProcedure,
		svc.EnableGraphPruning,
		connect.WithSchema(platformServiceEnableGraphPruningMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceConfigureNamespaceGraphPruningConfigHandler := connect.NewUnaryHandler(
		PlatformServiceConfigureNamespaceGraphPruningConfigProcedure,
		svc.ConfigureNamespaceGraphPruningConfig,
		connect.WithSchema(platformServiceConfigureNamespaceGraphPruningConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetNamespaceGraphPruningConfigHandler := connect.NewUnaryHandler(
		PlatformServiceGetNamespaceGraphPruningConfigProcedure,
		svc.GetNamespaceGraphPruningConfig,
		connect.WithSchema(platformServiceGetNamespaceGraphPruningConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFeatureFlagsHandler := connect.NewUnaryHandler(
		PlatformServiceGetFeatureFlagsProcedure,
		svc.GetFeatureFlags,
		connect.WithSchema(platformServiceGetFeatureFlagsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFeatureFlagByNameHandler := connect.NewUnaryHandler(
		PlatformServiceGetFeatureFlagByNameProcedure,
		svc.GetFeatureFlagByName,
		connect.WithSchema(platformServiceGetFeatureFlagByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFeatureSubgraphsByFeatureFlagHandler := connect.NewUnaryHandler(
		PlatformServiceGetFeatureSubgraphsByFeatureFlagProcedure,
		svc.GetFeatureSubgraphsByFeatureFlag,
		connect.WithSchema(platformServiceGetFeatureSubgraphsByFeatureFlagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFeatureSubgraphsHandler := connect.NewUnaryHandler(
		PlatformServiceGetFeatureSubgraphsProcedure,
		svc.GetFeatureSubgraphs,
		connect.WithSchema(platformServiceGetFeatureSubgraphsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetFeatureFlagsByFederatedGraphHandler := connect.NewUnaryHandler(
		PlatformServiceGetFeatureFlagsByFederatedGraphProcedure,
		svc.GetFeatureFlagsByFederatedGraph,
		connect.WithSchema(platformServiceGetFeatureFlagsByFederatedGraphMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetBillingPlansHandler := connect.NewUnaryHandler(
		PlatformServiceGetBillingPlansProcedure,
		svc.GetBillingPlans,
		connect.WithSchema(platformServiceGetBillingPlansMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateCheckoutSessionHandler := connect.NewUnaryHandler(
		PlatformServiceCreateCheckoutSessionProcedure,
		svc.CreateCheckoutSession,
		connect.WithSchema(platformServiceCreateCheckoutSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceCreateBillingPortalSessionHandler := connect.NewUnaryHandler(
		PlatformServiceCreateBillingPortalSessionProcedure,
		svc.CreateBillingPortalSession,
		connect.WithSchema(platformServiceCreateBillingPortalSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpgradePlanHandler := connect.NewUnaryHandler(
		PlatformServiceUpgradePlanProcedure,
		svc.UpgradePlan,
		connect.WithSchema(platformServiceUpgradePlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wg.cosmo.platform.v1.PlatformService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlatformServiceCreateNamespaceProcedure:
			platformServiceCreateNamespaceHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteNamespaceProcedure:
			platformServiceDeleteNamespaceHandler.ServeHTTP(w, r)
		case PlatformServiceRenameNamespaceProcedure:
			platformServiceRenameNamespaceHandler.ServeHTTP(w, r)
		case PlatformServiceGetNamespacesProcedure:
			platformServiceGetNamespacesHandler.ServeHTTP(w, r)
		case PlatformServiceCreateContractProcedure:
			platformServiceCreateContractHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateContractProcedure:
			platformServiceUpdateContractHandler.ServeHTTP(w, r)
		case PlatformServiceMoveFederatedGraphProcedure:
			platformServiceMoveFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceMoveSubgraphProcedure:
			platformServiceMoveSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceMoveMonographProcedure:
			platformServiceMoveMonographHandler.ServeHTTP(w, r)
		case PlatformServiceCreateMonographProcedure:
			platformServiceCreateMonographHandler.ServeHTTP(w, r)
		case PlatformServicePublishMonographProcedure:
			platformServicePublishMonographHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteMonographProcedure:
			platformServiceDeleteMonographHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateMonographProcedure:
			platformServiceUpdateMonographHandler.ServeHTTP(w, r)
		case PlatformServiceMigrateMonographProcedure:
			platformServiceMigrateMonographHandler.ServeHTTP(w, r)
		case PlatformServiceCreateFederatedSubgraphProcedure:
			platformServiceCreateFederatedSubgraphHandler.ServeHTTP(w, r)
		case PlatformServicePublishFederatedSubgraphProcedure:
			platformServicePublishFederatedSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceCreateFederatedGraphProcedure:
			platformServiceCreateFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteFederatedGraphProcedure:
			platformServiceDeleteFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteFederatedSubgraphProcedure:
			platformServiceDeleteFederatedSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceCheckSubgraphSchemaProcedure:
			platformServiceCheckSubgraphSchemaHandler.ServeHTTP(w, r)
		case PlatformServiceFixSubgraphSchemaProcedure:
			platformServiceFixSubgraphSchemaHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateFederatedGraphProcedure:
			platformServiceUpdateFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateSubgraphProcedure:
			platformServiceUpdateSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceCheckFederatedGraphProcedure:
			platformServiceCheckFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceWhoAmIProcedure:
			platformServiceWhoAmIHandler.ServeHTTP(w, r)
		case PlatformServiceGenerateRouterTokenProcedure:
			platformServiceGenerateRouterTokenHandler.ServeHTTP(w, r)
		case PlatformServiceGetRouterTokensProcedure:
			platformServiceGetRouterTokensHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteRouterTokenProcedure:
			platformServiceDeleteRouterTokenHandler.ServeHTTP(w, r)
		case PlatformServicePublishPersistedOperationsProcedure:
			platformServicePublishPersistedOperationsHandler.ServeHTTP(w, r)
		case PlatformServiceGetPersistedOperationsProcedure:
			platformServiceGetPersistedOperationsHandler.ServeHTTP(w, r)
		case PlatformServiceGetAuditLogsProcedure:
			platformServiceGetAuditLogsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphsProcedure:
			platformServiceGetFederatedGraphsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphsBySubgraphLabelsProcedure:
			platformServiceGetFederatedGraphsBySubgraphLabelsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphByNameProcedure:
			platformServiceGetFederatedGraphByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphSDLByNameProcedure:
			platformServiceGetFederatedGraphSDLByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphsProcedure:
			platformServiceGetSubgraphsHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphByNameProcedure:
			platformServiceGetSubgraphByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphSDLFromLatestCompositionProcedure:
			platformServiceGetSubgraphSDLFromLatestCompositionHandler.ServeHTTP(w, r)
		case PlatformServiceGetLatestSubgraphSDLProcedure:
			platformServiceGetLatestSubgraphSDLHandler.ServeHTTP(w, r)
		case PlatformServiceGetChecksByFederatedGraphNameProcedure:
			platformServiceGetChecksByFederatedGraphNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetCheckSummaryProcedure:
			platformServiceGetCheckSummaryHandler.ServeHTTP(w, r)
		case PlatformServiceGetCheckOperationsProcedure:
			platformServiceGetCheckOperationsHandler.ServeHTTP(w, r)
		case PlatformServiceForceCheckSuccessProcedure:
			platformServiceForceCheckSuccessHandler.ServeHTTP(w, r)
		case PlatformServiceCreateOperationOverridesProcedure:
			platformServiceCreateOperationOverridesHandler.ServeHTTP(w, r)
		case PlatformServiceRemoveOperationOverridesProcedure:
			platformServiceRemoveOperationOverridesHandler.ServeHTTP(w, r)
		case PlatformServiceCreateOperationIgnoreAllOverrideProcedure:
			platformServiceCreateOperationIgnoreAllOverrideHandler.ServeHTTP(w, r)
		case PlatformServiceRemoveOperationIgnoreAllOverrideProcedure:
			platformServiceRemoveOperationIgnoreAllOverrideHandler.ServeHTTP(w, r)
		case PlatformServiceGetOperationOverridesProcedure:
			platformServiceGetOperationOverridesHandler.ServeHTTP(w, r)
		case PlatformServiceGetAllOverridesProcedure:
			platformServiceGetAllOverridesHandler.ServeHTTP(w, r)
		case PlatformServiceToggleChangeOverridesForAllOperationsProcedure:
			platformServiceToggleChangeOverridesForAllOperationsHandler.ServeHTTP(w, r)
		case PlatformServiceCreateIgnoreOverridesForAllOperationsProcedure:
			platformServiceCreateIgnoreOverridesForAllOperationsHandler.ServeHTTP(w, r)
		case PlatformServiceGetOperationContentProcedure:
			platformServiceGetOperationContentHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphChangelogProcedure:
			platformServiceGetFederatedGraphChangelogHandler.ServeHTTP(w, r)
		case PlatformServiceCreateFederatedGraphTokenProcedure:
			platformServiceCreateFederatedGraphTokenHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationMembersProcedure:
			platformServiceGetOrganizationMembersHandler.ServeHTTP(w, r)
		case PlatformServiceGetPendingOrganizationMembersProcedure:
			platformServiceGetPendingOrganizationMembersHandler.ServeHTTP(w, r)
		case PlatformServiceIsMemberLimitReachedProcedure:
			platformServiceIsMemberLimitReachedHandler.ServeHTTP(w, r)
		case PlatformServiceInviteUserProcedure:
			platformServiceInviteUserHandler.ServeHTTP(w, r)
		case PlatformServiceGetAPIKeysProcedure:
			platformServiceGetAPIKeysHandler.ServeHTTP(w, r)
		case PlatformServiceCreateAPIKeyProcedure:
			platformServiceCreateAPIKeyHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteAPIKeyProcedure:
			platformServiceDeleteAPIKeyHandler.ServeHTTP(w, r)
		case PlatformServiceRemoveOrganizationMemberProcedure:
			platformServiceRemoveOrganizationMemberHandler.ServeHTTP(w, r)
		case PlatformServiceRemoveInvitationProcedure:
			platformServiceRemoveInvitationHandler.ServeHTTP(w, r)
		case PlatformServiceMigrateFromApolloProcedure:
			platformServiceMigrateFromApolloHandler.ServeHTTP(w, r)
		case PlatformServiceCreateOrganizationWebhookConfigProcedure:
			platformServiceCreateOrganizationWebhookConfigHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationWebhookConfigsProcedure:
			platformServiceGetOrganizationWebhookConfigsHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationWebhookMetaProcedure:
			platformServiceGetOrganizationWebhookMetaHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateOrganizationWebhookConfigProcedure:
			platformServiceUpdateOrganizationWebhookConfigHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteOrganizationWebhookConfigProcedure:
			platformServiceDeleteOrganizationWebhookConfigHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationWebhookHistoryProcedure:
			platformServiceGetOrganizationWebhookHistoryHandler.ServeHTTP(w, r)
		case PlatformServiceGetWebhookDeliveryDetailsProcedure:
			platformServiceGetWebhookDeliveryDetailsHandler.ServeHTTP(w, r)
		case PlatformServiceRedeliverWebhookProcedure:
			platformServiceRedeliverWebhookHandler.ServeHTTP(w, r)
		case PlatformServiceCreateIntegrationProcedure:
			platformServiceCreateIntegrationHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationIntegrationsProcedure:
			platformServiceGetOrganizationIntegrationsHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateIntegrationConfigProcedure:
			platformServiceUpdateIntegrationConfigHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteIntegrationProcedure:
			platformServiceDeleteIntegrationHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteUserProcedure:
			platformServiceDeleteUserHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteOrganizationProcedure:
			platformServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case PlatformServiceLeaveOrganizationProcedure:
			platformServiceLeaveOrganizationHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateOrganizationDetailsProcedure:
			platformServiceUpdateOrganizationDetailsHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateOrgMemberRoleProcedure:
			platformServiceUpdateOrgMemberRoleHandler.ServeHTTP(w, r)
		case PlatformServiceIsGitHubAppInstalledProcedure:
			platformServiceIsGitHubAppInstalledHandler.ServeHTTP(w, r)
		case PlatformServiceCreateOIDCProviderProcedure:
			platformServiceCreateOIDCProviderHandler.ServeHTTP(w, r)
		case PlatformServiceGetOIDCProviderProcedure:
			platformServiceGetOIDCProviderHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteOIDCProviderProcedure:
			platformServiceDeleteOIDCProviderHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateIDPMappersProcedure:
			platformServiceUpdateIDPMappersHandler.ServeHTTP(w, r)
		case PlatformServiceGetClientsProcedure:
			platformServiceGetClientsHandler.ServeHTTP(w, r)
		case PlatformServiceGetRoutersProcedure:
			platformServiceGetRoutersHandler.ServeHTTP(w, r)
		case PlatformServiceGetInvitationsProcedure:
			platformServiceGetInvitationsHandler.ServeHTTP(w, r)
		case PlatformServiceAcceptOrDeclineInvitationProcedure:
			platformServiceAcceptOrDeclineInvitationHandler.ServeHTTP(w, r)
		case PlatformServiceGetCompositionsProcedure:
			platformServiceGetCompositionsHandler.ServeHTTP(w, r)
		case PlatformServiceGetCompositionDetailsProcedure:
			platformServiceGetCompositionDetailsHandler.ServeHTTP(w, r)
		case PlatformServiceGetSdlBySchemaVersionProcedure:
			platformServiceGetSdlBySchemaVersionHandler.ServeHTTP(w, r)
		case PlatformServiceGetChangelogBySchemaVersionProcedure:
			platformServiceGetChangelogBySchemaVersionHandler.ServeHTTP(w, r)
		case PlatformServiceGetUserAccessibleResourcesProcedure:
			platformServiceGetUserAccessibleResourcesHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateFeatureSettingsProcedure:
			platformServiceUpdateFeatureSettingsHandler.ServeHTTP(w, r)
		case PlatformServiceAddSubgraphMemberProcedure:
			platformServiceAddSubgraphMemberHandler.ServeHTTP(w, r)
		case PlatformServiceRemoveSubgraphMemberProcedure:
			platformServiceRemoveSubgraphMemberHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphMembersProcedure:
			platformServiceGetSubgraphMembersHandler.ServeHTTP(w, r)
		case PlatformServiceCreateDiscussionProcedure:
			platformServiceCreateDiscussionHandler.ServeHTTP(w, r)
		case PlatformServiceReplyToDiscussionProcedure:
			platformServiceReplyToDiscussionHandler.ServeHTTP(w, r)
		case PlatformServiceGetAllDiscussionsProcedure:
			platformServiceGetAllDiscussionsHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateDiscussionCommentProcedure:
			platformServiceUpdateDiscussionCommentHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteDiscussionCommentProcedure:
			platformServiceDeleteDiscussionCommentHandler.ServeHTTP(w, r)
		case PlatformServiceGetDiscussionProcedure:
			platformServiceGetDiscussionHandler.ServeHTTP(w, r)
		case PlatformServiceGetDiscussionSchemasProcedure:
			platformServiceGetDiscussionSchemasHandler.ServeHTTP(w, r)
		case PlatformServiceSetDiscussionResolutionProcedure:
			platformServiceSetDiscussionResolutionHandler.ServeHTTP(w, r)
		case PlatformServiceAddReadmeProcedure:
			platformServiceAddReadmeHandler.ServeHTTP(w, r)
		case PlatformServiceGetUserAccessiblePermissionsProcedure:
			platformServiceGetUserAccessiblePermissionsHandler.ServeHTTP(w, r)
		case PlatformServiceCreateFeatureFlagProcedure:
			platformServiceCreateFeatureFlagHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteFeatureFlagProcedure:
			platformServiceDeleteFeatureFlagHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateFeatureFlagProcedure:
			platformServiceUpdateFeatureFlagHandler.ServeHTTP(w, r)
		case PlatformServiceEnableFeatureFlagProcedure:
			platformServiceEnableFeatureFlagHandler.ServeHTTP(w, r)
		case PlatformServiceGetAnalyticsViewProcedure:
			platformServiceGetAnalyticsViewHandler.ServeHTTP(w, r)
		case PlatformServiceGetDashboardAnalyticsViewProcedure:
			platformServiceGetDashboardAnalyticsViewHandler.ServeHTTP(w, r)
		case PlatformServiceGetTraceProcedure:
			platformServiceGetTraceHandler.ServeHTTP(w, r)
		case PlatformServiceGetGraphMetricsProcedure:
			platformServiceGetGraphMetricsHandler.ServeHTTP(w, r)
		case PlatformServiceGetMetricsErrorRateProcedure:
			platformServiceGetMetricsErrorRateHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphMetricsProcedure:
			platformServiceGetSubgraphMetricsHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphMetricsErrorRateProcedure:
			platformServiceGetSubgraphMetricsErrorRateHandler.ServeHTTP(w, r)
		case PlatformServiceGetFieldUsageProcedure:
			platformServiceGetFieldUsageHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationRequestsCountProcedure:
			platformServiceGetOrganizationRequestsCountHandler.ServeHTTP(w, r)
		case PlatformServiceCreateOrganizationProcedure:
			platformServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case PlatformServiceEnableLintingForTheNamespaceProcedure:
			platformServiceEnableLintingForTheNamespaceHandler.ServeHTTP(w, r)
		case PlatformServiceConfigureNamespaceLintConfigProcedure:
			platformServiceConfigureNamespaceLintConfigHandler.ServeHTTP(w, r)
		case PlatformServiceGetNamespaceLintConfigProcedure:
			platformServiceGetNamespaceLintConfigHandler.ServeHTTP(w, r)
		case PlatformServiceEnableGraphPruningProcedure:
			platformServiceEnableGraphPruningHandler.ServeHTTP(w, r)
		case PlatformServiceConfigureNamespaceGraphPruningConfigProcedure:
			platformServiceConfigureNamespaceGraphPruningConfigHandler.ServeHTTP(w, r)
		case PlatformServiceGetNamespaceGraphPruningConfigProcedure:
			platformServiceGetNamespaceGraphPruningConfigHandler.ServeHTTP(w, r)
		case PlatformServiceGetFeatureFlagsProcedure:
			platformServiceGetFeatureFlagsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFeatureFlagByNameProcedure:
			platformServiceGetFeatureFlagByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetFeatureSubgraphsByFeatureFlagProcedure:
			platformServiceGetFeatureSubgraphsByFeatureFlagHandler.ServeHTTP(w, r)
		case PlatformServiceGetFeatureSubgraphsProcedure:
			platformServiceGetFeatureSubgraphsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFeatureFlagsByFederatedGraphProcedure:
			platformServiceGetFeatureFlagsByFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceGetBillingPlansProcedure:
			platformServiceGetBillingPlansHandler.ServeHTTP(w, r)
		case PlatformServiceCreateCheckoutSessionProcedure:
			platformServiceCreateCheckoutSessionHandler.ServeHTTP(w, r)
		case PlatformServiceCreateBillingPortalSessionProcedure:
			platformServiceCreateBillingPortalSessionHandler.ServeHTTP(w, r)
		case PlatformServiceUpgradePlanProcedure:
			platformServiceUpgradePlanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlatformServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlatformServiceHandler struct{}

func (UnimplementedPlatformServiceHandler) CreateNamespace(context.Context, *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateNamespace is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteNamespace(context.Context, *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteNamespace is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RenameNamespace(context.Context, *connect.Request[v1.RenameNamespaceRequest]) (*connect.Response[v1.RenameNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RenameNamespace is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetNamespaces(context.Context, *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetNamespaces is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateContract(context.Context, *connect.Request[v1.CreateContractRequest]) (*connect.Response[v1.CreateContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateContract is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateContract is not implemented"))
}

func (UnimplementedPlatformServiceHandler) MoveFederatedGraph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.MoveFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) MoveSubgraph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.MoveSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) MoveMonograph(context.Context, *connect.Request[v1.MoveGraphRequest]) (*connect.Response[v1.MoveGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.MoveMonograph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateMonograph(context.Context, *connect.Request[v1.CreateMonographRequest]) (*connect.Response[v1.CreateMonographResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateMonograph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) PublishMonograph(context.Context, *connect.Request[v1.PublishMonographRequest]) (*connect.Response[v1.PublishMonographResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.PublishMonograph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteMonograph(context.Context, *connect.Request[v1.DeleteMonographRequest]) (*connect.Response[v1.DeleteMonographResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteMonograph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateMonograph(context.Context, *connect.Request[v1.UpdateMonographRequest]) (*connect.Response[v1.UpdateMonographResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateMonograph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) MigrateMonograph(context.Context, *connect.Request[v1.MigrateMonographRequest]) (*connect.Response[v1.MigrateMonographResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.MigrateMonograph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateFederatedSubgraph(context.Context, *connect.Request[v1.CreateFederatedSubgraphRequest]) (*connect.Response[v1.CreateFederatedSubgraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) PublishFederatedSubgraph(context.Context, *connect.Request[v1.PublishFederatedSubgraphRequest]) (*connect.Response[v1.PublishFederatedSubgraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateFederatedGraph(context.Context, *connect.Request[v1.CreateFederatedGraphRequest]) (*connect.Response[v1.CreateFederatedGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteFederatedGraph(context.Context, *connect.Request[v1.DeleteFederatedGraphRequest]) (*connect.Response[v1.DeleteFederatedGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteFederatedSubgraph(context.Context, *connect.Request[v1.DeleteFederatedSubgraphRequest]) (*connect.Response[v1.DeleteFederatedSubgraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CheckSubgraphSchema(context.Context, *connect.Request[v1.CheckSubgraphSchemaRequest]) (*connect.Response[v1.CheckSubgraphSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema is not implemented"))
}

func (UnimplementedPlatformServiceHandler) FixSubgraphSchema(context.Context, *connect.Request[v1.FixSubgraphSchemaRequest]) (*connect.Response[v1.FixSubgraphSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateFederatedGraph(context.Context, *connect.Request[v1.UpdateFederatedGraphRequest]) (*connect.Response[v1.UpdateFederatedGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateSubgraph(context.Context, *connect.Request[v1.UpdateSubgraphRequest]) (*connect.Response[v1.UpdateSubgraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CheckFederatedGraph(context.Context, *connect.Request[v1.CheckFederatedGraphRequest]) (*connect.Response[v1.CheckFederatedGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.WhoAmI is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GenerateRouterToken(context.Context, *connect.Request[v1.GenerateRouterTokenRequest]) (*connect.Response[v1.GenerateRouterTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GenerateRouterToken is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetRouterTokens(context.Context, *connect.Request[v1.GetRouterTokensRequest]) (*connect.Response[v1.GetRouterTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetRouterTokens is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteRouterToken(context.Context, *connect.Request[v1.DeleteRouterTokenRequest]) (*connect.Response[v1.DeleteRouterTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteRouterToken is not implemented"))
}

func (UnimplementedPlatformServiceHandler) PublishPersistedOperations(context.Context, *connect.Request[v1.PublishPersistedOperationsRequest]) (*connect.Response[v1.PublishPersistedOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.PublishPersistedOperations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetPersistedOperations(context.Context, *connect.Request[v1.GetPersistedOperationsRequest]) (*connect.Response[v1.GetPersistedOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetPersistedOperations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAuditLogs(context.Context, *connect.Request[v1.GetAuditLogsRequest]) (*connect.Response[v1.GetAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAuditLogs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphs(context.Context, *connect.Request[v1.GetFederatedGraphsRequest]) (*connect.Response[v1.GetFederatedGraphsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphsBySubgraphLabels(context.Context, *connect.Request[v1.GetFederatedGraphsBySubgraphLabelsRequest]) (*connect.Response[v1.GetFederatedGraphsBySubgraphLabelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphsBySubgraphLabels is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphByName(context.Context, *connect.Request[v1.GetFederatedGraphByNameRequest]) (*connect.Response[v1.GetFederatedGraphByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphSDLByName(context.Context, *connect.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect.Response[v1.GetFederatedGraphSDLByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphs(context.Context, *connect.Request[v1.GetSubgraphsRequest]) (*connect.Response[v1.GetSubgraphsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphByName(context.Context, *connect.Request[v1.GetSubgraphByNameRequest]) (*connect.Response[v1.GetSubgraphByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphSDLFromLatestComposition(context.Context, *connect.Request[v1.GetSubgraphSDLFromLatestCompositionRequest]) (*connect.Response[v1.GetSubgraphSDLFromLatestCompositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphSDLFromLatestComposition is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetLatestSubgraphSDL(context.Context, *connect.Request[v1.GetLatestSubgraphSDLRequest]) (*connect.Response[v1.GetLatestSubgraphSDLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetLatestSubgraphSDL is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetChecksByFederatedGraphName(context.Context, *connect.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect.Response[v1.GetChecksByFederatedGraphNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetCheckSummary(context.Context, *connect.Request[v1.GetCheckSummaryRequest]) (*connect.Response[v1.GetCheckSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetCheckSummary is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetCheckOperations(context.Context, *connect.Request[v1.GetCheckOperationsRequest]) (*connect.Response[v1.GetCheckOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetCheckOperations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ForceCheckSuccess(context.Context, *connect.Request[v1.ForceCheckSuccessRequest]) (*connect.Response[v1.ForceCheckSuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.ForceCheckSuccess is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateOperationOverrides(context.Context, *connect.Request[v1.CreateOperationOverridesRequest]) (*connect.Response[v1.CreateOperationOverridesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateOperationOverrides is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RemoveOperationOverrides(context.Context, *connect.Request[v1.RemoveOperationOverridesRequest]) (*connect.Response[v1.RemoveOperationOverridesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RemoveOperationOverrides is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateOperationIgnoreAllOverride(context.Context, *connect.Request[v1.CreateOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.CreateOperationIgnoreAllOverrideResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateOperationIgnoreAllOverride is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RemoveOperationIgnoreAllOverride(context.Context, *connect.Request[v1.RemoveOperationIgnoreAllOverrideRequest]) (*connect.Response[v1.RemoveOperationIgnoreAllOverrideResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RemoveOperationIgnoreAllOverride is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOperationOverrides(context.Context, *connect.Request[v1.GetOperationOverridesRequest]) (*connect.Response[v1.GetOperationOverridesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOperationOverrides is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAllOverrides(context.Context, *connect.Request[v1.GetAllOverridesRequest]) (*connect.Response[v1.GetAllOverridesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAllOverrides is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ToggleChangeOverridesForAllOperations(context.Context, *connect.Request[v1.ToggleChangeOverridesForAllOperationsRequest]) (*connect.Response[v1.ToggleChangeOverridesForAllOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.ToggleChangeOverridesForAllOperations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateIgnoreOverridesForAllOperations(context.Context, *connect.Request[v1.CreateIgnoreOverridesForAllOperationsRequest]) (*connect.Response[v1.CreateIgnoreOverridesForAllOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateIgnoreOverridesForAllOperations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOperationContent(context.Context, *connect.Request[v1.GetOperationContentRequest]) (*connect.Response[v1.GetOperationContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOperationContent is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphChangelog(context.Context, *connect.Request[v1.GetFederatedGraphChangelogRequest]) (*connect.Response[v1.GetFederatedGraphChangelogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateFederatedGraphToken(context.Context, *connect.Request[v1.CreateFederatedGraphTokenRequest]) (*connect.Response[v1.CreateFederatedGraphTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationMembers(context.Context, *connect.Request[v1.GetOrganizationMembersRequest]) (*connect.Response[v1.GetOrganizationMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetPendingOrganizationMembers(context.Context, *connect.Request[v1.GetPendingOrganizationMembersRequest]) (*connect.Response[v1.GetPendingOrganizationMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetPendingOrganizationMembers is not implemented"))
}

func (UnimplementedPlatformServiceHandler) IsMemberLimitReached(context.Context, *connect.Request[v1.IsMemberLimitReachedRequest]) (*connect.Response[v1.IsMemberLimitReachedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.IsMemberLimitReached is not implemented"))
}

func (UnimplementedPlatformServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.InviteUser is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAPIKeys(context.Context, *connect.Request[v1.GetAPIKeysRequest]) (*connect.Response[v1.GetAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAPIKeys is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateAPIKey is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteAPIKey(context.Context, *connect.Request[v1.DeleteAPIKeyRequest]) (*connect.Response[v1.DeleteAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteAPIKey is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RemoveOrganizationMember(context.Context, *connect.Request[v1.RemoveOrganizationMemberRequest]) (*connect.Response[v1.RemoveOrganizationMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RemoveOrganizationMember is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RemoveInvitation(context.Context, *connect.Request[v1.RemoveInvitationRequest]) (*connect.Response[v1.RemoveInvitationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RemoveInvitation is not implemented"))
}

func (UnimplementedPlatformServiceHandler) MigrateFromApollo(context.Context, *connect.Request[v1.MigrateFromApolloRequest]) (*connect.Response[v1.MigrateFromApolloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.MigrateFromApollo is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateOrganizationWebhookConfig(context.Context, *connect.Request[v1.CreateOrganizationWebhookConfigRequest]) (*connect.Response[v1.CreateOrganizationWebhookConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateOrganizationWebhookConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationWebhookConfigs(context.Context, *connect.Request[v1.GetOrganizationWebhookConfigsRequest]) (*connect.Response[v1.GetOrganizationWebhookConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookConfigs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationWebhookMeta(context.Context, *connect.Request[v1.GetOrganizationWebhookMetaRequest]) (*connect.Response[v1.GetOrganizationWebhookMetaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookMeta is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateOrganizationWebhookConfig(context.Context, *connect.Request[v1.UpdateOrganizationWebhookConfigRequest]) (*connect.Response[v1.UpdateOrganizationWebhookConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateOrganizationWebhookConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteOrganizationWebhookConfig(context.Context, *connect.Request[v1.DeleteOrganizationWebhookConfigRequest]) (*connect.Response[v1.DeleteOrganizationWebhookConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteOrganizationWebhookConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationWebhookHistory(context.Context, *connect.Request[v1.GetOrganizationWebhookHistoryRequest]) (*connect.Response[v1.GetOrganizationWebhookHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationWebhookHistory is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetWebhookDeliveryDetails(context.Context, *connect.Request[v1.GetWebhookDeliveryDetailsRequest]) (*connect.Response[v1.GetWebhookDeliveryDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetWebhookDeliveryDetails is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RedeliverWebhook(context.Context, *connect.Request[v1.RedeliverWebhookRequest]) (*connect.Response[v1.RedeliverWebhookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RedeliverWebhook is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateIntegration(context.Context, *connect.Request[v1.CreateIntegrationRequest]) (*connect.Response[v1.CreateIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateIntegration is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationIntegrations(context.Context, *connect.Request[v1.GetOrganizationIntegrationsRequest]) (*connect.Response[v1.GetOrganizationIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationIntegrations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateIntegrationConfig(context.Context, *connect.Request[v1.UpdateIntegrationConfigRequest]) (*connect.Response[v1.UpdateIntegrationConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateIntegrationConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteIntegration(context.Context, *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteIntegration is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteUser is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteOrganization is not implemented"))
}

func (UnimplementedPlatformServiceHandler) LeaveOrganization(context.Context, *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.LeaveOrganization is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateOrganizationDetails(context.Context, *connect.Request[v1.UpdateOrganizationDetailsRequest]) (*connect.Response[v1.UpdateOrganizationDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateOrganizationDetails is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateOrgMemberRole(context.Context, *connect.Request[v1.UpdateOrgMemberRoleRequest]) (*connect.Response[v1.UpdateOrgMemberRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateOrgMemberRole is not implemented"))
}

func (UnimplementedPlatformServiceHandler) IsGitHubAppInstalled(context.Context, *connect.Request[v1.IsGitHubAppInstalledRequest]) (*connect.Response[v1.IsGitHubAppInstalledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.IsGitHubAppInstalled is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateOIDCProvider(context.Context, *connect.Request[v1.CreateOIDCProviderRequest]) (*connect.Response[v1.CreateOIDCProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateOIDCProvider is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOIDCProvider(context.Context, *connect.Request[v1.GetOIDCProviderRequest]) (*connect.Response[v1.GetOIDCProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOIDCProvider is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteOIDCProvider(context.Context, *connect.Request[v1.DeleteOIDCProviderRequest]) (*connect.Response[v1.DeleteOIDCProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteOIDCProvider is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateIDPMappers(context.Context, *connect.Request[v1.UpdateIDPMappersRequest]) (*connect.Response[v1.UpdateIDPMappersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateIDPMappers is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetClients(context.Context, *connect.Request[v1.GetClientsRequest]) (*connect.Response[v1.GetClientsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetClients is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetRouters(context.Context, *connect.Request[v1.GetRoutersRequest]) (*connect.Response[v1.GetRoutersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetRouters is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetInvitations(context.Context, *connect.Request[v1.GetInvitationsRequest]) (*connect.Response[v1.GetInvitationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetInvitations is not implemented"))
}

func (UnimplementedPlatformServiceHandler) AcceptOrDeclineInvitation(context.Context, *connect.Request[v1.AcceptOrDeclineInvitationRequest]) (*connect.Response[v1.AcceptOrDeclineInvitationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.AcceptOrDeclineInvitation is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetCompositions(context.Context, *connect.Request[v1.GetCompositionsRequest]) (*connect.Response[v1.GetCompositionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetCompositions is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetCompositionDetails(context.Context, *connect.Request[v1.GetCompositionDetailsRequest]) (*connect.Response[v1.GetCompositionDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetCompositionDetails is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSdlBySchemaVersion(context.Context, *connect.Request[v1.GetSdlBySchemaVersionRequest]) (*connect.Response[v1.GetSdlBySchemaVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSdlBySchemaVersion is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetChangelogBySchemaVersion(context.Context, *connect.Request[v1.GetChangelogBySchemaVersionRequest]) (*connect.Response[v1.GetChangelogBySchemaVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetChangelogBySchemaVersion is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetUserAccessibleResources(context.Context, *connect.Request[v1.GetUserAccessibleResourcesRequest]) (*connect.Response[v1.GetUserAccessibleResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetUserAccessibleResources is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateFeatureSettings(context.Context, *connect.Request[v1.UpdateFeatureSettingsRequest]) (*connect.Response[v1.UpdateFeatureSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateFeatureSettings is not implemented"))
}

func (UnimplementedPlatformServiceHandler) AddSubgraphMember(context.Context, *connect.Request[v1.AddSubgraphMemberRequest]) (*connect.Response[v1.AddSubgraphMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.AddSubgraphMember is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RemoveSubgraphMember(context.Context, *connect.Request[v1.RemoveSubgraphMemberRequest]) (*connect.Response[v1.RemoveSubgraphMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RemoveSubgraphMember is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphMembers(context.Context, *connect.Request[v1.GetSubgraphMembersRequest]) (*connect.Response[v1.GetSubgraphMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphMembers is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateDiscussion(context.Context, *connect.Request[v1.CreateDiscussionRequest]) (*connect.Response[v1.CreateDiscussionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateDiscussion is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ReplyToDiscussion(context.Context, *connect.Request[v1.ReplyToDiscussionRequest]) (*connect.Response[v1.ReplyToDiscussionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.ReplyToDiscussion is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAllDiscussions(context.Context, *connect.Request[v1.GetAllDiscussionsRequest]) (*connect.Response[v1.GetAllDiscussionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAllDiscussions is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateDiscussionComment(context.Context, *connect.Request[v1.UpdateDiscussionCommentRequest]) (*connect.Response[v1.UpdateDiscussionCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateDiscussionComment is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteDiscussionComment(context.Context, *connect.Request[v1.DeleteDiscussionCommentRequest]) (*connect.Response[v1.DeleteDiscussionCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteDiscussionComment is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetDiscussion(context.Context, *connect.Request[v1.GetDiscussionRequest]) (*connect.Response[v1.GetDiscussionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetDiscussion is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetDiscussionSchemas(context.Context, *connect.Request[v1.GetDiscussionSchemasRequest]) (*connect.Response[v1.GetDiscussionSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetDiscussionSchemas is not implemented"))
}

func (UnimplementedPlatformServiceHandler) SetDiscussionResolution(context.Context, *connect.Request[v1.SetDiscussionResolutionRequest]) (*connect.Response[v1.SetDiscussionResolutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.SetDiscussionResolution is not implemented"))
}

func (UnimplementedPlatformServiceHandler) AddReadme(context.Context, *connect.Request[v1.AddReadmeRequest]) (*connect.Response[v1.AddReadmeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.AddReadme is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetUserAccessiblePermissions(context.Context, *connect.Request[v1.GetUserAccessiblePermissionsRequest]) (*connect.Response[v1.GetUserAccessiblePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetUserAccessiblePermissions is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateFeatureFlag(context.Context, *connect.Request[v1.CreateFeatureFlagRequest]) (*connect.Response[v1.CreateFeatureFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFeatureFlag is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteFeatureFlag(context.Context, *connect.Request[v1.DeleteFeatureFlagRequest]) (*connect.Response[v1.DeleteFeatureFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteFeatureFlag is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateFeatureFlag(context.Context, *connect.Request[v1.UpdateFeatureFlagRequest]) (*connect.Response[v1.UpdateFeatureFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateFeatureFlag is not implemented"))
}

func (UnimplementedPlatformServiceHandler) EnableFeatureFlag(context.Context, *connect.Request[v1.EnableFeatureFlagRequest]) (*connect.Response[v1.EnableFeatureFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.EnableFeatureFlag is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAnalyticsView(context.Context, *connect.Request[v1.GetAnalyticsViewRequest]) (*connect.Response[v1.GetAnalyticsViewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAnalyticsView is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetDashboardAnalyticsView(context.Context, *connect.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect.Response[v1.GetDashboardAnalyticsViewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetTrace(context.Context, *connect.Request[v1.GetTraceRequest]) (*connect.Response[v1.GetTraceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetTrace is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetGraphMetrics(context.Context, *connect.Request[v1.GetGraphMetricsRequest]) (*connect.Response[v1.GetGraphMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetGraphMetrics is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetMetricsErrorRate(context.Context, *connect.Request[v1.GetMetricsErrorRateRequest]) (*connect.Response[v1.GetMetricsErrorRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetMetricsErrorRate is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphMetrics(context.Context, *connect.Request[v1.GetSubgraphMetricsRequest]) (*connect.Response[v1.GetSubgraphMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphMetrics is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphMetricsErrorRate(context.Context, *connect.Request[v1.GetSubgraphMetricsErrorRateRequest]) (*connect.Response[v1.GetSubgraphMetricsErrorRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphMetricsErrorRate is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFieldUsage(context.Context, *connect.Request[v1.GetFieldUsageRequest]) (*connect.Response[v1.GetFieldUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFieldUsage is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationRequestsCount(context.Context, *connect.Request[v1.GetOrganizationRequestsCountRequest]) (*connect.Response[v1.GetOrganizationRequestsCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationRequestsCount is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateOrganization is not implemented"))
}

func (UnimplementedPlatformServiceHandler) EnableLintingForTheNamespace(context.Context, *connect.Request[v1.EnableLintingForTheNamespaceRequest]) (*connect.Response[v1.EnableLintingForTheNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.EnableLintingForTheNamespace is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ConfigureNamespaceLintConfig(context.Context, *connect.Request[v1.ConfigureNamespaceLintConfigRequest]) (*connect.Response[v1.ConfigureNamespaceLintConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceLintConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetNamespaceLintConfig(context.Context, *connect.Request[v1.GetNamespaceLintConfigRequest]) (*connect.Response[v1.GetNamespaceLintConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetNamespaceLintConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) EnableGraphPruning(context.Context, *connect.Request[v1.EnableGraphPruningRequest]) (*connect.Response[v1.EnableGraphPruningResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.EnableGraphPruning is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ConfigureNamespaceGraphPruningConfig(context.Context, *connect.Request[v1.ConfigureNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.ConfigureNamespaceGraphPruningConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.ConfigureNamespaceGraphPruningConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetNamespaceGraphPruningConfig(context.Context, *connect.Request[v1.GetNamespaceGraphPruningConfigRequest]) (*connect.Response[v1.GetNamespaceGraphPruningConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetNamespaceGraphPruningConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFeatureFlags(context.Context, *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFeatureFlags is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFeatureFlagByName(context.Context, *connect.Request[v1.GetFeatureFlagByNameRequest]) (*connect.Response[v1.GetFeatureFlagByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFeatureFlagByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFeatureSubgraphsByFeatureFlag(context.Context, *connect.Request[v1.GetFeatureSubgraphsByFeatureFlagRequest]) (*connect.Response[v1.GetFeatureSubgraphsByFeatureFlagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFeatureSubgraphsByFeatureFlag is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFeatureSubgraphs(context.Context, *connect.Request[v1.GetFeatureSubgraphsRequest]) (*connect.Response[v1.GetFeatureSubgraphsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFeatureSubgraphs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFeatureFlagsByFederatedGraph(context.Context, *connect.Request[v1.GetFeatureFlagsByFederatedGraphRequest]) (*connect.Response[v1.GetFeatureFlagsByFederatedGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFeatureFlagsByFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetBillingPlans(context.Context, *connect.Request[v1.GetBillingPlansRequest]) (*connect.Response[v1.GetBillingPlansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetBillingPlans is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateCheckoutSession is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateBillingPortalSession(context.Context, *connect.Request[v1.CreateBillingPortalSessionRequest]) (*connect.Response[v1.CreateBillingPortalSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateBillingPortalSession is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpgradePlan(context.Context, *connect.Request[v1.UpgradePlanRequest]) (*connect.Response[v1.UpgradePlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpgradePlan is not implemented"))
}
