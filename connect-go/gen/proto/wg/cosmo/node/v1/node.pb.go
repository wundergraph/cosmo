// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: wg/cosmo/node/v1/node.proto

package nodev1

import (
	common "github.com/wundergraph/cosmo/connect-go/gen/proto/wg/cosmo/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArgumentRenderConfiguration int32

const (
	ArgumentRenderConfiguration_RENDER_ARGUMENT_DEFAULT          ArgumentRenderConfiguration = 0
	ArgumentRenderConfiguration_RENDER_ARGUMENT_AS_GRAPHQL_VALUE ArgumentRenderConfiguration = 1
	ArgumentRenderConfiguration_RENDER_ARGUMENT_AS_ARRAY_CSV     ArgumentRenderConfiguration = 2
)

// Enum value maps for ArgumentRenderConfiguration.
var (
	ArgumentRenderConfiguration_name = map[int32]string{
		0: "RENDER_ARGUMENT_DEFAULT",
		1: "RENDER_ARGUMENT_AS_GRAPHQL_VALUE",
		2: "RENDER_ARGUMENT_AS_ARRAY_CSV",
	}
	ArgumentRenderConfiguration_value = map[string]int32{
		"RENDER_ARGUMENT_DEFAULT":          0,
		"RENDER_ARGUMENT_AS_GRAPHQL_VALUE": 1,
		"RENDER_ARGUMENT_AS_ARRAY_CSV":     2,
	}
)

func (x ArgumentRenderConfiguration) Enum() *ArgumentRenderConfiguration {
	p := new(ArgumentRenderConfiguration)
	*p = x
	return p
}

func (x ArgumentRenderConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArgumentRenderConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[0].Descriptor()
}

func (ArgumentRenderConfiguration) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[0]
}

func (x ArgumentRenderConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArgumentRenderConfiguration.Descriptor instead.
func (ArgumentRenderConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{0}
}

type ArgumentSource int32

const (
	ArgumentSource_OBJECT_FIELD   ArgumentSource = 0
	ArgumentSource_FIELD_ARGUMENT ArgumentSource = 1
)

// Enum value maps for ArgumentSource.
var (
	ArgumentSource_name = map[int32]string{
		0: "OBJECT_FIELD",
		1: "FIELD_ARGUMENT",
	}
	ArgumentSource_value = map[string]int32{
		"OBJECT_FIELD":   0,
		"FIELD_ARGUMENT": 1,
	}
)

func (x ArgumentSource) Enum() *ArgumentSource {
	p := new(ArgumentSource)
	*p = x
	return p
}

func (x ArgumentSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArgumentSource) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[1].Descriptor()
}

func (ArgumentSource) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[1]
}

func (x ArgumentSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArgumentSource.Descriptor instead.
func (ArgumentSource) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{1}
}

type DataSourceKind int32

const (
	DataSourceKind_STATIC  DataSourceKind = 0
	DataSourceKind_GRAPHQL DataSourceKind = 1
	DataSourceKind_PUBSUB  DataSourceKind = 2
)

// Enum value maps for DataSourceKind.
var (
	DataSourceKind_name = map[int32]string{
		0: "STATIC",
		1: "GRAPHQL",
		2: "PUBSUB",
	}
	DataSourceKind_value = map[string]int32{
		"STATIC":  0,
		"GRAPHQL": 1,
		"PUBSUB":  2,
	}
)

func (x DataSourceKind) Enum() *DataSourceKind {
	p := new(DataSourceKind)
	*p = x
	return p
}

func (x DataSourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[2].Descriptor()
}

func (DataSourceKind) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[2]
}

func (x DataSourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceKind.Descriptor instead.
func (DataSourceKind) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{2}
}

// Defines the type of GraphQL operation
type OperationType int32

const (
	OperationType_OPERATION_TYPE_UNSPECIFIED OperationType = 0
	// Query operation
	OperationType_OPERATION_TYPE_QUERY OperationType = 1
	// Mutation operation
	OperationType_OPERATION_TYPE_MUTATION OperationType = 2
	// Subscription operation
	OperationType_OPERATION_TYPE_SUBSCRIPTION OperationType = 3
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "OPERATION_TYPE_UNSPECIFIED",
		1: "OPERATION_TYPE_QUERY",
		2: "OPERATION_TYPE_MUTATION",
		3: "OPERATION_TYPE_SUBSCRIPTION",
	}
	OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED":  0,
		"OPERATION_TYPE_QUERY":        1,
		"OPERATION_TYPE_MUTATION":     2,
		"OPERATION_TYPE_SUBSCRIPTION": 3,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[3].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[3]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{3}
}

type EventType int32

const (
	EventType_PUBLISH   EventType = 0
	EventType_REQUEST   EventType = 1
	EventType_SUBSCRIBE EventType = 2
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "PUBLISH",
		1: "REQUEST",
		2: "SUBSCRIBE",
	}
	EventType_value = map[string]int32{
		"PUBLISH":   0,
		"REQUEST":   1,
		"SUBSCRIBE": 2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[4].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[4]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{4}
}

type ConfigurationVariableKind int32

const (
	ConfigurationVariableKind_STATIC_CONFIGURATION_VARIABLE      ConfigurationVariableKind = 0
	ConfigurationVariableKind_ENV_CONFIGURATION_VARIABLE         ConfigurationVariableKind = 1
	ConfigurationVariableKind_PLACEHOLDER_CONFIGURATION_VARIABLE ConfigurationVariableKind = 2
)

// Enum value maps for ConfigurationVariableKind.
var (
	ConfigurationVariableKind_name = map[int32]string{
		0: "STATIC_CONFIGURATION_VARIABLE",
		1: "ENV_CONFIGURATION_VARIABLE",
		2: "PLACEHOLDER_CONFIGURATION_VARIABLE",
	}
	ConfigurationVariableKind_value = map[string]int32{
		"STATIC_CONFIGURATION_VARIABLE":      0,
		"ENV_CONFIGURATION_VARIABLE":         1,
		"PLACEHOLDER_CONFIGURATION_VARIABLE": 2,
	}
)

func (x ConfigurationVariableKind) Enum() *ConfigurationVariableKind {
	p := new(ConfigurationVariableKind)
	*p = x
	return p
}

func (x ConfigurationVariableKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationVariableKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[5].Descriptor()
}

func (ConfigurationVariableKind) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[5]
}

func (x ConfigurationVariableKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationVariableKind.Descriptor instead.
func (ConfigurationVariableKind) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{5}
}

type HTTPMethod int32

const (
	HTTPMethod_GET     HTTPMethod = 0
	HTTPMethod_POST    HTTPMethod = 1
	HTTPMethod_PUT     HTTPMethod = 2
	HTTPMethod_DELETE  HTTPMethod = 3
	HTTPMethod_OPTIONS HTTPMethod = 4
)

// Enum value maps for HTTPMethod.
var (
	HTTPMethod_name = map[int32]string{
		0: "GET",
		1: "POST",
		2: "PUT",
		3: "DELETE",
		4: "OPTIONS",
	}
	HTTPMethod_value = map[string]int32{
		"GET":     0,
		"POST":    1,
		"PUT":     2,
		"DELETE":  3,
		"OPTIONS": 4,
	}
)

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}

func (x HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_wg_cosmo_node_v1_node_proto_enumTypes[6].Descriptor()
}

func (HTTPMethod) Type() protoreflect.EnumType {
	return &file_wg_cosmo_node_v1_node_proto_enumTypes[6]
}

func (x HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPMethod.Descriptor instead.
func (HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{6}
}

type Subgraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RoutingUrl string `protobuf:"bytes,3,opt,name=routing_url,json=routingUrl,proto3" json:"routing_url,omitempty"`
}

func (x *Subgraph) Reset() {
	*x = Subgraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subgraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subgraph) ProtoMessage() {}

func (x *Subgraph) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subgraph.ProtoReflect.Descriptor instead.
func (*Subgraph) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{0}
}

func (x *Subgraph) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subgraph) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subgraph) GetRoutingUrl() string {
	if x != nil {
		return x.RoutingUrl
	}
	return ""
}

type FeatureFlagRouterExecutionConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigByFeatureFlagName map[string]*FeatureFlagRouterExecutionConfig `protobuf:"bytes,1,rep,name=config_by_feature_flag_name,json=configByFeatureFlagName,proto3" json:"config_by_feature_flag_name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FeatureFlagRouterExecutionConfigs) Reset() {
	*x = FeatureFlagRouterExecutionConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagRouterExecutionConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagRouterExecutionConfigs) ProtoMessage() {}

func (x *FeatureFlagRouterExecutionConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagRouterExecutionConfigs.ProtoReflect.Descriptor instead.
func (*FeatureFlagRouterExecutionConfigs) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureFlagRouterExecutionConfigs) GetConfigByFeatureFlagName() map[string]*FeatureFlagRouterExecutionConfig {
	if x != nil {
		return x.ConfigByFeatureFlagName
	}
	return nil
}

type FeatureFlagRouterExecutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineConfig *EngineConfiguration `protobuf:"bytes,1,opt,name=engine_config,json=engineConfig,proto3" json:"engine_config,omitempty"`
	Version      string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Subgraphs    []*Subgraph          `protobuf:"bytes,3,rep,name=subgraphs,proto3" json:"subgraphs,omitempty"`
}

func (x *FeatureFlagRouterExecutionConfig) Reset() {
	*x = FeatureFlagRouterExecutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagRouterExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagRouterExecutionConfig) ProtoMessage() {}

func (x *FeatureFlagRouterExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagRouterExecutionConfig.ProtoReflect.Descriptor instead.
func (*FeatureFlagRouterExecutionConfig) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureFlagRouterExecutionConfig) GetEngineConfig() *EngineConfiguration {
	if x != nil {
		return x.EngineConfig
	}
	return nil
}

func (x *FeatureFlagRouterExecutionConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FeatureFlagRouterExecutionConfig) GetSubgraphs() []*Subgraph {
	if x != nil {
		return x.Subgraphs
	}
	return nil
}

type RouterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineConfig *EngineConfiguration `protobuf:"bytes,1,opt,name=engine_config,json=engineConfig,proto3" json:"engine_config,omitempty"`
	Version      string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Subgraphs    []*Subgraph          `protobuf:"bytes,3,rep,name=subgraphs,proto3" json:"subgraphs,omitempty"`
	// The map of feature flag router execution configs requires a wrapper to be non-breaking
	FeatureFlagConfigs   *FeatureFlagRouterExecutionConfigs `protobuf:"bytes,4,opt,name=feature_flag_configs,json=featureFlagConfigs,proto3,oneof" json:"feature_flag_configs,omitempty"`
	CompatibilityVersion string                             `protobuf:"bytes,5,opt,name=compatibility_version,json=compatibilityVersion,proto3" json:"compatibility_version,omitempty"`
}

func (x *RouterConfig) Reset() {
	*x = RouterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfig) ProtoMessage() {}

func (x *RouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfig.ProtoReflect.Descriptor instead.
func (*RouterConfig) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{3}
}

func (x *RouterConfig) GetEngineConfig() *EngineConfiguration {
	if x != nil {
		return x.EngineConfig
	}
	return nil
}

func (x *RouterConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RouterConfig) GetSubgraphs() []*Subgraph {
	if x != nil {
		return x.Subgraphs
	}
	return nil
}

func (x *RouterConfig) GetFeatureFlagConfigs() *FeatureFlagRouterExecutionConfigs {
	if x != nil {
		return x.FeatureFlagConfigs
	}
	return nil
}

func (x *RouterConfig) GetCompatibilityVersion() string {
	if x != nil {
		return x.CompatibilityVersion
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code common.EnumStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=wg.cosmo.common.EnumStatusCode" json:"code,omitempty"`
	// details is an optional field which can be used to provide more details about the error.
	Details *string `protobuf:"bytes,2,opt,name=details,proto3,oneof" json:"details,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetCode() common.EnumStatusCode {
	if x != nil {
		return x.Code
	}
	return common.EnumStatusCode(0)
}

func (x *Response) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RegistrationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountLimits  *AccountLimits `protobuf:"bytes,1,opt,name=account_limits,json=accountLimits,proto3" json:"account_limits,omitempty"`
	GraphPublicKey string         `protobuf:"bytes,2,opt,name=graph_public_key,json=graphPublicKey,proto3" json:"graph_public_key,omitempty"`
}

func (x *RegistrationInfo) Reset() {
	*x = RegistrationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationInfo) ProtoMessage() {}

func (x *RegistrationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationInfo.ProtoReflect.Descriptor instead.
func (*RegistrationInfo) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{6}
}

func (x *RegistrationInfo) GetAccountLimits() *AccountLimits {
	if x != nil {
		return x.AccountLimits
	}
	return nil
}

func (x *RegistrationInfo) GetGraphPublicKey() string {
	if x != nil {
		return x.GraphPublicKey
	}
	return ""
}

type AccountLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum sampling rate for traces. Must be between 0 and 1.
	// 0 means no traces will be sampled and 1 means all traces will be sampled.
	TraceSamplingRate float32 `protobuf:"fixed32,1,opt,name=trace_sampling_rate,json=traceSamplingRate,proto3" json:"trace_sampling_rate,omitempty"`
}

func (x *AccountLimits) Reset() {
	*x = AccountLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountLimits) ProtoMessage() {}

func (x *AccountLimits) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountLimits.ProtoReflect.Descriptor instead.
func (*AccountLimits) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{7}
}

func (x *AccountLimits) GetTraceSamplingRate() float32 {
	if x != nil {
		return x.TraceSamplingRate
	}
	return 0
}

type SelfRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfRegisterRequest) Reset() {
	*x = SelfRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfRegisterRequest) ProtoMessage() {}

func (x *SelfRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfRegisterRequest.ProtoReflect.Descriptor instead.
func (*SelfRegisterRequest) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{8}
}

type SelfRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *Response         `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	RegistrationInfo *RegistrationInfo `protobuf:"bytes,2,opt,name=registrationInfo,proto3,oneof" json:"registrationInfo,omitempty"`
}

func (x *SelfRegisterResponse) Reset() {
	*x = SelfRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfRegisterResponse) ProtoMessage() {}

func (x *SelfRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfRegisterResponse.ProtoReflect.Descriptor instead.
func (*SelfRegisterResponse) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{9}
}

func (x *SelfRegisterResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SelfRegisterResponse) GetRegistrationInfo() *RegistrationInfo {
	if x != nil {
		return x.RegistrationInfo
	}
	return nil
}

type EngineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultFlushInterval     int64                      `protobuf:"varint,1,opt,name=defaultFlushInterval,proto3" json:"defaultFlushInterval,omitempty"`
	DatasourceConfigurations []*DataSourceConfiguration `protobuf:"bytes,2,rep,name=datasource_configurations,json=datasourceConfigurations,proto3" json:"datasource_configurations,omitempty"`
	FieldConfigurations      []*FieldConfiguration      `protobuf:"bytes,3,rep,name=field_configurations,json=fieldConfigurations,proto3" json:"field_configurations,omitempty"`
	GraphqlSchema            string                     `protobuf:"bytes,4,opt,name=graphqlSchema,proto3" json:"graphqlSchema,omitempty"`
	TypeConfigurations       []*TypeConfiguration       `protobuf:"bytes,5,rep,name=type_configurations,json=typeConfigurations,proto3" json:"type_configurations,omitempty"`
	StringStorage            map[string]string          `protobuf:"bytes,6,rep,name=string_storage,json=stringStorage,proto3" json:"string_storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GraphqlClientSchema      *string                    `protobuf:"bytes,7,opt,name=graphql_client_schema,json=graphqlClientSchema,proto3,oneof" json:"graphql_client_schema,omitempty"`
}

func (x *EngineConfiguration) Reset() {
	*x = EngineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineConfiguration) ProtoMessage() {}

func (x *EngineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineConfiguration.ProtoReflect.Descriptor instead.
func (*EngineConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{10}
}

func (x *EngineConfiguration) GetDefaultFlushInterval() int64 {
	if x != nil {
		return x.DefaultFlushInterval
	}
	return 0
}

func (x *EngineConfiguration) GetDatasourceConfigurations() []*DataSourceConfiguration {
	if x != nil {
		return x.DatasourceConfigurations
	}
	return nil
}

func (x *EngineConfiguration) GetFieldConfigurations() []*FieldConfiguration {
	if x != nil {
		return x.FieldConfigurations
	}
	return nil
}

func (x *EngineConfiguration) GetGraphqlSchema() string {
	if x != nil {
		return x.GraphqlSchema
	}
	return ""
}

func (x *EngineConfiguration) GetTypeConfigurations() []*TypeConfiguration {
	if x != nil {
		return x.TypeConfigurations
	}
	return nil
}

func (x *EngineConfiguration) GetStringStorage() map[string]string {
	if x != nil {
		return x.StringStorage
	}
	return nil
}

func (x *EngineConfiguration) GetGraphqlClientSchema() string {
	if x != nil && x.GraphqlClientSchema != nil {
		return *x.GraphqlClientSchema
	}
	return ""
}

type DataSourceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                       DataSourceKind                  `protobuf:"varint,1,opt,name=kind,proto3,enum=wg.cosmo.node.v1.DataSourceKind" json:"kind,omitempty"`
	RootNodes                  []*TypeField                    `protobuf:"bytes,2,rep,name=root_nodes,json=rootNodes,proto3" json:"root_nodes,omitempty"`
	ChildNodes                 []*TypeField                    `protobuf:"bytes,3,rep,name=child_nodes,json=childNodes,proto3" json:"child_nodes,omitempty"`
	OverrideFieldPathFromAlias bool                            `protobuf:"varint,4,opt,name=override_field_path_from_alias,json=overrideFieldPathFromAlias,proto3" json:"override_field_path_from_alias,omitempty"`
	CustomGraphql              *DataSourceCustom_GraphQL       `protobuf:"bytes,5,opt,name=custom_graphql,json=customGraphql,proto3" json:"custom_graphql,omitempty"`
	CustomStatic               *DataSourceCustom_Static        `protobuf:"bytes,6,opt,name=custom_static,json=customStatic,proto3" json:"custom_static,omitempty"`
	Directives                 []*DirectiveConfiguration       `protobuf:"bytes,7,rep,name=directives,proto3" json:"directives,omitempty"`
	RequestTimeoutSeconds      int64                           `protobuf:"varint,8,opt,name=request_timeout_seconds,json=requestTimeoutSeconds,proto3" json:"request_timeout_seconds,omitempty"`
	Id                         string                          `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	Keys                       []*RequiredField                `protobuf:"bytes,10,rep,name=keys,proto3" json:"keys,omitempty"`
	Provides                   []*RequiredField                `protobuf:"bytes,11,rep,name=provides,proto3" json:"provides,omitempty"`
	Requires                   []*RequiredField                `protobuf:"bytes,12,rep,name=requires,proto3" json:"requires,omitempty"`
	CustomEvents               *DataSourceCustomEvents         `protobuf:"bytes,13,opt,name=custom_events,json=customEvents,proto3" json:"custom_events,omitempty"`
	EntityInterfaces           []*EntityInterfaceConfiguration `protobuf:"bytes,14,rep,name=entity_interfaces,json=entityInterfaces,proto3" json:"entity_interfaces,omitempty"`
	InterfaceObjects           []*EntityInterfaceConfiguration `protobuf:"bytes,15,rep,name=interface_objects,json=interfaceObjects,proto3" json:"interface_objects,omitempty"`
}

func (x *DataSourceConfiguration) Reset() {
	*x = DataSourceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceConfiguration) ProtoMessage() {}

func (x *DataSourceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceConfiguration.ProtoReflect.Descriptor instead.
func (*DataSourceConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{11}
}

func (x *DataSourceConfiguration) GetKind() DataSourceKind {
	if x != nil {
		return x.Kind
	}
	return DataSourceKind_STATIC
}

func (x *DataSourceConfiguration) GetRootNodes() []*TypeField {
	if x != nil {
		return x.RootNodes
	}
	return nil
}

func (x *DataSourceConfiguration) GetChildNodes() []*TypeField {
	if x != nil {
		return x.ChildNodes
	}
	return nil
}

func (x *DataSourceConfiguration) GetOverrideFieldPathFromAlias() bool {
	if x != nil {
		return x.OverrideFieldPathFromAlias
	}
	return false
}

func (x *DataSourceConfiguration) GetCustomGraphql() *DataSourceCustom_GraphQL {
	if x != nil {
		return x.CustomGraphql
	}
	return nil
}

func (x *DataSourceConfiguration) GetCustomStatic() *DataSourceCustom_Static {
	if x != nil {
		return x.CustomStatic
	}
	return nil
}

func (x *DataSourceConfiguration) GetDirectives() []*DirectiveConfiguration {
	if x != nil {
		return x.Directives
	}
	return nil
}

func (x *DataSourceConfiguration) GetRequestTimeoutSeconds() int64 {
	if x != nil {
		return x.RequestTimeoutSeconds
	}
	return 0
}

func (x *DataSourceConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataSourceConfiguration) GetKeys() []*RequiredField {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DataSourceConfiguration) GetProvides() []*RequiredField {
	if x != nil {
		return x.Provides
	}
	return nil
}

func (x *DataSourceConfiguration) GetRequires() []*RequiredField {
	if x != nil {
		return x.Requires
	}
	return nil
}

func (x *DataSourceConfiguration) GetCustomEvents() *DataSourceCustomEvents {
	if x != nil {
		return x.CustomEvents
	}
	return nil
}

func (x *DataSourceConfiguration) GetEntityInterfaces() []*EntityInterfaceConfiguration {
	if x != nil {
		return x.EntityInterfaces
	}
	return nil
}

func (x *DataSourceConfiguration) GetInterfaceObjects() []*EntityInterfaceConfiguration {
	if x != nil {
		return x.InterfaceObjects
	}
	return nil
}

type ArgumentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceType ArgumentSource `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=wg.cosmo.node.v1.ArgumentSource" json:"source_type,omitempty"`
}

func (x *ArgumentConfiguration) Reset() {
	*x = ArgumentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgumentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentConfiguration) ProtoMessage() {}

func (x *ArgumentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentConfiguration.ProtoReflect.Descriptor instead.
func (*ArgumentConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{12}
}

func (x *ArgumentConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArgumentConfiguration) GetSourceType() ArgumentSource {
	if x != nil {
		return x.SourceType
	}
	return ArgumentSource_OBJECT_FIELD
}

type Scopes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredAndScopes []string `protobuf:"bytes,1,rep,name=required_and_scopes,json=requiredAndScopes,proto3" json:"required_and_scopes,omitempty"`
}

func (x *Scopes) Reset() {
	*x = Scopes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scopes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scopes) ProtoMessage() {}

func (x *Scopes) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scopes.ProtoReflect.Descriptor instead.
func (*Scopes) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{13}
}

func (x *Scopes) GetRequiredAndScopes() []string {
	if x != nil {
		return x.RequiredAndScopes
	}
	return nil
}

type AuthorizationConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresAuthentication bool      `protobuf:"varint,1,opt,name=requires_authentication,json=requiresAuthentication,proto3" json:"requires_authentication,omitempty"`
	RequiredOrScopes       []*Scopes `protobuf:"bytes,2,rep,name=required_or_scopes,json=requiredOrScopes,proto3" json:"required_or_scopes,omitempty"`
	RequiredOrScopesByOr   []*Scopes `protobuf:"bytes,3,rep,name=required_or_scopes_by_or,json=requiredOrScopesByOr,proto3" json:"required_or_scopes_by_or,omitempty"`
}

func (x *AuthorizationConfiguration) Reset() {
	*x = AuthorizationConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationConfiguration) ProtoMessage() {}

func (x *AuthorizationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationConfiguration.ProtoReflect.Descriptor instead.
func (*AuthorizationConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{14}
}

func (x *AuthorizationConfiguration) GetRequiresAuthentication() bool {
	if x != nil {
		return x.RequiresAuthentication
	}
	return false
}

func (x *AuthorizationConfiguration) GetRequiredOrScopes() []*Scopes {
	if x != nil {
		return x.RequiredOrScopes
	}
	return nil
}

func (x *AuthorizationConfiguration) GetRequiredOrScopesByOr() []*Scopes {
	if x != nil {
		return x.RequiredOrScopesByOr
	}
	return nil
}

type FieldConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName                    string                       `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FieldName                   string                       `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	ArgumentsConfiguration      []*ArgumentConfiguration     `protobuf:"bytes,3,rep,name=arguments_configuration,json=argumentsConfiguration,proto3" json:"arguments_configuration,omitempty"`
	AuthorizationConfiguration  *AuthorizationConfiguration  `protobuf:"bytes,4,opt,name=authorization_configuration,json=authorizationConfiguration,proto3" json:"authorization_configuration,omitempty"`
	SubscriptionFilterCondition *SubscriptionFilterCondition `protobuf:"bytes,5,opt,name=subscription_filter_condition,json=subscriptionFilterCondition,proto3,oneof" json:"subscription_filter_condition,omitempty"`
}

func (x *FieldConfiguration) Reset() {
	*x = FieldConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConfiguration) ProtoMessage() {}

func (x *FieldConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConfiguration.ProtoReflect.Descriptor instead.
func (*FieldConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{15}
}

func (x *FieldConfiguration) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *FieldConfiguration) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldConfiguration) GetArgumentsConfiguration() []*ArgumentConfiguration {
	if x != nil {
		return x.ArgumentsConfiguration
	}
	return nil
}

func (x *FieldConfiguration) GetAuthorizationConfiguration() *AuthorizationConfiguration {
	if x != nil {
		return x.AuthorizationConfiguration
	}
	return nil
}

func (x *FieldConfiguration) GetSubscriptionFilterCondition() *SubscriptionFilterCondition {
	if x != nil {
		return x.SubscriptionFilterCondition
	}
	return nil
}

type TypeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	RenameTo string `protobuf:"bytes,2,opt,name=rename_to,json=renameTo,proto3" json:"rename_to,omitempty"`
}

func (x *TypeConfiguration) Reset() {
	*x = TypeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeConfiguration) ProtoMessage() {}

func (x *TypeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeConfiguration.ProtoReflect.Descriptor instead.
func (*TypeConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{16}
}

func (x *TypeConfiguration) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TypeConfiguration) GetRenameTo() string {
	if x != nil {
		return x.RenameTo
	}
	return ""
}

type TypeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName           string   `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FieldNames         []string `protobuf:"bytes,2,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	ExternalFieldNames []string `protobuf:"bytes,3,rep,name=external_field_names,json=externalFieldNames,proto3" json:"external_field_names,omitempty"`
}

func (x *TypeField) Reset() {
	*x = TypeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeField) ProtoMessage() {}

func (x *TypeField) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeField.ProtoReflect.Descriptor instead.
func (*TypeField) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{17}
}

func (x *TypeField) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TypeField) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *TypeField) GetExternalFieldNames() []string {
	if x != nil {
		return x.ExternalFieldNames
	}
	return nil
}

type FieldCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	TypeName  string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (x *FieldCoordinates) Reset() {
	*x = FieldCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCoordinates) ProtoMessage() {}

func (x *FieldCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCoordinates.ProtoReflect.Descriptor instead.
func (*FieldCoordinates) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{18}
}

func (x *FieldCoordinates) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldCoordinates) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

type FieldSetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldCoordinatesPath []*FieldCoordinates `protobuf:"bytes,1,rep,name=field_coordinates_path,json=fieldCoordinatesPath,proto3" json:"field_coordinates_path,omitempty"`
	FieldPath            []string            `protobuf:"bytes,2,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
}

func (x *FieldSetCondition) Reset() {
	*x = FieldSetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSetCondition) ProtoMessage() {}

func (x *FieldSetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSetCondition.ProtoReflect.Descriptor instead.
func (*FieldSetCondition) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{19}
}

func (x *FieldSetCondition) GetFieldCoordinatesPath() []*FieldCoordinates {
	if x != nil {
		return x.FieldCoordinatesPath
	}
	return nil
}

func (x *FieldSetCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

type RequiredField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName              string               `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FieldName             string               `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	SelectionSet          string               `protobuf:"bytes,3,opt,name=selection_set,json=selectionSet,proto3" json:"selection_set,omitempty"`
	DisableEntityResolver bool                 `protobuf:"varint,4,opt,name=disable_entity_resolver,json=disableEntityResolver,proto3" json:"disable_entity_resolver,omitempty"`
	Conditions            []*FieldSetCondition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *RequiredField) Reset() {
	*x = RequiredField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredField) ProtoMessage() {}

func (x *RequiredField) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredField.ProtoReflect.Descriptor instead.
func (*RequiredField) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{20}
}

func (x *RequiredField) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RequiredField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *RequiredField) GetSelectionSet() string {
	if x != nil {
		return x.SelectionSet
	}
	return ""
}

func (x *RequiredField) GetDisableEntityResolver() bool {
	if x != nil {
		return x.DisableEntityResolver
	}
	return false
}

func (x *RequiredField) GetConditions() []*FieldSetCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type EntityInterfaceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceTypeName string   `protobuf:"bytes,1,opt,name=interface_type_name,json=interfaceTypeName,proto3" json:"interface_type_name,omitempty"`
	ConcreteTypeNames []string `protobuf:"bytes,2,rep,name=concrete_type_names,json=concreteTypeNames,proto3" json:"concrete_type_names,omitempty"`
}

func (x *EntityInterfaceConfiguration) Reset() {
	*x = EntityInterfaceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityInterfaceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityInterfaceConfiguration) ProtoMessage() {}

func (x *EntityInterfaceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityInterfaceConfiguration.ProtoReflect.Descriptor instead.
func (*EntityInterfaceConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{21}
}

func (x *EntityInterfaceConfiguration) GetInterfaceTypeName() string {
	if x != nil {
		return x.InterfaceTypeName
	}
	return ""
}

func (x *EntityInterfaceConfiguration) GetConcreteTypeNames() []string {
	if x != nil {
		return x.ConcreteTypeNames
	}
	return nil
}

type FetchConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// You should either configure url OR a combination of baseURL and path
	// If url resolves to a non empty string, it takes precedence over baseURL and path
	// If url resolves to an empty string, the url will be configured as "{{baseURL}}{{path}}"
	Url    *ConfigurationVariable   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method HTTPMethod               `protobuf:"varint,2,opt,name=method,proto3,enum=wg.cosmo.node.v1.HTTPMethod" json:"method,omitempty"`
	Header map[string]*HTTPHeader   `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body   *ConfigurationVariable   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Query  []*URLQueryConfiguration `protobuf:"bytes,5,rep,name=query,proto3" json:"query,omitempty"`
	// urlEncodeBody defines whether the body should be URL encoded or not
	// by default, the body will be JSON encoded
	// setting urlEncodeBody to true will render the body empty,
	// the Header Content-Type will be set to application/x-www-form-urlencoded,
	// and the body will be URL encoded and set as the URL Query String
	UrlEncodeBody bool                   `protobuf:"varint,7,opt,name=url_encode_body,json=urlEncodeBody,proto3" json:"url_encode_body,omitempty"`
	Mtls          *MTLSConfiguration     `protobuf:"bytes,8,opt,name=mtls,proto3" json:"mtls,omitempty"`
	BaseUrl       *ConfigurationVariable `protobuf:"bytes,9,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	Path          *ConfigurationVariable `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	HttpProxyUrl  *ConfigurationVariable `protobuf:"bytes,11,opt,name=http_proxy_url,json=httpProxyUrl,proto3,oneof" json:"http_proxy_url,omitempty"`
}

func (x *FetchConfiguration) Reset() {
	*x = FetchConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchConfiguration) ProtoMessage() {}

func (x *FetchConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchConfiguration.ProtoReflect.Descriptor instead.
func (*FetchConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{22}
}

func (x *FetchConfiguration) GetUrl() *ConfigurationVariable {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *FetchConfiguration) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_GET
}

func (x *FetchConfiguration) GetHeader() map[string]*HTTPHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FetchConfiguration) GetBody() *ConfigurationVariable {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FetchConfiguration) GetQuery() []*URLQueryConfiguration {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FetchConfiguration) GetUrlEncodeBody() bool {
	if x != nil {
		return x.UrlEncodeBody
	}
	return false
}

func (x *FetchConfiguration) GetMtls() *MTLSConfiguration {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *FetchConfiguration) GetBaseUrl() *ConfigurationVariable {
	if x != nil {
		return x.BaseUrl
	}
	return nil
}

func (x *FetchConfiguration) GetPath() *ConfigurationVariable {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FetchConfiguration) GetHttpProxyUrl() *ConfigurationVariable {
	if x != nil {
		return x.HttpProxyUrl
	}
	return nil
}

type StatusCodeTypeMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode               int64  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	TypeName                 string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	InjectStatusCodeIntoBody bool   `protobuf:"varint,3,opt,name=inject_status_code_into_body,json=injectStatusCodeIntoBody,proto3" json:"inject_status_code_into_body,omitempty"`
}

func (x *StatusCodeTypeMapping) Reset() {
	*x = StatusCodeTypeMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCodeTypeMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCodeTypeMapping) ProtoMessage() {}

func (x *StatusCodeTypeMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCodeTypeMapping.ProtoReflect.Descriptor instead.
func (*StatusCodeTypeMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{23}
}

func (x *StatusCodeTypeMapping) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *StatusCodeTypeMapping) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *StatusCodeTypeMapping) GetInjectStatusCodeIntoBody() bool {
	if x != nil {
		return x.InjectStatusCodeIntoBody
	}
	return false
}

type DataSourceCustom_GraphQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fetch                  *FetchConfiguration               `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty"`
	Subscription           *GraphQLSubscriptionConfiguration `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	Federation             *GraphQLFederationConfiguration   `protobuf:"bytes,3,opt,name=federation,proto3" json:"federation,omitempty"`
	UpstreamSchema         *InternedString                   `protobuf:"bytes,4,opt,name=upstream_schema,json=upstreamSchema,proto3" json:"upstream_schema,omitempty"`
	CustomScalarTypeFields []*SingleTypeField                `protobuf:"bytes,6,rep,name=custom_scalar_type_fields,json=customScalarTypeFields,proto3" json:"custom_scalar_type_fields,omitempty"`
	Grpc                   *GRPCConfiguration                `protobuf:"bytes,7,opt,name=grpc,proto3" json:"grpc,omitempty"`
}

func (x *DataSourceCustom_GraphQL) Reset() {
	*x = DataSourceCustom_GraphQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustom_GraphQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustom_GraphQL) ProtoMessage() {}

func (x *DataSourceCustom_GraphQL) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustom_GraphQL.ProtoReflect.Descriptor instead.
func (*DataSourceCustom_GraphQL) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{24}
}

func (x *DataSourceCustom_GraphQL) GetFetch() *FetchConfiguration {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetSubscription() *GraphQLSubscriptionConfiguration {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetFederation() *GraphQLFederationConfiguration {
	if x != nil {
		return x.Federation
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetUpstreamSchema() *InternedString {
	if x != nil {
		return x.UpstreamSchema
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetCustomScalarTypeFields() []*SingleTypeField {
	if x != nil {
		return x.CustomScalarTypeFields
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetGrpc() *GRPCConfiguration {
	if x != nil {
		return x.Grpc
	}
	return nil
}

type GRPCConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping     *GRPCMapping         `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
	ProtoSchema string               `protobuf:"bytes,2,opt,name=proto_schema,json=protoSchema,proto3" json:"proto_schema,omitempty"`
	Plugin      *PluginConfiguration `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *GRPCConfiguration) Reset() {
	*x = GRPCConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCConfiguration) ProtoMessage() {}

func (x *GRPCConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCConfiguration.ProtoReflect.Descriptor instead.
func (*GRPCConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{25}
}

func (x *GRPCConfiguration) GetMapping() *GRPCMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *GRPCConfiguration) GetProtoSchema() string {
	if x != nil {
		return x.ProtoSchema
	}
	return ""
}

func (x *GRPCConfiguration) GetPlugin() *PluginConfiguration {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type PluginConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Plugin name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Plugin version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PluginConfiguration) Reset() {
	*x = PluginConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginConfiguration) ProtoMessage() {}

func (x *PluginConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginConfiguration.ProtoReflect.Descriptor instead.
func (*PluginConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{26}
}

func (x *PluginConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginConfiguration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type SSLConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether SSL is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SSLConfiguration) Reset() {
	*x = SSLConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLConfiguration) ProtoMessage() {}

func (x *SSLConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLConfiguration.ProtoReflect.Descriptor instead.
func (*SSLConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{27}
}

func (x *SSLConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GRPCMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the mapping format
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The main gRPC service name
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Mappings for GraphQL operations to gRPC RPCs
	OperationMappings []*OperationMapping `protobuf:"bytes,3,rep,name=operation_mappings,json=operationMappings,proto3" json:"operation_mappings,omitempty"`
	// Mappings for GraphQL entities to gRPC service methods
	EntityMappings []*EntityMapping `protobuf:"bytes,4,rep,name=entity_mappings,json=entityMappings,proto3" json:"entity_mappings,omitempty"`
	// Mappings for GraphQL type fields to gRPC message fields
	TypeFieldMappings []*TypeFieldMapping `protobuf:"bytes,5,rep,name=type_field_mappings,json=typeFieldMappings,proto3" json:"type_field_mappings,omitempty"`
	// Mappings for GraphQL enum values to gRPC enum values
	EnumMappings []*EnumMapping `protobuf:"bytes,6,rep,name=enum_mappings,json=enumMappings,proto3" json:"enum_mappings,omitempty"`
}

func (x *GRPCMapping) Reset() {
	*x = GRPCMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCMapping) ProtoMessage() {}

func (x *GRPCMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCMapping.ProtoReflect.Descriptor instead.
func (*GRPCMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{28}
}

func (x *GRPCMapping) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GRPCMapping) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GRPCMapping) GetOperationMappings() []*OperationMapping {
	if x != nil {
		return x.OperationMappings
	}
	return nil
}

func (x *GRPCMapping) GetEntityMappings() []*EntityMapping {
	if x != nil {
		return x.EntityMappings
	}
	return nil
}

func (x *GRPCMapping) GetTypeFieldMappings() []*TypeFieldMapping {
	if x != nil {
		return x.TypeFieldMappings
	}
	return nil
}

func (x *GRPCMapping) GetEnumMappings() []*EnumMapping {
	if x != nil {
		return x.EnumMappings
	}
	return nil
}

// Defines mapping between a GraphQL operation and a gRPC method
type OperationMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GraphQL operation type: Query, Mutation, or Subscription
	Type OperationType `protobuf:"varint,1,opt,name=type,proto3,enum=wg.cosmo.node.v1.OperationType" json:"type,omitempty"`
	// Original GraphQL field name
	Original string `protobuf:"bytes,2,opt,name=original,proto3" json:"original,omitempty"`
	// Mapped gRPC method name
	Mapped string `protobuf:"bytes,3,opt,name=mapped,proto3" json:"mapped,omitempty"`
	// gRPC request message type name
	Request string `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	// gRPC response message type name
	Response string `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *OperationMapping) Reset() {
	*x = OperationMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMapping) ProtoMessage() {}

func (x *OperationMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMapping.ProtoReflect.Descriptor instead.
func (*OperationMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{29}
}

func (x *OperationMapping) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_OPERATION_TYPE_UNSPECIFIED
}

func (x *OperationMapping) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *OperationMapping) GetMapped() string {
	if x != nil {
		return x.Mapped
	}
	return ""
}

func (x *OperationMapping) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *OperationMapping) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Defines mapping for entity resolution
type EntityMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GraphQL type name
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// Kind of entity mapping: "entity", "requires", or "with_arguments"
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Key field that uniquely identifies the entity
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// gRPC method name for entity resolution
	Rpc string `protobuf:"bytes,4,opt,name=rpc,proto3" json:"rpc,omitempty"`
	// gRPC request message type name
	Request string `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	// gRPC response message type name
	Response string `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *EntityMapping) Reset() {
	*x = EntityMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityMapping) ProtoMessage() {}

func (x *EntityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityMapping.ProtoReflect.Descriptor instead.
func (*EntityMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{30}
}

func (x *EntityMapping) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *EntityMapping) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *EntityMapping) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EntityMapping) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

func (x *EntityMapping) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *EntityMapping) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Defines mapping between GraphQL type fields and gRPC message fields
type TypeFieldMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GraphQL type name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Mappings for each field in the type
	FieldMappings []*FieldMapping `protobuf:"bytes,2,rep,name=field_mappings,json=fieldMappings,proto3" json:"field_mappings,omitempty"`
}

func (x *TypeFieldMapping) Reset() {
	*x = TypeFieldMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeFieldMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeFieldMapping) ProtoMessage() {}

func (x *TypeFieldMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeFieldMapping.ProtoReflect.Descriptor instead.
func (*TypeFieldMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{31}
}

func (x *TypeFieldMapping) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TypeFieldMapping) GetFieldMappings() []*FieldMapping {
	if x != nil {
		return x.FieldMappings
	}
	return nil
}

// Defines mapping for a single field
type FieldMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Original GraphQL field name
	Original string `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	// Mapped gRPC field name
	Mapped string `protobuf:"bytes,2,opt,name=mapped,proto3" json:"mapped,omitempty"`
	// Mappings for field arguments
	ArgumentMappings []*ArgumentMapping `protobuf:"bytes,3,rep,name=argument_mappings,json=argumentMappings,proto3" json:"argument_mappings,omitempty"`
}

func (x *FieldMapping) Reset() {
	*x = FieldMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMapping) ProtoMessage() {}

func (x *FieldMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMapping.ProtoReflect.Descriptor instead.
func (*FieldMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{32}
}

func (x *FieldMapping) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *FieldMapping) GetMapped() string {
	if x != nil {
		return x.Mapped
	}
	return ""
}

func (x *FieldMapping) GetArgumentMappings() []*ArgumentMapping {
	if x != nil {
		return x.ArgumentMappings
	}
	return nil
}

// Defines mapping for a field argument
type ArgumentMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Original GraphQL argument name
	Original string `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	// Mapped gRPC field name
	Mapped string `protobuf:"bytes,2,opt,name=mapped,proto3" json:"mapped,omitempty"`
}

func (x *ArgumentMapping) Reset() {
	*x = ArgumentMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgumentMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentMapping) ProtoMessage() {}

func (x *ArgumentMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentMapping.ProtoReflect.Descriptor instead.
func (*ArgumentMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{33}
}

func (x *ArgumentMapping) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *ArgumentMapping) GetMapped() string {
	if x != nil {
		return x.Mapped
	}
	return ""
}

type EnumMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Values []*EnumValueMapping `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *EnumMapping) Reset() {
	*x = EnumMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumMapping) ProtoMessage() {}

func (x *EnumMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumMapping.ProtoReflect.Descriptor instead.
func (*EnumMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{34}
}

func (x *EnumMapping) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EnumMapping) GetValues() []*EnumValueMapping {
	if x != nil {
		return x.Values
	}
	return nil
}

type EnumValueMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Original string `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	Mapped   string `protobuf:"bytes,2,opt,name=mapped,proto3" json:"mapped,omitempty"`
}

func (x *EnumValueMapping) Reset() {
	*x = EnumValueMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueMapping) ProtoMessage() {}

func (x *EnumValueMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueMapping.ProtoReflect.Descriptor instead.
func (*EnumValueMapping) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{35}
}

func (x *EnumValueMapping) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *EnumValueMapping) GetMapped() string {
	if x != nil {
		return x.Mapped
	}
	return ""
}

type NatsStreamConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerName              string `protobuf:"bytes,1,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	StreamName                string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	ConsumerInactiveThreshold int32  `protobuf:"varint,3,opt,name=consumer_inactive_threshold,json=consumerInactiveThreshold,proto3" json:"consumer_inactive_threshold,omitempty"`
}

func (x *NatsStreamConfiguration) Reset() {
	*x = NatsStreamConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatsStreamConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsStreamConfiguration) ProtoMessage() {}

func (x *NatsStreamConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsStreamConfiguration.ProtoReflect.Descriptor instead.
func (*NatsStreamConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{36}
}

func (x *NatsStreamConfiguration) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *NatsStreamConfiguration) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *NatsStreamConfiguration) GetConsumerInactiveThreshold() int32 {
	if x != nil {
		return x.ConsumerInactiveThreshold
	}
	return 0
}

type NatsEventConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineEventConfiguration *EngineEventConfiguration `protobuf:"bytes,1,opt,name=engine_event_configuration,json=engineEventConfiguration,proto3" json:"engine_event_configuration,omitempty"`
	Subjects                 []string                  `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
	StreamConfiguration      *NatsStreamConfiguration  `protobuf:"bytes,3,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
}

func (x *NatsEventConfiguration) Reset() {
	*x = NatsEventConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatsEventConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsEventConfiguration) ProtoMessage() {}

func (x *NatsEventConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsEventConfiguration.ProtoReflect.Descriptor instead.
func (*NatsEventConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{37}
}

func (x *NatsEventConfiguration) GetEngineEventConfiguration() *EngineEventConfiguration {
	if x != nil {
		return x.EngineEventConfiguration
	}
	return nil
}

func (x *NatsEventConfiguration) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *NatsEventConfiguration) GetStreamConfiguration() *NatsStreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

type KafkaEventConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineEventConfiguration *EngineEventConfiguration `protobuf:"bytes,1,opt,name=engine_event_configuration,json=engineEventConfiguration,proto3" json:"engine_event_configuration,omitempty"`
	Topics                   []string                  `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *KafkaEventConfiguration) Reset() {
	*x = KafkaEventConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaEventConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaEventConfiguration) ProtoMessage() {}

func (x *KafkaEventConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaEventConfiguration.ProtoReflect.Descriptor instead.
func (*KafkaEventConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{38}
}

func (x *KafkaEventConfiguration) GetEngineEventConfiguration() *EngineEventConfiguration {
	if x != nil {
		return x.EngineEventConfiguration
	}
	return nil
}

func (x *KafkaEventConfiguration) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type EngineEventConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId string    `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	Type       EventType `protobuf:"varint,2,opt,name=type,proto3,enum=wg.cosmo.node.v1.EventType" json:"type,omitempty"`
	TypeName   string    `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FieldName  string    `protobuf:"bytes,4,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *EngineEventConfiguration) Reset() {
	*x = EngineEventConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineEventConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineEventConfiguration) ProtoMessage() {}

func (x *EngineEventConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineEventConfiguration.ProtoReflect.Descriptor instead.
func (*EngineEventConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{39}
}

func (x *EngineEventConfiguration) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *EngineEventConfiguration) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_PUBLISH
}

func (x *EngineEventConfiguration) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *EngineEventConfiguration) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type DataSourceCustomEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nats  []*NatsEventConfiguration  `protobuf:"bytes,1,rep,name=nats,proto3" json:"nats,omitempty"`
	Kafka []*KafkaEventConfiguration `protobuf:"bytes,2,rep,name=kafka,proto3" json:"kafka,omitempty"`
}

func (x *DataSourceCustomEvents) Reset() {
	*x = DataSourceCustomEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustomEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustomEvents) ProtoMessage() {}

func (x *DataSourceCustomEvents) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustomEvents.ProtoReflect.Descriptor instead.
func (*DataSourceCustomEvents) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{40}
}

func (x *DataSourceCustomEvents) GetNats() []*NatsEventConfiguration {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *DataSourceCustomEvents) GetKafka() []*KafkaEventConfiguration {
	if x != nil {
		return x.Kafka
	}
	return nil
}

type DataSourceCustom_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ConfigurationVariable `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataSourceCustom_Static) Reset() {
	*x = DataSourceCustom_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustom_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustom_Static) ProtoMessage() {}

func (x *DataSourceCustom_Static) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustom_Static.ProtoReflect.Descriptor instead.
func (*DataSourceCustom_Static) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{41}
}

func (x *DataSourceCustom_Static) GetData() *ConfigurationVariable {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigurationVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                            ConfigurationVariableKind `protobuf:"varint,1,opt,name=kind,proto3,enum=wg.cosmo.node.v1.ConfigurationVariableKind" json:"kind,omitempty"`
	StaticVariableContent           string                    `protobuf:"bytes,2,opt,name=static_variable_content,json=staticVariableContent,proto3" json:"static_variable_content,omitempty"`
	EnvironmentVariableName         string                    `protobuf:"bytes,3,opt,name=environment_variable_name,json=environmentVariableName,proto3" json:"environment_variable_name,omitempty"`
	EnvironmentVariableDefaultValue string                    `protobuf:"bytes,4,opt,name=environment_variable_default_value,json=environmentVariableDefaultValue,proto3" json:"environment_variable_default_value,omitempty"`
	PlaceholderVariableName         string                    `protobuf:"bytes,5,opt,name=placeholder_variable_name,json=placeholderVariableName,proto3" json:"placeholder_variable_name,omitempty"`
}

func (x *ConfigurationVariable) Reset() {
	*x = ConfigurationVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationVariable) ProtoMessage() {}

func (x *ConfigurationVariable) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationVariable.ProtoReflect.Descriptor instead.
func (*ConfigurationVariable) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{42}
}

func (x *ConfigurationVariable) GetKind() ConfigurationVariableKind {
	if x != nil {
		return x.Kind
	}
	return ConfigurationVariableKind_STATIC_CONFIGURATION_VARIABLE
}

func (x *ConfigurationVariable) GetStaticVariableContent() string {
	if x != nil {
		return x.StaticVariableContent
	}
	return ""
}

func (x *ConfigurationVariable) GetEnvironmentVariableName() string {
	if x != nil {
		return x.EnvironmentVariableName
	}
	return ""
}

func (x *ConfigurationVariable) GetEnvironmentVariableDefaultValue() string {
	if x != nil {
		return x.EnvironmentVariableDefaultValue
	}
	return ""
}

func (x *ConfigurationVariable) GetPlaceholderVariableName() string {
	if x != nil {
		return x.PlaceholderVariableName
	}
	return ""
}

type DirectiveConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectiveName string `protobuf:"bytes,1,opt,name=directive_name,json=directiveName,proto3" json:"directive_name,omitempty"`
	RenameTo      string `protobuf:"bytes,2,opt,name=rename_to,json=renameTo,proto3" json:"rename_to,omitempty"`
}

func (x *DirectiveConfiguration) Reset() {
	*x = DirectiveConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectiveConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveConfiguration) ProtoMessage() {}

func (x *DirectiveConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveConfiguration.ProtoReflect.Descriptor instead.
func (*DirectiveConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{43}
}

func (x *DirectiveConfiguration) GetDirectiveName() string {
	if x != nil {
		return x.DirectiveName
	}
	return ""
}

func (x *DirectiveConfiguration) GetRenameTo() string {
	if x != nil {
		return x.RenameTo
	}
	return ""
}

type URLQueryConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *URLQueryConfiguration) Reset() {
	*x = URLQueryConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLQueryConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLQueryConfiguration) ProtoMessage() {}

func (x *URLQueryConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLQueryConfiguration.ProtoReflect.Descriptor instead.
func (*URLQueryConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{44}
}

func (x *URLQueryConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLQueryConfiguration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ConfigurationVariable `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{45}
}

func (x *HTTPHeader) GetValues() []*ConfigurationVariable {
	if x != nil {
		return x.Values
	}
	return nil
}

type MTLSConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                *ConfigurationVariable `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cert               *ConfigurationVariable `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	InsecureSkipVerify bool                   `protobuf:"varint,3,opt,name=insecureSkipVerify,proto3" json:"insecureSkipVerify,omitempty"`
}

func (x *MTLSConfiguration) Reset() {
	*x = MTLSConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSConfiguration) ProtoMessage() {}

func (x *MTLSConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSConfiguration.ProtoReflect.Descriptor instead.
func (*MTLSConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{46}
}

func (x *MTLSConfiguration) GetKey() *ConfigurationVariable {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MTLSConfiguration) GetCert() *ConfigurationVariable {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *MTLSConfiguration) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type GraphQLSubscriptionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Url     *ConfigurationVariable `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// @deprecated - Kept for backwards compatibility when decoding. Use protocol instead.
	UseSSE               *bool                               `protobuf:"varint,3,opt,name=useSSE,proto3,oneof" json:"useSSE,omitempty"`
	Protocol             *common.GraphQLSubscriptionProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=wg.cosmo.common.GraphQLSubscriptionProtocol,oneof" json:"protocol,omitempty"`
	WebsocketSubprotocol *common.GraphQLWebsocketSubprotocol `protobuf:"varint,5,opt,name=websocketSubprotocol,proto3,enum=wg.cosmo.common.GraphQLWebsocketSubprotocol,oneof" json:"websocketSubprotocol,omitempty"`
}

func (x *GraphQLSubscriptionConfiguration) Reset() {
	*x = GraphQLSubscriptionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSubscriptionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSubscriptionConfiguration) ProtoMessage() {}

func (x *GraphQLSubscriptionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSubscriptionConfiguration.ProtoReflect.Descriptor instead.
func (*GraphQLSubscriptionConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{47}
}

func (x *GraphQLSubscriptionConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GraphQLSubscriptionConfiguration) GetUrl() *ConfigurationVariable {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *GraphQLSubscriptionConfiguration) GetUseSSE() bool {
	if x != nil && x.UseSSE != nil {
		return *x.UseSSE
	}
	return false
}

func (x *GraphQLSubscriptionConfiguration) GetProtocol() common.GraphQLSubscriptionProtocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return common.GraphQLSubscriptionProtocol(0)
}

func (x *GraphQLSubscriptionConfiguration) GetWebsocketSubprotocol() common.GraphQLWebsocketSubprotocol {
	if x != nil && x.WebsocketSubprotocol != nil {
		return *x.WebsocketSubprotocol
	}
	return common.GraphQLWebsocketSubprotocol(0)
}

type GraphQLFederationConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceSdl string `protobuf:"bytes,2,opt,name=serviceSdl,proto3" json:"serviceSdl,omitempty"`
}

func (x *GraphQLFederationConfiguration) Reset() {
	*x = GraphQLFederationConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLFederationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLFederationConfiguration) ProtoMessage() {}

func (x *GraphQLFederationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLFederationConfiguration.ProtoReflect.Descriptor instead.
func (*GraphQLFederationConfiguration) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{48}
}

func (x *GraphQLFederationConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GraphQLFederationConfiguration) GetServiceSdl() string {
	if x != nil {
		return x.ServiceSdl
	}
	return ""
}

type InternedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key to index into EngineConfiguration.stringStorage
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InternedString) Reset() {
	*x = InternedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedString) ProtoMessage() {}

func (x *InternedString) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedString.ProtoReflect.Descriptor instead.
func (*InternedString) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{49}
}

func (x *InternedString) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SingleTypeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName  string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *SingleTypeField) Reset() {
	*x = SingleTypeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTypeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTypeField) ProtoMessage() {}

func (x *SingleTypeField) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTypeField.ProtoReflect.Descriptor instead.
func (*SingleTypeField) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{50}
}

func (x *SingleTypeField) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SingleTypeField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type SubscriptionFieldCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath []string `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Json      string   `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *SubscriptionFieldCondition) Reset() {
	*x = SubscriptionFieldCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionFieldCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionFieldCondition) ProtoMessage() {}

func (x *SubscriptionFieldCondition) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionFieldCondition.ProtoReflect.Descriptor instead.
func (*SubscriptionFieldCondition) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{51}
}

func (x *SubscriptionFieldCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *SubscriptionFieldCondition) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type SubscriptionFilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And []*SubscriptionFilterCondition `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	In  *SubscriptionFieldCondition    `protobuf:"bytes,2,opt,name=in,proto3,oneof" json:"in,omitempty"`
	Not *SubscriptionFilterCondition   `protobuf:"bytes,3,opt,name=not,proto3,oneof" json:"not,omitempty"`
	Or  []*SubscriptionFilterCondition `protobuf:"bytes,4,rep,name=or,proto3" json:"or,omitempty"`
}

func (x *SubscriptionFilterCondition) Reset() {
	*x = SubscriptionFilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionFilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionFilterCondition) ProtoMessage() {}

func (x *SubscriptionFilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionFilterCondition.ProtoReflect.Descriptor instead.
func (*SubscriptionFilterCondition) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{52}
}

func (x *SubscriptionFilterCondition) GetAnd() []*SubscriptionFilterCondition {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *SubscriptionFilterCondition) GetIn() *SubscriptionFieldCondition {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SubscriptionFilterCondition) GetNot() *SubscriptionFilterCondition {
	if x != nil {
		return x.Not
	}
	return nil
}

func (x *SubscriptionFilterCondition) GetOr() []*SubscriptionFilterCondition {
	if x != nil {
		return x.Or
	}
	return nil
}

type CacheWarmerOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *CacheWarmerOperations) Reset() {
	*x = CacheWarmerOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheWarmerOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheWarmerOperations) ProtoMessage() {}

func (x *CacheWarmerOperations) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheWarmerOperations.ProtoReflect.Descriptor instead.
func (*CacheWarmerOperations) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{53}
}

func (x *CacheWarmerOperations) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *OperationRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Client  *ClientInfo       `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{54}
}

func (x *Operation) GetRequest() *OperationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Operation) GetClient() *ClientInfo {
	if x != nil {
		return x.Client
	}
	return nil
}

type OperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationName string     `protobuf:"bytes,1,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	Query         string     `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Extensions    *Extension `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *OperationRequest) Reset() {
	*x = OperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRequest) ProtoMessage() {}

func (x *OperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRequest.ProtoReflect.Descriptor instead.
func (*OperationRequest) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{55}
}

func (x *OperationRequest) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *OperationRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *OperationRequest) GetExtensions() *Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistedQuery *PersistedQuery `protobuf:"bytes,1,opt,name=persisted_query,json=persistedQuery,proto3" json:"persisted_query,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{56}
}

func (x *Extension) GetPersistedQuery() *PersistedQuery {
	if x != nil {
		return x.PersistedQuery
	}
	return nil
}

type PersistedQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256Hash string `protobuf:"bytes,1,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	Version    int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PersistedQuery) Reset() {
	*x = PersistedQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistedQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistedQuery) ProtoMessage() {}

func (x *PersistedQuery) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistedQuery.ProtoReflect.Descriptor instead.
func (*PersistedQuery) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{57}
}

func (x *PersistedQuery) GetSha256Hash() string {
	if x != nil {
		return x.Sha256Hash
	}
	return ""
}

func (x *PersistedQuery) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wg_cosmo_node_v1_node_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_wg_cosmo_node_v1_node_proto_rawDescGZIP(), []int{58}
}

func (x *ClientInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_wg_cosmo_node_v1_node_proto protoreflect.FileDescriptor

var file_wg_cosmo_node_v1_node_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x77, 0x67, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77,
	0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x77, 0x67, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xb4,
	0x02, 0x0a, 0x21, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x7e, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0d, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x0c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x6a, 0x0a, 0x14, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x67, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x48, 0x00,
	0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x6a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x3f, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x6c,
	0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xfc, 0x04, 0x0a, 0x13,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x66, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x57, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x54,
	0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77,
	0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xfa, 0x07, 0x0a, 0x17, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x72,
	0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x12, 0x4e, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x48, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a,
	0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x15, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x67, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0xef, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x42,
	0x79, 0x4f, 0x72, 0x22, 0xbb, 0x03, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x17, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x6f,
	0x22, 0x7b, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4e, 0x0a,
	0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xed, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x1c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xed, 0x05, 0x0a,
	0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x34,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x52,
	0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x72,
	0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x3b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x1a, 0x57, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x95, 0x01, 0x0a,
	0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x6f,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0xe2, 0x03, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x4c, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x56, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x67, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x5c, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x47, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3d, 0x0a, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x43, 0x0a, 0x13, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x2c, 0x0a, 0x10, 0x53, 0x53, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xf6, 0x02,
	0x0a, 0x0b, 0x47, 0x52, 0x50, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52,
	0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x11, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x67, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x70,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x22, 0x5d, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x4e, 0x61,
	0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x16,
	0x4e, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x1a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x14,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x1a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77,
	0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x22, 0x56, 0x0a,
	0x17, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a,
	0x16, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x22, 0x41, 0x0a, 0x15, 0x55,
	0x52, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d,
	0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x11, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0xfb, 0x02, 0x0a, 0x20,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x45, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x65, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x02, 0x52,
	0x14, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65,
	0x53, 0x53, 0x45, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x5a, 0x0a, 0x1e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x64, 0x6c, 0x22, 0x22, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x1b, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x03, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x03, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x67, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x03, 0x6e, 0x6f, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x6f, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x6f,
	0x74, 0x22, 0x54, 0x0a, 0x15, 0x43, 0x61, 0x63, 0x68, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x4b, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x82, 0x01, 0x0a, 0x1b, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x51, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x02, 0x2a, 0x36, 0x0a,
	0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x41, 0x50, 0x48, 0x51, 0x4c, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x2a, 0x86, 0x01, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x4e, 0x56, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x32, 0x6e, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xcf, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x77, 0x67, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x42, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x77, 0x67, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x6e, 0x6f, 0x64, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x4e, 0xaa,
	0x02, 0x10, 0x57, 0x67, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x10, 0x57, 0x67, 0x5c, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x5c, 0x4e, 0x6f,
	0x64, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x57, 0x67, 0x5c, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x5c, 0x4e, 0x6f, 0x64, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x57, 0x67, 0x3a, 0x3a, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x3a, 0x3a, 0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wg_cosmo_node_v1_node_proto_rawDescOnce sync.Once
	file_wg_cosmo_node_v1_node_proto_rawDescData = file_wg_cosmo_node_v1_node_proto_rawDesc
)

func file_wg_cosmo_node_v1_node_proto_rawDescGZIP() []byte {
	file_wg_cosmo_node_v1_node_proto_rawDescOnce.Do(func() {
		file_wg_cosmo_node_v1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_wg_cosmo_node_v1_node_proto_rawDescData)
	})
	return file_wg_cosmo_node_v1_node_proto_rawDescData
}

var file_wg_cosmo_node_v1_node_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_wg_cosmo_node_v1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_wg_cosmo_node_v1_node_proto_goTypes = []any{
	(ArgumentRenderConfiguration)(0),          // 0: wg.cosmo.node.v1.ArgumentRenderConfiguration
	(ArgumentSource)(0),                       // 1: wg.cosmo.node.v1.ArgumentSource
	(DataSourceKind)(0),                       // 2: wg.cosmo.node.v1.DataSourceKind
	(OperationType)(0),                        // 3: wg.cosmo.node.v1.OperationType
	(EventType)(0),                            // 4: wg.cosmo.node.v1.EventType
	(ConfigurationVariableKind)(0),            // 5: wg.cosmo.node.v1.ConfigurationVariableKind
	(HTTPMethod)(0),                           // 6: wg.cosmo.node.v1.HTTPMethod
	(*Subgraph)(nil),                          // 7: wg.cosmo.node.v1.Subgraph
	(*FeatureFlagRouterExecutionConfigs)(nil), // 8: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfigs
	(*FeatureFlagRouterExecutionConfig)(nil),  // 9: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfig
	(*RouterConfig)(nil),                      // 10: wg.cosmo.node.v1.RouterConfig
	(*Response)(nil),                          // 11: wg.cosmo.node.v1.Response
	(*ResponseStatus)(nil),                    // 12: wg.cosmo.node.v1.ResponseStatus
	(*RegistrationInfo)(nil),                  // 13: wg.cosmo.node.v1.RegistrationInfo
	(*AccountLimits)(nil),                     // 14: wg.cosmo.node.v1.AccountLimits
	(*SelfRegisterRequest)(nil),               // 15: wg.cosmo.node.v1.SelfRegisterRequest
	(*SelfRegisterResponse)(nil),              // 16: wg.cosmo.node.v1.SelfRegisterResponse
	(*EngineConfiguration)(nil),               // 17: wg.cosmo.node.v1.EngineConfiguration
	(*DataSourceConfiguration)(nil),           // 18: wg.cosmo.node.v1.DataSourceConfiguration
	(*ArgumentConfiguration)(nil),             // 19: wg.cosmo.node.v1.ArgumentConfiguration
	(*Scopes)(nil),                            // 20: wg.cosmo.node.v1.Scopes
	(*AuthorizationConfiguration)(nil),        // 21: wg.cosmo.node.v1.AuthorizationConfiguration
	(*FieldConfiguration)(nil),                // 22: wg.cosmo.node.v1.FieldConfiguration
	(*TypeConfiguration)(nil),                 // 23: wg.cosmo.node.v1.TypeConfiguration
	(*TypeField)(nil),                         // 24: wg.cosmo.node.v1.TypeField
	(*FieldCoordinates)(nil),                  // 25: wg.cosmo.node.v1.FieldCoordinates
	(*FieldSetCondition)(nil),                 // 26: wg.cosmo.node.v1.FieldSetCondition
	(*RequiredField)(nil),                     // 27: wg.cosmo.node.v1.RequiredField
	(*EntityInterfaceConfiguration)(nil),      // 28: wg.cosmo.node.v1.EntityInterfaceConfiguration
	(*FetchConfiguration)(nil),                // 29: wg.cosmo.node.v1.FetchConfiguration
	(*StatusCodeTypeMapping)(nil),             // 30: wg.cosmo.node.v1.StatusCodeTypeMapping
	(*DataSourceCustom_GraphQL)(nil),          // 31: wg.cosmo.node.v1.DataSourceCustom_GraphQL
	(*GRPCConfiguration)(nil),                 // 32: wg.cosmo.node.v1.GRPCConfiguration
	(*PluginConfiguration)(nil),               // 33: wg.cosmo.node.v1.PluginConfiguration
	(*SSLConfiguration)(nil),                  // 34: wg.cosmo.node.v1.SSLConfiguration
	(*GRPCMapping)(nil),                       // 35: wg.cosmo.node.v1.GRPCMapping
	(*OperationMapping)(nil),                  // 36: wg.cosmo.node.v1.OperationMapping
	(*EntityMapping)(nil),                     // 37: wg.cosmo.node.v1.EntityMapping
	(*TypeFieldMapping)(nil),                  // 38: wg.cosmo.node.v1.TypeFieldMapping
	(*FieldMapping)(nil),                      // 39: wg.cosmo.node.v1.FieldMapping
	(*ArgumentMapping)(nil),                   // 40: wg.cosmo.node.v1.ArgumentMapping
	(*EnumMapping)(nil),                       // 41: wg.cosmo.node.v1.EnumMapping
	(*EnumValueMapping)(nil),                  // 42: wg.cosmo.node.v1.EnumValueMapping
	(*NatsStreamConfiguration)(nil),           // 43: wg.cosmo.node.v1.NatsStreamConfiguration
	(*NatsEventConfiguration)(nil),            // 44: wg.cosmo.node.v1.NatsEventConfiguration
	(*KafkaEventConfiguration)(nil),           // 45: wg.cosmo.node.v1.KafkaEventConfiguration
	(*EngineEventConfiguration)(nil),          // 46: wg.cosmo.node.v1.EngineEventConfiguration
	(*DataSourceCustomEvents)(nil),            // 47: wg.cosmo.node.v1.DataSourceCustomEvents
	(*DataSourceCustom_Static)(nil),           // 48: wg.cosmo.node.v1.DataSourceCustom_Static
	(*ConfigurationVariable)(nil),             // 49: wg.cosmo.node.v1.ConfigurationVariable
	(*DirectiveConfiguration)(nil),            // 50: wg.cosmo.node.v1.DirectiveConfiguration
	(*URLQueryConfiguration)(nil),             // 51: wg.cosmo.node.v1.URLQueryConfiguration
	(*HTTPHeader)(nil),                        // 52: wg.cosmo.node.v1.HTTPHeader
	(*MTLSConfiguration)(nil),                 // 53: wg.cosmo.node.v1.MTLSConfiguration
	(*GraphQLSubscriptionConfiguration)(nil),  // 54: wg.cosmo.node.v1.GraphQLSubscriptionConfiguration
	(*GraphQLFederationConfiguration)(nil),    // 55: wg.cosmo.node.v1.GraphQLFederationConfiguration
	(*InternedString)(nil),                    // 56: wg.cosmo.node.v1.InternedString
	(*SingleTypeField)(nil),                   // 57: wg.cosmo.node.v1.SingleTypeField
	(*SubscriptionFieldCondition)(nil),        // 58: wg.cosmo.node.v1.SubscriptionFieldCondition
	(*SubscriptionFilterCondition)(nil),       // 59: wg.cosmo.node.v1.SubscriptionFilterCondition
	(*CacheWarmerOperations)(nil),             // 60: wg.cosmo.node.v1.CacheWarmerOperations
	(*Operation)(nil),                         // 61: wg.cosmo.node.v1.Operation
	(*OperationRequest)(nil),                  // 62: wg.cosmo.node.v1.OperationRequest
	(*Extension)(nil),                         // 63: wg.cosmo.node.v1.Extension
	(*PersistedQuery)(nil),                    // 64: wg.cosmo.node.v1.PersistedQuery
	(*ClientInfo)(nil),                        // 65: wg.cosmo.node.v1.ClientInfo
	nil,                                       // 66: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfigs.ConfigByFeatureFlagNameEntry
	nil,                                       // 67: wg.cosmo.node.v1.EngineConfiguration.StringStorageEntry
	nil,                                       // 68: wg.cosmo.node.v1.FetchConfiguration.HeaderEntry
	(common.EnumStatusCode)(0),                // 69: wg.cosmo.common.EnumStatusCode
	(common.GraphQLSubscriptionProtocol)(0),   // 70: wg.cosmo.common.GraphQLSubscriptionProtocol
	(common.GraphQLWebsocketSubprotocol)(0),   // 71: wg.cosmo.common.GraphQLWebsocketSubprotocol
}
var file_wg_cosmo_node_v1_node_proto_depIdxs = []int32{
	66, // 0: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfigs.config_by_feature_flag_name:type_name -> wg.cosmo.node.v1.FeatureFlagRouterExecutionConfigs.ConfigByFeatureFlagNameEntry
	17, // 1: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfig.engine_config:type_name -> wg.cosmo.node.v1.EngineConfiguration
	7,  // 2: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfig.subgraphs:type_name -> wg.cosmo.node.v1.Subgraph
	17, // 3: wg.cosmo.node.v1.RouterConfig.engine_config:type_name -> wg.cosmo.node.v1.EngineConfiguration
	7,  // 4: wg.cosmo.node.v1.RouterConfig.subgraphs:type_name -> wg.cosmo.node.v1.Subgraph
	8,  // 5: wg.cosmo.node.v1.RouterConfig.feature_flag_configs:type_name -> wg.cosmo.node.v1.FeatureFlagRouterExecutionConfigs
	69, // 6: wg.cosmo.node.v1.Response.code:type_name -> wg.cosmo.common.EnumStatusCode
	14, // 7: wg.cosmo.node.v1.RegistrationInfo.account_limits:type_name -> wg.cosmo.node.v1.AccountLimits
	11, // 8: wg.cosmo.node.v1.SelfRegisterResponse.response:type_name -> wg.cosmo.node.v1.Response
	13, // 9: wg.cosmo.node.v1.SelfRegisterResponse.registrationInfo:type_name -> wg.cosmo.node.v1.RegistrationInfo
	18, // 10: wg.cosmo.node.v1.EngineConfiguration.datasource_configurations:type_name -> wg.cosmo.node.v1.DataSourceConfiguration
	22, // 11: wg.cosmo.node.v1.EngineConfiguration.field_configurations:type_name -> wg.cosmo.node.v1.FieldConfiguration
	23, // 12: wg.cosmo.node.v1.EngineConfiguration.type_configurations:type_name -> wg.cosmo.node.v1.TypeConfiguration
	67, // 13: wg.cosmo.node.v1.EngineConfiguration.string_storage:type_name -> wg.cosmo.node.v1.EngineConfiguration.StringStorageEntry
	2,  // 14: wg.cosmo.node.v1.DataSourceConfiguration.kind:type_name -> wg.cosmo.node.v1.DataSourceKind
	24, // 15: wg.cosmo.node.v1.DataSourceConfiguration.root_nodes:type_name -> wg.cosmo.node.v1.TypeField
	24, // 16: wg.cosmo.node.v1.DataSourceConfiguration.child_nodes:type_name -> wg.cosmo.node.v1.TypeField
	31, // 17: wg.cosmo.node.v1.DataSourceConfiguration.custom_graphql:type_name -> wg.cosmo.node.v1.DataSourceCustom_GraphQL
	48, // 18: wg.cosmo.node.v1.DataSourceConfiguration.custom_static:type_name -> wg.cosmo.node.v1.DataSourceCustom_Static
	50, // 19: wg.cosmo.node.v1.DataSourceConfiguration.directives:type_name -> wg.cosmo.node.v1.DirectiveConfiguration
	27, // 20: wg.cosmo.node.v1.DataSourceConfiguration.keys:type_name -> wg.cosmo.node.v1.RequiredField
	27, // 21: wg.cosmo.node.v1.DataSourceConfiguration.provides:type_name -> wg.cosmo.node.v1.RequiredField
	27, // 22: wg.cosmo.node.v1.DataSourceConfiguration.requires:type_name -> wg.cosmo.node.v1.RequiredField
	47, // 23: wg.cosmo.node.v1.DataSourceConfiguration.custom_events:type_name -> wg.cosmo.node.v1.DataSourceCustomEvents
	28, // 24: wg.cosmo.node.v1.DataSourceConfiguration.entity_interfaces:type_name -> wg.cosmo.node.v1.EntityInterfaceConfiguration
	28, // 25: wg.cosmo.node.v1.DataSourceConfiguration.interface_objects:type_name -> wg.cosmo.node.v1.EntityInterfaceConfiguration
	1,  // 26: wg.cosmo.node.v1.ArgumentConfiguration.source_type:type_name -> wg.cosmo.node.v1.ArgumentSource
	20, // 27: wg.cosmo.node.v1.AuthorizationConfiguration.required_or_scopes:type_name -> wg.cosmo.node.v1.Scopes
	20, // 28: wg.cosmo.node.v1.AuthorizationConfiguration.required_or_scopes_by_or:type_name -> wg.cosmo.node.v1.Scopes
	19, // 29: wg.cosmo.node.v1.FieldConfiguration.arguments_configuration:type_name -> wg.cosmo.node.v1.ArgumentConfiguration
	21, // 30: wg.cosmo.node.v1.FieldConfiguration.authorization_configuration:type_name -> wg.cosmo.node.v1.AuthorizationConfiguration
	59, // 31: wg.cosmo.node.v1.FieldConfiguration.subscription_filter_condition:type_name -> wg.cosmo.node.v1.SubscriptionFilterCondition
	25, // 32: wg.cosmo.node.v1.FieldSetCondition.field_coordinates_path:type_name -> wg.cosmo.node.v1.FieldCoordinates
	26, // 33: wg.cosmo.node.v1.RequiredField.conditions:type_name -> wg.cosmo.node.v1.FieldSetCondition
	49, // 34: wg.cosmo.node.v1.FetchConfiguration.url:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	6,  // 35: wg.cosmo.node.v1.FetchConfiguration.method:type_name -> wg.cosmo.node.v1.HTTPMethod
	68, // 36: wg.cosmo.node.v1.FetchConfiguration.header:type_name -> wg.cosmo.node.v1.FetchConfiguration.HeaderEntry
	49, // 37: wg.cosmo.node.v1.FetchConfiguration.body:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	51, // 38: wg.cosmo.node.v1.FetchConfiguration.query:type_name -> wg.cosmo.node.v1.URLQueryConfiguration
	53, // 39: wg.cosmo.node.v1.FetchConfiguration.mtls:type_name -> wg.cosmo.node.v1.MTLSConfiguration
	49, // 40: wg.cosmo.node.v1.FetchConfiguration.base_url:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	49, // 41: wg.cosmo.node.v1.FetchConfiguration.path:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	49, // 42: wg.cosmo.node.v1.FetchConfiguration.http_proxy_url:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	29, // 43: wg.cosmo.node.v1.DataSourceCustom_GraphQL.fetch:type_name -> wg.cosmo.node.v1.FetchConfiguration
	54, // 44: wg.cosmo.node.v1.DataSourceCustom_GraphQL.subscription:type_name -> wg.cosmo.node.v1.GraphQLSubscriptionConfiguration
	55, // 45: wg.cosmo.node.v1.DataSourceCustom_GraphQL.federation:type_name -> wg.cosmo.node.v1.GraphQLFederationConfiguration
	56, // 46: wg.cosmo.node.v1.DataSourceCustom_GraphQL.upstream_schema:type_name -> wg.cosmo.node.v1.InternedString
	57, // 47: wg.cosmo.node.v1.DataSourceCustom_GraphQL.custom_scalar_type_fields:type_name -> wg.cosmo.node.v1.SingleTypeField
	32, // 48: wg.cosmo.node.v1.DataSourceCustom_GraphQL.grpc:type_name -> wg.cosmo.node.v1.GRPCConfiguration
	35, // 49: wg.cosmo.node.v1.GRPCConfiguration.mapping:type_name -> wg.cosmo.node.v1.GRPCMapping
	33, // 50: wg.cosmo.node.v1.GRPCConfiguration.plugin:type_name -> wg.cosmo.node.v1.PluginConfiguration
	36, // 51: wg.cosmo.node.v1.GRPCMapping.operation_mappings:type_name -> wg.cosmo.node.v1.OperationMapping
	37, // 52: wg.cosmo.node.v1.GRPCMapping.entity_mappings:type_name -> wg.cosmo.node.v1.EntityMapping
	38, // 53: wg.cosmo.node.v1.GRPCMapping.type_field_mappings:type_name -> wg.cosmo.node.v1.TypeFieldMapping
	41, // 54: wg.cosmo.node.v1.GRPCMapping.enum_mappings:type_name -> wg.cosmo.node.v1.EnumMapping
	3,  // 55: wg.cosmo.node.v1.OperationMapping.type:type_name -> wg.cosmo.node.v1.OperationType
	39, // 56: wg.cosmo.node.v1.TypeFieldMapping.field_mappings:type_name -> wg.cosmo.node.v1.FieldMapping
	40, // 57: wg.cosmo.node.v1.FieldMapping.argument_mappings:type_name -> wg.cosmo.node.v1.ArgumentMapping
	42, // 58: wg.cosmo.node.v1.EnumMapping.values:type_name -> wg.cosmo.node.v1.EnumValueMapping
	46, // 59: wg.cosmo.node.v1.NatsEventConfiguration.engine_event_configuration:type_name -> wg.cosmo.node.v1.EngineEventConfiguration
	43, // 60: wg.cosmo.node.v1.NatsEventConfiguration.stream_configuration:type_name -> wg.cosmo.node.v1.NatsStreamConfiguration
	46, // 61: wg.cosmo.node.v1.KafkaEventConfiguration.engine_event_configuration:type_name -> wg.cosmo.node.v1.EngineEventConfiguration
	4,  // 62: wg.cosmo.node.v1.EngineEventConfiguration.type:type_name -> wg.cosmo.node.v1.EventType
	44, // 63: wg.cosmo.node.v1.DataSourceCustomEvents.nats:type_name -> wg.cosmo.node.v1.NatsEventConfiguration
	45, // 64: wg.cosmo.node.v1.DataSourceCustomEvents.kafka:type_name -> wg.cosmo.node.v1.KafkaEventConfiguration
	49, // 65: wg.cosmo.node.v1.DataSourceCustom_Static.data:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	5,  // 66: wg.cosmo.node.v1.ConfigurationVariable.kind:type_name -> wg.cosmo.node.v1.ConfigurationVariableKind
	49, // 67: wg.cosmo.node.v1.HTTPHeader.values:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	49, // 68: wg.cosmo.node.v1.MTLSConfiguration.key:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	49, // 69: wg.cosmo.node.v1.MTLSConfiguration.cert:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	49, // 70: wg.cosmo.node.v1.GraphQLSubscriptionConfiguration.url:type_name -> wg.cosmo.node.v1.ConfigurationVariable
	70, // 71: wg.cosmo.node.v1.GraphQLSubscriptionConfiguration.protocol:type_name -> wg.cosmo.common.GraphQLSubscriptionProtocol
	71, // 72: wg.cosmo.node.v1.GraphQLSubscriptionConfiguration.websocketSubprotocol:type_name -> wg.cosmo.common.GraphQLWebsocketSubprotocol
	59, // 73: wg.cosmo.node.v1.SubscriptionFilterCondition.and:type_name -> wg.cosmo.node.v1.SubscriptionFilterCondition
	58, // 74: wg.cosmo.node.v1.SubscriptionFilterCondition.in:type_name -> wg.cosmo.node.v1.SubscriptionFieldCondition
	59, // 75: wg.cosmo.node.v1.SubscriptionFilterCondition.not:type_name -> wg.cosmo.node.v1.SubscriptionFilterCondition
	59, // 76: wg.cosmo.node.v1.SubscriptionFilterCondition.or:type_name -> wg.cosmo.node.v1.SubscriptionFilterCondition
	61, // 77: wg.cosmo.node.v1.CacheWarmerOperations.operations:type_name -> wg.cosmo.node.v1.Operation
	62, // 78: wg.cosmo.node.v1.Operation.request:type_name -> wg.cosmo.node.v1.OperationRequest
	65, // 79: wg.cosmo.node.v1.Operation.client:type_name -> wg.cosmo.node.v1.ClientInfo
	63, // 80: wg.cosmo.node.v1.OperationRequest.extensions:type_name -> wg.cosmo.node.v1.Extension
	64, // 81: wg.cosmo.node.v1.Extension.persisted_query:type_name -> wg.cosmo.node.v1.PersistedQuery
	9,  // 82: wg.cosmo.node.v1.FeatureFlagRouterExecutionConfigs.ConfigByFeatureFlagNameEntry.value:type_name -> wg.cosmo.node.v1.FeatureFlagRouterExecutionConfig
	52, // 83: wg.cosmo.node.v1.FetchConfiguration.HeaderEntry.value:type_name -> wg.cosmo.node.v1.HTTPHeader
	15, // 84: wg.cosmo.node.v1.NodeService.SelfRegister:input_type -> wg.cosmo.node.v1.SelfRegisterRequest
	16, // 85: wg.cosmo.node.v1.NodeService.SelfRegister:output_type -> wg.cosmo.node.v1.SelfRegisterResponse
	85, // [85:86] is the sub-list for method output_type
	84, // [84:85] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_wg_cosmo_node_v1_node_proto_init() }
func file_wg_cosmo_node_v1_node_proto_init() {
	if File_wg_cosmo_node_v1_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wg_cosmo_node_v1_node_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Subgraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureFlagRouterExecutionConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureFlagRouterExecutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RouterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RegistrationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AccountLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SelfRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SelfRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EngineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ArgumentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Scopes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizationConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FieldConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TypeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TypeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FieldCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FieldSetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RequiredField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*EntityInterfaceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*FetchConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*StatusCodeTypeMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceCustom_GraphQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GRPCConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PluginConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SSLConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GRPCMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*OperationMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*EntityMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*TypeFieldMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*FieldMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ArgumentMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*EnumMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*EnumValueMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*NatsStreamConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*NatsEventConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaEventConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*EngineEventConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceCustomEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceCustom_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigurationVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*DirectiveConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*URLQueryConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*MTLSConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GraphQLSubscriptionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*GraphQLFederationConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*InternedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*SingleTypeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*SubscriptionFieldCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*SubscriptionFilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CacheWarmerOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*OperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*PersistedQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wg_cosmo_node_v1_node_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wg_cosmo_node_v1_node_proto_msgTypes[3].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[4].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[9].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[10].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[15].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[22].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[47].OneofWrappers = []any{}
	file_wg_cosmo_node_v1_node_proto_msgTypes[52].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wg_cosmo_node_v1_node_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wg_cosmo_node_v1_node_proto_goTypes,
		DependencyIndexes: file_wg_cosmo_node_v1_node_proto_depIdxs,
		EnumInfos:         file_wg_cosmo_node_v1_node_proto_enumTypes,
		MessageInfos:      file_wg_cosmo_node_v1_node_proto_msgTypes,
	}.Build()
	File_wg_cosmo_node_v1_node_proto = out.File
	file_wg_cosmo_node_v1_node_proto_rawDesc = nil
	file_wg_cosmo_node_v1_node_proto_goTypes = nil
	file_wg_cosmo_node_v1_node_proto_depIdxs = nil
}
